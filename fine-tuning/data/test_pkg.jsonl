{"index": 1073, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: metrics\n\nClasses and Interfaces: \nClass AppAttemptMetricsConstants;\nClass ApplicationMetricsConstants;\nClass ContainerMetricsConstants;\n", "des": "Yarn Common Metrics package."}
{"index": 2041, "repo": "spring-messaging-6.0.11", "code": "Package: stomp\n\nClasses and Interfaces: \npublic class BufferingStompDecoder extends Object; // An extension of StompDecoder that buffers content remaining in the input ByteBuffer after the parent class has read all (complete) STOMP frames from it.\npublic interface ConnectionHandlingStompSession extends StompSession, StompTcpConnectionHandler<byte[]>; // A StompSession that implements TcpConnectionHandler in order to send and receive messages.\npublic class ConnectionLostException extends RuntimeException; // Raised when the connection for a STOMP session is lost rather than closed.\npublic class DefaultStompSession extends Object implements ConnectionHandlingStompSession; // Default implementation of ConnectionHandlingStompSession.\npublic class ReactorNettyTcpStompClient extends StompClientSupport; // A STOMP over TCP client, configurable with either ReactorNettyTcpClient or ReactorNetty2TcpClient.\npublic class StompBrokerRelayMessageHandler extends AbstractBrokerMessageHandler; // A MessageHandler that handles messages by forwarding them to a STOMP broker.\npublic static interface StompBrokerRelayMessageHandler.Stats; // Contract for access to session counters.\npublic abstract class StompClientSupport extends Object; // Base class for STOMP client implementations.\npublic enum StompCommand extends Enum<StompCommand>; // Represents a STOMP command.\npublic class StompConversionException extends org.springframework.core.NestedRuntimeException; // Raised after a failure to encode or decode a STOMP message.\npublic class StompDecoder extends Object; // Decodes one or more STOMP frames contained in a ByteBuffer.\npublic class StompEncoder extends Object; // An encoder for STOMP frames.\npublic interface StompFrameHandler; // Contract to handle a STOMP frame.\npublic class StompHeaderAccessor extends SimpMessageHeaderAccessor; // A MessageHeaderAccessor to use when creating a Message from a decoded STOMP frame, or when encoding a Message to a STOMP frame.\npublic class StompHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable; // Represents STOMP frame headers.\npublic class StompReactorNettyCodec extends AbstractNioBufferReactorNettyCodec<byte[]>; // Simple delegation to StompDecoder and StompEncoder.\n", "des": "Generic support for simple messaging protocols (like STOMP)."}
{"index": 1022, "repo": "hadoop-aws-3.3.6", "code": "Package: s3a\n\nSub Packages: \npackage s3a.api; // Where the interfaces for classes implemented in o.a.h.fs.s3a.impl should go.\npackage s3a.audit; // Support for auditing and ultimately tracing operations.\npackage s3a.auth; // Authentication and permissions support.\npackage s3a.commit; // Support for committing the output of analytics jobs directly to S3.\npackage s3a.impl; // Implementation classes private to the S3A store.\npackage s3a.prefetch; // High performance s3 input stream which reads in blocks and can cache blocks in the local filesystem.\npackage s3a.s3guard; // This package contained S3Guard support; now the feature has been removed, its contents are limited to the public command line and some methods still used by directory marker code.\npackage s3a.select; // Support for S3 Select.\npackage s3a.statistics; // Statistics collection for the S3A connector: interfaces.\npackage s3a.tools; // S3A Command line tools independent of S3Guard.\n\nClasses and Interfaces: \nInterface Invoker.Retried; // Callback for retry and notification operations.\nInterface S3AInputStream.InputStreamCallbacks; // Callbacks for input stream IO.\nInterface S3AUtils.CallOnLocatedFileStatus; // An interface for use in lambda-expressions working with directory tree listings.\nInterface S3AUtils.LocatedFileStatusMap<T>; // An interface for use in lambda-expressions working with directory tree listings.\nInterface S3ClientFactory; // This interface will be replaced by one which uses the AWS SDK V2 S3 client as part of upgrading S3A to SDK V2.\nInterface WriteOperationHelper.WriteOperationHelperCallbacks; // Callbacks for writeOperationHelper.\nInterface WriteOperations; // Operations to update the store.\nClass AnonymousAWSCredentialsProvider; // This class will be replaced by one that implements AWS SDK V2's AwsCredentialProvider as part of upgrading S3A to SDK V2.\nClass ArnResource; // Represents an Arn Resource, this can be an accesspoint or bucket.\nClass AWSCredentialProviderList; // A list of providers.\n", "des": "S3A Filesystem."}
{"index": 3191, "repo": "tomcat-api-10.1", "code": "Package: buf\n\nClasses and Interfaces: \nInterface ByteChunk.ByteInputChannel; // Input interface, used when the buffer is empty.\nInterface ByteChunk.ByteOutputChannel; // When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.\nInterface CharChunk.CharInputChannel; // Input interface, used when the buffer is empty.\nInterface CharChunk.CharOutputChannel; // When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.\nClass AbstractChunk; // Base class for the *Chunk implementation to reduce duplication.\nClass Ascii; // This class implements some basic ASCII character handling functions.\nClass Asn1Parser; // This is a very basic ASN.1 parser that provides the limited functionality required by Tomcat.\nClass Asn1Writer;\nClass B2CConverter; // NIO based character decoder.\nClass ByteBufferHolder; // Simple wrapper for a ByteBuffer that remembers if the buffer has been flipped or not.\nClass ByteBufferUtils;\nClass ByteChunk; // This class is used to represent a chunk of bytes, and utilities to manipulate byte[].\nClass C2BConverter; // NIO based character encoder.\nClass CharChunk; // Utilities to manipulate char chunks.\nClass CharsetCache;\nClass CharsetUtil;\nClass HexUtils; // Tables useful when converting byte arrays to and from strings of hexadecimal digits.\nClass MessageBytes; // This class is used to represent a subarray of bytes in an HTTP message.\nClass StringCache; // This class implements a String cache for ByteChunk and CharChunk.\nClass StringUtils; // Utility methods to build a separated list from a given set (not java.util.Set) of inputs and return that list as a string or append it to an existing StringBuilder.\nClass UDecoder; // All URL decoding happens here.\nClass UEncoder; // Efficient implementation of a UTF-8 encoder.\nClass UriUtil; // Utility class for working with URIs and URLs.\nClass Utf8Encoder; // Encodes characters as bytes using UTF-8.\nEnum EncodedSolidusHandling;\nEnum UEncoder.SafeCharsSet;\nClass ByteChunk.BufferOverflowException;\n", "des": "Buffers and Encodings"}
{"index": 2364, "repo": "spring-boot-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \npublic class HttpWebServiceMessageSenderBuilder extends Object; // WebServiceMessageSender builder that can detect a suitable HTTP library based on the classpath.\npublic class WebServiceTemplateBuilder extends Object; // Builder that can be used to configure and create a WebServiceTemplate.\n@FunctionalInterface public interface WebServiceTemplateCustomizer; // Callback interface that can be used to customize a WebServiceTemplate.\n", "des": "Web Services client utilities."}
{"index": 3867, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: query\n\nClasses and Interfaces: \nClass SpatialArgs; // Principally holds the query Shape and the SpatialOperation.\nClass SpatialArgsParser; // Parses a string that usually looks like \"OPERATION(SHAPE)\" into a SpatialArgs object.\nClass SpatialOperation; // A predicate that compares a stored geometry to a supplied geometry.\nClass UnsupportedSpatialOperation; // Exception thrown when the SpatialStrategy cannot implement the requested operation.\n", "des": "Spatial Query options useful for client side requests"}
{"index": 3603, "repo": "lucene-queries-9.7.0", "code": "Package: docvalues\n\nClasses and Interfaces: \nClass BoolDocValues; // Abstract FunctionValues implementation which supports retrieving boolean values.\nClass DocTermsIndexDocValues; // Serves as base class for FunctionValues based on DocTermsIndex.\nClass DoubleDocValues; // Abstract FunctionValues implementation which supports retrieving double values.\nClass FloatDocValues; // Abstract FunctionValues implementation which supports retrieving float values.\nClass IntDocValues; // Abstract FunctionValues implementation which supports retrieving int values.\nClass LongDocValues; // Abstract FunctionValues implementation which supports retrieving long values.\nClass StrDocValues; // Abstract FunctionValues implementation which supports retrieving String values.\nClass DocTermsIndexDocValues.DocTermsIndexException; // Custom Exception to be thrown when the DocTermsIndex for a field cannot be generated\n", "des": "FunctionValues for different data types."}
{"index": 777, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: fa\n\nClasses and Interfaces: \nClass PersianAnalyzer; // Analyzer for Persian.\nClass PersianCharFilter; // CharFilter that replaces instances of Zero-width non-joiner with an ordinary space.\nClass PersianCharFilterFactory; // Factory for PersianCharFilter.\nClass PersianNormalizationFilter; // A TokenFilter that applies PersianNormalizer to normalize the orthography.\nClass PersianNormalizationFilterFactory; // Factory for PersianNormalizationFilter.\nClass PersianNormalizer; // Normalizer for Persian.\n", "des": "Analyzer for Persian."}
{"index": 2552, "repo": "pulsar-common-3.0.0", "code": "Package: intercept\n\nClasses and Interfaces: \npublic class AppendBrokerTimestampMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry.\npublic class AppendIndexMetadataInterceptor extends Object implements BrokerEntryMetadataInterceptor;\n@LimitedPrivate @Stable public interface BrokerEntryMetadataInterceptor; // A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side.\npublic class BrokerEntryMetadataUtils<T> extends Object; // A tool class for loading BrokerEntryMetadataInterceptor classes.\npublic class InterceptException extends Exception; // Base exception for the broker interceptor.\npublic interface ManagedLedgerPayloadProcessor;\npublic static interface ManagedLedgerPayloadProcessor.Processor;\n", "des": "Classes needed for broker interceptor."}
{"index": 578, "repo": "commons-collections-3.2.2", "code": "Package: collection\n\nClasses and Interfaces: \nInterface CompositeCollection.CollectionMutator; // Pluggable strategy to handle changes to the composite.\nClass AbstractCollectionDecorator; // Decorates another Collection to provide additional behaviour.\nClass AbstractSerializableCollectionDecorator; // Serializable subclass of AbstractCollectionDecorator.\nClass CompositeCollection; // Decorates a collection of other collections to provide a single unified view.\nClass PredicatedCollection; // Decorates another Collection to validate that additions match a specified predicate.\nClass SynchronizedCollection; // Decorates another Collection to synchronize its behaviour for a multi-threaded environment.\nClass TransformedCollection; // Decorates another Collection to transform objects that are added.\nClass TypedCollection; // Decorates a Collection to validate that elements added are of a specific type.\nClass UnmodifiableBoundedCollection; // UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.\nClass UnmodifiableCollection; // Decorates another Collection to ensure it can't be altered.\n", "des": "This package contains implementations of the Collection interface."}
{"index": 2531, "repo": "spring-security-core-6.1.2", "code": "Package: core\n\nSub Packages: \npackage core.authority; // The default implementation of the GrantedAuthority interface.\npackage core.context; // Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation).\npackage core.session; // Session abstraction which is provided by the org.springframework.security.core.session.SessionInformation SessionInformation class.\npackage core.token; // A service for building secure random tokens.\npackage core.userdetails; // The standard interfaces for implementing user data DAOs.\n\nClasses and Interfaces: \npublic interface AuthenticatedPrincipal; // Representation of an authenticated Principal once an Authentication request has been successfully authenticated by the AuthenticationManager.authenticate(Authentication) method.\npublic interface Authentication extends Principal, Serializable; // Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.\npublic abstract class AuthenticationException extends RuntimeException; // Abstract superclass for all exceptions related to an Authentication object being invalid for whatever reason.\npublic interface CredentialsContainer; // Indicates that the implementing object contains sensitive data, which can be erased using the eraseCredentials method.\npublic interface GrantedAuthority extends Serializable; // Represents an authority granted to an Authentication object.\npublic final class SpringSecurityCoreVersion extends Object; // Internal class used for checking version compatibility in a deployed application.\npublic class SpringSecurityMessageSource extends org.springframework.context.support.ResourceBundleMessageSource; // The default MessageSource used by Spring Security.\n@Target({TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface Transient; // A marker for Authentications that should never be stored across requests, for example a bearer token authentication\n", "des": "Core classes and interfaces related to user authentication and authorization, as well as the maintenance of a security context."}
{"index": 3541, "repo": "opennlp-tools-2.2.0", "code": "Package: treeinsert\n\nClasses and Interfaces: \nClass AttachContextGenerator; // Generates predictive contexts for deciding how constituents should be attached.\nClass BuildContextGenerator; // Creates the features or contexts for the building phase of parsing.\nClass CheckContextGenerator; // Generates predictive context for deciding when a constituent is complete.\nClass Parser; // A built-attach Parser implementation.\nClass ParserEventStream; // Wrapper class for one of four built-attach parser event streams.\n", "des": "Package containing experimental code for performing full syntactic parsing using attachment decisions."}
{"index": 3416, "repo": "commons-imaging-1.0-alpha3", "code": "Package: icc\n\nClasses and Interfaces: \nClass IccConstants;\nClass IccProfileInfo;\nClass IccProfileParser;\nClass IccTag;\nEnum IccTagDataTypes;\nEnum IccTagTypes;\n", "des": "ICC color profile."}
{"index": 2097, "repo": "spring-webflux-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class HandlerFunctionAdapter extends Object implements HandlerAdapter; // HandlerAdapter implementation that supports HandlerFunctions.\npublic class RouterFunctionMapping extends AbstractHandlerMapping implements org.springframework.beans.factory.InitializingBean; // HandlerMapping implementation that supports RouterFunctions.\npublic class ServerRequestWrapper extends Object implements ServerRequest; // Implementation of the ServerRequest interface that can be subclassed to adapt the request in a handler filter function.\npublic static class ServerRequestWrapper.HeadersWrapper extends Object implements ServerRequest.Headers; // Implementation of the Headers interface that can be subclassed to adapt the headers in a handler filter function.\npublic class ServerResponseResultHandler extends Object implements HandlerResultHandler, org.springframework.beans.factory.InitializingBean, org.springframework.core.Ordered; // HandlerResultHandler implementation that supports ServerResponses.\n", "des": "Classes supporting the org.springframework.web.reactive.function.server package."}
{"index": 756, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: bg\n\nClasses and Interfaces: \nClass BulgarianAnalyzer; // Analyzer for Bulgarian.\nClass BulgarianStemFilter; // A TokenFilter that applies BulgarianStemmer to stem Bulgarian words.\nClass BulgarianStemFilterFactory; // Factory for BulgarianStemFilter.\nClass BulgarianStemmer; // Light Stemmer for Bulgarian.\n", "des": "Analyzer for Bulgarian."}
{"index": 2336, "repo": "spring-boot-3.1.1", "code": "Package: system\n\nClasses and Interfaces: \npublic class ApplicationHome extends Object; // Provides access to the application home directory.\npublic class ApplicationPid extends Object; // An application process ID.\npublic class ApplicationTemp extends Object; // Provides access to an application specific temporary directory.\npublic enum JavaVersion extends Enum<JavaVersion>; // Known Java versions.\npublic final class SystemProperties extends Object; // Access to system properties.\n", "des": "General system support classes."}
{"index": 2739, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: xml\n\nSub Packages: \npackage xml.builder; // Builders for Stax event item reader and writer.\npackage xml.stax; // Item reader and writer based on Stax.\n\nClasses and Interfaces: \npublic class StaxEventItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // Item reader for reading XML input based on StAX.\npublic class StaxEventItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean; // An implementation of ItemWriter which uses StAX and Marshaller for serializing object to XML.\npublic interface StaxWriterCallback; // Callback interface for writing to an XML file - useful e.g.\n", "des": "Infrastructure implementations of xml input and output."}
{"index": 2735, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: support\n\nSub Packages: \npackage support.builder; // Builders for support classes.\n\nClasses and Interfaces: \npublic abstract class AbstractFileItemWriter<T> extends AbstractItemStreamItemWriter<T> implements ResourceAwareItemWriterItemStream<T>, org.springframework.beans.factory.InitializingBean; // Base class for item writers that write data to a file or stream.\npublic abstract class AbstractItemCountingItemStreamItemReader<T> extends AbstractItemStreamItemReader<T>; // Abstract superclass for ItemReaders that supports restart by storing item count in the ExecutionContext (therefore requires item ordering to be preserved between runs).\npublic abstract class AbstractItemStreamItemReader<T> extends ItemStreamSupport implements ItemStreamReader<T>; // Base class for ItemReader implementations.\npublic abstract class AbstractItemStreamItemWriter<T> extends ItemStreamSupport implements ItemStreamWriter<T>; // Base class for ItemWriter implementations.\npublic class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>; // Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier.\npublic class ClassifierCompositeItemWriter<T> extends Object implements ItemWriter<T>; // Calls one of a collection of ItemWriters for each item, based on a router pattern implemented through the provided Classifier.\npublic class CompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean; // Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types.\npublic class CompositeItemStream extends Object implements ItemStream; // Simple ItemStream that delegates to a list of other streams.\npublic class CompositeItemWriter<T> extends Object implements ItemStreamWriter<T>, org.springframework.beans.factory.InitializingBean; // Calls a collection of ItemWriters in fixed-order sequence. The implementation is thread-safe if all delegates are thread-safe.\npublic class IteratorItemReader<T> extends Object implements ItemReader<T>; // An ItemReader that pulls data from a Iterator or Iterable using the constructors.\n", "des": "Internal support package"}
{"index": 1105, "repo": "fontbox-3.0.0-beta1", "code": "Package: ttf\n\nSub Packages: \npackage ttf.gsub; // This package contains utility classes which extract meanigful data from the highly obfuscated GSUB table structures.\npackage ttf.model; // This package contains a more logical model for the various font tables like GSUB.\n\nClasses and Interfaces: \nInterface CmapLookup; // An interface that abstracts the cid <-> codepoint lookup functionality of cmap.\nInterface GlyphDescription; // Specifies access to glyph description classes, simple and composite.\nInterface TrueTypeCollection.TrueTypeFontProcessor; // Implement the callback method to call TrueTypeCollection.processAllFonts(TrueTypeFontProcessor).\nClass CFFTable; // PostScript font program (compact font format).\nClass CmapSubtable; // A \"cmap\" subtable.\nClass CmapTable; // The \"cmap\" table of a true type font.\nClass DigitalSignatureTable; // A table in a true type font.\nClass GlyfCompositeComp; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyfCompositeDescript; // Glyph description for composite glyphs.\nClass GlyfDescript; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyfSimpleDescript; // This class is based on code from Apache Batik a subproject of Apache XMLGraphics.\nClass GlyphData; // A glyph data record in the glyf table.\nClass GlyphSubstitutionTable; // A glyph substitution 'GSUB' table in a TrueType or OpenType font.\nClass GlyphTable; // A table in a true type font.\nClass HeaderTable; // A table in a true type font.\nClass HorizontalHeaderTable; // A table in a true type font.\nClass HorizontalMetricsTable; // A table in a true type font.\nClass IndexToLocationTable; // A table in a true type font.\nClass KerningSubtable; // A 'kern' table in a true type font.\nClass KerningTable; // A 'kern' table in a true type font.\nClass MaximumProfileTable; // A table in a true type font.\nClass NameRecord; // A name record in the name table.\nClass NamingTable; // A table in a true type font.\n", "des": "This package contains classes to parse a TTF file."}
{"index": 2352, "repo": "spring-boot-3.1.1", "code": "Package: filter\n\nClasses and Interfaces: \npublic class OrderedHiddenHttpMethodFilter extends org.springframework.web.filter.reactive.HiddenHttpMethodFilter implements OrderedWebFilter; // HiddenHttpMethodFilter that also implements Ordered.\npublic interface OrderedWebFilter extends org.springframework.web.server.WebFilter, org.springframework.core.Ordered; // An Ordered WebFilter.\n", "des": "Spring Boot specific WebFilter implementations."}
{"index": 2046, "repo": "spring-boot-loader-3.1.1", "code": "Package: loader\n\nSub Packages: \npackage loader.archive; // Abstraction over logical Archives be they backed by a JAR file or unpacked into a directory.\npackage loader.data; // Classes and interfaces to allow random access to a block of data.\npackage loader.jar; // Support for loading and manipulating JAR/WAR files.\npackage loader.jarmode; // Support for launching the JAR using jarmode.\npackage loader.util; // Utilities used by Spring Boot's JAR loading.\n\nClasses and Interfaces: \npublic abstract class ExecutableArchiveLauncher extends Launcher; // Base class for executable archive Launchers.\npublic class JarLauncher extends ExecutableArchiveLauncher; // Launcher for JAR based archives.\npublic class LaunchedURLClassLoader extends URLClassLoader; // ClassLoader used by the Launcher.\npublic abstract class Launcher extends Object; // Base class for launchers that can start an application with a fully configured classpath backed by one or more Archives.\npublic class MainMethodRunner extends Object; // Utility class that is used by Launchers to call a main method.\npublic class PropertiesLauncher extends Launcher; // Launcher for archives with user-configured classpath and main class through a properties file.\npublic class WarLauncher extends ExecutableArchiveLauncher; // Launcher for WAR based archives.\n", "des": "System that allows self-contained JAR/WAR archives to be launched using java -jar."}
{"index": 1006, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: wsdl\n\nSub Packages: \npackage wsdl.wsdl11; // Contains interfaces and classes specific to WSDL 1.1.\n\nClasses and Interfaces: \nInterface WsdlDefinition; // Represents an abstraction for WSDL definitions.\nClass WsdlDefinitionException; // Base class for all WSDL definition exceptions.\n", "des": "Provides the WSDL functionality of the Spring Web Services framework."}
{"index": 715, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: support\n\nSub Packages: \npackage support.tuple; // Tuples provide a type-safe way to specify multiple parameters.\n\nClasses and Interfaces: \nInterface Consumer<T>; // Implementations accept a given value and perform work on the argument.\nInterface Function<T,R>; // Implementations of this class perform work on the given parameter and return a result of an optionally different type.\nInterface GenericHandler<P>; // A functional interface to specify MessageHandler logic with Java 8 Lambda expression: .<Integer>handle((p, h) -> p / 2)\nClass BeanNameMessageProcessor<T>; // An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\nClass FixedSubscriberChannelPrototype; // An \"artificial\" MessageChannel implementation which will be unwrapped to the FixedSubscriberChannel on the bean registration phase.\nClass FunctionExpression<S>; // An Expression that simply invokes Function.apply(Object) on its provided Function.\nClass MapBuilder<B extends MapBuilder<B,K,V>,K,V>; // A Builder pattern implementation for the Map.\nClass MessageChannelReference; // An \"artificial\" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.\nClass MessageProcessorMessageSource; // The MessageSource strategy implementation to produce a Message from underlying MessageProcessorMessageSource.messageProcessor for polling endpoints.\nClass PropertiesBuilder; // A Builder pattern implementation for the Properties.\nClass StringStringMapBuilder; // A map builder creating a map with String keys and values.\nClass Transformers; // An utility class to provide methods for out-of-the-box Transformers.\n", "des": "Provides various support classes used across Spring Integration Java DSL Components."}
{"index": 1555, "repo": "spring-context-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target({TYPE,METHOD,PARAMETER}) @Retention(RUNTIME) @Documented public @interface Validated; // Variant of JSR-303's Valid, supporting the specification of validation groups.\npublic abstract class ValidationAnnotationUtils extends Object; // Utility class for handling validation annotations.\n", "des": "Support classes for annotation-based constraint evaluation, e.g."}
{"index": 1290, "repo": "spring-core-6.0.11", "code": "Package: objenesis\n\nClasses and Interfaces: \npublic class SpringObjenesis extends Object implements org.springframework.objenesis.Objenesis; // Spring-specific variant of ObjenesisStd / ObjenesisBase, providing a cache based on Class keys instead of class names, and allowing for selective use of the cache.\n", "des": "Spring's repackaging of Objenesis 3.2 (with SpringObjenesis entry point; for internal use only)."}
{"index": 2917, "repo": "groovy-4.0.13", "code": "Package: inspect\n\nClasses and Interfaces: \npublic class Inspector extends Object; // The Inspector provides a unified access to an object's information that can be determined by introspection.\npublic static class Inspector.MemberComparator extends Object implements Comparator<Object>, Serializable;\npublic static class Inspector.MemberComparatorWithValue extends Object implements Comparator<Object>, Serializable;\n", "des": "Classes for inspecting object properties through introspection."}
{"index": 1015, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: xpath\n\nClasses and Interfaces: \nInterface NodeCallbackHandler; // An interface used by XPathOperations implementations for processing Node objects on a per-node basis.\nInterface NodeMapper<T>; // An interface used by XPathOperations implementations for mapping Node objects on a per-node basis.\nInterface XPathExpression; // Defines the contract for a precompiled XPath expression.\nInterface XPathOperations; // Interface that specifies a basic set of XPath operations, implemented by various XPathTemplates.\nClass AbstractXPathTemplate; // Abstract base class for implementations of XPathOperations.\nClass JaxenXPathTemplate; // Implementation of XPathOperations that uses Jaxen.\nClass Jaxp13XPathTemplate; // Implementation of XPathOperations that uses JAXP 1.3.\nClass XPathExpressionFactory; // Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.\nClass XPathExpressionFactoryBean; // Spring FactoryBean for XPathExpression object.\nClass XPathException; // Exception thrown when an error occurs during XPath processing.\nClass XPathParseException; // Exception throws when a XPath expression cannot be parsed.\n", "des": "Provides XPathTemplate implementations, and various classes for XPath evaluation using JAXP 1.3, and Jaxen."}
{"index": 680, "repo": "jackson-databind-2.15.2", "code": "Package: annotation\n\nClasses and Interfaces: \nClass JsonPOJOBuilder.Value; // Simple value container for containing values read from JsonPOJOBuilder annotation instance.\nClass NoClass; // Marker class used with annotations to indicate \"no class\".\nEnum JsonSerialize.Inclusion;\nEnum JsonSerialize.Typing; // Enumeration used with JsonSerialize.typing() property to define whether type detection is based on dynamic runtime type (DYNAMIC) or declared type (STATIC).\nAnnotation Type EnumNaming; // Annotation that can be used to indicate a EnumNamingStrategy to use for annotated class.\nAnnotation Type JacksonStdImpl; // Marker interface used to indicate implementation classes (serializers, deserializers etc) that are standard ones Jackson uses; not custom ones that application has added.\nAnnotation Type JsonAppend; // Annotation used to add \"virtual\" properties that will be written after regular properties during serialization.\nAnnotation Type JsonAppend.Attr; // Definition of a single attribute-backed property.\nAnnotation Type JsonAppend.Prop; // Definition of a single general virtual property.\nAnnotation Type JsonDeserialize; // Annotation use for configuring deserialization aspects, by attaching to \"setter\" methods or fields, or to value classes.\nAnnotation Type JsonNaming; // Annotation that can be used to indicate a PropertyNamingStrategy to use for annotated class.\nAnnotation Type JsonPOJOBuilder; // Annotation used to configure details of a Builder class: instances of which are used as Builders for deserialized POJO values, instead of POJOs being instantiated using constructors or factory methods.\nAnnotation Type JsonSerialize; // Annotation used for configuring serialization aspects, by attaching to \"getter\" methods or fields, or to value classes.\nAnnotation Type JsonTypeIdResolver; // Annotation that can be used to plug a custom type identifier handler (TypeIdResolver) to be used by TypeSerializers and TypeDeserializers for converting between java types and type id included in JSON content.\nAnnotation Type JsonTypeResolver; // Annotation that can be used to explicitly define custom resolver used for handling serialization and deserialization of type information, needed for handling of polymorphic types (or sometimes just for linking abstract types to concrete types)\nAnnotation Type JsonValueInstantiator; // Annotation that can be used to indicate a ValueInstantiator to use for creating instances of specified type.\n", "des": "Annotations that directly depend on classes in databinding bundle (not just Jackson core) and cannot be included in Jackson core annotations package (because it cannot have any external dependencies)."}
{"index": 2374, "repo": "pulsar-client-api-3.0.0", "code": "Package: transaction\n\nClasses and Interfaces: \n@Public @Evolving public interface Transaction; // The class represents a transaction within Pulsar.\npublic static enum Transaction.State extends Enum<Transaction.State>;\n@Private @Evolving public interface TransactionBufferClient; // The transaction buffer client to commit and abort transactions on topics or subscription.\n@Private @Evolving public class TransactionBufferClientException extends IOException; // Exceptions for transaction buffer client.\npublic static class TransactionBufferClientException.ReachMaxPendingOpsException extends TransactionBufferClientException; // Thrown when transaction buffer op over max pending numbers.\npublic static class TransactionBufferClientException.RequestTimeoutException extends TransactionBufferClientException; // Thrown when operation timeout.\n@Public @Evolving public interface TransactionBuilder; // The builder to build a transaction for Pulsar.\n@Private @Evolving public interface TransactionCoordinatorClient extends Closeable; // Transaction coordinator client.\npublic static enum TransactionCoordinatorClient.State extends Enum<TransactionCoordinatorClient.State>; // State of the transaction coordinator client.\n@Private @Evolving public class TransactionCoordinatorClientException extends IOException; // Exceptions for transaction coordinator client.\npublic static class TransactionCoordinatorClientException.CoordinatorClientStateException extends TransactionCoordinatorClientException; // Thrown when transaction coordinator with unexpected state.\npublic static class TransactionCoordinatorClientException.CoordinatorNotFoundException extends TransactionCoordinatorClientException; // Thrown when transaction coordinator not found in broker side.\npublic static class TransactionCoordinatorClientException.InvalidTxnStatusException extends TransactionCoordinatorClientException; // Thrown when transaction switch to a invalid status.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotExistsException extends TransactionCoordinatorClientException; // Thrown when transaction meta store handler not exists.\npublic static class TransactionCoordinatorClientException.MetaStoreHandlerNotReadyException extends TransactionCoordinatorClientException; // Thrown when send request to transaction meta store but the transaction meta store handler not ready.\npublic static class TransactionCoordinatorClientException.TransactionNotFoundException extends TransactionCoordinatorClientException; // Thrown when transaction not found in transaction coordinator.\n@Public @Evolving public class TxnID extends Object implements Serializable; // An identifier for representing a transaction.\n", "des": "Pulsar transaction related API."}
{"index": 1124, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: nec\n\nClasses and Interfaces: \nClass NECVEPlugin; // A device framework plugin which supports NEC Vector Engine.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3587, "repo": "lucene-test-framework-9.7.0", "code": "Package: mockrandom\n\nClasses and Interfaces: \nClass MockRandomPostingsFormat; // Randomly combines terms index impl w/ postings impls.\n", "des": "Frankenstein codec for testing that pieces together random components."}
{"index": 3885, "repo": "solr-solrj-9.3.0", "code": "Package: embedded\n\nClasses and Interfaces: \nClass SSLConfig; // Encapsulates settings related to SSL Configuration.\n", "des": "SolrJ client implementations for embedded solr access."}
{"index": 1202, "repo": "commons-math3-3.6.1", "code": "Package: random\n\nClasses and Interfaces: \nInterface NormalizedRandomGenerator; // This interface represent a normalized random generator for scalars.\nInterface RandomData; // to be removed in 4.0.\nInterface RandomGenerator; // Interface extracted from java.util.Random.\nInterface RandomVectorGenerator; // This interface represents a random generator for whole vectors.\nClass AbstractRandomGenerator; // Abstract class implementing the RandomGenerator interface.\nClass AbstractWell; // This abstract class implements the WELL class of pseudo-random number generator from François Panneton, Pierre L'Ecuyer and Makoto Matsumoto.\nClass BitsStreamGenerator; // Base class for random number generators that generates bits streams.\nClass CorrelatedRandomVectorGenerator; // A RandomVectorGenerator that generates vectors with with correlated components.\nClass EmpiricalDistribution; // Represents an empirical probability distribution -- a probability distribution derived from observed data without making any assumptions about the functional form of the population distribution that the data come from.\nClass GaussianRandomGenerator; // This class is a gaussian normalized random generator for scalars.\nClass HaltonSequenceGenerator; // Implementation of a Halton sequence.\nClass ISAACRandom; // ISAAC: a fast cryptographic pseudo-random number generator ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.\nClass JDKRandomGenerator; // Extension of java.util.Random to implement RandomGenerator.\nClass MersenneTwister; // This class implements a powerful pseudo-random number generator developed by Makoto Matsumoto and Takuji Nishimura during 1996-1997.\nClass RandomAdaptor; // Extension of java.util.Random wrapping a RandomGenerator.\nClass RandomDataGenerator; // Implements the RandomData interface using a RandomGenerator instance to generate non-secure data and a SecureRandom instance to provide data for the nextSecureXxx methods.\nClass RandomDataImpl; // to be removed in 4.0.\nClass RandomGeneratorFactory; // Utilities for creating RandomGenerator instances.\nClass SobolSequenceGenerator; // Implementation of a Sobol sequence.\nClass StableRandomGenerator; // This class provides a stable normalized random generator.\n", "des": "Random number and random data generators."}
{"index": 537, "repo": "commons-vfs2-2.9.0", "code": "Package: tasks\n\nClasses and Interfaces: \nClass AbstractSyncTask; // An abstract file synchronization task.\nClass AbstractSyncTask.SourceInfo; // Information about a source file.\nClass CopyTask; // An Ant task that copies matching files.\nClass DeleteTask; // An Ant task that deletes matching files.\nClass MkdirTask; // An Ant task that creates a directory.\nClass MoveTask; // An Ant task that moves matching files.\nClass ShowFileTask; // An Ant task that writes the details of a file to Ant's log.\nClass SyncTask; // A task that synchronises the destination folder to look exactly like the source folder (or folders).\nClass VfsTask; // Base class for the VFS Ant tasks.\n", "des": "The VFS Ant Tasks."}
{"index": 1820, "repo": "pulsar-client-original-3.0.0", "code": "Package: impl\n\nSub Packages: \npackage impl.auth; // Pulsar Client authentication.\npackage impl.customroute; // Pulsar Client customized routing mode.\npackage impl.schema; // Pulsar Client schema.\npackage impl.transaction; // Transaction client implementation.\n\nClasses and Interfaces: \npublic abstract class AbstractBatchMessageContainer extends Object implements BatchMessageContainerBase; // Batch message container framework.\npublic interface AcknowledgmentsGroupingTracker extends AutoCloseable; // Acknowledgments grouping tracker.\npublic class AuthenticationUtil extends Object;\npublic class AutoClusterFailover extends Object implements ServiceUrlProvider;\npublic static class AutoClusterFailover.AutoClusterFailoverBuilderImpl extends Object implements AutoClusterFailoverBuilder;\npublic class Backoff extends Object;\npublic class BackoffBuilder extends Object;\npublic interface BatchMessageContainerBase extends BatchMessageContainer;\npublic class BatchMessageIdImpl extends MessageIdImpl;\npublic class BinaryProtoLookupService extends Object implements LookupService;\npublic static class BinaryProtoLookupService.LookupDataResult extends Object;\npublic class ChunkMessageIdImpl extends MessageIdImpl;\npublic class ClientBuilderImpl extends Object implements ClientBuilder;\npublic class ClientCnx extends PulsarHandler; // Channel handler for the Pulsar client.\nprotected static enum ClientCnx.State extends Enum<ClientCnx.State>;\npublic class ClientCnxIdleState extends Object;\npublic static enum ClientCnxIdleState.State extends Enum<ClientCnxIdleState.State>; // Indicates the usage status of the connection and whether it has been released.\npublic class ConnectionHandler extends Object;\npublic class ConnectionPool extends Object implements AutoCloseable;\npublic abstract class ConsumerBase<T> extends Object implements Consumer<T>;\nprotected static final class ConsumerBase.OpBatchReceive<T> extends Object;\npublic class ConsumerBuilderImpl<T> extends Object implements ConsumerBuilder<T>;\npublic class ConsumerId extends Object implements Comparable<ConsumerId>;\npublic class ConsumerImpl<T> extends ConsumerBase<T>;\npublic class ConsumerInterceptors<T> extends Object implements Closeable; // A container that hold the list ConsumerInterceptor and wraps calls to the chain of custom interceptors.\npublic class ConsumerStatsDisabled extends Object implements ConsumerStatsRecorder;\npublic interface ConsumerStatsRecorder extends ConsumerStats;\n", "des": "Pulsar Client implementation."}
{"index": 2094, "repo": "spring-webflux-6.0.11", "code": "Package: client\n\nSub Packages: \npackage client.support; // Classes supporting the org.springframework.web.reactive.function.client package.\n\nClasses and Interfaces: \npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP client observations.\npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic interface ClientRequest; // Represents a typed, immutable, client-side HTTP request, as executed by the ExchangeFunction.\npublic static interface ClientRequest.Builder; // Defines a builder for a request.\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientRequest.Builder,ClientResponse>; // Context that holds information for metadata collection during the HTTP client exchange observations.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>; // Interface for an ObservationConvention related to HTTP client exchange observations.\npublic interface ClientResponse; // Represents an HTTP response, as returned by WebClient and also ExchangeFunction.\npublic static interface ClientResponse.Builder; // Defines a builder for a response.\npublic static interface ClientResponse.Headers; // Represents the headers of the HTTP response.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention; // Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\n@FunctionalInterface public interface ExchangeFilterFunction; // Represents a function that filters an exchange function.\npublic abstract class ExchangeFilterFunctions extends Object; // Static factory methods providing access to built-in implementations of ExchangeFilterFunction for basic authentication, error handling, etc.\n@Deprecated public static final class ExchangeFilterFunctions.Credentials extends Object;\n@FunctionalInterface public interface ExchangeFunction; // Represents a function that exchanges a request for a (delayed) ClientResponse.\n", "des": "Provides a reactive WebClient that builds on top of the org.springframework.http.client.reactive reactive HTTP adapter layer."}
{"index": 2649, "repo": "spring-data-cassandra-4.1.2", "code": "Package: generator\n\nClasses and Interfaces: \npublic class AddColumnCqlGenerator extends ColumnChangeCqlGenerator<AddColumnSpecification>; // CQL generator for generating an ADD clause of an ALTER TABLE statement.\npublic class AlterColumnCqlGenerator extends ColumnChangeCqlGenerator<AlterColumnSpecification>; // CQL generator for generating an ALTER column clause of an ALTER TABLE statement.\npublic class AlterKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<AlterKeyspaceSpecification>; // CQL generator for generating ALTER TABLE statements.\npublic class AlterTableCqlGenerator extends TableOptionsCqlGenerator<AlterTableSpecification>; // CQL generator for generating ALTER TABLE statements.\npublic class AlterUserTypeCqlGenerator extends UserTypeNameCqlGenerator<AlterUserTypeSpecification>; // CQL generator for generating ALTER TYPE statements.\npublic abstract class ColumnChangeCqlGenerator<T extends ColumnChangeSpecification> extends Object; // Base class for column change CQL generators.\npublic class CreateIndexCqlGenerator extends IndexNameCqlGenerator<CreateIndexSpecification>; // CQL generator for generating a CREATE INDEX statement.\npublic class CreateKeyspaceCqlGenerator extends KeyspaceOptionsCqlGenerator<CreateKeyspaceSpecification>; // CQL generator for generating a CREATE TABLE statement.\npublic class CreateTableCqlGenerator extends TableOptionsCqlGenerator<TableSpecification<CreateTableSpecification>>; // CQL generator for generating a CREATE TABLE statement.\npublic class CreateUserTypeCqlGenerator extends UserTypeNameCqlGenerator<CreateUserTypeSpecification>; // CQL generator for generating a CREATE TYPE statement.\npublic class DropColumnCqlGenerator extends ColumnChangeCqlGenerator<DropColumnSpecification>; // CQL generator for generating a DROP column clause of an ALTER TABLE statement.\npublic class DropIndexCqlGenerator extends IndexNameCqlGenerator<DropIndexSpecification>; // CQL generator for generating a DROP INDEX statement.\npublic class DropKeyspaceCqlGenerator extends KeyspaceNameCqlGenerator<DropKeyspaceSpecification>; // CQL generator for generating a DROP TABLE statement.\npublic class DropTableCqlGenerator extends TableNameCqlGenerator<DropTableSpecification>; // CQL generator for generating a DROP TABLE statement.\npublic class DropUserTypeCqlGenerator extends UserTypeNameCqlGenerator<DropUserTypeSpecification>; // CQL generator for generating a DROP TYPE statement.\n", "des": "CQL generators for Keyspace object actions."}
{"index": 1530, "repo": "spring-context-6.0.11", "code": "Package: access\n\nClasses and Interfaces: \npublic class InvalidInvocationException extends JMRuntimeException; // Thrown when trying to invoke an operation on a proxy that is not exposed by the proxied MBean resource's management interface.\npublic class InvocationFailureException extends JmxException; // Thrown when an invocation on an MBean resource failed with an exception (either a reflection exception or an exception thrown by the target method itself).\npublic class MBeanClientInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // MethodInterceptor that routes calls to an MBean running on the supplied MBeanServerConnection.\npublic class MBeanConnectFailureException extends JmxException; // Thrown when an invocation failed because of an I/O problem on the MBeanServerConnection.\npublic class MBeanInfoRetrievalException extends JmxException; // Thrown if an exception is encountered when trying to retrieve MBean metadata.\npublic class MBeanProxyFactoryBean extends MBeanClientInterceptor implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean; // Creates a proxy to a managed resource running either locally or remotely.\npublic class NotificationListenerRegistrar extends NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Registrar object that associates a specific NotificationListener with one or more MBeans in an MBeanServer (typically via a MBeanServerConnection).\n", "des": "Provides support for accessing remote MBean resources."}
{"index": 1411, "repo": "spring-boot-actuator-3.1.1", "code": "Package: metrics\n\nSub Packages: \npackage metrics.amqp; // Actuator support for RabbitMQ Java Client metrics.\npackage metrics.annotation; // Support classes for handler method metrics.\npackage metrics.cache; // Actuator support for cache metrics.\npackage metrics.data; // Actuator support for Spring Data Repository metrics.\npackage metrics.http; // Support classes for HTTP-related metrics.\npackage metrics.jdbc; // Actuator support for JDBC metrics.\npackage metrics.r2dbc; // Actuator support for R2DBC metrics.\npackage metrics.startup; // Actuator support for startup metrics.\npackage metrics.system; // Actuator support for system metrics.\n\nClasses and Interfaces: \n@FunctionalInterface public interface AutoTimer; // Strategy that can be used to apply Timers automatically instead of using @Timed.\n@Endpoint(id=\"metrics\") public class MetricsEndpoint extends Object; // An @Endpoint for exposing the metrics held by a MeterRegistry.\npublic static final class MetricsEndpoint.AvailableTag extends Object; // A set of tags for further dimensional drill-down and their potential values.\npublic static final class MetricsEndpoint.MetricDescriptor extends Object implements OperationResponseBody; // Description of a metric.\npublic static final class MetricsEndpoint.MetricNamesDescriptor extends Object implements OperationResponseBody; // Description of metric names.\npublic static final class MetricsEndpoint.Sample extends Object; // A measurement sample combining a statistic and a value.\n", "des": "Core actuator support for metrics."}
{"index": 279, "repo": "pdfbox-3.0.0-beta1", "code": "Package: filter\n\nClasses and Interfaces: \nClass DecodeOptions; // Options that may be passed to a Filter to request special handling when decoding the stream.\nClass DecodeResult; // The result of a filter decode operation.\nClass Filter; // A filter for stream data.\nClass FilterFactory; // Factory for Filter classes.\nClass JPXFilter; // Decompress data encoded using the wavelet-based JPEG 2000 standard, reproducing the original data.\nClass LZWFilter; // This is the filter used for the LZWDecode filter.\nClass Predictor; // Helper class to contain predictor decoding used by Flate and LZW filter.\nClass MissingImageReaderException; // Thrown when a required JAI ImageReader is missing.\n", "des": "This package will hold the PDFBox implementations of the filters that are used in PDF documents."}
{"index": 3800, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ne\n\nClasses and Interfaces: \nClass NepaliAnalyzer; // Analyzer for Nepali.\n", "des": "Analyzer for Nepali."}
{"index": 2521, "repo": "spring-security-core-6.1.2", "code": "Package: aspectj\n\nClasses and Interfaces: \n@Deprecated public interface AspectJCallback;\n@Deprecated public final class AspectJMethodSecurityInterceptor extends MethodSecurityInterceptor;\n@Deprecated public final class MethodInvocationAdapter extends Object implements org.aopalliance.intercept.MethodInvocation;\n", "des": "Enforces security for AspectJ JointPoints, delegating secure object callbacks to the calling aspect."}
{"index": 3444, "repo": "hibernate-core-5.6.15.Final", "code": "Package: jdbc\n\nSub Packages: \npackage jdbc.spi; // SPI contracts for supporting various aspects of JDBC interaction\n\nClasses and Interfaces: \nInterface BinaryStream; // Wraps a binary stream to also provide the length which is needed when binding.\nInterface BlobImplementer; // Marker interface for non-contextually created Blob instances..\nInterface CharacterStream; // Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.\nInterface ClobImplementer; // Marker interface for non-contextually created Clob instances..\nInterface LobCreationContext; // Provides callback access into the context in which the LOB is to be created.\nInterface LobCreationContext.Callback<T>; // The callback contract for making use of the JDBC Connection.\nInterface LobCreator; // Contract for creating various LOB references.\nInterface NClobImplementer; // Marker interface for non-contextually created java.sql.NClob instances..\nInterface WrappedBlob; // Contract for Blob wrappers.\nInterface WrappedClob; // Contract for Clob wrappers.\nInterface WrappedNClob; // Contract for NClob wrappers.\nClass AbstractLobCreator; // Convenient base class for proxy-based LobCreator for handling wrapping.\nClass BlobProxy; // Manages aspects of representing Blob objects.\nClass ClobProxy; // Manages aspects of proxying Clobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass ColumnNameCache;\nClass ContextualLobCreator; // LobCreator implementation using contextual creation against the JDBC Connection class's LOB creation methods.\nClass NClobProxy; // Manages aspects of proxying java.sql.NClobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass NonContextualLobCreator; // LobCreator implementation using non-contextual or local creation, meaning that we generate the LOB references ourselves as opposed to delegating to the JDBC Connection.\nClass ReaderInputStream; // Exposes a Reader as an InputStream.\nClass ResultSetWrapperProxy;\nClass SerializableBlobProxy; // Manages aspects of proxying Blobs to add serializability.\nClass SerializableClobProxy; // Manages aspects of proxying Clobs to add serializability.\n", "des": "Support for various aspects of JDBC interaction"}
{"index": 2116, "repo": "spring-retry-2.0.2", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic class FixedKeyGenerator extends Object implements MethodArgumentsKeyGenerator;\npublic interface MethodArgumentsKeyGenerator; // Interface that allows method parameters to be identified and tagged by a unique key.\npublic interface MethodInvocationRecoverer<T>; // Strategy interface for recovery action when processing of an item fails.\npublic abstract class MethodInvocationRetryCallback<T,E extends Throwable> extends Object implements RetryCallback<T,E>; // Callback class for a Spring AOP reflective `MethodInvocation` that can be retried using a RetryOperations.\npublic interface NewMethodArgumentsIdentifier; // Strategy interface to distinguish new arguments from ones that have been processed before, e.g.\npublic interface Retryable; // Marker interface for proxies that are providing retryable behaviour.\npublic abstract class RetryInterceptorBuilder<T extends org.aopalliance.intercept.MethodInterceptor> extends Object; // Simplified facade to make it easier and simpler to build a StatefulRetryOperationsInterceptor or (stateless) RetryOperationsInterceptor by providing a fluent interface to defining the behavior on error.\npublic static class RetryInterceptorBuilder.CircuitBreakerInterceptorBuilder extends RetryInterceptorBuilder<StatefulRetryOperationsInterceptor>;\npublic static class RetryInterceptorBuilder.StatefulRetryInterceptorBuilder extends RetryInterceptorBuilder<StatefulRetryOperationsInterceptor>;\npublic static class RetryInterceptorBuilder.StatelessRetryInterceptorBuilder extends RetryInterceptorBuilder<RetryOperationsInterceptor>;\npublic class RetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails.\npublic class StatefulRetryOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically retry calls to a method on a service if it fails.\n", "des": "Infrastructure implementations of retry aop concerns."}
{"index": 3858, "repo": "lucene-core-9.7.0", "code": "Package: hnsw\n\nClasses and Interfaces: \nInterface RandomAccessVectorValues<T>; // Provides random access to vectors by dense ordinal.\nClass HnswGraph; // Hierarchical Navigable Small World graph.\nClass HnswGraph.ArrayNodesIterator; // NodesIterator that accepts nodes as an integer array.\nClass HnswGraph.CollectionNodesIterator; // Nodes iterator based on set representation of nodes.\nClass HnswGraph.NodesIterator; // Iterator over the graph nodes on a certain level, Iterator also provides the size – the total number of nodes to be iterated over.\nClass HnswGraphBuilder<T>; // Builder for HNSW graph.\nClass HnswGraphSearcher<T>; // Searches an HNSW graph to find nearest neighbors to a query vector.\nClass NeighborArray; // NeighborArray encodes the neighbors of a node and their mutual scores in the HNSW graph as a pair of growable arrays.\nClass NeighborQueue; // NeighborQueue uses a LongHeap to store lists of arcs in an HNSW graph, represented as a neighbor node id with an associated score packed together as a sortable long, which is sorted primarily by score.\nClass OnHeapHnswGraph; // An HnswGraph where all nodes and connections are held in memory.\n", "des": "Navigable Small-World graph, nominally Hierarchical but currently only has a single layer."}
{"index": 2263, "repo": "spring-vault-core-3.0.4", "code": "Package: lease\n\nSub Packages: \npackage lease.domain; // Lease domain classes.\npackage lease.event; // Support classes for lease application events.\n\nClasses and Interfaces: \npublic enum LeaseEndpoints extends Enum<LeaseEndpoints>; // Version-specific endpoint implementations that use either legacy or sys/leases endpoints.\npublic class SecretLeaseContainer extends SecretLeaseEventPublisher implements InitializingBean, DisposableBean; // Event-based container to request secrets from Vault and renew the associated Lease.\npublic class SecretLeaseEventPublisher extends Object implements InitializingBean; // Publisher for SecretLeaseEvents.\npublic static enum SecretLeaseEventPublisher.LoggingErrorListener extends Enum<SecretLeaseEventPublisher.LoggingErrorListener> implements LeaseErrorListener; // Simple LeaseErrorListener implementation to log errors.\n", "des": "The core package implementing lease renewal and secret rotation."}
{"index": 1386, "repo": "spring-boot-actuator-3.1.1", "code": "Package: convert\n\nClasses and Interfaces: \npublic class ConversionServiceParameterValueMapper extends Object implements ParameterValueMapper; // ParameterValueMapper backed by a ConversionService.\npublic class IsoOffsetDateTimeConverter extends Object implements org.springframework.core.convert.converter.Converter<String,OffsetDateTime>; // A String to OffsetDateTime Converter that uses ISO offset parsing.\n", "des": "Converter support for actuator endpoints."}
{"index": 785, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: hy\n\nClasses and Interfaces: \nClass ArmenianAnalyzer; // Analyzer for Armenian.\n", "des": "Analyzer for Armenian."}
{"index": 1717, "repo": "spring-boot-test-3.1.1", "code": "Package: client\n\nClasses and Interfaces: \npublic class LocalHostUriTemplateHandler extends org.springframework.boot.web.client.RootUriTemplateHandler; // UriTemplateHandler will automatically prefix relative URIs with localhost:${local.server.port}.\npublic class MockServerRestTemplateCustomizer extends Object implements org.springframework.boot.web.client.RestTemplateCustomizer; // RestTemplateCustomizer that can be applied to a RestTemplateBuilder instances to add MockRestServiceServer support.\npublic class RootUriRequestExpectationManager extends Object implements org.springframework.test.web.client.RequestExpectationManager; // RequestExpectationManager that strips the specified root URI from the request before verification.\npublic class TestRestTemplate extends Object; // Convenient alternative of RestTemplate that is suitable for integration tests.\nprotected static class TestRestTemplate.CustomHttpComponentsClientHttpRequestFactory extends org.springframework.http.client.HttpComponentsClientHttpRequestFactory; // HttpComponentsClientHttpRequestFactory to apply customizations.\npublic static enum TestRestTemplate.HttpClientOption extends Enum<TestRestTemplate.HttpClientOption>; // Options used to customize the Apache HTTP Client.\n", "des": "Web client test utilities."}
{"index": 3253, "repo": "opencms-core-15.0", "code": "Package: cache\n\nClasses and Interfaces: \nInterface I_CmsLruCacheObject; // Defines the methods which an object being cached by CmsFlexLruCache must implement.\nClass CmsLruCache; // Implements an LRU (last recently used) cache.\nClass CmsMemoryObjectCache; // A singleton memory cache, that stores objects related with keys.\nClass CmsVfsCache; // Configurable VFS based cache, for caching objects related to offline/online resources.\nClass CmsVfsDiskCache; // Implements a RFS file based disk cache, that handles parameter based versions of VFS files, providing a cache for the \"online\" and another for the \"offline\" project.\nClass CmsVfsMemoryObjectCache; // Implements a memory cache, that stores objects related to VFS files, providing a cache for the \"online\" and another for the \"offline\" project.\nClass CmsVfsNameBasedDiskCache; // Implements a name based RFS file based disk cache, that handles parameter based versions of VFS files.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Implementations of specialized caches used in OpenCms."}
{"index": 3109, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ClassLoaderService; // A service for interacting with class loaders.\nInterface ClassLoaderService.Work<T>;\nClass ClassLoadingException; // Indicates a problem performing class loading.\n", "des": "The class loading service SPI."}
{"index": 1833, "repo": "spring-test-6.0.11", "code": "Package: server\n\nClasses and Interfaces: \npublic final class MockServerRequest extends Object implements org.springframework.web.reactive.function.server.ServerRequest; // Mock implementation of ServerRequest.\npublic static interface MockServerRequest.Builder; // Builder for MockServerRequest.\n", "des": "Mock objects for the functional web framework."}
{"index": 1400, "repo": "spring-boot-actuator-3.1.1", "code": "Package: health\n\nClasses and Interfaces: \npublic abstract class AbstractHealthIndicator extends Object implements HealthIndicator; // Base HealthIndicator implementations that encapsulates creation of Health instance and error handling.\npublic abstract class AbstractReactiveHealthIndicator extends Object implements ReactiveHealthIndicator; // Base ReactiveHealthIndicator implementations that encapsulates creation of Health instance and error handling.\npublic final class AdditionalHealthEndpointPath extends Object; // Value object that represents an additional path for a HealthEndpointGroup.\npublic class CompositeHealth extends HealthComponent; // A HealthComponent that is composed of other HealthComponent instances.\npublic interface CompositeHealthContributor extends HealthContributor, NamedContributors<HealthContributor>; // A HealthContributor that is composed of other HealthContributor instances.\npublic interface CompositeReactiveHealthContributor extends ReactiveHealthContributor, NamedContributors<ReactiveHealthContributor>; // A ReactiveHealthContributor that is composed of other ReactiveHealthContributor instances.\npublic interface ContributorRegistry<C> extends NamedContributors<C>; // A mutable registry of health endpoint contributors (either HealthContributor or ReactiveHealthContributor).\npublic class DefaultHealthContributorRegistry extends Object implements HealthContributorRegistry; // Default HealthContributorRegistry implementation.\npublic class DefaultReactiveHealthContributorRegistry extends Object implements ReactiveHealthContributorRegistry; // Default ReactiveHealthContributorRegistry implementation.\npublic final class Health extends HealthComponent; // Carries information about the health of a component or subsystem.\npublic static class Health.Builder extends Object; // Builder for creating immutable Health instances.\npublic abstract class HealthComponent extends Object implements OperationResponseBody; // A component that contributes data to results returned from the HealthEndpoint.\npublic interface HealthContributor; // Tagging interface for classes that contribute to health components to the results returned from the HealthEndpoint.\npublic class HealthContributorNameFactory extends Object implements Function<String,String>; // Generate a sensible health indicator name based on its bean name.\npublic interface HealthContributorRegistry extends ContributorRegistry<HealthContributor>; // ContributorRegistry for HealthContributors.\n@Endpoint(id=\"health\") public class HealthEndpoint extends Object; // @Endpoint to expose application health information.\npublic interface HealthEndpointGroup; // A logical grouping of health contributors that can be exposed by the HealthEndpoint.\n", "des": "Actuator health indicator and endpoints."}
{"index": 2458, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: dynatrace\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.dynatrace.DynatraceMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"dynatrace\") @EnableConfigurationProperties(DynatraceProperties.class) public class DynatraceMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Dynatrace.\n@ConfigurationProperties(prefix=\"management.dynatrace.metrics.export\") public class DynatraceProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Dynatrace metrics export.\npublic static class DynatraceProperties.V1 extends Object;\npublic static class DynatraceProperties.V2 extends Object;\n", "des": "Support for exporting actuator metrics to Dynatrace."}
{"index": 1137, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: timelineservice\n\nClasses and Interfaces: \nClass ApplicationAttemptEntity; // This entity represents an application attempt.\nClass ApplicationEntity; // This entity represents an application.\nClass ClusterEntity; // This entity represents a YARN cluster.\nClass ContainerEntity; // This entity represents a container belonging to an application attempt.\nClass FlowActivityEntity; // Entity that represents a record for flow activity.\nClass FlowRunEntity; // This entity represents a flow run.\nClass HierarchicalTimelineEntity; // This class extends timeline entity and defines parent-child relationships with other entities.\nClass QueueEntity; // This entity represents a queue.\nClass SubApplicationEntity; // This entity represents a user defined entities to be stored under sub application table.\nClass TimelineDomain; // This class contains the information about a timeline service domain, which is used to a user to host a number of timeline entities, isolating them from others'.\nClass TimelineEntities; // This class hosts a set of timeline entities.\nClass TimelineEntity; // The basic timeline entity data structure for timeline service v2.\nClass TimelineEntity.Identifier; // Identifier of timeline entity(entity id + entity type).\nClass TimelineEvent; // This class contains the information of an event that belongs to an entity.\nClass TimelineMetric; // This class contains the information of a metric that is related to some entity.\nClass TimelineMetricCalculator; // A calculator for timeline metrics.\nClass TimelineWriteResponse; // A class that holds a list of put errors.\nClass TimelineWriteResponse.TimelineWriteError; // A class that holds the error code for one entity.\nClass UserEntity; // This entity represents a user.\nEnum TimelineEntityType; // Defines type of entity.\nEnum TimelineMetric.Type; // Type of metric.\nEnum TimelineMetricOperation; // Aggregation operations.\n", "des": "Package org.apache.hadoop.yarn.api.records.timelineservice contains classes which define the data model for ATSv2."}
{"index": 3172, "repo": "tomcat-api-10.1", "code": "Package: ha\n\nClasses and Interfaces: \nInterface CatalinaCluster; // A CatalinaCluster interface allows to plug in and out the different cluster implementations\nInterface ClusterDeployer; // A ClusterDeployer interface allows to plug in and out the different deployment implementations\nInterface ClusterManager; // The common interface used by all cluster manager.\nInterface ClusterMessage;\nInterface ClusterSession;\nInterface ClusterValve; // Cluster valves are a simple extension to the Tomcat valve architecture with a small addition of being able to reference the cluster component in the container it sits in.\nClass ClusterListener; // Receive SessionID cluster change from other backup node after primary session node is failed.\nClass ClusterMessageBase;\nClass ClusterRuleSet; // RuleSet for processing the contents of a Cluster definition element.\n", "des": "This package contains code for Clustering, the base class of a Cluster is org.apache.catalina.Cluster implementations of this class is done when implementing a new Cluster protocol"}
{"index": 1144, "repo": "commons-math3-3.6.1", "code": "Package: differentiation\n\nClasses and Interfaces: \nInterface MultivariateDifferentiableFunction; // Extension of MultivariateFunction representing a multivariate differentiable real function.\nInterface MultivariateDifferentiableVectorFunction; // Extension of MultivariateVectorFunction representing a multivariate differentiable vectorial function.\nInterface UnivariateDifferentiableFunction; // Interface for univariate functions derivatives.\nInterface UnivariateDifferentiableMatrixFunction; // Extension of UnivariateMatrixFunction representing a univariate differentiable matrix function.\nInterface UnivariateDifferentiableVectorFunction; // Extension of UnivariateVectorFunction representing a univariate differentiable vectorial function.\nInterface UnivariateFunctionDifferentiator; // Interface defining the function differentiation operation.\nInterface UnivariateMatrixFunctionDifferentiator; // Interface defining the function differentiation operation.\nInterface UnivariateVectorFunctionDifferentiator; // Interface defining the function differentiation operation.\nClass DerivativeStructure; // Class representing both the value and the differentials of a function.\nClass DSCompiler; // Class holding \"compiled\" computation rules for derivative structures.\nClass FiniteDifferencesDifferentiator; // Univariate functions differentiator using finite differences.\nClass GradientFunction; // Class representing the gradient of a multivariate function.\nClass JacobianFunction; // Class representing the Jacobian of a multivariate vector function.\nClass SparseGradient; // First derivative computation with large number of variables.\n", "des": "This package holds the main interfaces and basic building block classes dealing with differentiation."}
{"index": 493, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: utils\n\nClasses and Interfaces: \nInterface ByteBuddyUtils.TypeConversionsFactory;\nInterface FieldValueTypeSupplier; // A naming policy for schema fields.\nInterface RowSelector; // A selector interface for extracting fields from a row.\nClass AutoValueUtils; // Utilities for managing AutoValue schemas.\nClass AvroUtils; // Avro related classes are deprecated in module beam-sdks-java-core and will be eventually removed.\nClass AvroUtils.AvroConvertType;\nClass AvroUtils.AvroConvertValueForGetter;\nClass AvroUtils.AvroConvertValueForSetter;\nClass AvroUtils.FixedBytesField; // Wrapper for fixed byte fields.\nClass AvroUtils.TypeWithNullability; // Unwrap an AVRO schema into the base type an whether it is nullable.\nClass ByteBuddyUtils;\nClass ByteBuddyUtils.ConvertType; // Give a Java type, returns the Java type expected for use with Row.\nClass ByteBuddyUtils.ConvertValueForGetter; // Takes a StackManipulation that returns a value.\nClass ByteBuddyUtils.ConvertValueForSetter; // Row is going to call the setter with its internal Java type, however the user object being set might have a different type internally.\nClass ByteBuddyUtils.DefaultTypeConversionsFactory;\nClass ByteBuddyUtils.InjectPackageStrategy; // A naming strategy for ByteBuddy classes.\nClass ByteBuddyUtils.TransformingMap<K1,V1,K2,V2>;\nClass ByteBuddyUtils.TypeConversion<T>;\nClass ConvertHelpers; // Helper functions for converting between equivalent schema types.\nClass ConvertHelpers.ConvertedSchemaInformation<T>; // Return value after converting a schema.\nClass JavaBeanUtils; // A set of utilities to generate getter and setter classes for JavaBean objects.\nClass JsonUtils; // Utils to convert JSON records to Beam Row.\nClass POJOUtils; // A set of utilities to generate getter and setter classes for POJOs.\nClass ReflectUtils; // A set of reflection helper methods.\nClass ReflectUtils.ClassWithSchema; // Represents a class and a schema.\nClass SchemaZipFold<T>; // Visitor that zips schemas, and accepts pairs of fields and their types.\nClass SchemaZipFold.Context; // Context referring to a current position in a schema.\n", "des": "Defines utilities for deailing with schemas."}
{"index": 3674, "repo": "solr-core-9.3.0", "code": "Package: solr\n\nClasses and Interfaces: \nClass SolrReporter; // Implementation of ScheduledReporter that reports metrics from selected registries and sends them periodically as update requests to a selected Solr collection and to a configured handler.\nClass SolrReporter.Builder; // Builder for the SolrReporter class.\nClass SolrReporter.Report; // Specification of what registries and what metrics to send.\n", "des": "This package contains SolrMetricReporter implementations specific to SolrCloud reporting."}
{"index": 3059, "repo": "spring-ws-core-4.0.5", "code": "Package: mime\n\nClasses and Interfaces: \npublic abstract class AbstractMimeMessage extends Object implements MimeMessage; // Abstract implementation of the MimeMessage interface.\npublic interface Attachment; // Represents an attachment to a MimeMessage\npublic class AttachmentException extends WebServiceMessageException; // Exception thrown when a MIME attachment could not be accessed.\npublic interface MimeMessage extends WebServiceMessage; // Represents a Web service message with MIME attachments.\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 859, "repo": "calcite-core-1.34.0", "code": "Package: advise\n\nClasses and Interfaces: \nClass SqlAdvisor; // An assistant which offers hints and corrections to a partially-formed SQL statement.\nClass SqlAdvisor.ValidateErrorInfo; // Text and position info of a validator or parser exception.\nClass SqlAdvisorGetHintsFunction; // Table function that returns completion hints for a given SQL statement.\nClass SqlAdvisorGetHintsFunction2; // Table function that returns completion hints for a given SQL statement.\nClass SqlAdvisorHint; // This class is used to return values for (String, int, String[]).\nClass SqlAdvisorHint2; // This class is used to return values for (String, int, String[]).\nClass SqlAdvisorValidator; // SqlAdvisorValidator is used by SqlAdvisor to traverse the parse tree of a SQL statement, not for validation purpose but for setting up the scopes and namespaces to facilitate retrieval of SQL statement completion hints.\nClass SqlSimpleParser; // A simple parser that takes an incomplete and turn it into a syntactically correct statement.\nClass SqlSimpleParser.IdToken; // Token representing an identifier.\nClass SqlSimpleParser.Token; // Token.\nClass SqlSimpleParser.Tokenizer; // Tokenizer.\n", "des": "Provides hints and corrections for editing SQL statements."}
{"index": 320, "repo": "kafka-clients-3.5.0", "code": "Package: annotation\n\nClasses and Interfaces: \nClass InterfaceStability; // Annotation to inform users of how much to rely on a particular package, class or method not changing over time.\nAnnotation Type InterfaceStability.Evolving; // Compatibility may be broken at minor release (i.e.\nAnnotation Type InterfaceStability.Stable; // Compatibility is maintained in major, minor and patch releases with one exception: compatibility may be broken in a major release (i.e.\nAnnotation Type InterfaceStability.Unstable; // No guarantee is provided as to reliability or stability across any level of release granularity.\n", "des": "Provides annotations used on Kafka APIs."}
{"index": 721, "repo": "commons-codec-1.16.0", "code": "Package: digest\n\nClasses and Interfaces: \nClass Blake3; // Implements the Blake3 algorithm providing a hash function with extensible output (XOF), a keyed hash function (MAC, PRF), and a key derivation function (KDF).\nClass Crypt; // GNU libc crypt(3) compatible hash method.\nClass DigestUtils; // Operations to simplify common MessageDigest tasks.\nClass HmacUtils; // Simplifies common Mac tasks.\nClass Md5Crypt; // The libc crypt() \"$1$\" and Apache \"$apr1$\" MD5-based hash algorithm.\nClass MessageDigestAlgorithms; // Standard MessageDigest algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.\nClass MurmurHash2; // Implementation of the MurmurHash2 32-bit and 64-bit hash functions.\nClass MurmurHash3; // Implementation of the MurmurHash3 32-bit and 128-bit hash functions.\nClass MurmurHash3.IncrementalHash32; // Use IncrementalHash32x86.\nClass MurmurHash3.IncrementalHash32x86; // Generates 32-bit hash from input bytes.\nClass PureJavaCrc32; // A pure-java implementation of the CRC32 checksum that uses the same polynomial as the built-in native CRC32.\nClass PureJavaCrc32C; // A pure-java implementation of the CRC32 checksum that uses the CRC32-C polynomial, the same polynomial used by iSCSI and implemented on many Intel chipsets supporting SSE 4.2.\nClass Sha2Crypt; // SHA2-based Unix crypt implementation.\nClass UnixCrypt; // Unix crypt(3) algorithm implementation.\nClass XXHash32; // Implementation of the xxHash32 hash algorithm.\nEnum HmacAlgorithms; // Standard HmacUtils algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.\n", "des": "Simplifies common MessageDigest tasks and includes a libc crypt(3) compatible crypt method that supports DES, MD5, SHA-256 and SHA-512 based algorithms as well as the Apache specific \"$apr1$\" variant."}
{"index": 1240, "repo": "spring-hateoas-2.1.2", "code": "Package: server\n\nSub Packages: \npackage server.core; // Implementations of core API interfaces.\npackage server.mvc; // Spring MVC helper classes to build Links and assemble RepresentationModel types.\npackage server.reactive; // Spring WebFlux components to build Links and assemble RepresentationModel types.\n\nClasses and Interfaces: \npublic interface EntityLinks extends org.springframework.plugin.core.Plugin<Class<?>>; // Accessor to links pointing to controllers backing an entity type.\n@Inherited @Documented @Retention(RUNTIME) @Target(TYPE) public @interface ExposesResourceFor; // Annotation to demarcate controllers that expose URI templates of a structure according to ControllerEntityLinks.\npublic interface LinkBuilder; // Builder to ease building Link instances.\npublic interface LinkBuilderFactory<T extends LinkBuilder>; // Factory for LinkBuilder instances.\npublic interface LinkRelationProvider extends org.springframework.plugin.core.Plugin<LinkRelationProvider.LookupContext>; // API to provide LinkRelations for collections and items of the given type.\npublic static class LinkRelationProvider.LookupContext extends Object; // LinkRelationProvider selection context for item resource relation lookups (LinkRelationProvider.LookupContext.forItemResourceRelLookup(Class), collection resource relation lookups LinkRelationProvider.LookupContext.forCollectionResourceRelLookup(Class) or both LinkRelationProvider.LookupContext.forType(Class).\npublic interface MethodLinkBuilderFactory<T extends LinkBuilder> extends LinkBuilderFactory<T>; // Extension of LinkBuilderFactory for implementations that also support creating LinkBuilders by pointing to a method.\npublic interface RepresentationModelAssembler<T,D extends RepresentationModel<?>>; // Interface for components that convert a domain type into a RepresentationModel.\npublic interface RepresentationModelProcessor<T extends RepresentationModel<?>>; // SPI interface to allow components to process the RepresentationModel instances returned from Spring MVC controllers.\npublic interface SimpleRepresentationModelAssembler<T> extends RepresentationModelAssembler<T,EntityModel<T>>; // A RepresentationModelAssembler based purely on the domain type, using EntityRepresentationModel<T> as the enclosing representation model type.\npublic class TypedEntityLinks<T> extends Object; // Entity links API to create Links and LinkBuilder instances based on an identifier function.\n", "des": "Server-side components for hypermedia handling."}
{"index": 3848, "repo": "lucene-core-9.7.0", "code": "Package: search\n\nSub Packages: \npackage search.comparators; // Comparators, used to compare hits so as to determine their sort order when collecting the top results with TopFieldCollector.\npackage search.similarities; // This package contains the various ranking models that can be used in Lucene.\n\nClasses and Interfaces: \nInterface BoostAttribute; // Add this Attribute to a TermsEnum returned by MultiTermQuery.getTermsEnum(Terms,AttributeSource) and update the boost on each returned term.\nInterface Collector; // Expert: Collectors are primarily meant to be used to gather raw results from a search, and implement sorting or custom result filtering, collation, etc.\nInterface CollectorManager<C extends Collector,​T>; // A manager of collectors.\nInterface LeafCollector; // Collector decouples the score from the collected doc: the score computation is skipped entirely if it's not needed.\nInterface LeafFieldComparator; // Expert: comparator that gets instantiated on each leaf from a top-level FieldComparator instance.\nInterface Matches; // Reports the positions and optionally offsets of all matching terms in a query for a single document\nInterface MatchesIterator; // An iterator over match positions (and optionally offsets) for a single document and field\nInterface MaxNonCompetitiveBoostAttribute; // Add this Attribute to a fresh AttributeSource before calling MultiTermQuery.getTermsEnum(Terms,AttributeSource).\nInterface QueryCache; // A cache for queries.\nInterface QueryCachingPolicy; // A policy defining which filters should be cached.\nInterface ReferenceManager.RefreshListener; // Use to receive notification when a refresh has finished.\nInterface SearcherLifetimeManager.Pruner; // See SearcherLifetimeManager.prune(org.apache.lucene.search.SearcherLifetimeManager.Pruner).\nInterface SegmentCacheable; // Interface defining whether or not an object can be cached against a LeafReader\nClass AutomatonQuery; // A Query that will match terms against a finite-state machine.\nClass BlendedTermQuery; // A Query that blends index statistics across multiple terms.\nClass BlendedTermQuery.Builder; // A Builder for BlendedTermQuery.\nClass BlendedTermQuery.DisjunctionMaxRewrite; // A BlendedTermQuery.RewriteMethod that creates a DisjunctionMaxQuery out of the sub queries.\n", "des": "Code to search indices."}
{"index": 1622, "repo": "spring-kafka-3.0.9", "code": "Package: aot\n\nClasses and Interfaces: \npublic class KafkaAvroBeanRegistrationAotProcessor extends Object implements org.springframework.beans.factory.aot.BeanRegistrationAotProcessor; // Detect and register Avro types for Apache Kafka listeners.\npublic class KafkaRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // RuntimeHintsRegistrar for Spring for Apache Kafka.\n", "des": "Provides classes to support Spring AOT."}
{"index": 1756, "repo": "spring-data-mongodb-4.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.event; // Mapping event callback infrastructure for the MongoDB document-to-object mapping subsystem.\n\nClasses and Interfaces: \npublic class BasicMongoPersistentEntity<T> extends BasicPersistentEntity<T,MongoPersistentProperty> implements MongoPersistentEntity<T>; // MongoDB specific MongoPersistentEntity implementation that adds Mongo specific meta-data such as the collection name and the like.\npublic class BasicMongoPersistentProperty extends AnnotationBasedPersistentProperty<MongoPersistentProperty> implements MongoPersistentProperty; // MongoDB specific PersistentProperty implementation.\npublic class CachingMongoPersistentProperty extends BasicMongoPersistentProperty; // MongoPersistentProperty caching access to CachingMongoPersistentProperty.isIdProperty() and CachingMongoPersistentProperty.getFieldName().\n@Documented @Retention(RUNTIME) @Target(FIELD) public @interface DBRef; // An annotation that indicates the annotated field is to be stored using a DBRef.\n@Inherited @Retention(RUNTIME) @Target(TYPE) public @interface Document; // Identifies a domain object to be persisted to MongoDB.\n@FunctionalInterface public interface DocumentPointer<T>; // A custom pointer to a linked document to be used along with DocumentReference for storing the linkage value.\n@Documented @Retention(RUNTIME) @Target(FIELD) public @interface DocumentReference; // A DocumentReference allows referencing entities in MongoDB using a flexible schema.\n@Documented @Retention(RUNTIME) @Target({TYPE,FIELD}) public @interface Encrypted; // Encrypted provides data required for MongoDB Client Side Field Level Encryption that is applied during schema resolution.\n@Retention(RUNTIME) @Target(FIELD) @Encrypted @ValueConverter public @interface ExplicitEncrypted; // ExplicitEncrypted is a field level ValueConverter annotation that indicates the target element is subject to encryption during the mapping process, in which a given domain type is converted into the store specific format.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface Field; // Annotation to define custom metadata for document fields.\npublic static enum Field.Write extends Enum<Field.Write>; // Enumeration of write strategies to define when a property is included for write conversion.\npublic enum FieldType extends Enum<FieldType>; // Enumeration of field value types that can be used to represent a Document field value.\n", "des": "Infrastructure for the MongoDB document-to-object mapping subsystem."}
{"index": 977, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: callback\n\nClasses and Interfaces: \nClass AbstractWsPasswordCallbackHandler; // Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.\nClass KeyStoreCallbackHandler; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\nClass SimplePasswordValidationCallbackHandler; // Simple callback handler that validates passwords against a in-memory Properties object.\nClass SpringSecurityPasswordValidationCallbackHandler; // Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.\nClass UsernameTokenPrincipalCallback; // Underlying security services instantiate and pass a UsernameTokenPrincipalCallback to the handle method of a CallbackHandler to pass a security WSUsernameTokenPrincipal.\n", "des": "Contains CallbackHandler implementations for WSS4J 2.0."}
{"index": 749, "repo": "ignite-indexing-2.15.0", "code": "Package: dml\n\nClasses and Interfaces: \nInterface DmlArgument; // DML argument\nInterface KeyValueSupplier; // Method to construct new instances of keys and values on SQL MERGE and INSERT, as well as to build new values during UPDATE - a function that takes a row selected from DB and then transforms it into new object.\nClass DmlArguments; // DML arguments factory.\nClass DmlAstUtils; // AST utils for DML\nClass DmlBatchSender; // Batch sender class.\nClass DmlBulkLoadDataConverter; // Converts a row of values to actual key+value using UpdatePlan.processRow(List).\nClass DmlDistributedPlanInfo; // Additional information about distributed update plan.\nClass DmlDistributedUpdateRun; // Context for DML operation on reducer node.\nClass DmlPageProcessingErrorResult; // Result of splitting keys whose processing resulted into an exception from those skipped by logic of EntryProcessors (most likely INSERT duplicates, or UPDATE/DELETE keys whose values had been modified concurrently), counting and collecting entry processor exceptions.\nClass DmlPageProcessingResult; // Result of processing an individual page with IgniteCache.invokeAll(java.util.Map<? extends K, ? extends javax.cache.processor.EntryProcessor<K, V, T>>, java.lang.Object...) including error details, if any.\nClass DmlUpdateResultsIterator; // DML update results iterator.\nClass DmlUpdateSingleEntryIterator<T>;\nClass DmlUtils; // DML utility methods.\nClass FastUpdate; // Arguments for fast, query-less UPDATE or DELETE - key and, optionally, value and new value.\nClass UpdatePlan; // Update plan - where to take data to update cache from and how to construct new keys and values, if needed.\nClass UpdatePlanBuilder; // Logic for building update plans performed by DmlStatementsProcessor.\nEnum UpdateMode; // DML statement execution plan type - MERGE/INSERT from rows or subquery, or UPDATE/DELETE from subquery or literals/params based.\n", "des": "Contains routines for executing DML statements on top of H2."}
{"index": 968, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass AxiomUtils; // Collection of generic utility methods to work with Axiom.\n", "des": "Support classes for working with the AXis Object Model (AXIOM)."}
{"index": 941, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass WebServiceGatewaySupport; // Convenient super class for application classes that need Web service access.\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 561, "repo": "hadoop-common-3.3.4", "code": "Package: avro\n\nClasses and Interfaces: \nInterface AvroReflectSerializable; // Tag interface for Avro 'reflect' serializable classes.\nClass AvroRecord;\nClass AvroRecord.Builder; // RecordBuilder for AvroRecord instances.\nClass AvroReflectSerialization; // Serialization for Avro Reflect classes.\nClass AvroSerialization<T>; // Base class for providing serialization to Avro types.\nClass AvroSpecificSerialization; // Serialization for Avro Specific classes.\n", "des": "This package provides Avro serialization in Hadoop."}
{"index": 2395, "repo": "spring-batch-core-5.0.2", "code": "Package: listener\n\nClasses and Interfaces: \npublic abstract class AbstractListenerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.InitializingBean; // FactoryBean implementation that builds a listener based on the various lifecycle methods or annotations that are provided.\n@Deprecated public class ChunkListenerSupport extends Object implements ChunkListener;\npublic class CompositeChunkListener extends Object implements ChunkListener;\npublic class CompositeItemProcessListener<T,S> extends Object implements ItemProcessListener<T,S>;\npublic class CompositeItemReadListener<T> extends Object implements ItemReadListener<T>;\npublic class CompositeItemWriteListener<S> extends Object implements ItemWriteListener<S>;\npublic class CompositeJobExecutionListener extends Object implements JobExecutionListener;\npublic class CompositeSkipListener<T,S> extends Object implements SkipListener<T,S>;\npublic class CompositeStepExecutionListener extends Object implements StepExecutionListener;\npublic class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean; // This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step.\npublic class ItemListenerSupport<I,O> extends Object implements ItemReadListener<I>, ItemProcessListener<I,O>, ItemWriteListener<O>; // Basic no-op implementation of the ItemReadListener, ItemProcessListener, and ItemWriteListener interfaces.\n@Deprecated public class JobExecutionListenerSupport extends Object implements JobExecutionListener;\npublic class JobListenerFactoryBean extends AbstractListenerFactoryBean<JobExecutionListener>; // This AbstractListenerFactoryBean implementation is used to create a JobExecutionListener.\npublic enum JobListenerMetaData extends Enum<JobListenerMetaData> implements ListenerMetaData; // Enumeration for JobExecutionListener meta data, which ties together the names of methods, their interfaces, annotation, and expected arguments.\npublic class JobParameterExecutionContextCopyListener extends Object implements StepExecutionListener; // This class can be used to automatically copy items from the JobParameters to the Step ExecutionContext.\npublic interface ListenerMetaData; // A common interface for listener meta data enumerations.\n", "des": "Generic implementations of core batch listener interfaces."}
{"index": 3329, "repo": "opencms-core-15.0", "code": "Package: logfile\n\nClasses and Interfaces: \nInterface I_CmsLogDownloadProvider; // Provides log file download functionality.\nClass CmsDefaultLogDownloadProvider; // Default implementation for the log download functionality.\nClass CmsLogChannelTable; // Class for table to display and edit Log channels.\nClass CmsLogDownloadDialog; // Class for the Download dialog.\nClass CmsLogDownloadDialog.ZipGenerator; // Helper class for generating the zip file for the log download.\nClass CmsLogFileApp; // Main class of Log management app.\nClass CmsLogFileConfiguration; // Configuration class for Log management app.\nClass CmsLogFileOptionProvider; // Provides log files which should be available as options in the OpenCms log file viewer.\nClass CmsLogFileView; // Class for the view of log files.\nClass CmsLogFileViewSettings; // Class for the log file view settings dialog.\n", "des": "Contains classes of the site manager app."}
{"index": 2937, "repo": "groovy-4.0.13", "code": "Package: wrappers\n\nClasses and Interfaces: \npublic class BooleanWrapper extends PojoWrapper;\npublic class ByteWrapper extends PojoWrapper;\npublic class CharWrapper extends PojoWrapper;\npublic class DoubleWrapper extends PojoWrapper;\npublic class FloatWrapper extends PojoWrapper;\npublic class GroovyObjectWrapper extends Wrapper;\npublic class IntWrapper extends PojoWrapper;\npublic class LongWrapper extends PojoWrapper;\npublic class PojoWrapper extends Wrapper;\npublic class ShortWrapper extends PojoWrapper;\npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 62, "repo": "ignite-core-2.15.0", "code": "Package: socket\n\nClasses and Interfaces: \nInterface SocketMessageConverter<T>; // Socket message converter.\nClass SocketStreamer<T,K,V>; // Server that receives data from TCP socket, converts it to key-value pairs using StreamTupleExtractor and streams into IgniteDataStreamer instance.\n", "des": "Contains socket streamer implementation."}
{"index": 442, "repo": "hbase-client-3.0.0-alpha-4", "code": "Package: protobuf\n\nClasses and Interfaces: \nClass ProtobufMagic; // Protobufs utility.\nClass ProtobufMessageConverter; // This class converts PB Messages to various representations, like: JSON string: ProtobufMessageConverter.toJsonElement(MessageOrBuilder) JSON object (gson): ProtobufMessageConverter.toJsonElement(MessageOrBuilder) Java objects (Boolean, Number, String, List, Map): ProtobufMessageConverter.toJavaObject(JsonElement)\n", "des": "Holds classes generated from protobuf src/main/protobuf definition files."}
{"index": 3356, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsContextMenuClientRpc; // Server to client RPC communication.\nInterface I_CmsContextMenuServerRpc; // The context menu server RPC.\nInterface I_CmsEditableGroupButtonsServerRpc; // Interface for the server side RPC for the CmsEditableGroupButtons component.\nInterface I_CmsEditorStateRPC; // Editor state RPCs\nInterface I_CmsEmbeddedDialogClientRPC; // Client RPC to handle embedded dialogs.\nInterface I_CmsEmbeddingServerRpc; // Client-to-server RPC for embedding Vaadin dialogs in GWT.\nInterface I_CmsGwtContextMenuServerRpc; // Server side RPC interface for the GWT based context menu buttons.\nInterface I_CmsJSPBrowserFrameRpc; // Rpc -interface for handling results from JSP displayed on an extended BrowserFrame.\nInterface I_CmsMaxHeightServerRpc; // The max height server interface.\nInterface I_CmsPollServerRpc; // The max height server interface.\nInterface I_CmsPrincipalSelectRpc; // The principal select RPC service.\nInterface I_CmsPropertyClientRpc; // Server-to-client Interface for the GWT dialog extension.\nInterface I_CmsPropertyServerRpc; // Client-to-server rpc interface for the GWT dialog extension.\nInterface I_CmsReportClientRpc; // Client RPC interface for the report widget.\nInterface I_CmsReportServerRpc; // Server RPC interface for the report widget.\nInterface I_CmsSitemapClientRpc; // Interface for the server-to-client RPC calls used by the sitemap extension.\nInterface I_CmsSitemapServerRpc; // Interface for the client-to-server rpc calls used by the sitemap extension.\nInterface I_CmsUploadRpc; // The upload RPC interface.\nInterface I_CmsWindowClientRpc; // Server-to-client RPC for CmsWindowExtension.\nInterface I_CmsWindowCloseServerRpc; // Handles window close calls.\nInterface I_CmsWindowServerRpc; // Client-to-server RPC interface for CmsWindowExtension.\n", "des": "Contains Vaadin RPC interfaces."}
{"index": 2904, "repo": "spring-aspects-6.0.11", "code": "Package: aspectj\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(SpringConfiguredConfiguration.class) public @interface EnableSpringConfigured; // Signals the current application context to apply dependency injection to non-managed classes that are instantiated outside the Spring bean factory (typically classes annotated with the @Configurable annotation).\n@Configuration public class SpringConfiguredConfiguration extends Object; // @Configuration class that registers an AnnotationBeanConfigurerAspect capable of performing dependency injection services for non-Spring managed objects annotated with @Configurable.\n", "des": "AspectJ-based dependency injection support driven by the @Configurable annotation."}
{"index": 1531, "repo": "spring-context-6.0.11", "code": "Package: export\n\nSub Packages: \npackage export.annotation; // Annotations for MBean exposure.\npackage export.assembler; // Provides a strategy for MBeanInfo assembly.\npackage export.metadata; // Provides generic JMX metadata classes and basic support for reading JMX metadata in a provider-agnostic manner.\npackage export.naming; // Provides a strategy for ObjectName creation.\npackage export.notification; // Provides supporting infrastructure to allow Spring-created MBeans to send JMX notifications.\n\nClasses and Interfaces: \npublic class MBeanExporter extends MBeanRegistrationSupport implements MBeanExportOperations, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.beans.factory.DisposableBean; // JMX exporter that allows for exposing any Spring-managed bean to a JMX MBeanServer, without the need to define any JMX-specific information in the bean classes.\npublic interface MBeanExporterListener; // A listener that allows application code to be notified when an MBean is registered and unregistered via an MBeanExporter.\npublic class MBeanExportException extends JmxException; // Exception thrown in case of failure when exporting an MBean.\npublic interface MBeanExportOperations; // Interface that defines the set of MBean export operations that are intended to be accessed by application developers during application runtime.\npublic class NotificationListenerBean extends NotificationListenerHolder implements org.springframework.beans.factory.InitializingBean; // Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object.\npublic class SpringModelMBean extends RequiredModelMBean; // Extension of the RequiredModelMBean class that ensures the thread context ClassLoader is switched for the managed resource's ClassLoader before any invocations occur.\npublic class UnableToRegisterMBeanException extends MBeanExportException; // Exception thrown when we are unable to register an MBean, for example because of a naming conflict.\n", "des": "This package provides declarative creation and registration of Spring-managed beans as JMX MBeans."}
{"index": 82, "repo": "ignite-core-2.15.0", "code": "Package: weightedrandom\n\nClasses and Interfaces: \nInterface WeightedRandomLoadBalancingSpiMBean; // Management MBean for WeightedRandomLoadBalancingSpi SPI.\nClass WeightedRandomLoadBalancingSpi; // Load balancing SPI that picks a random node for job execution.\n", "des": "Contains weighted random-base implementation for load balancing SPI."}
{"index": 940, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: core\n\nSub Packages: \npackage core.support; // Convenient super class for application classes that need Web service access.\n\nClasses and Interfaces: \nInterface FaultMessageResolver; // Defines the interface for objects than can resolve fault WebServiceMessages.\nInterface SourceExtractor<T>; // Callback interface for extracting a result object from a Source instance.\nInterface WebServiceMessageCallback; // Generic callback interface for code that operates on a WebServiceMessage.\nInterface WebServiceMessageExtractor<T>; // Callback interface for extracting a result object from a WebServiceMessage instance.\nInterface WebServiceOperations; // Specifies a basic set of Web service operations.\nClass SimpleFaultMessageResolver; // Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\nClass WebServiceTemplate; // The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 2748, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: listener\n\nClasses and Interfaces: \npublic class CompositeRepeatListener extends Object implements RepeatListener; // Allows a user to register one or more RepeatListeners to be notified on batch events.\n@Deprecated public class RepeatListenerSupport extends Object implements RepeatListener;\n", "des": "Infrastructure implementations of repeat interceptor concerns."}
{"index": 1322, "repo": "groovy-all-4.0.13", "code": "Package: binding\n\nClasses and Interfaces: \npublic abstract class AbstractFullBinding extends Object implements FullBinding;\npublic class AggregateBinding extends Object implements BindingUpdatable; // An aggregation of multiple bindings\npublic class BindingProxy extends GroovyObjectSupport implements BindingUpdatable; // This class returns half bound FullBindings on the source half to the model object for every property reference (and I do mean every, valid or not, queried before or not).\npublic interface BindingUpdatable;\npublic class BindPath extends Object; // The bind path object.\npublic class ClosureSourceBinding extends Object implements SourceBinding;\npublic class ClosureTriggerBinding extends Object implements TriggerBinding, SourceBinding;\npublic class EventTriggerBinding extends Object implements TriggerBinding;\npublic interface FullBinding extends BindingUpdatable;\npublic class MutualPropertyBinding extends Object implements FullBinding;\npublic class PropertyBinding extends Object implements SourceBinding, TargetBinding, TriggerBinding;\npublic static enum PropertyBinding.UpdateStrategy extends Enum<PropertyBinding.UpdateStrategy>;\npublic class PropertyChangeProxyTargetBinding extends Object implements TargetBinding;\npublic class PropertyPathFullBinding extends AbstractFullBinding implements PropertyChangeListener; // A property path full binding\npublic interface SourceBinding;\npublic class SwingTimerTriggerBinding extends Object implements TriggerBinding;\npublic interface TargetBinding;\npublic interface TriggerBinding;\n", "des": "Classes related to property binding."}
{"index": 3694, "repo": "solr-core-9.3.0", "code": "Package: distributed\n\nSub Packages: \npackage distributed.command; // Internal classes used to implement distributed result grouping\npackage distributed.requestfactory; // Internal classes used to implement distributed result grouping\npackage distributed.responseprocessor; // Internal classes used to implement distributed result grouping\npackage distributed.shardresultserializer; // Internal classes used to implement distributed result grouping\n\nClasses and Interfaces: \nInterface ShardRequestFactory; // Responsible for creating shard requests to the shards in the cluster to perform distributed grouping.\nInterface ShardResponseProcessor; // Responsible for processing shard responses.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 2071, "repo": "spring-webmvc-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \npublic interface ModelAndViewResolver; // SPI for resolving custom return values from a specific handler method.\npublic class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements org.springframework.context.MessageSourceAware; // A HandlerExceptionResolver that uses the @ResponseStatus annotation to map exceptions to HTTP status codes.\n", "des": "Support package for annotation-based Servlet MVC controllers."}
{"index": 204, "repo": "nutch-2.4", "code": "Package: host\n\nClasses and Interfaces: \nClass HostDb; // A caching wrapper for the host datastore.\nClass HostDbReader; // Display entries from the hostDB.\nClass HostDbUpdateJob; // Scans the web table and create host entries for each unique host.\nClass HostDbUpdateJob.Mapper; // Maps each WebPage to a host key.\nClass HostDbUpdateReducer; // Combines all WebPages with the same host key to create a Host object, with some statistics.\nClass HostInjectorJob; // Creates or updates an existing host table from a text file. The files contain one host name per line, optionally followed by custom metadata separated by tabs with the metadata key is separated from the corresponding value by '='.\nClass HostInjectorJob.UrlMapper;\n", "des": "Host database to store metadata per host."}
{"index": 1334, "repo": "groovy-all-4.0.13", "code": "Package: messages\n\nClasses and Interfaces: \npublic class ExceptionMessage extends Message; // A class for error messages produced by the parser system.\npublic class LocatedMessage extends SimpleMessage; // A base class for compilation messages.\npublic abstract class Message extends Object; // A base class for compilation messages.\npublic class SimpleMessage extends Message; // A base class for compilation messages.\npublic class SyntaxErrorMessage extends Message; // A class for error messages produced by the parser system.\npublic class WarningMessage extends LocatedMessage; // A class for warning messages.\n", "des": "Error message classes."}
{"index": 1628, "repo": "spring-kafka-3.0.9", "code": "Package: adapter\n\nClasses and Interfaces: \npublic abstract class AbstractDelegatingMessageListenerAdapter<T> extends Object implements ConsumerSeekAware, DelegatingMessageListener<T>; // Top level class for all listener adapters.\npublic abstract class AbstractFilteringMessageListener<K,V,T> extends AbstractDelegatingMessageListenerAdapter<T>; // An abstract message listener adapter that implements record filter logic via a RecordFilterStrategy.\npublic abstract class AbstractRetryingMessageListenerAdapter<K,V,T> extends AbstractDelegatingMessageListenerAdapter<T>; // Base class for retrying message listener adapters.\npublic final class AdapterUtils extends Object; // Utilities for listener adapters.\npublic class BatchMessagingMessageListenerAdapter<K,V> extends MessagingMessageListenerAdapter<K,V> implements BatchAcknowledgingConsumerAwareMessageListener<K,V>; // A MessageListener adapter that invokes a configurable HandlerAdapter; used when the factory is configured for the listener to receive batches of messages.\n@FunctionalInterface public interface BatchToRecordAdapter<K,V>; // An adapter that adapts a batch listener to a record listener method.\n@FunctionalInterface public static interface BatchToRecordAdapter.Callback<K,V>; // A callback for each message.\npublic class ConsumerRecordMetadata extends Object; // Used to provide a listener method argument when the user supplies such a parameter.\npublic class ConvertingMessageListener<V> extends Object implements DelegatingMessageListener<MessageListener>, AcknowledgingConsumerAwareMessageListener<Object,Object>; // A AcknowledgingConsumerAwareMessageListener adapter that implements converting received ConsumerRecord using specified MessageConverter and then passes result to specified MessageListener.\npublic class DefaultBatchToRecordAdapter<K,V> extends Object implements BatchToRecordAdapter<K,V>; // The default BatchToRecordAdapter implementation; if the supplied recoverer throws an exception, the batch will be aborted; otherwise the next record will be processed.\npublic class DelegatingInvocableHandler extends Object; // Delegates to an InvocableHandlerMethod based on the message payload type.\npublic class FilteringBatchMessageListenerAdapter<K,V> extends AbstractFilteringMessageListener<K,V,BatchMessageListener<K,V>> implements BatchAcknowledgingConsumerAwareMessageListener<K,V>; // A BatchMessageListener adapter that implements filter logic via a RecordFilterStrategy.\n", "des": "Provides classes for adapting listeners."}
{"index": 1463, "repo": "spring-data-redis-3.1.2", "code": "Package: core\n\nClasses and Interfaces: \npublic class MappingRedisEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements RedisEntityInformation<T,ID>; // RedisEntityInformation implementation using a RedisPersistentEntity instance to lookup the necessary information.\npublic interface RedisEntityInformation<T,ID> extends EntityInformation<T,ID>;\n", "des": "Core domain entities for repository support."}
{"index": 1211, "repo": "commons-math3-3.6.1", "code": "Package: inference\n\nClasses and Interfaces: \nClass BinomialTest; // Implements binomial test statistics.\nClass ChiSquareTest; // Implements Chi-Square test statistics.\nClass GTest; // Implements G Test statistics.\nClass KolmogorovSmirnovTest; // Implementation of the Kolmogorov-Smirnov (K-S) test for equality of continuous distributions.\nClass MannWhitneyUTest; // An implementation of the Mann-Whitney U test (also called Wilcoxon rank-sum test).\nClass OneWayAnova; // Implements one-way ANOVA (analysis of variance) statistics.\nClass TestUtils; // A collection of static methods to create inference test instances or to perform inference tests.\nClass TTest; // An implementation for Student's t-tests.\nClass WilcoxonSignedRankTest; // An implementation of the Wilcoxon signed-rank test.\nEnum AlternativeHypothesis; // Represents an alternative hypothesis for a hypothesis test.\n", "des": "Classes providing hypothesis testing."}
{"index": 2448, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: mail\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration.class) @ConditionalOnClass(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnBean(org.springframework.mail.javamail.JavaMailSenderImpl.class) @ConditionalOnEnabledHealthIndicator(\"mail\") public class MailHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.mail.MailHealthIndicator,org.springframework.mail.javamail.JavaMailSenderImpl>; // Auto-configuration for MailHealthIndicator.\n", "des": "Auto-configuration for actuator JavaMail concerns."}
{"index": 1236, "repo": "spring-hateoas-2.1.2", "code": "Package: html\n\nClasses and Interfaces: \npublic class HtmlInputType extends Object; // The types of HTML <input … /> elements.\n", "des": "Support for HTML media type."}
{"index": 3572, "repo": "lucene-sandbox-9.7.0", "code": "Package: payloads\n\nClasses and Interfaces: \nClass PayloadSpanCollector; // SpanCollector for collecting payloads\nClass PayloadSpanUtil; // Experimental class to get set of payloads for most standard Lucene queries.\n", "des": "Experimental classes for interacting with payloads"}
{"index": 825, "repo": "calcite-core-1.34.0", "code": "Package: impl\n\nClasses and Interfaces: \nClass AggAddContextImpl; // Implementation of AggAddContext.\nClass AggResetContextImpl; // Implementation of AggResetContext.\nClass AggResultContextImpl; // Implementation of AggResultContext.\nClass WinAggAddContextImpl; // Implementation of WinAggAddContext.\nClass WinAggResetContextImpl; // Implementation of WinAggResetContext.\nClass WinAggResultContextImpl; // Implementation of WinAggResultContext.\n", "des": "Calcite-specific classes for implementation of regular and window aggregates."}
{"index": 1670, "repo": "spring-boot-cli-3.1.1", "code": "Package: encodepassword\n\nClasses and Interfaces: \npublic class EncodePasswordCommand extends OptionParsingCommand; // Command to encode passwords for use with Spring Security.\n", "des": "CLI command for password encoding."}
{"index": 1310, "repo": "groovy-all-4.0.13", "code": "Package: binding\n\nClasses and Interfaces: \npublic class AbstractButtonProperties extends Object;\npublic abstract class AbstractSyntheticBinding extends AbstractFullBinding;\npublic class JComboBoxProperties extends Object;\npublic class JComponentProperties extends Object;\npublic class JScrollBarProperties extends Object;\npublic class JSliderProperties extends Object;\npublic class JSpinnerProperties extends Object;\npublic class JTableProperties extends Object;\npublic class JTextComponentProperties extends Object;\n", "des": "Binding classes for SwingBuilder"}
{"index": 3071, "repo": "spring-ws-core-4.0.5", "code": "Package: jaxb\n\nClasses and Interfaces: \npublic class XmlRootElementEndpointMapping extends AbstractAnnotationMethodEndpointMapping<QName>; // Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.\n", "des": "Provides JAXB2-based EndpointMapping implementations."}
{"index": 3535, "repo": "opennlp-tools-2.2.0", "code": "Package: naivebayes\n\nClasses and Interfaces: \nClass BinaryNaiveBayesModelReader; // A NaiveBayesModelReader that reads models from a binary format.\nClass BinaryNaiveBayesModelWriter; // A NaiveBayesModelWriter that writes models in a binary format.\nClass LogProbabilities<T>; // Class implementing the probability distribution over labels returned by a classifier as a log of probabilities.\nClass LogProbability<T>; // A class implementing the logarithmic Probability for a label.\nClass NaiveBayesEvalParameters; // Specialized parameters for the evaluation of a naive bayes classifier\nClass NaiveBayesModel; // A MaxentModel implementation of the multinomial Naive Bayes classifier model.\nClass NaiveBayesModelReader; // The base class for readers of models.\nClass NaiveBayesModelWriter; // The base class for NaiveBayesModel writers.\nClass NaiveBayesTrainer; // Trains models using the combination of EM algorithm and Naive Bayes classifier which is described in:\nClass PlainTextNaiveBayesModelReader; // A NaiveBayesModelReader that reads models from a plain text format.\nClass PlainTextNaiveBayesModelWriter; // A NaiveBayesModelWriter that writes models in a plain text format.\nClass Probabilities<T>; // Class implementing the probability distribution over labels returned by a classifier.\nClass Probability<T>; // Class implementing the probability for a label.\n", "des": "Package related to ML by means of the Naive Bayes algorithm."}
{"index": 3531, "repo": "opennlp-tools-2.2.0", "code": "Package: maxent\n\nSub Packages: \npackage maxent.io; // Package related to the I/O functionality of the maxent package including reading and writing models in several formats.\npackage maxent.quasinewton; // Package related to ML by means of the Quasi Newton (QN) algorithm.\n\nClasses and Interfaces: \nInterface ContextGenerator<T>; // Represents a generator of contexts for maxent decisions.\nInterface DataStream; // An interface for objects which can deliver a stream of training data to be supplied to an EventStream.\nClass BasicContextGenerator; // A ContextGenerator implementation for maxent decisions, assuming that the input given to the BasicContextGenerator.getContext(String) method is a String containing contextual predicates separated by spaces, for instance:\nClass GISModel; // A maximum entropy model which has been trained using the Generalized Iterative Scaling (GIS) procedure.\nClass GISTrainer; // An implementation of Generalized Iterative Scaling (GIS).\nClass RealBasicEventStream; // Class for real-valued events as an event stream.\n", "des": "Package related to ML by means of the Maximum Entropy (ME) algorithm."}
{"index": 2229, "repo": "spring-data-commons-3.1.2", "code": "Package: transaction\n\nClasses and Interfaces: \n@Deprecated public class ChainedTransactionManager extends Object implements PlatformTransactionManager;\n", "des": "Contains advanced support for transactions, e.g. a best-effort delegating transaction manager."}
{"index": 2257, "repo": "spring-vault-core-3.0.4", "code": "Package: authentication\n\nSub Packages: \npackage authentication.event; // Support classes for authentication application events.\n\nClasses and Interfaces: \n@Deprecated(since=\"2.2\", forRemoval=true) public class AppIdAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory;\n@Deprecated(since=\"2.2\", forRemoval=true) public class AppIdAuthenticationOptions extends Object;\npublic static class AppIdAuthenticationOptions.AppIdAuthenticationOptionsBuilder extends Object; // Builder for AppIdAuthenticationOptions.\n@Deprecated(since=\"2.2\", forRemoval=true) @FunctionalInterface public interface AppIdUserIdMechanism;\npublic class AppRoleAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory; // AppRole implementation of ClientAuthentication.\npublic class AppRoleAuthenticationOptions extends Object; // Authentication options for AppRoleAuthentication.\npublic static class AppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder extends Object; // Builder for AppRoleAuthenticationOptions.\npublic static interface AppRoleAuthenticationOptions.RoleId; // RoleId type encapsulating how the roleId is actually obtained.\npublic static interface AppRoleAuthenticationOptions.SecretId; // SecretId type encapsulating how the secretId is actually obtained.\npublic abstract class AuthenticationEventPublisher extends Object; // Publisher for AuthenticationEvents.\npublic class AuthenticationSteps extends Object; // Authentication DSL allowing flow composition to create a VaultToken.\npublic static class AuthenticationSteps.HttpRequest<T> extends Object; // Value object representing a HTTP request.\npublic static class AuthenticationSteps.HttpRequestBuilder extends Object; // Builder for AuthenticationSteps.HttpRequest.\npublic static class AuthenticationSteps.Node<T> extends Object; // Intermediate authentication step with authentication flow operators represented as node.\npublic static class AuthenticationSteps.Pair<L,R> extends Object; // A tuple of two things.\npublic class AuthenticationStepsExecutor extends Object implements ClientAuthentication; // Synchronous executor for AuthenticationSteps using RestOperations to login using authentication flows.\n@FunctionalInterface public interface AuthenticationStepsFactory; // Factory interface for components that create AuthenticationSteps.\npublic class AuthenticationStepsOperator extends Object implements VaultTokenSupplier; // VaultTokenSupplier using AuthenticationSteps to create an authentication flow emitting VaultToken.\npublic class AwsEc2Authentication extends Object implements ClientAuthentication, AuthenticationStepsFactory; // AWS-EC2 login implementation.\npublic class AwsEc2AuthenticationOptions extends Object; // Authentication options for AwsEc2Authentication.\n", "des": "Support for authentication and session management."}
{"index": 3420, "repo": "gremlin-core-3.6.4", "code": "Package: shaded\n\nClasses and Interfaces: \nClass ShadedInputAdapter;\nClass ShadedKryoAdapter;\nClass ShadedOutputAdapter;\nClass ShadedSerializerAdapter<T>;\n", "des": "Implementations of the interfaces in org.apache.tinkerpop.gremlin.structure.io.gryo.kryoshim using TinkerPop's shaded copy of Kryo."}
{"index": 3493, "repo": "poi-5.2.3", "code": "Package: record\n\nSub Packages: \npackage record.aggregates; // The record aggregates are not real \"records\" but collections of records that act as a single record.\n\nClasses and Interfaces: \nInterface BiffHeaderInput;\nInterface CellValueRecordInterface; // The cell value record interface is implemented by all classes of type Record that contain cell values.\nInterface CFRuleBase.ComparisonOperator;\nInterface HSSFRecordTypes.RecordConstructor<T extends Record>;\nInterface Margin; // The margin interface is a parent used to define left, right, top and bottom margins.\nInterface SubRecord.SubRecordTypes.RecordConstructor<T extends SubRecord>;\nClass AbstractEscherHolderRecord; // The escher container record is used to hold escher records.\nClass ArrayRecord; // ARRAY (0x0221)\nClass AutoFilterInfoRecord; // The AutoFilterInfo record specifies the number of columns that have AutoFilter enabled and indicates the beginning of the collection of AutoFilter records.\nClass BackupRecord; // Boolean specifying whether the GUI should store a backup of the file.\nClass BlankRecord; // Represents a column in a row with no value but with styling.\nClass BOFRecord; // Somewhat of a misnomer, its used for the beginning of a set of records that have a particular purpose or subject.\nClass BookBoolRecord; // Contains a flag specifying whether the Gui should save externally linked values from other workbooks.\nClass BoolErrRecord; // Creates new BoolErrRecord.\nClass BottomMarginRecord; // Record for the bottom margin.\nClass BoundSheetRecord; // Defines a sheet within a workbook.\nClass CalcCountRecord; // Specifies the maximum times the gui should perform a formula recalculation.\nClass CalcModeRecord; // Tells the gui whether to calculate formulas automatically, manually or automatically except for tables.\nClass CellRecord; // Base class for all cell value records (implementors of CellValueRecordInterface).\nClass CFHeader12Record; // Conditional Formatting Header v12 record CFHEADER12 (0x0879), for conditional formattings introduced in Excel 2007 and newer.\nClass CFHeaderBase; // Parent of Conditional Formatting Header records, CFHeaderRecord and CFHeader12Record.\nClass CFHeaderRecord; // Conditional Formatting Header record CFHEADER (0x01B0).\n", "des": "Record package contains class representations for XLS binary strutures."}
{"index": 2354, "repo": "spring-boot-3.1.1", "code": "Package: view\n\nClasses and Interfaces: \npublic class MustacheView extends org.springframework.web.reactive.result.view.AbstractUrlBasedView; // Spring WebFlux View using the Mustache template engine.\npublic class MustacheViewResolver extends org.springframework.web.reactive.result.view.UrlBasedViewResolver; // Spring WebFlux ViewResolver for Mustache.\n", "des": "Additional Views for use with WebFlux."}
{"index": 3150, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: sql\n\nClasses and Interfaces: \nInterface SqlTypeDescriptor; // Descriptor for the SQL/JDBC side of a value mapping.\nClass BasicBinder<J>; // Convenience base implementation of ValueBinder\nClass BasicExtractor<J>; // Convenience base implementation of ValueExtractor\nClass BigIntTypeDescriptor; // Descriptor for BIGINT handling.\nClass BinaryTypeDescriptor; // Descriptor for BINARY handling.\nClass BitTypeDescriptor; // Descriptor for BIT handling.\nClass BlobTypeDescriptor; // Descriptor for BLOB handling.\nClass BooleanTypeDescriptor; // Descriptor for BOOLEAN handling.\nClass CharTypeDescriptor; // Descriptor for CHAR handling.\nClass ClobTypeDescriptor; // Descriptor for CLOB handling.\nClass DateTypeDescriptor; // Descriptor for DATE handling.\nClass DecimalTypeDescriptor; // Descriptor for DECIMAL handling.\nClass DoubleTypeDescriptor; // Descriptor for DOUBLE handling.\nClass FloatTypeDescriptor; // Descriptor for FLOAT handling.\nClass IntegerTypeDescriptor; // Descriptor for INTEGER handling.\nClass JdbcTypeFamilyInformation; // Information pertaining to JDBC type families.\nClass JdbcTypeJavaClassMappings; // Maintains the JDBC recommended mappings for JDBC type-code to/from Java Class as defined in _Appendix B : Data Type Conversion Tables_ of the _JDBC 4.0 Specification_ Eventually, the plan is to have Dialect and DatabaseMetaData.getTypeInfo() contribute this information.\nClass LobTypeMappings;\nClass LongNVarcharTypeDescriptor; // Descriptor for LONGNVARCHAR handling.\nClass LongVarbinaryTypeDescriptor; // Descriptor for LONGVARBINARY handling.\nClass LongVarcharTypeDescriptor; // Descriptor for LONGVARCHAR handling.\nClass NationalizedTypeMappings; // Manages a mapping between nationalized and non-nationalized variants of JDBC types.\nClass NCharTypeDescriptor; // Descriptor for NCHAR handling.\nClass NClobTypeDescriptor; // Descriptor for NCLOB handling.\nClass NumericTypeDescriptor; // Descriptor for NUMERIC handling.\nClass NVarcharTypeDescriptor; // Descriptor for NVARCHAR handling.\nClass RealTypeDescriptor; // Descriptor for REAL handling.\nClass SmallIntTypeDescriptor; // Descriptor for SMALLINT handling.\nClass SqlTypeDescriptorRegistry;\nClass SqlTypeDescriptorRegistry.ObjectSqlTypeDescriptor;\nClass TimestampTypeDescriptor; // Descriptor for TIMESTAMP handling.\nClass TimeTypeDescriptor; // Descriptor for TIME handling.\n", "des": "Defines handling of the standard JDBC-defined types."}
{"index": 2600, "repo": "spring-rabbit-3.0.6", "code": "Package: transaction\n\nClasses and Interfaces: \npublic class RabbitTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.transaction.support.ResourceTransactionManager, org.springframework.beans.factory.InitializingBean; // PlatformTransactionManager implementation for a single Rabbit ConnectionFactory.\n", "des": "Provides classes supporting transactions in Spring Rabbit."}
{"index": 216, "repo": "nutch-2.4", "code": "Package: protocol\n\nSub Packages: \npackage protocol.file; // Protocol plugin which supports retrieving local file resources.\npackage protocol.ftp; // Protocol plugin which supports retrieving documents via the ftp protocol.\npackage protocol.http; // Protocol plugin which supports retrieving documents via the http protocol.\npackage protocol.httpclient; // Protocol plugin which supports retrieving documents via the HTTP and HTTPS protocols, optionally with Basic, Digest and NTLM authentication schemes for web server as well as proxy server.\npackage protocol.sftp; // Protocol plugin which supports retrieving documents via the sftp protocol.\n\nClasses and Interfaces: \nInterface Protocol; // A retriever of url content.\nInterface ProtocolStatusCodes;\nInterface RobotRules; // This class holds the rules which were parsed from a robots.txt file, and can test paths against those rules.\nClass Content;\nClass ProtocolFactory; // Creates and caches Protocol plugins.\nClass ProtocolOutput; // Simple aggregate to pass from protocol plugins both content and protocol status.\nClass ProtocolStatusUtils;\nClass RobotRulesParser; // This class uses crawler-commons for handling the parsing of robots.txt files.\nClass ProtocolException;\nClass ProtocolNotFound;\n", "des": "Classes related to the Protocol interface, see also org.apache.nutch.net.protocols."}
{"index": 3775, "repo": "lucene-analysis-common-9.7.0", "code": "Package: cz\n\nClasses and Interfaces: \nClass CzechAnalyzer; // Analyzer for Czech language.\nClass CzechStemFilter; // A TokenFilter that applies CzechStemmer to stem Czech words.\nClass CzechStemFilterFactory; // Factory for CzechStemFilter.\nClass CzechStemmer; // Light Stemmer for Czech.\n", "des": "Analyzer for Czech."}
{"index": 1761, "repo": "spring-data-mongodb-4.1.2", "code": "Package: schema\n\nClasses and Interfaces: \npublic class IdentifiableJsonSchemaProperty<T extends JsonSchemaObject> extends Object implements JsonSchemaProperty; // JsonSchemaProperty implementation.\npublic static class IdentifiableJsonSchemaProperty.ArrayJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.ArrayJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'array' property.\npublic static class IdentifiableJsonSchemaProperty.BooleanJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.BooleanJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'boolean' property.\npublic static class IdentifiableJsonSchemaProperty.DateJsonSchemaProperty extends IdentifiableJsonSchemaProperty<org.springframework.data.mongodb.core.schema.TypedJsonSchemaObject.DateJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'date' property.\npublic static class IdentifiableJsonSchemaProperty.EncryptedJsonSchemaProperty extends Object implements JsonSchemaProperty; // JsonSchemaProperty implementation for encrypted fields.\npublic static class IdentifiableJsonSchemaProperty.NullJsonSchemaProperty extends IdentifiableJsonSchemaProperty<org.springframework.data.mongodb.core.schema.TypedJsonSchemaObject.NullJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'null' property.\npublic static class IdentifiableJsonSchemaProperty.NumericJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.NumericJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'number' property.\npublic static class IdentifiableJsonSchemaProperty.ObjectJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.ObjectJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'object' property.\npublic static class IdentifiableJsonSchemaProperty.RequiredJsonSchemaProperty extends Object implements JsonSchemaProperty; // Delegating JsonSchemaProperty implementation having a required flag for evaluation during schema creation process.\npublic static class IdentifiableJsonSchemaProperty.StringJsonSchemaProperty extends IdentifiableJsonSchemaProperty<TypedJsonSchemaObject.StringJsonSchemaObject>; // Convenience JsonSchemaProperty implementation for a type : 'string' property.\n", "des": "MongoDB-specific JSON schema implementation classes."}
{"index": 3232, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nAnnotation Type SynchronizedRpcRequest;\n", "des": "Contains the compile time classes required to allow synchronous RPC calls."}
{"index": 1415, "repo": "spring-boot-actuator-3.1.1", "code": "Package: data\n\nClasses and Interfaces: \npublic class DefaultRepositoryTagsProvider extends Object implements RepositoryTagsProvider; // Default RepositoryTagsProvider implementation.\npublic class MetricsRepositoryMethodInvocationListener extends Object implements org.springframework.data.repository.core.support.RepositoryMethodInvocationListener; // Intercepts Spring Data Repository invocations and records metrics about execution time and results.\n@FunctionalInterface public interface RepositoryTagsProvider; // Provides Tags for Spring Data Repository invocations.\n", "des": "Actuator support for Spring Data Repository metrics."}
{"index": 3333, "repo": "opencms-core-15.0", "code": "Package: publishqueue\n\nClasses and Interfaces: \nClass CmsPublishQueue; // Class for the Publish queue app.\nClass CmsPublishQueueConfiguration; // Configuration class for the publish queue app.\nClass CmsPublishReport; // Vertical Layout showing a publish report of a publish job.\nClass CmsPublishResources; // Class for the published resources dialog.\nClass CmsQueuedTable; // Class for Vaadin Table showing history queue elements.\n", "des": "Contains classes of the publish queue app."}
{"index": 100, "repo": "ignite-core-2.15.0", "code": "Package: always\n\nClasses and Interfaces: \nInterface AlwaysFailoverSpiMBean; // Management bean for AlwaysFailoverSpi.\nClass AlwaysFailoverSpi; // Failover SPI that always reroutes a failed job to another node.\n", "des": "Contains default \"always\" failover SPI."}
{"index": 640, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: dao\n\nClasses and Interfaces: \nClass WeightedPolicyInfo; // This is a DAO class for the configuration of parameteres for federation policies.\n", "des": "DAO objects for serializing/deserializing policy configurations."}
{"index": 1163, "repo": "commons-math3-3.6.1", "code": "Package: enclosing\n\nClasses and Interfaces: \nInterface Encloser<S extends Space,P extends Point<S>>; // Interface for algorithms computing enclosing balls.\nInterface SupportBallGenerator<S extends Space,P extends Point<S>>; // Interface for generating balls based on support points.\nClass EnclosingBall<S extends Space,P extends Point<S>>; // This class represents a ball enclosing some points.\nClass WelzlEncloser<S extends Space,P extends Point<S>>; // Class implementing Emo Welzl algorithm to find the smallest enclosing ball in linear time.\n", "des": "This package provides interfaces and classes related to the smallest enclosing ball problem."}
{"index": 1173, "repo": "commons-math3-3.6.1", "code": "Package: linear\n\nClasses and Interfaces: \nInterface AnyMatrix; // Interface defining very basic matrix operations.\nInterface DecompositionSolver; // Interface handling decomposition algorithms that can solve A × X = B.\nInterface FieldDecompositionSolver<T extends FieldElement<T>>; // Interface handling decomposition algorithms that can solve A × X = B.\nInterface FieldMatrix<T extends FieldElement<T>>; // Interface defining field-valued matrix with basic algebraic operations.\nInterface FieldMatrixChangingVisitor<T extends FieldElement<?>>; // Interface defining a visitor for matrix entries.\nInterface FieldMatrixPreservingVisitor<T extends FieldElement<?>>; // Interface defining a visitor for matrix entries.\nInterface FieldVector<T extends FieldElement<T>>; // Interface defining a field-valued vector with basic algebraic operations.\nInterface FieldVectorChangingVisitor<T extends FieldElement<?>>; // This interface defines a visitor for the entries of a vector.\nInterface FieldVectorPreservingVisitor<T extends FieldElement<?>>; // This interface defines a visitor for the entries of a vector.\nInterface RealMatrix; // Interface defining a real-valued matrix with basic algebraic operations.\nInterface RealMatrixChangingVisitor; // Interface defining a visitor for matrix entries.\nInterface RealMatrixPreservingVisitor; // Interface defining a visitor for matrix entries.\nInterface RealVectorChangingVisitor; // This interface defines a visitor for the entries of a vector.\nInterface RealVectorPreservingVisitor; // This interface defines a visitor for the entries of a vector.\nInterface SparseRealMatrix; // Marker interface for RealMatrix implementations that require sparse backing storage\nClass AbstractFieldMatrix<T extends FieldElement<T>>; // Basic implementation of FieldMatrix methods regardless of the underlying storage.\nClass AbstractRealMatrix; // Basic implementation of RealMatrix methods regardless of the underlying storage.\nClass Array2DRowFieldMatrix<T extends FieldElement<T>>; // Implementation of FieldMatrix using a FieldElement[][] array to store entries.\nClass Array2DRowRealMatrix; // Implementation of RealMatrix using a double[][] array to store entries.\nClass ArrayFieldVector<T extends FieldElement<T>>; // This class implements the FieldVector interface with a FieldElement array.\nClass ArrayRealVector; // This class implements the RealVector interface with a double array.\n", "des": "Linear algebra support."}
{"index": 3560, "repo": "guava-32.1.1-jre", "code": "Package: net\n\nClasses and Interfaces: \nClass HostAndPort; // An immutable representation of a host and port.\nClass HostSpecifier; // A syntactically valid host specifier, suitable for use in a URI.\nClass HttpHeaders; // Contains constant definitions for the HTTP header field names.\nClass HttpHeaders.ReferrerPolicyValues; // Values for the Referrer-Policy header.\nClass InetAddresses; // Static utility methods pertaining to InetAddress instances.\nClass InetAddresses.TeredoInfo; // A simple immutable data class to encapsulate the information to be found in a Teredo address.\nClass InternetDomainName; // An immutable well-formed internet domain name, such as com or foo.co.uk.\nClass MediaType; // Represents an Internet Media Type (also known as a MIME Type or Content Type).\nClass PercentEscaper; // A UnicodeEscaper that escapes some set of Java characters using a UTF-8 based percent encoding scheme.\nClass UrlEscapers; // Escaper instances suitable for strings to be included in particular sections of URLs.\n", "des": "Utility methods and classes for networking (such as IP addresses and domain names)."}
{"index": 1653, "repo": "jena-core-4.9.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class AltImpl extends ContainerImpl implements Alt; // An implementation of Alt.\npublic class BagImpl extends ContainerImpl implements Bag; // An implementation of Bag\npublic class ContainerImpl extends ResourceImpl implements Container; // An internal class not normally of interest to application developers.\npublic class ContNodeIteratorFactoryImpl extends Object implements NodeIteratorFactory; // An internal class, not normally of interest to application developers.\npublic class ContNodeIteratorImpl extends NiceIterator<RDFNode> implements NodeIterator; // An internal class not normally of interest to application developers.\npublic class InfModelImpl extends ModelCom implements InfModel; // Default implementation of the InfModel interface which simply wraps up an InfGraph.\npublic final class IteratorFactory extends Object; // Builds Jena Iterators and other things (RDFNode and Statement) needed in a Model.\npublic class LiteralImpl extends EnhNode implements Literal; // An implementation of Literal.\npublic class MemoryModelGetter extends Object implements ModelGetter;\npublic class ModelCom extends EnhGraph implements Model, PrefixMapping, Lock; // Common methods for model implementations.\npublic class ModelListenerAdapter extends Object implements GraphListener; // Adapter class that converts a ModelChangedListener into a GraphListener.\npublic class ModelMakerImpl extends Object implements ModelMaker; // A ModelMakerImpl implements a ModelMaker over a GraphMaker.\npublic class ModelReifier extends Object; // This class impedance-matches the reification requests of Model[Com] to the operations supplied by it's Graph's Reifier.\npublic interface NodeIteratorFactory; // An internal class not normally of interest to application developers.\npublic class NodeIteratorImpl extends WrappedIterator<RDFNode> implements NodeIterator; // A NodeIterator implementation.\npublic class NsIteratorImpl extends WrappedIterator<String> implements NsIterator; // An NsIterator implementation\npublic class NTripleReader extends Object implements RDFReaderI; // N-Triple Reader\npublic class NTripleWriter extends Object implements RDFWriterI; // Writes out an XML serialization of a model.\npublic class PropertyImpl extends ResourceImpl implements Property; // An implementation of Property.\npublic class RDFDefaultErrorHandler extends Object implements RDFErrorHandler; // The default error handler for RDF/XML I/O.\npublic class RDFListImpl extends ResourceImpl implements RDFList; // Standard implementation the list abstraction from rdf.model.\n", "des": "This package contains implementations of the interfaces defined in the .model package, eg ModelCom for Model, ResourceImpl for Resource, and so on."}
{"index": 2797, "repo": "spring-amqp-3.0.6", "code": "Package: support\n\nSub Packages: \npackage support.converter; // Provides classes for supporting message conversion.\npackage support.postprocessor; // Package for Spring AMQP message post processors.\n\nClasses and Interfaces: \npublic interface AmqpHeaderMapper extends org.springframework.messaging.support.HeaderMapper<MessageProperties>; // Strategy interface for mapping messaging Message headers to an outbound MessageProperties (e.g.\npublic abstract class AmqpHeaders extends Object; // Pre-defined names and prefixes to be used for setting and/or retrieving AMQP MessageProperties from/to Message Headers.\npublic class AmqpMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor; // A MessageHeaderAccessor implementation giving access to AMQP-specific headers.\n@FunctionalInterface public interface ConditionalExceptionLogger; // For components that support customization of the logging of certain events, users can provide an implementation of this interface to modify the existing logging behavior.\n@FunctionalInterface public interface ConsumerTagStrategy; // A strategy interface to determine the consumer tag to be used when issuing a basicConsume operation.\npublic final class SendRetryContextAccessor extends Object; // Type safe accessor for retried message sending.\npublic class SimpleAmqpHeaderMapper extends org.springframework.messaging.support.AbstractHeaderMapper<MessageProperties> implements AmqpHeaderMapper; // Simple implementation of AmqpHeaderMapper.\n", "des": "Package for Spring AMQP support classes."}
{"index": 2869, "repo": "spring-integration-core-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AbstractLeaderEvent extends org.springframework.context.ApplicationEvent; // Base ApplicationEvent class for leader based events.\npublic class DefaultLeaderEventPublisher extends Object implements LeaderEventPublisher, org.springframework.context.ApplicationEventPublisherAware; // Default implementation of LeaderEventPublisher.\npublic interface LeaderEventPublisher; // Interface for publishing leader based application events.\npublic class OnFailedToAcquireMutexEvent extends AbstractLeaderEvent; // Generic event representing that a mutex could not be acquired during leader election.\npublic class OnGrantedEvent extends AbstractLeaderEvent; // Generic event representing that leader has been granted.\npublic class OnRevokedEvent extends AbstractLeaderEvent; // Generic event representing that leader has been revoked.\n", "des": "Temporary package until s-c-c-core is released."}
{"index": 1960, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: neo4j\n\nClasses and Interfaces: \n@FunctionalInterface public interface ConfigBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the Config through a Config.ConfigBuilder whilst retaining default auto-configuration.\n@AutoConfiguration @ConditionalOnClass(org.neo4j.driver.Driver.class) @EnableConfigurationProperties(Neo4jProperties.class) public class Neo4jAutoConfiguration extends Object; // Auto-configuration for Neo4j.\npublic interface Neo4jConnectionDetails extends ConnectionDetails; // Details required to establish a connection to a Neo4j service.\n@ConfigurationProperties(prefix=\"spring.neo4j\") public class Neo4jProperties extends Object; // Configuration properties for Neo4j.\npublic static class Neo4jProperties.Authentication extends Object;\npublic static class Neo4jProperties.Pool extends Object;\npublic static class Neo4jProperties.Security extends Object;\npublic static enum Neo4jProperties.Security.TrustStrategy extends Enum<Neo4jProperties.Security.TrustStrategy>;\n", "des": "Auto-configuration for Neo4j."}
{"index": 3192, "repo": "tomcat-api-10.1", "code": "Package: binary\n\nClasses and Interfaces: \nClass Base64; // Provides Base64 encoding and decoding as defined by RFC 2045.\nClass BaseNCodec; // Abstract superclass for Base-N encoders and decoders.\nClass StringUtils; // Converts String to and from bytes using the encodings required by the Java specification.\n", "des": "Base64, Base32, Binary, and Hexadecimal String encoding and decoding."}
{"index": 2676, "repo": "spring-r2dbc-6.0.11", "code": "Package: binding\n\nClasses and Interfaces: \npublic class Bindings extends Object implements Iterable<Bindings.Binding>; // Value object representing value and null bindings for a Statement using BindMarkers.\npublic abstract static class Bindings.Binding extends Object; // Base class for value objects representing a value or a NULL binding.\npublic interface BindMarker; // A bind marker represents a single bindable parameter within a query.\n@FunctionalInterface public interface BindMarkers; // Bind markers represent placeholders in SQL queries for substitution for an actual parameter.\n@FunctionalInterface public interface BindMarkersFactory; // This class creates new BindMarkers instances to bind parameter to a specific Statement.\npublic final class BindMarkersFactoryResolver extends Object; // Resolves a BindMarkersFactory from a ConnectionFactory using BindMarkersFactoryResolver.BindMarkerFactoryProvider.\n@FunctionalInterface public static interface BindMarkersFactoryResolver.BindMarkerFactoryProvider; // SPI to extend Spring's default R2DBC BindMarkersFactory discovery mechanism.\npublic static class BindMarkersFactoryResolver.NoBindMarkersFactoryException extends org.springframework.dao.NonTransientDataAccessException; // Exception thrown when BindMarkersFactoryResolver cannot resolve a BindMarkersFactory.\npublic interface BindTarget; // Target to apply bindings to.\npublic class MutableBindings extends Bindings; // Mutable extension to Bindings for Value and null bindings for a Statement using BindMarkers.\n", "des": "Classes providing an abstraction over SQL bind markers."}
{"index": 1873, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: credential\n\nClasses and Interfaces: \npublic class AllowAllCredentialsMatcher extends Object implements CredentialsMatcher; // A credentials matcher that always returns true when matching credentials no matter what arguments are passed in.\npublic interface CredentialsMatcher; // Interface implemented by classes that can determine if an AuthenticationToken's provided credentials matches a corresponding account's credentials stored in the system.\npublic class DefaultPasswordService extends Object implements HashingPasswordService; // Default implementation of the PasswordService interface that relies on an internal HashService, HashFormat, and HashFormatFactory to function:\npublic class HashedCredentialsMatcher extends SimpleCredentialsMatcher; // A HashedCredentialMatcher provides support for hashing of supplied AuthenticationToken credentials before being compared to those in the AuthenticationInfo from the data store.\npublic interface HashingPasswordService extends PasswordService; // A HashingPasswordService is a PasswordService that performs password encryption and comparisons based on cryptographic Hashes.\npublic class PasswordMatcher extends Object implements CredentialsMatcher; // A CredentialsMatcher that employs best-practices comparisons for hashed text passwords.\npublic interface PasswordService; // A PasswordService supports common use cases when using passwords as a credentials mechanism.\npublic class Sha256CredentialsMatcher extends HashedCredentialsMatcher;\npublic class Sha384CredentialsMatcher extends HashedCredentialsMatcher;\npublic class Sha512CredentialsMatcher extends HashedCredentialsMatcher;\npublic class SimpleCredentialsMatcher extends org.apache.shiro.lang.codec.CodecSupport implements CredentialsMatcher; // Simple CredentialsMatcher implementation.\n", "des": "Support for validating credentials (such as passwords or X509 certificates) during authentication via the CredentialsMatcher interface and its supporting implementations."}
{"index": 3251, "repo": "opencms-core-15.0", "code": "Package: shared\n\nSub Packages: \npackage shared.rpc; // Shared RPC interfaces.\n\nClasses and Interfaces: \nInterface I_CmsAliasConstants; // Constants for parameters, JSON keys, etc.\nInterface I_CmsSitemapController; // The interface to the sitemap controller.\nClass CmsAdditionalEntryInfo; // Bean for additional site-map entry information.\nClass CmsClientSitemapEntry; // Sitemap entry data.\nClass CmsDetailPageTable; // A data structure for managing the detail page ordering for different types in a given sitemap.\nClass CmsGalleryFolderEntry; // Gallery folder entry bean.\nClass CmsGalleryType; // The gallery type bean.\nClass CmsLocaleComparePropertyData; // Data used for the property editor in the sitemap editor's locale comparison view.\nClass CmsModelInfo; // Wraps the model page and model group info into one object.\nClass CmsModelPageEntry; // Bean representing a model page, for use in the model page mode of the sitemap editor.\nClass CmsNewResourceInfo; // A bean representing a resource type for use in the detail page creation menu.\nClass CmsSitemapAttributeData; // The data needed by the sitemap attribute editor dialog in the sitemap editor.\nClass CmsSitemapCategoryData; // The category data for the current sitemap.\nClass CmsSitemapChange; // Bean containing sitemap entry change information.\nClass CmsSitemapClipboardData; // Sitemap clipboard data bean.\nClass CmsSitemapData; // Sitemap initialization data bean for prefetching.\nClass CmsSitemapInfo; // Sitemap info object.\nClass CmsSitemapMergeInfo; // This class represents the result of a 'merge sub-sitemap' operation.\nClass CmsSubSitemapInfo; // A data class which is used to transfer information about sub-sitemaps which have been created.\nEnum CmsClientSitemapEntry.EditStatus; // An enum for the edit status of the entry.\nEnum CmsClientSitemapEntry.EntryType; // An enum for the entry type.\nEnum CmsDetailPageTable.Status; // A type indicating the status of a page.\nEnum CmsSitemapChange.ChangeType; // The change types.\nEnum CmsSitemapData.EditorMode; // The sitemap editor modes.\n", "des": "Shared Client-Server side of the sitemap view."}
{"index": 392, "repo": "amqp-client-5.18.0", "code": "Package: client\n\nSub Packages: \npackage client.impl; // Implementations of interfaces specified in the client API, and their supporting classes.\n\nClasses and Interfaces: \nInterface AddressResolver; // Strategy interface to get the potential servers to connect to.\nInterface AMQP;\nInterface AMQP.Access.Request;\nInterface AMQP.Access.RequestOk;\nInterface AMQP.Basic.Ack;\nInterface AMQP.Basic.Cancel;\nInterface AMQP.Basic.CancelOk;\nInterface AMQP.Basic.Consume;\nInterface AMQP.Basic.ConsumeOk;\nInterface AMQP.Basic.Deliver;\nInterface AMQP.Basic.Get;\nInterface AMQP.Basic.GetEmpty;\nInterface AMQP.Basic.GetOk;\nInterface AMQP.Basic.Nack;\nInterface AMQP.Basic.Publish;\nInterface AMQP.Basic.Qos;\nInterface AMQP.Basic.QosOk;\nInterface AMQP.Basic.Recover;\nInterface AMQP.Basic.RecoverAsync;\nInterface AMQP.Basic.RecoverOk;\nInterface AMQP.Basic.Reject;\nInterface AMQP.Basic.Return;\nInterface AMQP.Channel.Close;\nInterface AMQP.Channel.CloseOk;\nInterface AMQP.Channel.Flow;\nInterface AMQP.Channel.FlowOk;\nInterface AMQP.Channel.Open;\nInterface AMQP.Channel.OpenOk;\nInterface AMQP.Confirm.Select;\nInterface AMQP.Confirm.SelectOk;\nInterface AMQP.Connection.Blocked;\nInterface AMQP.Connection.Close;\nInterface AMQP.Connection.CloseOk;\nInterface AMQP.Connection.Open;\nInterface AMQP.Connection.OpenOk;\nInterface AMQP.Connection.Secure;\nInterface AMQP.Connection.SecureOk;\nInterface AMQP.Connection.Start;\nInterface AMQP.Connection.StartOk;\nInterface AMQP.Connection.Tune;\nInterface AMQP.Connection.TuneOk;\nInterface AMQP.Connection.Unblocked;\nInterface AMQP.Connection.UpdateSecret;\nInterface AMQP.Connection.UpdateSecretOk;\nInterface AMQP.Exchange.Bind;\nInterface AMQP.Exchange.BindOk;\nInterface AMQP.Exchange.Declare;\nInterface AMQP.Exchange.DeclareOk;\nInterface AMQP.Exchange.Delete;\nInterface AMQP.Exchange.DeleteOk;\nInterface AMQP.Exchange.Unbind;\nInterface AMQP.Exchange.UnbindOk;\nInterface AMQP.Queue.Bind;\n", "des": "The client API proper: classes and interfaces representing the AMQP connections, channels, and wire-protocol framing descriptors."}
{"index": 1841, "repo": "spring-test-6.0.11", "code": "Package: jdbc\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited @Repeatable(SqlGroup.class) public @interface Sql; // @Sql is used to annotate a test class or test method to configure SQL Sql.scripts() and Sql.statements() to be executed against a given database during integration tests.\npublic static enum Sql.ExecutionPhase extends Enum<Sql.ExecutionPhase>; // Enumeration of phases that dictate when SQL scripts are executed.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited public @interface SqlConfig; // @SqlConfig defines metadata that is used to determine how to parse and execute SQL scripts configured via the @Sql annotation.\npublic static enum SqlConfig.ErrorMode extends Enum<SqlConfig.ErrorMode>; // Enumeration of modes that dictate how errors are handled while executing SQL statements.\npublic static enum SqlConfig.TransactionMode extends Enum<SqlConfig.TransactionMode>; // Enumeration of modes that dictate whether SQL scripts should be executed within a transaction and what the transaction propagation behavior should be.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface SqlGroup; // Container annotation that aggregates several @Sql annotations.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Inherited public @interface SqlMergeMode; // @SqlMergeMode is used to annotate a test class or test method to configure whether method-level @Sql declarations are merged with class-level @Sql declarations.\npublic static enum SqlMergeMode.MergeMode extends Enum<SqlMergeMode.MergeMode>; // Enumeration of modes that dictate whether method-level @Sql declarations are merged with class-level @Sql declarations.\npublic class SqlScriptsTestExecutionListener extends AbstractTestExecutionListener implements AotTestExecutionListener; // TestExecutionListener that provides support for executing SQL scripts and inlined statements configured via the @Sql annotation.\n", "des": "JDBC support classes for the Spring TestContext Framework, including support for declarative SQL script execution via @Sql."}
{"index": 543, "repo": "spring-mobile-device-1.1.5.RELEASE", "code": "Package: device\n\nSub Packages: \npackage device.site; // Ability for the user to specify whether they prefer the mobile or normal site.\npackage device.switcher; // Mobile site switcher for Spring MVC-based web apps.\npackage device.util; // Spring Mobile utilities\npackage device.view; // Device aware view resolution for Spring MVC-based web apps.\n\nClasses and Interfaces: \nInterface Device; // A model for the user agent or device that submitted the current request.\nInterface DeviceResolver; // Service interface for resolving Devices that originate web requests with the application.\nClass DeviceHandlerMethodArgumentResolver; // Spring MVC HandlerMethodArgumentResolver that resolves @Controller MethodParameters of type Device to the value of the web request's current device attribute.\nClass DeviceResolverHandlerInterceptor; // A Spring MVC interceptor that resolves the Device that originated the web request before any request handler is invoked.\nClass DeviceResolverRequestFilter; // A Servlet 2.3 Filter that resolves the Device that originated the web request.\nClass DeviceUtils; // Static helper for accessing request-scoped Device values.\nClass DeviceWebArgumentResolver; // Spring MVC WebArgumentResolver that resolves @Controller MethodParameters of type Device to the value of the web request's current device attribute.\nClass LiteDeviceResolver; // A \"lightweight\" device resolver algorithm based on Wordpress's Mobile pack.\nEnum DevicePlatform; // Enumeration for the platform of device that has been resolved\nEnum DeviceType; // Enumeration for the type of device that has been resolved\n", "des": "Public API for device resolution."}
{"index": 626, "repo": "freemarker-2.3.32", "code": "Package: jython\n\nClasses and Interfaces: \nClass JythonHashModel; // Model for Jython dictionaries (PyDictionary and PyStringMap).\nClass JythonModel; // Generic model for arbitrary Jython objects.\nClass JythonNumberModel; // Model for Jython numeric objects (PyInteger, PyLong, PyFloat).\nClass JythonSequenceModel; // Model for Jython sequence objects (PySequence descendants).\nClass JythonVersionAdapter; // Functions that has a different implementation depending on the Jython version used.\nClass JythonWrapper; // An object wrapper that wraps Jython objects into FreeMarker template models and vice versa.\n", "des": "Exposes Jython objects to templates."}
{"index": 932, "repo": "commons-compress-1.23.0", "code": "Package: unpack200\n\nSub Packages: \npackage unpack200.bytecode; // Internal package.\n\nClasses and Interfaces: \nInterface IMatcher; // Interface for a class that can perform matching on flag values.\nClass Archive; // Archive is the main entry point to unpack200.\nClass AttrDefinitionBands; // Attribute definition bands are the set of bands used to define extra attributes transmitted in the archive.\nClass AttributeLayout; // AttributeLayout defines a layout that describes how an attribute will be transmitted.\nClass AttributeLayoutMap; // Stores a mapping from attribute names to their corresponding layout types.\nClass BandSet; // Abstract superclass for a set of bands\nClass BcBands; // Bytecode bands\nClass ClassBands; // Class Bands\nClass CpBands; // Constant Pool bands\nClass FileBands; // Parses the file band headers (not including the actual bits themselves).\nClass IcBands; // Inner Class Bands\nClass IcTuple; // An IcTuple is the set of information that describes an inner class.\nClass MetadataBandGroup; // A group of metadata bands, such as class_RVA_bands, method_AD_bands etc.\nClass NewAttributeBands; // Set of bands relating to a non-predefined attribute\nClass NewAttributeBands.Callable;\nClass Pack200UnpackerAdapter; // This class provides the binding between the standard Pack200 interface and the internal interface for (un)packing.\nClass Segment; // A Pack200 archive consists of one or more segments.\nClass SegmentConstantPool; // SegmentConstantPool manages the constant pool used for re-creating class files.\nClass SegmentConstantPoolArrayCache; // The SegmentConstantPool spends a lot of time searching through large arrays of Strings looking for matches.\nClass SegmentHeader; // SegmentHeader is the header band of a Segment\nClass SegmentOptions; // Stores the combinations of bit flags that can be used in the segment header options.\nClass SegmentUtils; // Utility class for unpack200\n", "des": "Internal package."}
{"index": 273, "repo": "nutch-2.4", "code": "Package: reltag\n\nClasses and Interfaces: \nClass RelTagIndexingFilter; // An IndexingFilter that adds tag field(s) to the document.\nClass RelTagParser; // Adds microformat rel-tags of document if found.\n", "des": "A microformats Rel-Tag Parser/Indexer/Querier plugin."}
{"index": 1677, "repo": "spring-oxm-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class OxmNamespaceHandler extends org.springframework.beans.factory.xml.NamespaceHandlerSupport; // NamespaceHandler for the 'oxm' namespace.\n", "des": "Provides an namespace handler for the Spring Object/XML namespace."}
{"index": 3601, "repo": "lucene-queries-9.7.0", "code": "Package: queries\n\nSub Packages: \npackage queries.function; // Queries that compute score based upon a function.\npackage queries.intervals; // Intervals queries\npackage queries.mlt; // Document similarity query generators.\npackage queries.payloads; // The payloads package provides Query mechanisms for finding and using payloads.\npackage queries.spans; // The calculus of spans.\n\nClasses and Interfaces: \nClass CommonTermsQuery; // A query that executes high-frequency terms in a optional sub-query to prevent slow queries due to \"common\" terms like stopwords.\n", "des": "Filters and Queries that add to core Lucene."}
{"index": 2441, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: info\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({TYPE,METHOD}) @Documented @Conditional(org.springframework.boot.actuate.autoconfigure.info.OnEnabledInfoContributorCondition.class) public @interface ConditionalOnEnabledInfoContributor; // @Conditional that checks whether an info contributor is enabled.\n@AutoConfiguration(after=org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration.class) @EnableConfigurationProperties(InfoContributorProperties.class) public class InfoContributorAutoConfiguration extends Object; // Auto-configuration for standard InfoContributors.\npublic enum InfoContributorFallback extends Enum<InfoContributorFallback>; // Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set.\n@ConfigurationProperties(\"management.info\") public class InfoContributorProperties extends Object; // Configuration properties for core info contributors.\npublic static class InfoContributorProperties.Git extends Object;\n@AutoConfiguration(after=InfoContributorAutoConfiguration.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.info.InfoEndpoint.class) public class InfoEndpointAutoConfiguration extends Object; // Auto-configuration for the InfoEndpoint.\n", "des": "Auto-configuration for actuator info concerns."}
{"index": 251, "repo": "nutch-2.4", "code": "Package: regex\n\nClasses and Interfaces: \nClass RegexURLFilter; // Filters URLs based on a file of regular expressions using the Java Regex implementation.\n", "des": "URL filter plugin to include and/or exclude URLs matching Java regular expressions."}
{"index": 2711, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: builder\n\nClasses and Interfaces: \npublic class AmqpItemReaderBuilder<T> extends Object; // A builder implementation for the AmqpItemReader\npublic class AmqpItemWriterBuilder<T> extends Object; // A builder implementation for the AmqpItemWriter\n", "des": "Builders for AMQP item reader and writer."}
{"index": 17, "repo": "commons-collections4-4.4", "code": "Package: collection\n\nClasses and Interfaces: \nInterface CompositeCollection.CollectionMutator<E>; // Pluggable strategy to handle changes to the composite.\nClass AbstractCollectionDecorator<E>; // Decorates another Collection to provide additional behaviour.\nClass CompositeCollection<E>; // Decorates a collection of other collections to provide a single unified view.\nClass IndexedCollection<K,C>; // An IndexedCollection is a Map-like view onto a Collection.\nClass PredicatedCollection<E>; // Decorates another Collection to validate that additions match a specified predicate.\nClass PredicatedCollection.Builder<E>; // Builder for creating predicated collections.\nClass SynchronizedCollection<E>; // Decorates another Collection to synchronize its behaviour for a multi-threaded environment.\nClass TransformedCollection<E>; // Decorates another Collection to transform objects that are added.\nClass UnmodifiableBoundedCollection<E>; // UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.\nClass UnmodifiableCollection<E>; // Decorates another Collection to ensure it can't be altered.\n", "des": "This package contains implementations of the Collection interface."}
{"index": 1298, "repo": "groovy-all-4.0.13", "code": "Package: ui\n\nSub Packages: \npackage ui.text; // Text processing helpers for the interactive command line terminal.\n\nClasses and Interfaces: \npublic abstract class ConsoleSupport extends Object; // Base class for console\npublic class ConsoleTextEditor extends JScrollPane; // Component which provides a styled editor for the console.\npublic class SystemOutputInterceptor extends FilterOutputStream; // Intercepts System.out/System.err.\n", "des": "An interactive command line terminal along with a Swing console for evaluating Groovy scripts and inspecting objects, AST and bytecode information."}
{"index": 3305, "repo": "opencms-core-15.0", "code": "Package: rmi\n\nClasses and Interfaces: \nInterface I_CmsRemoteShell; // Remote interface for executing shell commands.\nInterface I_CmsRemoteShellProvider; // Used to create new instances of I_CmsRemoteShell.\nClass CmsRemoteShell; // RMI object which wraps a CmsShell and can be used for shell command execution.\nClass CmsRemoteShellClient; // Client application used to connect locally to the CmsShell server.\nClass CmsRemoteShellConstants; // Constants used by both the shell server and the client application.\nClass CmsRemoteShellProvider; // Remote object responsible for creating new remote shell instances.\nClass CmsRemoteShellServer; // This class is used to initialize the RMI mechanism and export the object used to access the remote shell.\nClass CmsShellCommandResult; // An object containing the output of a remote shell command and also the updated values for some of the internal state fields of the client application.\n", "des": "The CmsRemoteShell allows to manipulate a running server using OpenCms shell commands."}
{"index": 2437, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: flyway\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration.class) @ConditionalOnClass(org.flywaydb.core.Flyway.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.flyway.FlywayEndpoint.class) public class FlywayEndpointAutoConfiguration extends Object; // Auto-configuration for FlywayEndpoint.\n", "des": "Auto-configuration for actuator Flyway concerns."}
{"index": 1778, "repo": "slf4j-api-2.0.7", "code": "Package: spi\n\nClasses and Interfaces: \npublic interface CallerBoundaryAware; // Additional interface to LoggingEventBuilder and LoggingEvent.\npublic class DefaultLoggingEventBuilder extends Object implements LoggingEventBuilder, CallerBoundaryAware; // Default implementation of LoggingEventBuilder\npublic interface LocationAwareLogger extends Logger; // An optional interface helping integration with logging systems capable of extracting location information.\npublic interface LoggerFactoryBinder;\npublic interface LoggingEventAware; // A logger capable of logging from org.slf4j.event.LoggingEvent implements this interface.\npublic interface LoggingEventBuilder; // This is the main interface in slf4j's fluent API for creating logging events.\npublic interface MarkerFactoryBinder;\npublic interface MDCAdapter; // This interface abstracts the service offered by various MDC implementations.\npublic class NOPLoggingEventBuilder extends Object implements LoggingEventBuilder; // A no-operation implementation of LoggingEventBuilder.\npublic interface SLF4JServiceProvider; // This interface based on ServiceLoader paradigm.\n", "des": "Classes and interfaces which are internal to SLF4J."}
{"index": 1540, "repo": "spring-context-6.0.11", "code": "Package: scheduling\n\nSub Packages: \npackage scheduling.annotation; // Annotation support for asynchronous method execution.\npackage scheduling.concurrent; // Scheduling convenience classes for the java.util.concurrent and jakarta.enterprise.concurrent packages, allowing to set up a ThreadPoolExecutor or ScheduledThreadPoolExecutor as a bean in a Spring context.\npackage scheduling.config; // Support package for declarative scheduling configuration, with XML schema being the primary configuration format.\npackage scheduling.support; // Generic support classes for scheduling.\n\nClasses and Interfaces: \npublic interface SchedulingAwareRunnable extends Runnable; // Extension of the Runnable interface, adding special callbacks for long-running operations.\npublic class SchedulingException extends org.springframework.core.NestedRuntimeException; // General exception to be thrown on scheduling failures, such as the scheduler already having shut down.\npublic interface SchedulingTaskExecutor extends org.springframework.core.task.AsyncTaskExecutor; // A TaskExecutor extension exposing scheduling characteristics that are relevant to potential task submitters.\npublic interface TaskScheduler; // Task scheduler interface that abstracts the scheduling of Runnables based on different kinds of triggers.\npublic interface Trigger; // Common interface for trigger objects that determine the next execution time of a task that they get associated with.\npublic interface TriggerContext; // Context object encapsulating last execution times and last completion time of a given task.\n", "des": "General exceptions for Spring's scheduling support, independent of any specific scheduling system."}
{"index": 393, "repo": "amqp-client-5.18.0", "code": "Package: impl\n\nSub Packages: \npackage impl.nio; // NIO network connector.\npackage impl.recovery; // Implementation of connection and topology recovery.\n\nClasses and Interfaces: \nInterface AMQChannel.RpcContinuation;\nInterface AMQImpl.MethodVisitor;\nInterface CredentialsProvider; // Provider interface for establishing credentials for connecting to the broker.\nInterface CredentialsRefreshService; // Provider interface to refresh credentials when appropriate and perform an operation once the credentials have been renewed.\nInterface ErrorOnWriteListener; // Listener called when a connection gets an IO error trying to write on the socket.\nInterface FrameHandler; // Interface to a frame handler.\nInterface FrameHandlerFactory;\nInterface NetworkConnection;\nInterface RpcWrapper;\nClass AbstractFrameHandlerFactory;\nClass AbstractMetricsCollector; // Base class for MetricsCollector.\nClass AMQBasicProperties;\nClass AMQChannel; // Base class modelling an AMQ channel.\nClass AMQChannel.BlockingRpcContinuation<T>;\nClass AMQChannel.SimpleBlockingRpcContinuation;\nClass AMQCommand; // AMQP 0-9-1-specific implementation of Command which accumulates method, header and body from a series of frames, unless these are supplied at construction time.\nClass AMQConnection; // Concrete class representing and managing an AMQP connection to a broker.\nClass AMQContentHeader; // Implementation of ContentHeader - specialized by autogenerated code in AMQP.java.\nClass AMQImpl;\nClass AMQImpl.Access;\nClass AMQImpl.Access.Request;\nClass AMQImpl.Access.RequestOk;\nClass AMQImpl.Basic;\nClass AMQImpl.Basic.Ack;\nClass AMQImpl.Basic.Cancel;\nClass AMQImpl.Basic.CancelOk;\nClass AMQImpl.Basic.Consume;\nClass AMQImpl.Basic.ConsumeOk;\nClass AMQImpl.Basic.Deliver;\nClass AMQImpl.Basic.Get;\nClass AMQImpl.Basic.GetEmpty;\nClass AMQImpl.Basic.GetOk;\nClass AMQImpl.Basic.Nack;\nClass AMQImpl.Basic.Publish;\nClass AMQImpl.Basic.Qos;\nClass AMQImpl.Basic.QosOk;\nClass AMQImpl.Basic.Recover;\nClass AMQImpl.Basic.RecoverAsync;\nClass AMQImpl.Basic.RecoverOk;\nClass AMQImpl.Basic.Reject;\n", "des": "Implementations of interfaces specified in the client API, and their supporting classes."}
{"index": 2052, "repo": "spring-ws-security-4.0.5", "code": "Package: security\n\nSub Packages: \npackage security.callback; // Contains generic CallbackHandler implementations.\npackage security.support; // Contains support classes for handling WS-Security messages.\npackage security.wss4j2; // Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS.\n\nClasses and Interfaces: \npublic abstract class AbstractWsSecurityInterceptor extends Object implements org.springframework.ws.soap.server.SoapEndpointInterceptor, org.springframework.ws.client.support.interceptor.ClientInterceptor; // Interceptor base class for interceptors that handle WS-Security.\npublic abstract class WsSecurityException extends org.springframework.ws.WebServiceException; // Exception indicating that something went wrong during WS-Security executions.\npublic abstract class WsSecurityFaultException extends WsSecurityException; // Exception indicating that a WS-Security executions should result in a SOAP Fault.\npublic abstract class WsSecuritySecurementException extends WsSecurityException; // Exception indicating that something went wrong during the securement of a message.\npublic abstract class WsSecurityValidationException extends WsSecurityException; // Exception indicating that something went wrong during the validation of a message.\n", "des": "Provides WS-Security implementation classes."}
{"index": 1609, "repo": "spring-data-neo4j-7.1.2", "code": "Package: convert\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({ANNOTATION_TYPE,FIELD}) @Inherited @Documented @API(status=STABLE, since=\"6.0\") public @interface ConvertWith; // This annotation can be used to define either custom conversions for single attributes by specifying a custom Neo4jPersistentPropertyConverter and if needed, a custom factory to create that converter or the annotation can be used to build custom meta-annotated annotations like @org.springframework.data.neo4j.core.support.DateLong.\npublic static final class ConvertWith.UnsetConverter extends Object implements Neo4jPersistentPropertyConverter<Object>; // Indicates an unset converter.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jConversions extends CustomConversions;\n@API(status=STABLE, since=\"6.0\") public interface Neo4jConversionService; // This service orchestrates a standard Spring conversion service with Neo4jConversions registered.\n@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyConverter<T>; // This interface represents a pair of methods capable of converting values of type T to and from values.\npublic interface Neo4jPersistentPropertyConverterFactory; // This interface needs to be implemented to provide custom configuration for a Neo4jPersistentPropertyConverter.\n@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyToMapConverter<K,P>; // You need to provide an implementation of this interface in case you want to store a property of an entity as separate properties on a node.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jSimpleTypes extends Object; // A list of Neo4j simple types: All attributes that can be mapped to a property.\n", "des": "Provides a set of simples types that SDN supports."}
{"index": 3236, "repo": "opencms-core-15.0", "code": "Package: formatters\n\nClasses and Interfaces: \nClass CmsFormatterBeanParser; // Parses formatter beans from formatter configuration XML contents.\nClass CmsFormatterChangeSet; // This class represents the changes which can be made to formatters in a sitemap configuration file.\nClass CmsFormatterConfigurationCache; // A cache object which holds a collection of formatter configuration beans read from the VFS.\nClass CmsFormatterConfigurationCacheState; // Represents the currently cached collection of all formatter beans extracted from formatter configuration files.\nClass CmsFormatterIndex; // Helper class for keeping track of which keys map to which formatters, and which formatters are active, when evaluating the sitemap configuration.\nClass CmsSettingConfiguration; // Contains the setting-related data for a formatter bean.\nClass CmsSharedSettingKey; // A pair consisting of the include name of a setting definition and the formatter key (possibly null) for which the setting should be used, for use as a map key in a map of setting definitions.\nClass CmsFormatterBeanParser.ParseException; // Exception for the errors in the configuration file not covered by other exception types.\n", "des": "Classes for handling formatter configurations."}
{"index": 230, "repo": "nutch-2.4", "code": "Package: pages\n\nSub Packages: \npackage pages.assets; // Contains asset classes for Web UI\npackage pages.auth; // Contains authorization classes for Web UI\npackage pages.components; // Contains component classes for Web UI\npackage pages.crawls; // Contains crawl page classes for Web UI\npackage pages.instances; // Contains instances pages classes for Web UI\npackage pages.menu; // Contains menu page classes for Web UI\npackage pages.seed; // Contains seed pages' classes for Web UI\npackage pages.settings; // Contains settings page classes for Web UI\n\nClasses and Interfaces: \nClass AbstractBasePage<T>;\nClass DashboardPage;\nClass LogOutPage;\nClass SchedulingPage;\nClass SearchPage;\nClass StatisticsPage;\nClass UrlsUploadPage;\nClass UserSettingsPage;\n", "des": "Provides classes and interfaces of pages for Web UI"}
{"index": 2681, "repo": "spring-data-jpa-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class AuditingBeanFactoryPostProcessor extends Object implements BeanFactoryPostProcessor; // BeanFactoryPostProcessor that ensures that the AnnotationBeanConfigurerAspect aspect is up and running before the EntityManagerFactory gets created as this already instantiates entity listeners and we need to get injection into Configurable to work in them.\n@Configurable public class AuditingEntityListener extends Object; // JPA entity listener to capture auditing information on persisting and updating entities.\n", "des": "Implementation classes for auditing with JPA."}
{"index": 1347, "repo": "spring-integration-kafka-6.1.2", "code": "Package: xml\n\nClasses and Interfaces: \npublic class KafkaChannelParser extends org.springframework.integration.config.xml.AbstractChannelParser; // Parser for a channel backed by an Apache Kafka topic.\npublic class KafkaInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the inbound channel adapter.\npublic class KafkaInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser; // Inbound gateway parser.\npublic class KafkaMessageDrivenChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser; // Parser for the message driven channel adapter.\npublic class KafkaNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // The namespace handler for the Apache Kafka namespace.\npublic class KafkaOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the outbound channel adapter.\npublic class KafkaOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the outbound gateway.\npublic final class KafkaParsingUtils extends Object; // Utilities to assist with parsing XML.\n", "des": "Provides parser classes to provide Xml namespace support for the Apache Kafka components."}
{"index": 347, "repo": "hadoop-hdfs-3.3.6", "code": "Package: datamodel\n\nClasses and Interfaces: \nClass DiskBalancerCluster; // DiskBalancerCluster represents the nodes that we are working against.\nClass DiskBalancerDataNode; // DiskBalancerDataNode represents a DataNode that exists in the cluster.\nClass DiskBalancerVolume; // DiskBalancerVolume represents a volume in the DataNode.\nClass DiskBalancerVolumeSet; // DiskBalancerVolumeSet is a collection of storage devices on the data node which are of similar StorageType.\n", "des": "Disk Balancer Data Model is the Data Model for the cluster that Disk Balancer is working against."}
{"index": 981, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: jaas\n\nClasses and Interfaces: \nClass AbstractJaasValidationCallbackHandler; // Abstract base class for integrating with JAAS.\nClass JaasCertificateValidationCallbackHandler; // Provides basic support for integrating with JAAS and certificates.\nClass JaasPlainTextPasswordValidationCallbackHandler; // Provides basic support for integrating with JAAS and plain text passwords.\n", "des": "Contains CallbackHandler implementations for XWSS that use the Java Authentication and Authorization Service (JAAS)."}
{"index": 2025, "repo": "spring-messaging-6.0.11", "code": "Package: core\n\nClasses and Interfaces: \npublic abstract class AbstractDestinationResolvingMessagingTemplate<D> extends AbstractMessagingTemplate<D> implements DestinationResolvingMessageSendingOperations<D>, DestinationResolvingMessageReceivingOperations<D>, DestinationResolvingMessageRequestReplyOperations<D>; // An extension of AbstractMessagingTemplate that adds operations for sending messages to a resolvable destination name.\npublic abstract class AbstractMessageReceivingTemplate<D> extends AbstractMessageSendingTemplate<D> implements MessageReceivingOperations<D>; // An extension of AbstractMessageSendingTemplate that adds support for receive style operations as defined by MessageReceivingOperations.\npublic abstract class AbstractMessageSendingTemplate<D> extends Object implements MessageSendingOperations<D>; // Abstract base class for implementations of MessageSendingOperations.\npublic abstract class AbstractMessagingTemplate<D> extends AbstractMessageReceivingTemplate<D> implements MessageRequestReplyOperations<D>; // An extension of AbstractMessageReceivingTemplate that adds support for request-reply style operations as defined by MessageRequestReplyOperations.\npublic class BeanFactoryMessageChannelDestinationResolver extends Object implements DestinationResolver<MessageChannel>, org.springframework.beans.factory.BeanFactoryAware; // An implementation of DestinationResolver that interprets a destination name as the bean name of a MessageChannel and looks up the bean in the configured BeanFactory.\npublic class CachingDestinationResolverProxy<D> extends Object implements DestinationResolver<D>, org.springframework.beans.factory.InitializingBean; // DestinationResolver implementation that proxies a target DestinationResolver, caching its CachingDestinationResolverProxy.resolveDestination(java.lang.String) results.\npublic class DestinationResolutionException extends MessagingException; // Thrown by a DestinationResolver when it cannot resolve a destination.\n@FunctionalInterface public interface DestinationResolver<D>; // Strategy for resolving a String destination name to an actual destination of type <D>.\npublic interface DestinationResolvingMessageReceivingOperations<D> extends MessageReceivingOperations<D>; // Extends MessageReceivingOperations and adds operations for receiving messages from a destination specified as a (resolvable) String name.\npublic interface DestinationResolvingMessageRequestReplyOperations<D> extends MessageRequestReplyOperations<D>; // Extends MessageRequestReplyOperations and adds operations for sending and receiving messages to and from a destination specified as a (resolvable) String name.\n", "des": "Defines interfaces and implementation classes for messaging templates."}
{"index": 1702, "repo": "drill-common-1.21.1", "code": "Package: exceptions\n\nClasses and Interfaces: \npublic class ChildErrorContext extends Object implements CustomErrorContext; // Represents an additional level of error context detail that adds to that provided by some outer context.\npublic interface CustomErrorContext; // Generic mechanism to pass error context throughout the row set mechanism and scan framework.\npublic class DrillConfigurationException extends DrillException;\npublic class DrillError extends Error;\npublic class DrillException extends Exception;\npublic class DrillIOException extends IOException;\npublic class DrillRuntimeException extends RuntimeException;\npublic class EmptyErrorContext extends Object implements CustomErrorContext;\npublic class ErrorHelper extends Object; // Utility class that handles error message generation from protobuf error objects.\npublic class RetryAfterSpillException extends Exception; // Special exception to be caught by caller, who is supposed to free memory by spilling and try again\npublic class UserException extends DrillRuntimeException; // Base class for all user exception.\npublic static class UserException.Builder extends Object; // Builder class for DrillUserException.\npublic class UserExceptionUtils extends Object; // Provides utilities (such as retrieving hints) to add more context to UserExceptions.\npublic class UserRemoteException extends UserException; // Wraps a DrillPBError object so we don't need to rebuilt it multiple times when sending it to the client.\n", "des": "Various exceptions used in logical, physical and execution contexts."}
{"index": 2172, "repo": "spring-security-web-6.1.2", "code": "Package: web\n\nSub Packages: \npackage web.access; // Access-control related classes and packages.\npackage web.authentication; // Authentication processing mechanisms, which respond to the submission of authentication credentials using various protocols (eg BASIC, CAS, form login etc).\npackage web.context; // Classes which are responsible for maintaining the security context between HTTP requests.\npackage web.jaasapi; // Makes a JAAS Subject available as the current Subject.\npackage web.jackson2; // Mix-in classes to provide Jackson serialization support.\npackage web.savedrequest; // Classes related to the caching of an HttpServletRequest which requires authentication.\npackage web.servletapi; // Populates a Servlet request with a new Spring Security compliant HttpServletRequestWrapper.\npackage web.session; // Session management filters, HttpSession events and publisher classes.\npackage web.util; // Web utility classes.\n\nClasses and Interfaces: \npublic interface AuthenticationEntryPoint; // Used by ExceptionTranslationFilter to commence an authentication scheme.\npublic class DefaultRedirectStrategy extends Object implements RedirectStrategy; // Simple implementation of RedirectStrategy which is the default used throughout the framework.\npublic final class DefaultSecurityFilterChain extends Object implements SecurityFilterChain; // Standard implementation of SecurityFilterChain.\npublic class FilterChainProxy extends org.springframework.web.filter.GenericFilterBean; // Delegates Filter requests to a list of Spring-managed filter beans.\npublic static interface FilterChainProxy.FilterChainDecorator; // A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request.\npublic static interface FilterChainProxy.FilterChainValidator;\npublic static final class FilterChainProxy.VirtualFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator; // A FilterChainProxy.FilterChainDecorator that uses the FilterChainProxy.VirtualFilterChain\npublic class FilterInvocation extends Object; // Holds objects associated with a HTTP filter.\npublic final class ObservationFilterChainDecorator extends Object implements FilterChainProxy.FilterChainDecorator; // A FilterChainProxy.FilterChainDecorator that wraps the chain in before and after observations\npublic interface PortMapper; // PortMapper implementations provide callers with information about which HTTP ports are associated with which HTTPS ports on the system, and vice versa.\n", "des": "Spring Security's web security module."}
{"index": 1117, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: task\n\nClasses and Interfaces: \nClass DeletionTask; // DeletionTasks are supplied to the DeletionService for deletion.\nClass DockerContainerDeletionTask; // DeletionTask handling the removal of Docker containers.\nClass FileDeletionTask; // DeletionTask handling the removal of files (and directories).\nEnum DeletionTaskType; // Available types of DeletionTasks.\n", "des": "Package containing DeletionTasks for use with the DeletionService."}
{"index": 3104, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: annotations\n\nClasses and Interfaces: \nClass QueryHints; // Consolidation of hints available to Hibernate JPA queries.\nEnum CacheConcurrencyStrategy; // Cache concurrency strategy.\nEnum CacheModeType; // Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CascadeType; // Cascade types (can override default JPA cascades).\nEnum FetchMode; // Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FlushModeType; // Enumeration extending javax.persistence flush modes.\nEnum GenerationTime; // At what time(s) will the generation occur?\nEnum LazyCollectionOption; // Lazy options available for a collection.\nEnum LazyToOneOption; // Lazy options available for a ToOne association.\nEnum NotFoundAction; // Possible actions when the database contains a non-null fk with no matching target.\nEnum OnDeleteAction; // Possible actions for on-delete.\nEnum OptimisticLockType; // Possible optimistic locking strategies.\nEnum PolymorphismType; // Type of available polymorphism for a particular entity.\nEnum ResultCheckStyle; // Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum SortType;\nEnum SourceType; // Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nAnnotation Type AccessType;\nAnnotation Type Any; // Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type AnyMetaDef;\nAnnotation Type AnyMetaDefs;\nAnnotation Type AttributeAccessor; // Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type BatchSize; // Defines size for batch loading of collections or lazy entities.\nAnnotation Type Cache; // Add caching strategy to a root entity or a collection.\nAnnotation Type Cascade; // Apply a cascade strategy on an association.\nAnnotation Type Check; // Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type CollectionId; // Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionType;\nAnnotation Type ColumnDefault; // Identifies the DEFAULT value to apply to the associated column via DDL.\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 1181, "repo": "commons-math3-3.6.1", "code": "Package: twod\n\nSub Packages: \npackage twod.util; // Utilities to visualize two-dimensional neural networks.\n\nClasses and Interfaces: \nClass NeuronSquareMesh2D; // Neural network with the topology of a two-dimensional surface.\nEnum NeuronSquareMesh2D.HorizontalDirection; // Horizontal (along row) direction.\nEnum NeuronSquareMesh2D.VerticalDirection; // Vertical (along column) direction.\n", "des": "Two-dimensional neural networks."}
{"index": 2955, "repo": "spring-integration-xml-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class XPathExpressionEvaluatingHeaderValueMessageProcessor extends Object implements org.springframework.integration.transformer.support.HeaderValueMessageProcessor<Object>, org.springframework.beans.factory.BeanFactoryAware; // The xPath-specific HeaderValueMessageProcessor\n", "des": "Contains support classes for Transformers."}
{"index": 3641, "repo": "solr-core-9.3.0", "code": "Package: cluster\n\nSub Packages: \npackage cluster.events; // Interfaces defining support for cluster-level event generation and processing.\npackage cluster.placement; // This package contains interfaces visible by plugins (i.e.\n\nClasses and Interfaces: \nInterface Cluster; // A representation of the SolrCloud cluster state, providing information on which nodes and collections are part of the cluster and a way to get to more detailed info.\nInterface Node; // Representation of a SolrCloud node or server in the SolrCloud cluster.\nInterface Replica; // An instantiation (or one of the copies) of a given Shard of a given SolrCollection.\nInterface Shard; // Shard in a SolrCollection, i.e.\nInterface SolrCollection; // Represents a Collection in SolrCloud (unrelated to Collection that uses the nicer name).\nEnum Replica.ReplicaState;\nEnum Replica.ReplicaType; // The order of this enum is important from the most to least \"important\" replica type.\nEnum Shard.ShardState;\n", "des": "This package contains the interfaces giving access to cluster state, including nodes, collections and the structure of the collections (shards and replicas)."}
{"index": 3816, "repo": "lucene-analysis-common-9.7.0", "code": "Package: sv\n\nClasses and Interfaces: \nClass SwedishAnalyzer; // Analyzer for Swedish.\nClass SwedishLightStemFilter; // A TokenFilter that applies SwedishLightStemmer to stem Swedish words.\nClass SwedishLightStemFilterFactory; // Factory for SwedishLightStemFilter.\nClass SwedishLightStemmer; // Light Stemmer for Swedish.\nClass SwedishMinimalStemFilter; // A TokenFilter that applies SwedishMinimalStemmer to stem Swedish words.\nClass SwedishMinimalStemFilterFactory; // Factory for SwedishMinimalStemFilter.\nClass SwedishMinimalStemmer; // Minimal Stemmer for Swedish.\n", "des": "Analyzer for Swedish."}
{"index": 2081, "repo": "spring-webmvc-6.0.11", "code": "Package: view\n\nSub Packages: \npackage view.document; // Support classes for document generation, providing View implementations for PDF and Excel.\npackage view.feed; // Support classes for feed generation, providing View implementations for Atom and RSS.\npackage view.freemarker; // Support classes for the integration of FreeMarker as Spring web view technology.\npackage view.groovy; // Support classes for the integration of Groovy Templates as Spring web view technology.\npackage view.json; // Support classes for providing a View implementation based on JSON serialization.\npackage view.script; // Support classes for views based on the JSR-223 script engine abstraction (as included in Java 6+), e.g.\npackage view.xml; // Support classes for providing a View implementation based on XML Marshalling.\npackage view.xslt; // Support classes for XSLT, providing a View implementation for XSLT stylesheets.\n\nClasses and Interfaces: \npublic abstract class AbstractCachingViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver; // Convenient base class for ViewResolver implementations.\n@FunctionalInterface public static interface AbstractCachingViewResolver.CacheFilter; // Filter that determines if view should be cached.\npublic abstract class AbstractTemplateView extends AbstractUrlBasedView; // Adapter base class for template-based view technologies such as FreeMarker, with the ability to use request and session attributes in their model and the option to expose helper objects for Spring's FreeMarker macro library.\npublic abstract class AbstractTemplateViewResolver extends UrlBasedViewResolver; // Abstract base class for template view resolvers, in particular for FreeMarker views.\npublic abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean; // Abstract base class for URL-based views.\npublic abstract class AbstractView extends org.springframework.web.context.support.WebApplicationObjectSupport implements View, org.springframework.beans.factory.BeanNameAware; // Abstract base class for View implementations.\npublic class BeanNameViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered; // A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e.\n", "des": "Provides standard View and ViewResolver implementations, including abstract base classes for custom implementations."}
{"index": 855, "repo": "calcite-core-1.34.0", "code": "Package: schema\n\nSub Packages: \npackage schema.impl; // Utilities to help implement Calcite's SPIs.\n\nClasses and Interfaces: \nInterface AggregateFunction; // Function that combines several values into a scalar result.\nInterface CustomColumnResolvingTable; // Extension to Table that specifies a custom way to resolve column names.\nInterface ExtensibleTable; // Table whose row type can be extended to include extra fields.\nInterface FilterableTable; // Table that can be scanned, optionally applying supplied filter expressions, without creating an intermediate relational expression.\nInterface Function; // Named expression that accepts parameters and returns a result.\nInterface FunctionContext; // Information about a function call that is passed to the constructor of a function instance.\nInterface FunctionParameter; // Parameter to a Function.\nInterface ImplementableAggFunction; // Function that can be translated to java code.\nInterface ImplementableFunction; // Function that can be translated to java code.\nInterface Member; // A named expression in a schema.\nInterface ModifiableTable; // A table that can be modified.\nInterface ModifiableView; // A modifiable view onto ModifiableTable.\nInterface Path; // Path from a root schema to a particular object (schema, table, function).\nInterface ProjectableFilterableTable; // Table that can be scanned, optionally applying supplied filter expressions, and projecting a given list of columns, without creating an intermediate relational expression.\nInterface QueryableTable; // Extension to Table that can translate itself to a Queryable.\nInterface ScalarFunction; // Function that returns a scalar result.\nInterface ScannableTable; // Table that can be scanned without creating an intermediate relational expression.\nInterface Schema; // A namespace for tables and functions.\nInterface SchemaFactory; // Factory for Schema objects.\nInterface SchemaPlus; // Extension to the Schema interface.\nInterface SchemaVersion; // An interface to represent a version ID that can be used to create a read-consistent view of a Schema.\nInterface SemiMutableSchema; // Schema to which materializations can be added.\nInterface Statistic; // Statistics about a Table.\nInterface StreamableTable; // Table that can be converted to a stream.\nInterface Table; // Table.\nInterface TableFactory<T extends Table>; // Factory for Table objects.\nInterface TableFunction; // Function that returns a table during execution time.\nInterface TableMacro; // Function that returns a Table.\n", "des": "Schema SPI."}
{"index": 845, "repo": "calcite-core-1.34.0", "code": "Package: metadata\n\nSub Packages: \npackage metadata.janino; // Code for generating metadata handlers.\n\nClasses and Interfaces: \nInterface BuiltInMetadata.AllPredicates; // Metadata about the predicates that hold in the rows emitted from a relational expression.\nInterface BuiltInMetadata.AllPredicates.Handler; // Handler API.\nInterface BuiltInMetadata.Collation; // Metadata about which columns are sorted.\nInterface BuiltInMetadata.Collation.Handler; // Handler API.\nInterface BuiltInMetadata.ColumnOrigin; // Metadata about the origins of columns.\nInterface BuiltInMetadata.ColumnOrigin.Handler; // Handler API.\nInterface BuiltInMetadata.ColumnUniqueness; // Metadata about whether a set of columns uniquely identifies a row.\nInterface BuiltInMetadata.ColumnUniqueness.Handler; // Handler API.\nInterface BuiltInMetadata.CumulativeCost; // Metadata about the cost of evaluating a relational expression, including all of its inputs.\nInterface BuiltInMetadata.CumulativeCost.Handler; // Handler API.\nInterface BuiltInMetadata.DistinctRowCount; // Metadata about the number of distinct rows returned by a set of columns in a relational expression.\nInterface BuiltInMetadata.DistinctRowCount.Handler; // Handler API.\nInterface BuiltInMetadata.Distribution; // Metadata about how a relational expression is distributed.\nInterface BuiltInMetadata.Distribution.Handler; // Handler API.\nInterface BuiltInMetadata.ExplainVisibility; // Metadata about whether a relational expression should appear in a plan.\nInterface BuiltInMetadata.ExplainVisibility.Handler; // Handler API.\nInterface BuiltInMetadata.ExpressionLineage; // Metadata about the origins of expressions.\nInterface BuiltInMetadata.ExpressionLineage.Handler; // Handler API.\nInterface BuiltInMetadata.LowerBoundCost; // Metadata to get the lower bound cost of a RelNode.\nInterface BuiltInMetadata.LowerBoundCost.Handler; // Handler API.\nInterface BuiltInMetadata.MaxRowCount; // Metadata about the maximum number of rows returned by a relational expression.\nInterface BuiltInMetadata.MaxRowCount.Handler; // Handler API.\nInterface BuiltInMetadata.Memory; // Metadata about the memory use of an operator.\nInterface BuiltInMetadata.Memory.Handler; // Handler API.\nInterface BuiltInMetadata.MinRowCount; // Metadata about the minimum number of rows returned by a relational expression.\n", "des": "Defines metadata interfaces and utilities for relational expressions."}
{"index": 3052, "repo": "spring-ws-core-4.0.5", "code": "Package: core\n\nSub Packages: \npackage core.support; // Convenient super class for application classes that need Web service access.\n\nClasses and Interfaces: \npublic interface FaultMessageResolver; // Defines the interface for objects than can resolve fault WebServiceMessages.\npublic class SimpleFaultMessageResolver extends Object implements FaultMessageResolver; // Simple fault resolver that simply throws a WebServiceFaultException when a fault occurs.\npublic interface SourceExtractor<T>; // Callback interface for extracting a result object from a Source instance.\npublic interface WebServiceMessageCallback; // Generic callback interface for code that operates on a WebServiceMessage.\npublic interface WebServiceMessageExtractor<T>; // Callback interface for extracting a result object from a WebServiceMessage instance.\npublic interface WebServiceOperations; // Specifies a basic set of Web service operations.\npublic class WebServiceTemplate extends WebServiceAccessor implements WebServiceOperations; // The central class for client-side Web services. It provides a message-driven approach to sending and receiving WebServiceMessage instances.\n", "des": "Core package of the Spring-WS client-side support."}
{"index": 3688, "repo": "solr-core-9.3.0", "code": "Package: search\n\nSub Packages: \npackage search.facet; // APIs and classes for the JSON Facet API.\npackage search.function; // Solr implementations of ValueSource for function queries.\npackage search.grouping; // APIs and classes for implementing result grouping\npackage search.join; // Classes related to joins.\npackage search.mlt; // APIs and classes for implementing MoreLikeThis (mlt) QueryParser.\npackage search.neural; // APIs and classes for implementing Neural (Dense Retrieval) QueryParsers.\npackage search.similarities; // Factories for various built-in Lucene ranking models.\npackage search.stats; // APIs and Classes implementing the Stats component used for document frequency calculations.\n\nClasses and Interfaces: \nInterface CacheRegenerator; // Implementations of CacheRegenerator are used in autowarming to populate a new cache based on an old cache.\nInterface DocIterator; // Simple Iterator of document Ids which may include score information.\nInterface DocList; // DocList represents the result of a query: an ordered list of document ids with optional score.\nInterface DocSetProducer;\nInterface ExtendedQuery; // The ExtendedQuery interface provides extra metadata to a query.\nInterface PostFilter; // The PostFilter interface provides a mechanism to further filter documents after they have already gone through the main query and other filters.\nInterface SolrCache<K,​V>; // Primary API for dealing with Solr's internal caches.\nClass AbstractReRankQuery;\nClass AnalyticsQuery; // Note: This API is experimental and may change in non backward-compatible ways in the future\nClass BitDocSet; // A FixedBitSet based implementation of a DocSet.\nClass BitsFilteredPostingsEnum;\nClass BoolQParserPlugin; // Create a boolean query from sub queries.\nClass BoostQParserPlugin; // Create a boosted query from the input value.\nClass CacheConfig; // Contains the knowledge of how cache config is stored in the solrconfig.xml file, and implements a factory to create caches.\nClass CaffeineCache<K,​V>; // A SolrCache backed by the Caffeine caching library [1].\nClass CancellableCollector; // Allows a query to be cancelled\n", "des": "APIs and classes for parsing and processing search requests"}
{"index": 67, "repo": "ignite-core-2.15.0", "code": "Package: checkpoint\n\nSub Packages: \npackage checkpoint.cache; // Contains cache-based implementation for checkpoint SPI.\npackage checkpoint.jdbc; // Contains JDBC implementation for checkpoint SPI.\npackage checkpoint.noop; // Contains default no-op checkpoint SPI implementation.\npackage checkpoint.sharedfs; // Contains shared file system implementation for checkpoint SPI.\n\nClasses and Interfaces: \nInterface CheckpointListener; // Listener for notifications of checkpoints removed by CheckpointSpi.\nInterface CheckpointSpi; // Checkpoint SPI provides an ability to save an intermediate job state.\n", "des": "Contains APIs for checkpoint SPI."}
{"index": 3350, "repo": "opencms-core-15.0", "code": "Package: editors\n\nSub Packages: \npackage editors.messagebundle; // The data bindings and logic for the translator editor.\n\nClasses and Interfaces: \nInterface I_CmsEditor; // Interface for resource editors.\nClass A_CmsFrameEditor; // Class to extended by frame based editors.\nClass CmsAcaciaEditor; // The acacia XML content editor.\nClass CmsEditorStateExtension; // Extension for iFrame embedded editors storing the changed state of the edited content.\nClass CmsSourceEditor; // The plain text editor.\nClass CmsSourceEditor.EditorSettings; // Stores the editor settings.\nClass CmsXmlContentEditor; // The acacia XML content editor.\nClass CmsXmlPageEditor; // The acacia XML content editor.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "The available content editors."}
{"index": 3430, "repo": "hibernate-core-5.6.15.Final", "code": "Package: xsd\n\nClasses and Interfaces: \nClass ConfigXsdSupport; // Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass LocalXsdResolver; // When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass MappingXsdSupport; // Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass XsdDescriptor; // Representation of a locally resolved XSD\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 3101, "repo": "jena-querybuilder-4.9.0", "code": "Package: handlers\n\nClasses and Interfaces: \npublic class AggregationHandler extends Object implements Handler; // Class to handle manipulation the aggregation variables in the query.\npublic class ConstructHandler extends Object implements Handler; // The handler for construct clauses.\npublic class DatasetHandler extends Object implements Handler; // Handler for a dataset.\npublic interface Handler; // The base interface for handlers.\npublic class HandlerBlock extends Object; // A class to handle all the handlers of a query builder and keep them in sync as needed.\npublic class PrologHandler extends Object implements Handler; // The prolog handler\npublic class SelectHandler extends Object implements Handler; // A Select clause handler.\npublic class SolutionModifierHandler extends Object implements Handler; // The Solution Modifier handler.\npublic class ValuesHandler extends Object implements Handler;\npublic class WhereHandler extends Object implements Handler; // The where handler.\n", "des": "Classes that implement SPARQL clauses but do not return instances of the builder."}
{"index": 289, "repo": "pdfbox-3.0.0-beta1", "code": "Package: prepress\n\nClasses and Interfaces: \nClass PDBoxStyle; // The Box Style specifies visual characteristics for displaying box areas.\n", "des": "This package contains classes for prepress support in PDFBox."}
{"index": 3363, "repo": "opencms-core-15.0", "code": "Package: workflow\n\nClasses and Interfaces: \nInterface CmsDefaultPublishResourceFormatter.I_PublishResourceValidator; // Validator which can exclude some resources from publishing and supplies a status object for the excluded resources.\nInterface I_CmsPublishResourceFormatter; // 'Formats' a ResourceMap containing resources for publishing by creating a list of CmsPublishResource beans with the appropriate status informations to display.\nInterface I_CmsWorkflowManager; // Workflow manager interface.\nClass A_CmsWorkflowManager; // Abstract class which provides common functionality for workflow managers, like initialization of the configuration parameters.\nClass CmsDefaultPublishResourceFormatter; // Default formatter class for publish resources.\nClass CmsDefaultPublishResourceFormatter.DefaultComparator; // Compares publish resources by their sort date.\nClass CmsDefaultWorkflowManager; // The default implementation of the workflow manager interface, which offers only publish functionality.\nClass CmsExtendedPublishResourceFormatter; // Publish resource formatter for the extended workflow manager.\nClass CmsExtendedRealProjectWrapper; // Project wrapper which specially handles the 'release' workflow by reading resources of a project regardless of publish permissions.\nClass CmsExtendedWorkflowManager; // The default workflow manager implementation, which supports 2 basic actions, Release and Publish.\nClass CmsWorkflowNotification; // Notification class for the workflow 'release' action.\nClass CmsWorkflowResources; // Set of workflow resources, and an optional workflow.\nClass Messages; // The message bundle for the workflow package.\nClass CmsInvalidActionException; // An exception which indicates that a user tried to execute an invalid workflow action.\nClass CmsNewParentNotInWorkflowException; // An exception which indicates that the user tried to trigger a workflow action for a set of resources for which some parent folder is not included in the set, but has the resource state 'new'.\n", "des": "Classes related to publishing and workflow."}
{"index": 3112, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: xsd\n\nClasses and Interfaces: \nClass ConfigXsdSupport; // Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass LocalXsdResolver; // When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass MappingXsdSupport; // Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass XsdDescriptor; // Representation of a locally resolved XSD\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 2268, "repo": "spring-vault-core-3.0.4", "code": "Package: convert\n\nClasses and Interfaces: \npublic abstract class AbstractVaultConverter extends Object implements VaultConverter, InitializingBean; // Base class for VaultConverter implementations.\npublic class DefaultVaultTypeMapper extends DefaultTypeMapper<Map<String,Object>> implements VaultTypeMapper; // Default implementation of VaultTypeMapper allowing configuration of the key to lookup and store type information in SecretDocument.\npublic class MappingVaultConverter extends AbstractVaultConverter; // VaultConverter that uses a MappingContext to do sophisticated mapping of domain objects to SecretDocument.\npublic class SecretDocument extends Object; // Vault database exchange object containing data before/after it's exchanged with Vault.\npublic interface VaultConverter extends EntityConverter<VaultPersistentEntity<?>,VaultPersistentProperty,Object,SecretDocument>; // Central Vault-specific converter interface.\npublic class VaultCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic interface VaultTypeMapper extends TypeMapper<Map<String,Object>>; // Vault-specific TypeMapper exposing that SecretDocuments might contain a type key.\n", "des": "Spring Vault specific converter infrastructure."}
{"index": 1488, "repo": "tribuo-core-4.3.1", "code": "Package: sequence\n\nClasses and Interfaces: \npublic abstract class AbstractSequenceEvaluator<T extends Output<T>,C extends MetricContext<T>,E extends SequenceEvaluation<T>,M extends EvaluationMetric<T,C>> extends Object implements SequenceEvaluator<T,E>; // Base class for sequence evaluators.\npublic final class HashingSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T>; // A SequenceTrainer that hashes all the feature names on the way in.\npublic static class HashingSequenceTrainer.HashingSequenceTrainerProvenance extends SkeletalTrainerProvenance; // Provenance for HashingSequenceTrainer.\npublic class ImmutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T> implements Serializable; // This is a SequenceDataset which has an ImmutableFeatureMap to store the feature information.\npublic class IndependentSequenceModel<T extends Output<T>> extends SequenceModel<T>; // A SequenceModel which independently predicts each element of the sequence.\npublic class IndependentSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T>; // Trains a sequence model by training a regular model to independently predict every example in each sequence.\npublic class MinimumCardinalitySequenceDataset<T extends Output<T>> extends ImmutableSequenceDataset<T>; // This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.\npublic static class MinimumCardinalitySequenceDataset.MinimumCardinalitySequenceDatasetProvenance extends DatasetProvenance; // Provenance for MinimumCardinalitySequenceDataset.\npublic class MutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T>; // A MutableSequenceDataset is a SequenceDataset with a MutableFeatureMap which grows over time.\npublic abstract class SequenceDataset<T extends Output<T>> extends Object implements Iterable<SequenceExample<T>>, ProtoSerializable<org.tribuo.protos.core.SequenceDatasetProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<DatasetProvenance>, Serializable; // A class for sets of data, which are used to train and evaluate classifiers.\n", "des": "Provides core classes for working with sequences of Examples."}
{"index": 2128, "repo": "spring-context-support-6.0.11", "code": "Package: jcache\n\nSub Packages: \npackage jcache.config; // Support package for declarative JSR-107 caching configuration.\npackage jcache.interceptor; // AOP-based solution for declarative caching demarcation using JSR-107 annotations.\n\nClasses and Interfaces: \npublic class JCacheCache extends org.springframework.cache.support.AbstractValueAdaptingCache; // Cache implementation on top of a javax.cache.Cache instance.\npublic class JCacheCacheManager extends AbstractTransactionSupportingCacheManager; // CacheManager implementation backed by a JCache javax.cache.CacheManager.\npublic class JCacheManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<javax.cache.CacheManager>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean for a JCache javax.cache.CacheManager, obtaining a pre-defined CacheManager by name through the standard JCache javax.cache.Caching class.\n", "des": "Implementation package for JSR-107 (javax.cache aka \"JCache\") based caches."}
{"index": 2718, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: file\n\nSub Packages: \npackage file.builder; // Builders for file item readers and writers.\npackage file.mapping; // Infrastructure implementations of io file support mapping concerns.\npackage file.separator; // Infrastructure implementations of io file support separator concerns.\npackage file.transform; // Infrastructure implementations of io file support transform concerns.\n\nClasses and Interfaces: \npublic interface BufferedReaderFactory; // A factory strategy for custom extensions of BufferedReader allowing customisation of the standard behaviour of the java.io variety.\npublic class DefaultBufferedReaderFactory extends Object implements BufferedReaderFactory;\npublic interface FlatFileFooterCallback; // Callback interface for writing a footer to a file.\npublic interface FlatFileHeaderCallback; // Callback interface for writing a header to a file.\npublic class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean; // Restartable ItemReader that reads lines from input FlatFileItemReader.setResource(Resource).\npublic class FlatFileItemWriter<T> extends AbstractFileItemWriter<T>; // This class is an item writer that writes data to a file or stream.\npublic class FlatFileParseException extends ParseException; // Exception thrown when errors are encountered parsing flat files.\npublic interface LineCallbackHandler; // Callback interface for handling a line from file.\npublic interface LineMapper<T>; // Interface for mapping lines (strings) to domain objects typically used to map lines read from a file to domain objects on a per line basis.\npublic class MultiResourceItemReader<T> extends AbstractItemStreamItemReader<T>; // Reads items from multiple resources sequentially - resource list is given by MultiResourceItemReader.setResources(Resource[]), the actual reading is delegated to MultiResourceItemReader.setDelegate(ResourceAwareItemReaderItemStream).\npublic class MultiResourceItemWriter<T> extends AbstractItemStreamItemWriter<T>; // Wraps a ResourceAwareItemWriterItemStream and creates a new output resource when the count of items written in current resource exceeds MultiResourceItemWriter.setItemCountLimitPerResource(int).\npublic class NonTransientFlatFileException extends NonTransientResourceException; // Exception thrown when errors are encountered with the underlying resource.\n", "des": "Infrastructure implementations of io file concerns."}
{"index": 810, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: synonym\n\nClasses and Interfaces: \nClass SolrSynonymParser; // Parser for the Solr synonyms format.\nClass SynonymFilter; // Use SynonymGraphFilter instead, but be sure to also use FlattenGraphFilter at index time (not at search time) as well.\nClass SynonymFilterFactory; // Use SynonymGraphFilterFactory instead, but be sure to also use FlattenGraphFilterFactory at index time (not at search time) as well.\nClass SynonymGraphFilter; // Applies single- or multi-token synonyms from a SynonymMap to an incoming TokenStream, producing a fully correct graph output.\nClass SynonymGraphFilterFactory; // Factory for SynonymGraphFilter.\nClass SynonymMap; // A map of synonyms, keys and values are phrases.\nClass SynonymMap.Builder; // Builds an FSTSynonymMap.\nClass SynonymMap.Parser; // Abstraction for parsing synonym files.\nClass WordnetSynonymParser; // Parser for wordnet prolog format\n", "des": "Analysis components for Synonyms."}
{"index": 2688, "repo": "spring-data-jpa-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic interface CrudMethodMetadata; // Interface to abstract CrudMethodMetadata that provide the LockModeType to be used for query execution.\npublic class DefaultJpaContext extends Object implements JpaContext; // Default implementation of JpaContext.\npublic class EntityManagerBeanDefinitionRegistrarPostProcessor extends Object implements BeanFactoryPostProcessor, Ordered; // BeanFactoryPostProcessor to register a SharedEntityManagerCreator for every EntityManagerFactory bean definition found in the application context to enable autowiring EntityManager instances into constructor arguments.\npublic interface JpaEntityInformation<T,ID> extends EntityInformation<T,ID>, JpaEntityMetadata<T>; // Extension of EntityInformation to capture additional JPA specific information about entities.\npublic abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID>; // Base class for JpaEntityInformation implementations to share common method implementations.\npublic class JpaEvaluationContextExtension extends Object implements EvaluationContextExtension; // EvaluationContextExtension to register EscapeCharacter as root object to essentially expose an expose(…) function to SpEL.\npublic static class JpaEvaluationContextExtension.JpaRootObject extends Object;\npublic class JpaMetamodelEntityInformation<T,ID> extends JpaEntityInformationSupport<T,ID>; // Implementation of EntityInformation that uses JPA Metamodel to find the domain class' id field.\npublic class JpaPersistableEntityInformation<T extends Persistable<ID>,ID> extends JpaMetamodelEntityInformation<T,ID>; // Extension of JpaMetamodelEntityInformation that consideres methods of Persistable to lookup the id.\npublic class JpaRepositoryFactory extends RepositoryFactorySupport; // JPA specific generic repository factory.\npublic class JpaRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends TransactionalRepositoryFactoryBeanSupport<T,S,ID>; // Special adapter for Springs FactoryBean interface to allow easy setup of repository factories via Spring configuration.\n@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T>; // SPI interface to be implemented by JpaRepository implementations.\n", "des": "JPA repository implementations."}
{"index": 3661, "repo": "solr-core-9.3.0", "code": "Package: tagger\n\nClasses and Interfaces: \nInterface TagClusterReducer;\nInterface TaggingAttribute; // Attribute used by the Tagger to decide if a token can start a new tag.\nClass OffsetCorrector;\nClass Tagger; // Tags maximum string of words in a corpus.\nClass TaggerRequestHandler; // Scans posted text, looking for matching strings in the Solr index.\nClass TaggingAttributeImpl; // Implementation of the TaggingAttribute\nClass TagLL; // This is a Tag -- a startOffset, endOffset and value.\nClass XmlOffsetCorrector; // Corrects offsets to adjust for XML formatted data.\n", "des": "The TaggerRequestHandler and supporting classes."}
{"index": 1730, "repo": "spring-jdbc-6.0.11", "code": "Package: embedded\n\nClasses and Interfaces: \npublic interface ConnectionProperties; // ConnectionProperties serves as a simple data container that allows essential JDBC connection properties to be configured consistently, independent of the actual DataSource implementation.\npublic interface DataSourceFactory; // DataSourceFactory encapsulates the creation of a particular DataSource implementation such as a non-pooling SimpleDriverDataSource or a HikariCP pool setup in the shape of a HikariDataSource.\npublic interface EmbeddedDatabase extends DataSource; // EmbeddedDatabase serves as a handle to an embedded database instance.\npublic class EmbeddedDatabaseBuilder extends Object; // A builder that provides a convenient API for constructing an embedded database.\npublic interface EmbeddedDatabaseConfigurer; // EmbeddedDatabaseConfigurer encapsulates the configuration required to create, connect to, and shut down a specific type of embedded database such as HSQL, H2, or Derby.\npublic class EmbeddedDatabaseFactory extends Object; // Factory for creating an EmbeddedDatabase instance.\npublic class EmbeddedDatabaseFactoryBean extends EmbeddedDatabaseFactory implements org.springframework.beans.factory.FactoryBean<DataSource>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // A subclass of EmbeddedDatabaseFactory that implements FactoryBean for registration as a Spring bean.\npublic enum EmbeddedDatabaseType extends Enum<EmbeddedDatabaseType>; // A supported embedded database type.\npublic final class OutputStreamFactory extends Object; // Internal helper for exposing dummy OutputStreams to embedded databases such as Derby, preventing the creation of a log file.\n", "des": "Provides extensible support for creating embedded database instances."}
{"index": 1665, "repo": "jena-core-4.9.0", "code": "Package: iterator\n\nClasses and Interfaces: \npublic interface ClosableIterator<T> extends IteratorCloseable<T>; // An iterator which should be closed after use.\npublic interface ExtendedIterator<T> extends ClosableIterator<T>; // An ExtendedIterator is a ClosableIterator on which other operations are defined for convenience in iterator composition: composition, filtering in, filtering out, and element mapping. NOTE that the result of these operations consumes the base iterator(s); they do not make independent copies.\npublic class FilterIterator<T> extends WrappedIterator<T>; // Creates a sub-Iterator by filtering.\npublic abstract class LazyIterator<T> extends NiceIterator<T>; // An ExtendedIterator that is created lazily.\npublic class Map1Iterator<From,To> extends NiceIterator<To>; // An iterator that consumes an underlying iterator and maps its results before delivering them; supports remove if the underlying iterator does.\npublic interface MapFilter<R,S>; // Combines the actions of Map and Filter, mapping unacceptable objects to null and acceptable ones to their mapped value.\npublic class MapFilterIterator<T,X> extends NiceIterator<X> implements ExtendedIterator<X>; // A MapFilterIterator takes a MapFilter and an [Extended]Iterator and returns a new ExtendedIterator which delivers the sequence of all non-null elements MapFilter(X) for X from the base iterator.\npublic class NiceIterator<T> extends Object implements ExtendedIterator<T>; // NiceIterator is the standard base class implementing ExtendedIterator.\npublic class NullIterator<T> extends NiceIterator<T>; // An empty iterator.\npublic class RandomOrderIterator<T> extends WrappedIterator<T>; // RandomOrderIterator - Reorders the elements returned by an Iterator.\npublic class SingletonIterator<T> extends NiceIterator<T> implements ExtendedIterator<T>; // A ClosableIterator that contains only one element\npublic class UniqueFilter<T> extends Object implements Predicate<T>; // A Filter that filters out duplicate values.\npublic class WrappedIterator<T> extends NiceIterator<T>; // a WrappedIterator is an ExtendedIterator wrapping around a plain (or presented as plain) Iterator.\n", "des": "A package for defining useful iterators and iterator operations, including concatenation, mapping, filtering, empty and singleton iterators, iterator wrappers, and the ExtendedIterator class used in many places in Jena."}
{"index": 1716, "repo": "spring-boot-test-3.1.1", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class ApplicationContextTestUtils extends Object; // Application context related test utilities.\npublic final class TestPropertyValues extends Object; // Test utilities for adding properties.\npublic static final class TestPropertyValues.Pair extends Object; // A single name value pair.\npublic static enum TestPropertyValues.Type extends Enum<TestPropertyValues.Type>; // The type of property source.\n", "des": "General purpose test utilities."}
{"index": 3519, "repo": "opennlp-tools-2.2.0", "code": "Package: irishsentencebank\n\nClasses and Interfaces: \nClass IrishSentenceBankDocument; // A structure to hold an Irish Sentence Bank document, which is a collection of tokenized sentences.\nClass IrishSentenceBankDocument.IrishSentenceBankFlex;\nClass IrishSentenceBankDocument.IrishSentenceBankSentence;\nClass IrishSentenceBankSentenceStreamFactory<P>;\nClass IrishSentenceBankTokenSampleStreamFactory<P>;\n", "des": "Experimental package related to the Irish Sentence Bank format."}
{"index": 2280, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: index\n\nClasses and Interfaces: \npublic abstract class AliasAction extends Object; // A single action to be contained in AliasActions.\npublic static class AliasAction.Add extends AliasAction; // AliasAction to add an alias.\npublic static class AliasAction.Remove extends AliasAction; // AliasAction to remove an alias.\npublic static class AliasAction.RemoveIndex extends AliasAction; // AliasAction to remove an index.\npublic class AliasActionParameters extends Object; // Value class capturing the arguments for an AliasAction.\npublic static final class AliasActionParameters.Builder extends Object;\npublic class AliasActions extends Object; // Class to define to actions to execute in alias management functions.\npublic class AliasData extends Object; // value object to describe alias information.\npublic record ComponentTemplateRequestData(Settings settings, Document mapping, AliasActions aliasActions, Boolean allowAutoCreate) extends Record; // A component template to be used in a component template request.\npublic static final class ComponentTemplateRequestData.Builder extends Object;\npublic record DeleteComponentTemplateRequest(String templateName) extends Record;\npublic record DeleteIndexTemplateRequest(String templateName) extends Record;\npublic class DeleteTemplateRequest extends Object;\npublic record ExistsComponentTemplateRequest(String templateName) extends Record;\npublic record ExistsIndexTemplateRequest(String templateName) extends Record;\npublic class ExistsTemplateRequest extends Object;\npublic record GetComponentTemplateRequest(String templateName) extends Record;\npublic record GetIndexTemplateRequest(String templateName) extends Record;\npublic class GetTemplateRequest extends Object;\npublic class MappingBuilder extends Object;\npublic final class MappingParameters extends Object; // A class to hold the mapping parameters that might be set on Field or InnerField annotation.\npublic record PutComponentTemplateRequest(String name, Long version, Boolean create, Duration masterTimeout, ComponentTemplateRequestData template) extends Record;\npublic static final class PutComponentTemplateRequest.Builder extends Object;\npublic record PutIndexTemplateRequest(String name, String[] indexPatterns, Settings settings, Document mapping, AliasActions aliasActions, List<String> composedOf) extends Record;\npublic static class PutIndexTemplateRequest.Builder extends Object;\npublic class PutTemplateRequest extends Object; // Request to create an index template.\npublic static final class PutTemplateRequest.TemplateRequestBuilder extends Object;\npublic class ReactiveMappingBuilder extends MappingBuilder; // Subclass of MappingBuilder with specialized methods To inhibit blocking calls\n", "des": "Classes related to Elasticsearch index management."}
{"index": 1373, "repo": "spring-boot-actuator-3.1.1", "code": "Package: beans\n\nClasses and Interfaces: \n@Endpoint(id=\"beans\") public class BeansEndpoint extends Object; // @Endpoint to expose details of an application's beans, grouped by application context.\npublic static final class BeansEndpoint.BeanDescriptor extends Object; // Description of a bean.\npublic static final class BeansEndpoint.BeansDescriptor extends Object implements OperationResponseBody; // Description of an application's beans.\npublic static final class BeansEndpoint.ContextBeansDescriptor extends Object; // Description of an application context beans.\n", "des": "Actuator support relating to Spring Beans."}
{"index": 553, "repo": "hadoop-common-3.3.4", "code": "Package: audit\n\nClasses and Interfaces: \nClass AuditStatisticNames; // Statistic Names for Auditing.\nClass CommonAuditContext; // The common audit context is a map of common context information which can be used with any audit span.\n", "des": "Public classes for adding information to any auditing information picked up by filesystem clients."}
{"index": 1160, "repo": "commons-math3-3.6.1", "code": "Package: fraction\n\nClasses and Interfaces: \nClass AbstractFormat; // Common part shared by both FractionFormat and BigFractionFormat.\nClass BigFraction; // Representation of a rational number without any overflow.\nClass BigFractionField; // Representation of the fractional numbers without any overflow field.\nClass BigFractionFormat; // Formats a BigFraction number in proper format or improper format.\nClass Fraction; // Representation of a rational number.\nClass FractionField; // Representation of the fractional numbers field.\nClass FractionFormat; // Formats a Fraction number in proper format or improper format.\nClass ProperBigFractionFormat; // Formats a BigFraction number in proper format.\nClass ProperFractionFormat; // Formats a Fraction number in proper format.\nClass FractionConversionException; // Error thrown when a double value cannot be converted to a fraction in the allowed number of iterations.\n", "des": "Fraction number type and fraction number formatting."}
{"index": 1161, "repo": "commons-math3-3.6.1", "code": "Package: genetics\n\nClasses and Interfaces: \nInterface CrossoverPolicy; // Policy used to create a pair of new chromosomes by performing a crossover operation on a source pair of chromosomes.\nInterface Fitness; // Fitness of a chromosome.\nInterface MutationPolicy; // Algorithm used to mutate a chromosome.\nInterface PermutationChromosome<T>; // Interface indicating that the chromosome represents a permutation of objects.\nInterface Population; // A collection of chromosomes that facilitates generational evolution.\nInterface SelectionPolicy; // Algorithm used to select a chromosome pair from a population.\nInterface StoppingCondition; // Algorithm used to determine when to stop evolution.\nClass AbstractListChromosome<T>; // Chromosome represented by an immutable list of a fixed length.\nClass BinaryChromosome; // Chromosome represented by a vector of 0s and 1s.\nClass BinaryMutation; // Mutation for BinaryChromosomes.\nClass Chromosome; // Individual in a population.\nClass ChromosomePair; // A pair of Chromosome objects.\nClass CycleCrossover<T>; // Cycle Crossover [CX] builds offspring from ordered chromosomes by identifying cycles between two parent chromosomes.\nClass ElitisticListPopulation; // Population of chromosomes which uses elitism (certain percentage of the best chromosomes is directly copied to the next generation).\nClass FixedElapsedTime; // Stops after a fixed amount of time has elapsed.\nClass FixedGenerationCount; // Stops after a fixed number of generations.\nClass GeneticAlgorithm; // Implementation of a genetic algorithm.\nClass ListPopulation; // Population of chromosomes represented by a List.\nClass NPointCrossover<T>; // N-point crossover policy.\nClass OnePointCrossover<T>; // One point crossover policy.\nClass OrderedCrossover<T>; // Order 1 Crossover [OX1] builds offspring from ordered chromosomes by copying a consecutive slice from one parent, and filling up the remaining genes from the other parent as they appear.\nClass RandomKey<T>; // Random Key chromosome is used for permutation representation.\nClass RandomKeyMutation; // Mutation operator for RandomKeys.\nClass TournamentSelection; // Tournament selection scheme.\n", "des": "This package provides Genetic Algorithms components and implementations."}
{"index": 3355, "repo": "opencms-core-15.0", "code": "Package: login\n\nClasses and Interfaces: \nInterface I_CmsLoginTargetRpc; // Client RPC interface for opening a login target.\n", "des": "Contains the user shared classes for the Vaadin-based login dialog."}
{"index": 2368, "repo": "camel-base-4.0.0-RC1", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class AbstractContextEvent extends EventObject implements org.apache.camel.spi.CamelEvent.CamelContextEvent; // Base class for CamelContext events.\npublic abstract class AbstractExchangeEvent extends EventObject implements org.apache.camel.spi.CamelEvent.ExchangeEvent; // Base class for Exchange events.\npublic abstract class AbstractRouteEvent extends EventObject implements org.apache.camel.spi.CamelEvent.RouteEvent; // Base class for CamelContext events.\npublic abstract class AbstractStepEvent extends AbstractExchangeEvent; // Base class for step events.\npublic class CamelContextInitializedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializedEvent;\npublic class CamelContextInitializingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextInitializingEvent;\npublic class CamelContextReloadedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadedEvent;\npublic class CamelContextReloadFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadFailureEvent;\npublic class CamelContextReloadingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextReloadingEvent;\npublic class CamelContextResumedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumedEvent;\npublic class CamelContextResumeFailureEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumeFailureEvent;\npublic class CamelContextResumingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextResumingEvent;\npublic class CamelContextRoutesStartedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartedEvent;\npublic class CamelContextRoutesStartingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStartingEvent;\npublic class CamelContextRoutesStoppedEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppedEvent;\npublic class CamelContextRoutesStoppingEvent extends AbstractContextEvent implements org.apache.camel.spi.CamelEvent.CamelContextRoutesStoppingEvent;\n", "des": "Camel management events"}
{"index": 2418, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@EndpointCloudFoundryExtension(endpoint=org.springframework.boot.actuate.health.HealthEndpoint.class) public class CloudFoundryReactiveHealthEndpointWebExtension extends Object; // Reactive @EndpointExtension for the HealthEndpoint that always exposes full health details.\n@AutoConfiguration(after={HealthEndpointAutoConfiguration.class,InfoEndpointAutoConfiguration.class}) @ConditionalOnProperty(prefix=\"management.cloudfoundry\", name=\"enabled\", matchIfMissing=true) @ConditionalOnWebApplication(type=REACTIVE) @ConditionalOnCloudPlatform(CLOUD_FOUNDRY) public class ReactiveCloudFoundryActuatorAutoConfiguration extends Object; // Auto-configuration to expose actuator endpoints for Cloud Foundry to use in a reactive environment.\n", "des": "Auto-configuration for actuator Cloud Foundry concerns using WebFlux."}
{"index": 3612, "repo": "lucene-suggest-9.7.0", "code": "Package: document\n\nClasses and Interfaces: \nClass Completion50PostingsFormat; // CompletionPostingsFormat for org.apache.lucene.backward_codecs.lucene50.Lucene50PostingsFormat.\nClass Completion84PostingsFormat; // CompletionPostingsFormat for org.apache.lucene.backward_codecs.lucene84.Lucene84PostingsFormat.\nClass Completion90PostingsFormat; // CompletionPostingsFormat for Lucene90PostingsFormat\nClass CompletionAnalyzer; // Wraps an Analyzer to provide additional completion-only tuning (e.g.\nClass CompletionPostingsFormat; // A PostingsFormat which supports document suggestion based on indexed SuggestFields.\nClass CompletionQuery; // Abstract Query that match documents containing terms with a specified prefix filtered by BitsProducer.\nClass CompletionScorer; // Expert: Responsible for executing the query against an appropriate suggester and collecting the results via a collector.\nClass CompletionsTermsReader; // Holder for suggester and field-level info for a suggest field\nClass CompletionTerms; // Wrapped Terms used by SuggestField and ContextSuggestField to access corresponding suggester and their attributes\nClass CompletionTokenStream; // A ConcatenateGraphFilter but we can set the payload and provide access to config options.\nClass CompletionWeight; // Expert: the Weight for CompletionQuery, used to score and explain these queries.\nClass ContextQuery; // A CompletionQuery that matches documents specified by a wrapped CompletionQuery supporting boosting and/or filtering by specified contexts.\nClass ContextSuggestField; // SuggestField which additionally takes in a set of contexts.\nClass FuzzyCompletionQuery; // A CompletionQuery that match documents containing terms within an edit distance of the specified prefix.\nClass NRTSuggester; // NRTSuggester executes Top N search on a weighted FST specified by a CompletionScorer\nClass PrefixCompletionQuery; // A CompletionQuery which takes an Analyzer to analyze the prefix of the query term.\nClass RegexCompletionQuery; // A CompletionQuery which takes a regular expression as the prefix of the query term.\nClass SuggestField; // Field that indexes a string value and a weight as a weighted completion against a named suggester.\nClass SuggestIndexSearcher; // Adds document suggest capabilities to IndexSearcher.\n", "des": "Support for document suggestion"}
{"index": 2142, "repo": "wicket-core-10.0.0-M1", "code": "Package: markup\n\nSub Packages: \npackage markup.html; // Base package of HTML markup.\npackage markup.parser; // The default parsing engine of Wicket.\npackage markup.resolver; // Resolvers implement the IComponentResolver interface and must be registered with the application.\npackage markup.transformer; // Transformers are able to post-process (transform) the output generated by a Component.\n\nClasses and Interfaces: \npublic abstract class AbstractMarkupFragment extends Object implements IMarkupFragment; // A base implementation of IMarkupFragment.\npublic abstract class AbstractMarkupParser extends Object; // This is a base MarkupParser specifically for (X)HTML.\npublic class ComponentTag extends MarkupElement; // A subclass of MarkupElement which represents a \"significant\" markup tag, such as a component open tag.\npublic static interface ComponentTag.IAutoComponentFactory; // Factory that creates component during markup root container's initialization.\npublic class ContainerInfo extends Object; // Because Component has a reference to its parents, which eventually is the Page, keeping a \"copy\" of a component is very expensive.\npublic class DefaultMarkupCacheKeyProvider extends Object implements IMarkupCacheKeyProvider; // Wicket default implementation for the cache key used to reference the cached markup resource stream.\npublic class DefaultMarkupResourceStreamProvider extends Object implements IMarkupResourceStreamProvider; // Wicket default implementation for loading the markup resource stream associated with a MarkupContainer.\npublic class HtmlSpecialTag extends MarkupElement;\npublic interface IMarkupCache; // Each Wicket application has a single IMarkupCache associated with it (see MarkupSettings).\npublic interface IMarkupCacheKeyProvider; // To be implemented by MarkupContainers that wish to implement their own algorithms for the markup cache key.\npublic interface IMarkupFragment extends Iterable<MarkupElement>; // Any list of MarkupElements.\npublic interface IMarkupResourceStreamProvider; // To be implemented by MarkupContainer which wish to implement their own algorithms for loading the markup resource stream.\npublic class Markup extends AbstractMarkupFragment; // The content of a markup file, consisting of a list of markup elements.\npublic class MarkupCache extends Object implements IMarkupCache; // This is Wicket's default IMarkupCache implementation.\npublic static class MarkupCache.DefaultCacheImplementation<K,V> extends Object implements MarkupCache.ICache<K,V>;\n", "des": "Base package for markup."}
{"index": 130, "repo": "ignite-core-2.15.0", "code": "Package: internal\n\nSub Packages: \npackage internal.binary; // Contains binary APIs internal implementation.\npackage internal.executor; // Contains grid executor service implementation.\npackage internal.managers; // TODO.\npackage internal.mxbean; // Contains internal mxbeans stuff.\npackage internal.processors; // Package with Apache Ignite internal Processors.\npackage internal.suggestions; // Contains classes for configurations suggestions.\npackage internal.util; // System-wide utility routine and helper classes.\npackage internal.worker; // System worker registry and control MBean implementation.\n\nClasses and Interfaces: \nInterface ExecutorAwareMessage; // Message with specified custom executor must be processed in the appropriate thread pool.\nInterface GridComponent; // Interface for all main internal Ignite components (managers and processors).\nInterface GridInternalWrapper<T>; // Internal wrapper interface for custom resource injection logic.\nInterface GridKernalContext;\nInterface GridKernalGateway; // This interface guards access to implementations of public methods that access kernal functionality from the following main API interfaces: ClusterGroup Note that this kernal gateway should not be used to guard against method from the following non-rich interfaces since their implementations are already managed by their respective implementing classes: Ignite ClusterNode Kernal gateway is also responsible for notifying various futures about the change in kernal state so that issued futures could properly interrupt themselves when kernal becomes unavailable while future is held externally by the user.\nInterface GridProxyListener; // Interception listener is notified about method apply.\nInterface GridTaskSessionInternal; // Internal task session interface.\nInterface IgniteDiagnosticAware;\nInterface IgniteEx; // Extended Grid interface which provides some additional methods required for kernal and Visor.\nInterface IgniteInternalFuture<R>; // Extension for standard Future interface.\nInterface IgniteServicesEx; // Extended interface that provides additional internal methods for managing services.\nInterface IgniteTransactionsEx; // Extended interface to work with system transactions.\nInterface InvalidEnvironmentException; // Marker interface of invalid environment exception.\nInterface PlatformSecurityAwareJob; // Represents the base interface for all Platform Compute Jobs that wrap and execute user code.\nInterface ThinProtocolFeature; // The base feature class.\nClass AsyncSupportAdapter<T extends IgniteAsyncSupport>; // Adapter for IgniteAsyncSupport.\n", "des": "Contains main implementation."}
{"index": 343, "repo": "hadoop-hdfs-3.3.6", "code": "Package: web\n\nClasses and Interfaces: \nClass DatanodeHttpServer; // Data node HTTP Server Class.\nClass DatanodeHttpServer.MapBasedFilterConfig; // Since the DataNode HTTP server is not implemented in terms of the servlet API, it takes some extra effort to obtain an instance of the filter.\n", "des": "Data node HTTP classes."}
{"index": 556, "repo": "hadoop-common-3.3.4", "code": "Package: sftp\n\nClasses and Interfaces: \nClass SFTPFileSystem; // SFTP FileSystem.\n", "des": "SFTP FileSystem package."}
{"index": 1561, "repo": "spring-restdocs-core-3.0.0", "code": "Package: constraints\n\nClasses and Interfaces: \npublic class Constraint extends Object; // A constraint.\npublic interface ConstraintDescriptionResolver; // Resolves a description for a Constraint.\npublic class ConstraintDescriptions extends Object; // Provides access to descriptions of a class's constraints.\npublic interface ConstraintResolver; // An abstraction for resolving a class's constraints.\npublic class ResourceBundleConstraintDescriptionResolver extends Object implements ConstraintDescriptionResolver; // A ConstraintDescriptionResolver that resolves constraint descriptions from a ResourceBundle.\npublic class ValidatorConstraintResolver extends Object implements ConstraintResolver; // A ConstraintResolver that uses a Bean Validation Validator to resolve constraints.\n", "des": "Documenting a RESTful API's constraints."}
{"index": 2240, "repo": "spring-security-acl-6.1.2", "code": "Package: model\n\nClasses and Interfaces: \npublic interface AccessControlEntry extends Serializable; // Represents an individual permission assignment within an Acl.\npublic interface Acl extends Serializable; // Represents an access control list (ACL) for a domain object.\npublic interface AclCache; // A caching layer for JdbcAclService.\npublic abstract class AclDataAccessException extends RuntimeException; // Abstract base class for Acl data operations.\npublic interface AclService; // Provides retrieval of Acl instances.\npublic class AlreadyExistsException extends AclDataAccessException; // Thrown if an Acl entry already exists for the object.\npublic interface AuditableAccessControlEntry extends AccessControlEntry; // Represents an ACE that provides auditing information.\npublic interface AuditableAcl extends MutableAcl; // A mutable ACL that provides audit capabilities.\npublic class ChildrenExistException extends AclDataAccessException; // Thrown if an Acl cannot be deleted because children Acls exist.\npublic interface MutableAcl extends Acl; // A mutable Acl.\npublic interface MutableAclService extends AclService; // Provides support for creating and storing Acl instances.\npublic class NotFoundException extends AclDataAccessException; // Thrown if an ACL-related object cannot be found.\npublic interface ObjectIdentity extends Serializable; // Represents the identity of an individual domain object instance.\npublic interface ObjectIdentityGenerator; // Strategy which creates an ObjectIdentity from an object identifier (such as a primary key) and type information.\npublic interface ObjectIdentityRetrievalStrategy; // Strategy interface that provides the ability to determine which ObjectIdentity will be returned for a particular domain object\npublic interface OwnershipAcl extends MutableAcl; // A mutable ACL that provides ownership capabilities.\npublic interface Permission extends Serializable; // Represents a permission granted to a Sid for a given domain object.\npublic interface PermissionGrantingStrategy; // Allow customization of the logic for determining whether a permission or permissions are granted to a particular sid or sids by an Acl.\npublic interface Sid extends Serializable; // A security identity recognised by the ACL system.\npublic interface SidRetrievalStrategy; // Strategy interface that provides an ability to determine the Sid instances applicable for an Authentication.\npublic class UnloadedSidException extends AclDataAccessException; // Thrown if an Acl cannot perform an operation because it only loaded a subset of Sids and the caller has requested details for an unloaded Sid .\n", "des": "Interfaces and shared classes to manage access control lists (ACLs) for domain object instances."}
{"index": 3727, "repo": "lucene-queryparser-9.7.0", "code": "Package: complexPhrase\n\nClasses and Interfaces: \nClass ComplexPhraseQueryParser; // QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\".\n", "des": "QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\""}
{"index": 1672, "repo": "spring-boot-cli-3.1.1", "code": "Package: options\n\nClasses and Interfaces: \npublic class OptionHandler extends Object; // Delegate used by OptionParsingCommand to parse options and run the command.\npublic interface OptionHelp; // Help for a specific option.\n", "des": "Support classes for handling command line options."}
{"index": 2251, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: map\n\nClasses and Interfaces: \npublic class MapKeyValueAdapter extends AbstractKeyValueAdapter; // KeyValueAdapter implementation for Map.\n", "des": "Repository implementation backed by generic Map instances."}
{"index": 611, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: condpermadmin\n\nClasses and Interfaces: \nInterface Condition; // The interface implemented by a Condition.\nInterface ConditionalPermissionAdmin; // Framework service to administer Conditional Permissions.\nInterface ConditionalPermissionInfo; // A list of Permissions guarded by a list of conditions with an access decision.\nInterface ConditionalPermissionUpdate; // Update the Conditional Permission Table.\nClass BundleLocationCondition; // Condition to test if the location of a bundle matches or does not match a pattern.\nClass BundleSignerCondition; // Condition to test if the signer of a bundle matches or does not match a pattern.\nClass ConditionInfo; // Condition representation used by the Conditional Permission Admin service.\n", "des": "Conditional Permission Admin Package Version 1.1."}
{"index": 3159, "repo": "tika-core-2.8.0", "code": "Package: mime\n\nClasses and Interfaces: \nInterface MimeTypesReaderMetKeys; // Met Keys used by the MimeTypesReader.\nClass HexCoDec; // A set of Hex encoding and decoding utility methods.\nClass MediaType; // Internet media type.\nClass MediaTypeRegistry; // Registry of known Internet media types.\nClass MimeType; // Internet media type.\nClass MimeTypes; // This class is a MimeType repository.\nClass MimeTypesFactory; // Creates instances of MimeTypes.\nClass MimeTypesReader; // A reader for XML files compliant with the freedesktop MIME-info DTD.\nClass ProbabilisticMimeDetectionSelector; // Selector for combining different mime detection results based on probability\nClass ProbabilisticMimeDetectionSelector.Builder; // build class for probability parameters setting\nClass MimeTypeException; // A class to encapsulate MimeType related exceptions.\n", "des": "Media type information."}
{"index": 3548, "repo": "opennlp-tools-2.2.0", "code": "Package: featuregen\n\nClasses and Interfaces: \nInterface AdaptiveFeatureGenerator; // An interface for generating features for name entity identification and for updating document level contexts.\nInterface ArtifactToSerializerMapper;\nInterface FeatureGeneratorResourceProvider; // The FeatureGeneratorResourceProvider provides access to the resources available in the model.\nClass AdditionalContextFeatureGenerator; // The AdditionalContextFeatureGenerator generates the context from the passed in additional context.\nClass AggregatedFeatureGenerator; // The AggregatedFeatureGenerator aggregates a set of AdaptiveFeatureGenerators and calls them to generate the features.\nClass AggregatedFeatureGeneratorFactory;\nClass BigramNameFeatureGenerator;\nClass BigramNameFeatureGeneratorFactory;\nClass BrownBigramFeatureGenerator; // Generates Brown cluster features for token bigrams.\nClass BrownCluster; // Class to load a Brown cluster document: word\\tword_class\\tprob\nClass BrownCluster.BrownClusterSerializer;\nClass BrownClusterBigramFeatureGeneratorFactory; // Generates Brown clustering features for token bigrams.\nClass BrownClusterTokenClassFeatureGeneratorFactory; // Generates Brown clustering features for token classes.\nClass BrownClusterTokenFeatureGeneratorFactory; // Generates Brown clustering features for current token.\nClass BrownTokenClasses; // Obtain the paths listed in the pathLengths array from the Brown class.\nClass BrownTokenClassFeatureGenerator; // Generates BrownCluster features for current token and token class.\nClass BrownTokenFeatureGenerator; // Generates BrownCluster features for current token.\nClass CachedFeatureGenerator; // Caches features of the aggregated generators.\nClass CachedFeatureGeneratorFactory;\nClass CharacterNgramFeatureGenerator; // The CharacterNgramFeatureGenerator uses character ngrams to generate features about each token.\nClass CharacterNgramFeatureGeneratorFactory;\nClass CustomFeatureGenerator;\nClass DefinitionFeatureGeneratorFactory;\nClass DictionaryFeatureGenerator; // The DictionaryFeatureGenerator uses the DictionaryNameFinder to generated features for detected names based on the InSpanGenerator.\nClass DictionaryFeatureGeneratorFactory;\nClass DocumentBeginFeatureGenerator;\nClass DocumentBeginFeatureGeneratorFactory;\nClass FeatureGeneratorUtil; // This class provide common utilities for feature generation.\nClass GeneratorFactory; // Creates a set of feature generators based on a provided XML descriptor.\nClass GeneratorFactory.AbstractXmlFeatureGeneratorFactory;\n", "des": "This package contains classes for generating sequence features."}
{"index": 1345, "repo": "groovy-all-4.0.13", "code": "Package: vmplugin\n\nClasses and Interfaces: \npublic interface VMPlugin; // Interface to access VM version based actions.\npublic class VMPluginFactory extends Object; // Factory class to get functionality based on the VM version.\n", "des": "JVM version specific classes."}
{"index": 210, "repo": "nutch-2.4", "code": "Package: metadata\n\nClasses and Interfaces: \nInterface CreativeCommons; // A collection of Creative Commons properties names.\nInterface DublinCore; // A collection of Dublin Core metadata names.\nInterface Feed; // A collection of Feed property names extracted by the ROME library.\nInterface HttpHeaders; // A collection of HTTP header names.\nInterface Nutch; // A collection of Nutch internal metadata constants.\nClass Metadata; // A multi-valued metadata container.\nClass MetaWrapper; // This is a simple decorator that adds metadata to any Writable-s that can be serialized by NutchWritable.\nClass SpellCheckedMetadata; // A decorator to Metadata that adds spellchecking capabilities to property names.\n", "des": "A Multi-valued Metadata container, and set of constant fields for Nutch Metadata."}
{"index": 3381, "repo": "dagger-2.47", "code": "Package: assisted\n\nClasses and Interfaces: \nAnnotation Type Assisted; // Annotates a parameter within an AssistedInject-annotated constructor.\nAnnotation Type AssistedFactory; // Annotates an abstract class or interface used to create an instance of a type via an AssistedInject constructor.\nAnnotation Type AssistedInject; // Annotates the constuctor of a type that will be created via assisted injection.\n", "des": "This package contains the API for Dagger's assisted injection."}
{"index": 410, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: oauth1\n\nClasses and Interfaces: \nInterface OAuth1Operations; // A service interface for the OAuth 1 flow.\nInterface OAuth1ServiceProvider<A>; // A ServiceProvider that uses the OAuth 1.0 protocol.\nClass AbstractOAuth1ApiBinding; // Base class for OAuth 1-based provider API bindings.\nClass AbstractOAuth1ServiceProvider<S>; // Base class for ServiceProviders that use the OAuth1 protocol.\nClass AuthorizedRequestToken; // A OAuth 1.0 request token that has been authorized by the user.\nClass GenericOAuth1ConnectionFactory; // Generic implementation of an OAuth1ConnectionFactory that carries no intrinsic knowledge of the API it will be creating connections against.\nClass GenericOAuth1ServiceProvider; // Generic implementation of OAuth1ServiceProvider that carries no intrinsic knowledge of the API it will be creating connections against.\nClass OAuth1Parameters; // Parameters for building an OAuth1 authorize URL.\nClass OAuth1Template; // OAuth10Operations implementation that uses REST-template to make the OAuth calls.\nClass OAuthToken; // Holds an OAuth token and secret.\nEnum OAuth1Version; // Various versions ofthe OAuth1 Core specification.\n", "des": "OAuth1 client."}
{"index": 121, "repo": "ignite-core-2.15.0", "code": "Package: keystore\n\nClasses and Interfaces: \nClass KeystoreEncryptionKey; // EncryptionKey implementation based on java security.\nClass KeystoreEncryptionSpi; // EncryptionSPI implementation base on JDK provided cipher algorithm implementations.\n", "des": "Contains encryption SPI implementation based on standard jdk keystore."}
{"index": 1626, "repo": "spring-kafka-3.0.9", "code": "Package: event\n\nClasses and Interfaces: \npublic class ConsumerFailedToStartEvent extends KafkaEvent; // An event published when a consumer fails to start.\npublic class ConsumerPartitionPausedEvent extends KafkaEvent; // An event published when a consumer partition is paused.\npublic class ConsumerPartitionResumedEvent extends KafkaEvent; // An event published when a consumer partition is resumed.\npublic class ConsumerPausedEvent extends KafkaEvent; // An event published when a consumer is paused.\npublic class ConsumerResumedEvent extends KafkaEvent; // An event published when a consumer is resumed.\npublic class ConsumerRetryAuthEvent extends KafkaEvent; // An event published when authentication or authorization of a consumer fails and is being retried.\npublic static enum ConsumerRetryAuthEvent.Reason extends Enum<ConsumerRetryAuthEvent.Reason>; // Reasons for retrying auth a consumer.\npublic class ConsumerRetryAuthSuccessfulEvent extends KafkaEvent; // An event published when authentication or authorization has been retried successfully.\npublic class ConsumerStartedEvent extends KafkaEvent; // An event published when a consumer has started.\npublic class ConsumerStartingEvent extends KafkaEvent; // An event published when a consumer is initializing.\npublic class ConsumerStoppedEvent extends KafkaEvent; // An event published when a consumer is stopped.\npublic static enum ConsumerStoppedEvent.Reason extends Enum<ConsumerStoppedEvent.Reason>; // Reasons for stopping a consumer.\npublic class ConsumerStoppingEvent extends KafkaEvent; // An event published when a consumer is stopped.\npublic class ContainerStoppedEvent extends KafkaEvent; // An event published when a container is stopped.\npublic abstract class KafkaEvent extends org.springframework.context.ApplicationEvent; // Base class for events.\npublic class ListenerContainerIdleEvent extends KafkaEvent; // An event that is emitted when a container is idle if the container is configured to do so.\npublic class ListenerContainerNoLongerIdleEvent extends KafkaEvent; // An event that is emitted when a container is no longer idle if configured to publish idle events.\npublic class ListenerContainerPartitionIdleEvent extends KafkaEvent; // An event that is emitted when a container partition is idle if the container is configured to do so.\npublic class ListenerContainerPartitionNoLongerIdleEvent extends KafkaEvent; // An event that is emitted when a partition is no longer idle if configured to publish idle events.\n", "des": "Application Events."}
{"index": 3175, "repo": "tomcat-api-10.1", "code": "Package: session\n\nClasses and Interfaces: \nClass Constants; // Manifest constants for the org.apache.catalina.session package.\nClass DataSourceStore; // Implementation of the Store interface that stores serialized session objects in a database.\nClass FileStore; // Concrete implementation of the Store interface that utilizes a file per saved Session in a configured directory.\nClass ManagerBase; // Minimal implementation of the Manager interface that supports no session persistence or distributable capabilities.\nClass ManagerBase.SessionTiming;\nClass PersistentManager; // Implementation of the Manager interface that makes use of a Store to swap active Sessions to disk.\nClass PersistentManagerBase; // Extends the ManagerBase class to implement most of the functionality required by a Manager which supports any kind of persistence, even if only for restarts.\nClass StandardManager; // Standard implementation of the Manager interface that provides simple session persistence across restarts of this component (such as when the entire server is shut down and restarted, or when a particular web application is reloaded.\nClass StandardSession; // Standard implementation of the Session interface.\nClass StandardSessionFacade; // Facade for the StandardSession object.\nClass StoreBase; // Abstract implementation of the Store interface to support most of the functionality required by a Store.\nClass TooManyActiveSessionsException; // An exception that indicates the maximum number of active sessions has been reached and the server is refusing to create any new sessions.\n", "des": "This package contains the standard Manager and Session implementations that represent the collection of active sessions and the individual sessions themselves, respectively, that are associated with a Context."}
{"index": 422, "repo": "mahout-mr-0.13.0", "code": "Package: partial\n\nClasses and Interfaces: \nClass PartialBuilder;\nClass Step1Mapper;\nClass TreeID;\n", "des": "Partial-data mapreduce implementation of Random Decision Forests"}
{"index": 2283, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: script\n\nClasses and Interfaces: \npublic interface ReactiveScriptOperations; // This interfaces defines the operations to access the Elasticsearch script API.\npublic record Script(String id, String language, String source) extends Record;\npublic static final class Script.ScriptBuilder extends Object;\npublic interface ScriptOperations; // This interfaces defines the operations to access the Elasticsearch script API.\n", "des": "Classes and interfaces to access to script API of Elasticsearch (https://www.elastic.co/guide/en/elasticsearch/reference/8.5/script-apis.html)."}
{"index": 2506, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: web\n\nSub Packages: \npackage web.exchanges; // Auto-configuration for actuator HTTP exchanges.\npackage web.jersey; // Configuration for a Jersey-based management context.\npackage web.mappings; // Classes for auto-configuration of actuator web request mapping concerns.\npackage web.reactive; // Configuration for a WebFlux-based management context.\npackage web.server; // Actuator web server support.\npackage web.servlet; // Actuator Spring MVC support.\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Configuration public @interface ManagementContextConfiguration; // Specialized @Configuration class that defines configuration specific for the management context.\npublic final class ManagementContextFactory extends Object; // Factory for creating a separate management context when the management web server is running on a different port to the main application.\npublic enum ManagementContextType extends Enum<ManagementContextType>; // Enumeration of management context types.\n", "des": "Core classes for auto-configuration of actuator web concerns."}
{"index": 137, "repo": "ignite-core-2.15.0", "code": "Package: collision\n\nClasses and Interfaces: \nClass GridCollisionJobContextAdapter; // Adapter for CollisionJobContext.\nClass GridCollisionManager; // This class defines a collision manager.\n", "des": "TODO."}
{"index": 3024, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class RestGatewaySupport extends Object; // Convenient superclass for application classes that need REST access.\n", "des": "Classes supporting the org.springframework.web.client package."}
{"index": 1740, "repo": "spring-batch-integration-5.0.2", "code": "Package: chunk\n\nClasses and Interfaces: \npublic class AsynchronousFailureException extends org.springframework.batch.item.ItemWriterException; // Exception indicating that a failure or early completion condition was detected in a remote worker.\npublic interface ChunkHandler<T>; // Interface for a remote worker in the Remote Chunking pattern.\npublic class ChunkMessageChannelItemWriter<T> extends Object implements StepExecutionListener, org.springframework.batch.item.ItemWriter<T>, org.springframework.batch.item.ItemStream, StepContributionSource;\nprotected static class ChunkMessageChannelItemWriter.LocalState extends Object;\n@MessageEndpoint public class ChunkProcessorChunkHandler<S> extends Object implements ChunkHandler<S>, org.springframework.beans.factory.InitializingBean; // A ChunkHandler based on a ChunkProcessor.\npublic class ChunkRequest<T> extends Object implements Serializable; // Encapsulation of a chunk of items to be processed remotely as part of a step execution.\npublic class ChunkResponse extends Object implements Serializable; // Encapsulates a response to processing a chunk of items, summarising the result as a StepContribution.\npublic class JmsRedeliveredExtractor extends Object;\npublic class MessageSourcePollerInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor, org.springframework.beans.factory.InitializingBean; // A ChannelInterceptor that turns a pollable channel into a \"pass-thru channel\": if a client calls receive() on the channel it will delegate to a MessageSource to pull the message directly from an external source.\npublic class RemoteChunkHandlerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<ChunkHandler<T>>; // Convenient factory bean for a chunk handler that also converts an existing chunk-oriented step into a remote chunk manager.\npublic class RemoteChunkingManagerStepBuilder<I,O> extends FaultTolerantStepBuilder<I,O>; // Builder for a manager step in a remote chunking setup.\npublic class RemoteChunkingManagerStepBuilderFactory extends Object; // Convenient factory for a RemoteChunkingManagerStepBuilder which sets the JobRepository and PlatformTransactionManager automatically.\npublic class RemoteChunkingWorkerBuilder<I,O> extends Object; // Builder for a worker in a remote chunking setup.\n", "des": "Components for remote chunking."}
{"index": 1999, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: webservices\n\nSub Packages: \npackage webservices.client; // Auto-configuration for Spring Web Services Clients.\n\nClasses and Interfaces: \n@AutoConfiguration(after=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.ws.transport.http.MessageDispatcherServlet.class) @ConditionalOnMissingBean(org.springframework.ws.config.annotation.WsConfigurationSupport.class) @EnableConfigurationProperties(WebServicesProperties.class) public class WebServicesAutoConfiguration extends Object; // Auto-configuration for Spring Web Services.\n@Configuration(proxyBeanMethods=false) @EnableWs protected static class WebServicesAutoConfiguration.WsConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.webservices\") public class WebServicesProperties extends Object; // @ConfigurationProperties for Spring Web Services.\npublic static class WebServicesProperties.Servlet extends Object;\n", "des": "Auto-configuration for Spring Web Services."}
{"index": 2714, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: database\n\nSub Packages: \npackage database.builder; // Builders for database item readers and writers.\npackage database.orm; // Support classes for components using various ORM related technologies.\npackage database.support; // Support classes for database specific semantics.\n\nClasses and Interfaces: \npublic abstract class AbstractCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Abstract base class for any simple item reader that opens a database cursor and continually retrieves the next row in the ResultSet.\npublic abstract class AbstractPagingItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean; // Abstract ItemStreamReader for to extend when reading database records in a paging fashion.\npublic class BeanPropertyItemSqlParameterSourceProvider<T> extends Object implements ItemSqlParameterSourceProvider<T>; // A convenient implementation for providing BeanPropertySqlParameterSource when the item has JavaBean properties that correspond to names used for parameters in the SQL statement.\npublic class ExtendedConnectionDataSourceProxy extends Object implements org.springframework.jdbc.datasource.SmartDataSource, org.springframework.beans.factory.InitializingBean; // Implementation of SmartDataSource that is capable of keeping a single JDBC Connection which is NOT closed after each use even if Connection.close() is called.\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateCursorItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemReaderHelper<T> extends Object implements org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernateItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean;\n@Deprecated(since=\"5.0\", forRemoval=true) public class HibernatePagingItemReader<T> extends AbstractPagingItemReader<T> implements org.springframework.beans.factory.InitializingBean;\n", "des": "Infrastructure implementations of database based item readers and writers."}
{"index": 884, "repo": "mahout-math-0.13.0", "code": "Package: map\n\nClasses and Interfaces: \nClass AbstractByteByteMap;\nClass AbstractByteCharMap;\nClass AbstractByteDoubleMap;\nClass AbstractByteFloatMap;\nClass AbstractByteIntMap;\nClass AbstractByteLongMap;\nClass AbstractByteObjectMap<T>;\nClass AbstractByteShortMap;\nClass AbstractCharByteMap;\nClass AbstractCharCharMap;\nClass AbstractCharDoubleMap;\nClass AbstractCharFloatMap;\nClass AbstractCharIntMap;\nClass AbstractCharLongMap;\nClass AbstractCharObjectMap<T>;\nClass AbstractCharShortMap;\nClass AbstractDoubleByteMap;\nClass AbstractDoubleCharMap;\nClass AbstractDoubleDoubleMap;\nClass AbstractDoubleFloatMap;\nClass AbstractDoubleIntMap;\nClass AbstractDoubleLongMap;\nClass AbstractDoubleObjectMap<T>;\nClass AbstractDoubleShortMap;\nClass AbstractFloatByteMap;\nClass AbstractFloatCharMap;\nClass AbstractFloatDoubleMap;\nClass AbstractFloatFloatMap;\nClass AbstractFloatIntMap;\nClass AbstractFloatLongMap;\nClass AbstractFloatObjectMap<T>;\nClass AbstractFloatShortMap;\nClass AbstractIntByteMap;\nClass AbstractIntCharMap;\nClass AbstractIntDoubleMap;\nClass AbstractIntFloatMap;\nClass AbstractIntIntMap;\nClass AbstractIntLongMap;\nClass AbstractIntObjectMap<T>;\nClass AbstractIntShortMap;\nClass AbstractLongByteMap;\nClass AbstractLongCharMap;\nClass AbstractLongDoubleMap;\nClass AbstractLongFloatMap;\nClass AbstractLongIntMap;\nClass AbstractLongLongMap;\nClass AbstractLongObjectMap<T>;\nClass AbstractLongShortMap;\nClass AbstractObjectByteMap<T>;\nClass AbstractObjectCharMap<T>;\nClass AbstractObjectDoubleMap<T>;\nClass AbstractObjectFloatMap<T>;\nClass AbstractObjectIntMap<T>;\nClass AbstractObjectLongMap<T>;\nClass AbstractObjectShortMap<T>;\nClass AbstractShortByteMap;\nClass AbstractShortCharMap;\nClass AbstractShortDoubleMap;\nClass AbstractShortFloatMap;\nClass AbstractShortIntMap;\nClass AbstractShortLongMap;\nClass AbstractShortObjectMap<T>;\nClass AbstractShortShortMap;\nClass HashFunctions; // Provides various hash functions.\n", "des": "Automatically growing and shrinking maps holding objects or primitive data types such as int, double, etc."}
{"index": 305, "repo": "pdfbox-3.0.0-beta1", "code": "Package: destination\n\nClasses and Interfaces: \nClass PDDestination; // This represents a destination in a PDF document.\nClass PDNamedDestination; // This represents a destination to a page by referencing it with a name.\nClass PDPageDestination; // This represents a destination to a page, see subclasses for specific parameters.\nClass PDPageFitDestination; // This represents a destination to a page and the page contents will be magnified to just fit on the screen.\nClass PDPageFitHeightDestination; // This represents a destination to a page at a x location and the height is magnified to just fit on the screen.\nClass PDPageFitRectangleDestination; // This represents a destination to a page at a y location and the width is magnified to just fit on the screen.\nClass PDPageFitWidthDestination; // This represents a destination to a page at a y location and the width is magnified to just fit on the screen.\nClass PDPageXYZDestination; // This represents a destination to a page at an x,y coordinate with a zoom setting.\n", "des": "The destination package allows destinations into a pdf document to be specified."}
{"index": 3692, "repo": "solr-core-9.3.0", "code": "Package: grouping\n\nSub Packages: \npackage grouping.collector; // Grouping related Collectors\npackage grouping.distributed; // Internal classes used to implement distributed result grouping\npackage grouping.endresulttransformer; // APIs and classes for transforming result grouping results into the appropriate response format\n\nClasses and Interfaces: \nInterface Command<T>; // Defines a grouping command.\nClass CommandHandler; // Responsible for executing a search with a number of Command instances.\nClass CommandHandler.Builder;\nClass GroupingSpecification; // Encapsulates the grouping options like fields group sort and more specified by clients.\n", "des": "APIs and classes for implementing result grouping"}
{"index": 105, "repo": "ignite-core-2.15.0", "code": "Package: failure\n\nClasses and Interfaces: \nInterface FailureHandler; // Provides facility to handle failures by custom user implementations, which can be configured by IgniteConfiguration.setFailureHandler(FailureHandler) method.\nClass AbstractFailureHandler; // Abstract superclass for FailureHandler implementations.\nClass FailureContext; // Failure context contains information about failure type and exception if applicable.\nClass NoOpFailureHandler; // Just ignores any failure.\nClass RestartProcessFailureHandler; // This handler could be used only with ignite.\nClass StopNodeFailureHandler; // Handler will stop node in case of critical error using IgnitionEx.stop(nodeName, true, true) call.\nClass StopNodeOrHaltFailureHandler; // Handler will try to stop node if tryStop value is true.\nEnum FailureType; // Types of failures.\n", "des": "Contains Failure handling public API with standard FailureHandler implementations."}
{"index": 2792, "repo": "shiro-spring-2.0.0-alpha-2", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic class AopAllianceAnnotationsAuthorizingMethodInterceptor extends org.apache.shiro.authz.aop.AnnotationsAuthorizingMethodInterceptor implements org.aopalliance.intercept.MethodInterceptor; // Allows Shiro Annotations to work in any AOP Alliance specific implementation environment (for example, Spring).\npublic class AuthorizationAttributeSourceAdvisor extends org.springframework.aop.support.StaticMethodMatcherPointcutAdvisor; // TODO - complete JavaDoc\n", "des": "Spring AOP support for enabling Shiro annotations in Spring-configured applications."}
{"index": 2310, "repo": "spring-boot-3.1.1", "code": "Package: jdbc\n\nSub Packages: \npackage jdbc.init; // Support for initialization of an SQL database using a JDBC DataSource.\npackage jdbc.metadata; // Support for accessing JDBC DataSource metadata.\n\nClasses and Interfaces: \npublic enum DatabaseDriver extends Enum<DatabaseDriver>; // Enumeration of common database drivers.\npublic final class DataSourceBuilder<T extends DataSource> extends Object; // Convenience class for building a DataSource.\npublic final class DataSourceUnwrapper extends Object; // Unwraps a DataSource that may have been proxied or wrapped in a custom Wrapper such as DelegatingDataSource.\npublic enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection>; // Connection details for embedded databases.\npublic enum SchemaManagement extends Enum<SchemaManagement>; // An enumeration of the available schema management options.\n@FunctionalInterface public interface SchemaManagementProvider; // Strategy interface to determine the SchemaManagement of a DataSource.\npublic class UnsupportedDataSourcePropertyException extends RuntimeException; // RuntimeException thrown from DataSourceBuilder when an unsupported property is used.\n@FunctionalInterface public interface XADataSourceWrapper; // Strategy interface used to wrap an XADataSource enrolling it with a JTA TransactionManager.\n", "des": "Support for Java Database Connectivity (JDBC)."}
{"index": 534, "repo": "commons-vfs2-2.9.0", "code": "Package: temp\n\nClasses and Interfaces: \nClass TemporaryFileProvider; // A provider for temporary files.\n", "des": "The Temporary Filespace Provider."}
{"index": 782, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: hi\n\nClasses and Interfaces: \nClass HindiAnalyzer; // Analyzer for Hindi.\nClass HindiNormalizationFilter; // A TokenFilter that applies HindiNormalizer to normalize the orthography.\nClass HindiNormalizationFilterFactory; // Factory for HindiNormalizationFilter.\nClass HindiNormalizer; // Normalizer for Hindi.\nClass HindiStemFilter; // A TokenFilter that applies HindiStemmer to stem Hindi words.\nClass HindiStemFilterFactory; // Factory for HindiStemFilter.\nClass HindiStemmer; // Light Stemmer for Hindi.\n", "des": "Analyzer for Hindi."}
{"index": 710, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: jpa\n\nClasses and Interfaces: \nClass Jpa; // Factory class for JPA components.\nClass JpaBaseOutboundEndpointSpec<S extends JpaBaseOutboundEndpointSpec<S>>; // The base MessageHandlerSpec for JPA Outbound endpoints.\nClass JpaInboundChannelAdapterSpec; // A MessageSourceSpec for a JpaPollingChannelAdapter.\nClass JpaRetrievingOutboundGatewaySpec; // A JpaBaseOutboundEndpointSpec extension for the JpaOutboundGateway with OutboundGatewayType.RETRIEVING mode.\nClass JpaUpdatingOutboundEndpointSpec; // A JpaBaseOutboundEndpointSpec extension for the updating JpaOutboundGateway mode.\n", "des": "Provides JPA Components support for Spring Integration Java DSL."}
{"index": 3200, "repo": "tomcat-api-10.1", "code": "Package: impl\n\nClasses and Interfaces: \nClass FileItemIteratorImpl; // The iterator, which is returned by FileUploadBase.getItemIterator(RequestContext).\nClass FileItemStreamImpl; // Default implementation of FileItemStream.\nClass FileCountLimitExceededException; // This exception is thrown if a request contains more files than the specified limit.\nClass FileSizeLimitExceededException; // Thrown to indicate that A files size exceeds the configured maximum.\nClass FileUploadIOException; // This exception is thrown for hiding an inner FileUploadException in an IOException.\nClass InvalidContentTypeException; // Thrown to indicate that the request is not a multipart request.\nClass IOFileUploadException; // Thrown to indicate an IOException.\nClass SizeException; // This exception is thrown, if a requests permitted size is exceeded.\nClass SizeLimitExceededException; // Thrown to indicate that the request size exceeds the configured maximum.\n", "des": "Implementations and exceptions utils."}
{"index": 426, "repo": "commons-geometry-hull-1.0-beta1", "code": "Package: hull\n\nClasses and Interfaces: \nInterface ConvexHull<P extends Point<P>>; // This class represents a convex hull.\nInterface ConvexHullGenerator<P extends Point<P>>; // Interface for convex hull generators.\n", "des": "This package provides interfaces and classes related to the convex hull problem."}
{"index": 3345, "repo": "opencms-core-15.0", "code": "Package: dialogs\n\nSub Packages: \npackage dialogs.availability; // Contains code for the availability dialog.\npackage dialogs.history; // Contains code for the file history dialog.\npackage dialogs.permissions; // Contains permission dialog classes.\n\nClasses and Interfaces: \nInterface I_CmsHasTitle; // Implementing classes provide a title.\nClass A_CmsSelectResourceTypeDialog;\nClass CmsChangeTypeDialog; // Dialog for changing the resource type.\nClass CmsCopyMoveDialog; // The copy move dialog.\nClass CmsCopyToProjectDialog; // The copy to project dialog.\nClass CmsDeleteDialog; // Dialog for deleting resources.\nClass CmsEmbeddedDialogContext; // Context for dialogs embedded into plain GWT modules.\nClass CmsEmbeddedDialogsUI; // Separate UI for VAADIN based dialog embedded into a GWT module.\nClass CmsGalleryOptimizeDialog; // Class representing a dialog for optimizing galleries.\nClass CmsNewDialog; // Dialog for creating new resources.\nClass CmsProjectSelectDialog; // The project select dialog.\nClass CmsPublishScheduledDialog; // The publish schedule dialog.\nClass CmsReindexDialog; // Dialog used to change resource modification times.\nClass CmsRestoreDeletedDialog; // Dialog for restoring deleted resources in a folder.\nClass CmsSecureExportDialog; // Dialog used to change resource modification times.\nClass CmsSiteSelectDialog; // The site select dialog.\nClass CmsTouchDialog; // Dialog used to change resource modification times.\nClass CmsUndeleteDialog; // Dialog used to change resource modification times.\nClass CmsUndoDialog; // Dialog used to change resource modification times.\nClass CmsUserDataDialog; // Dialog to edit the user data.\nClass Messages; // Message bundle class.\nEnum CmsCopyMoveDialog.Action; // The copy/move actions.\nEnum CmsCopyMoveDialog.DialogMode; // The dialog mode.\n", "des": "Contains code for workplace dialogs."}
{"index": 813, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: tr\n\nClasses and Interfaces: \nClass ApostropheFilter; // Strips all characters after an apostrophe (including the apostrophe itself).\nClass ApostropheFilterFactory; // Factory for ApostropheFilter.\nClass TurkishAnalyzer; // Analyzer for Turkish.\nClass TurkishLowerCaseFilter; // Normalizes Turkish token text to lower case.\nClass TurkishLowerCaseFilterFactory; // Factory for TurkishLowerCaseFilter.\n", "des": "Analyzer for Turkish."}
{"index": 1699, "repo": "spring-data-couchbase-5.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class BasicQuery extends Query; // BasicQuery for Querydsl\n@SupportedAnnotationTypes({\"com.querydsl.core.annotations.*\",\"org.springframework.data.couchbase.core.mapping.*\"}) @SupportedSourceVersion(RELEASE_6) public class CouchbaseAnnotationProcessor extends com.querydsl.apt.AbstractQuerydslProcessor; // Annotation processor to create Querydsl query types for QueryDsl annotated classes.\npublic class CouchbaseRepositoryBase<T,ID> extends Object; // Common base for SimpleCouchbaseRepository and SimpleReactiveCouchbaseRepository\npublic class CouchbaseRepositoryFactory extends RepositoryFactorySupport; // Factory to create SimpleCouchbaseRepository instances.\npublic class CouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>; // The factory bean to create repositories.\npublic interface CrudMethodMetadata;\npublic class DBRef extends Object; // DB references\npublic class DynamicInvocationHandler<T> extends Object implements InvocationHandler; // Invocation Handler for scope/collection/options proxy for repositories\npublic class MappingCouchbaseEntityInformation<T,ID> extends PersistentEntityInformation<T,ID> implements CouchbaseEntityInformation<T,ID>; // Entity Information container.\npublic class QuerydslCouchbasePredicateExecutor<T> extends QuerydslPredicateExecutorSupport<T> implements QuerydslPredicateExecutor<T>; // Couchbase-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.\npublic class QuerydslPredicateExecutorSupport<T> extends Object;\npublic class ReactiveCouchbaseRepositoryFactory extends ReactiveRepositoryFactorySupport;\npublic class ReactiveCouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID>;\npublic class SimpleCouchbaseRepository<T,ID> extends CouchbaseRepositoryBase<T,ID> implements CouchbaseRepository<T,ID>; // Repository base implementation for Couchbase.\npublic class SimpleReactiveCouchbaseRepository<T,ID> extends CouchbaseRepositoryBase<T,ID> implements ReactiveCouchbaseRepository<T,ID>; // Reactive repository base implementation for Couchbase.\n", "des": "This package contains the Couchbase implementations to support the Spring Data repository abstraction."}
{"index": 903, "repo": "commons-jcs3-core-3.1", "code": "Package: config\n\nClasses and Interfaces: \nClass OptionConverter; // This class is based on the log4j class org.apache.log4j.helpers.OptionConverter that was made by Ceki Gülcü Simon Kitching; Avy Sharell (sharell@online.fr) Anders Kristensen Matthieu Verbert (mve@zurich.ibm.com) A convenience class to convert property values to specific types.\nClass PropertySetter; // This class is based on the log4j class org.apache.log4j.config.PropertySetter that was made by Anders Kristensen General purpose Object property setter.\nClass PropertySetterException; // This class is based on the log4j class org.apache.log4j.config.PropertySetter that was made by Anders Kristensen Thrown when an error is encountered whilst attempting to set a property using the PropertySetterutility class.\n", "des": "This package contains utility classes that are used when configuring the cache."}
{"index": 1915, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: ldap\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass({javax.naming.ldap.LdapContext.class,org.springframework.data.ldap.repository.LdapRepository.class}) @ConditionalOnProperty(prefix=\"spring.data.ldap.repositories\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @ConditionalOnMissingBean(org.springframework.data.ldap.repository.support.LdapRepositoryFactoryBean.class) @Import(org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesRegistrar.class) public class LdapRepositoriesAutoConfiguration extends Object; // Auto-configuration for Spring Data's LDAP Repositories.\n", "des": "Auto-configuration for Spring Data LDAP."}
{"index": 1403, "repo": "spring-boot-actuator-3.1.1", "code": "Package: integration\n\nClasses and Interfaces: \n@Endpoint(id=\"integrationgraph\") public class IntegrationGraphEndpoint extends Object; // @Endpoint to expose the Spring Integration graph.\npublic static class IntegrationGraphEndpoint.GraphDescriptor extends Object implements OperationResponseBody; // Description of a Graph.\n", "des": "Actuator support for Spring Integration."}
{"index": 1353, "repo": "spring-integration-stream-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class ConsoleInboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser; // Parser for the <stdin-channel-adapter> element.\npublic class ConsoleOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the \"stdout-\" and \"stderr-channel-adapter\" elements.\npublic class StreamNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 1692, "repo": "spring-data-couchbase-5.1.2", "code": "Package: mapping\n\nSub Packages: \npackage mapping.event; // This package contains various events that are emitted during the lifecycle of a Spring Data entity.\n\nClasses and Interfaces: \npublic class BasicCouchbasePersistentEntity<T> extends BasicPersistentEntity<T,CouchbasePersistentProperty> implements CouchbasePersistentEntity<T>, EnvironmentAware; // The representation of a persistent entity.\npublic class BasicCouchbasePersistentProperty extends AnnotationBasedPersistentProperty<CouchbasePersistentProperty> implements CouchbasePersistentProperty; // Implements annotated property representations of a given Field instance.\npublic class CouchbaseDocument extends Object implements CouchbaseStorable; // A CouchbaseDocument is an abstract representation of a document stored inside Couchbase Server.\npublic class CouchbaseList extends Object implements CouchbaseStorable; // A CouchbaseList is an abstract list that represents an array stored in a (most of the times JSON) document.\npublic class CouchbaseMappingContext extends AbstractMappingContext<BasicCouchbasePersistentEntity<?>,CouchbasePersistentProperty> implements ApplicationContextAware; // Default implementation of a MappingContext for Couchbase using BasicCouchbasePersistentEntity and BasicCouchbasePersistentProperty as primary abstractions.\npublic interface CouchbasePersistentEntity<T> extends PersistentEntity<T,CouchbasePersistentProperty>; // Represents an entity that can be persisted which contains 0 or more properties.\npublic interface CouchbasePersistentProperty extends PersistentProperty<CouchbasePersistentProperty>; // Represents a property part of an entity that needs to be persisted.\npublic abstract class CouchbaseSimpleTypes extends Object;\npublic interface CouchbaseStorable; // Marker Interface to identify either a CouchbaseDocument or a CouchbaseList.\n@Inherited @Retention(RUNTIME) @Target(TYPE) @ScanConsistency public @interface Document; // Identifies a domain object to be persisted to Couchbase.\n@Inherited @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) public @interface Durability; // Durability annotation\n@Documented @Retention(RUNTIME) @Target({FIELD,ANNOTATION_TYPE}) public @interface Expiration; // Annotation to define a field to be substituted for META().expiration in a query\n@Inherited @Retention(RUNTIME) @Target({TYPE,ANNOTATION_TYPE}) public @interface Expiry; // Expiry annotation\n", "des": "This package contains interfaces and annotations relative to object-json mapping and the notion of a Couchbase Storable."}
{"index": 2366, "repo": "camel-base-4.0.0-RC1", "code": "Package: converter\n\nClasses and Interfaces: \n@DeferredContextBinding public final class CamelBaseBulkConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader, org.apache.camel.spi.BulkTypeConverters, org.apache.camel.CamelContextAware; // Generated by camel build tools - do NOT edit this file!\n@Converter(generateBulkLoader=true) public final class CamelConverter extends Object; // Some useful converters for Camel APIs such as to convert a Predicate or Expression to a Processor\n@Converter(generateBulkLoader=true) public final class CollectionConverter extends Object; // Some core java.util Collection based Type Converters\n@Converter(generateBulkLoader=true) public final class DateTimeConverter extends Object; // Date and time related converters.\n@Converter(generateBulkLoader=true) public final class DurationConverter extends Object; // Converters for java.time.Duration.\n@Converter(generateBulkLoader=true) public final class IOConverter extends Object; // Some core java.io based Type Converters\n@Converter(generateBulkLoader=true) public final class NIOConverter extends Object; // Some core java.nio based Type Converters\n@Converter(generateBulkLoader=true) public final class ObjectConverter extends Object; // Some core java.lang based Type Converters\n@Converter(generateBulkLoader=true) public final class ResourceConverter extends Object;\n@Converter(generateBulkLoader=true) public final class SQLConverter extends Object; // SQL Date and time related converters.\n@Converter(generateBulkLoader=true) public final class UriTypeConverter extends Object; // A TypeConverter that converts to and from URIs.\n", "des": "A set of helper classes for converting from different types of Java object to be used by the Type Conversion Support"}
{"index": 1855, "repo": "spring-test-6.0.11", "code": "Package: client\n\nSub Packages: \npackage client.match; // Contains built-in RequestMatcher implementations.\npackage client.response; // Contains built-in ResponseCreator implementations.\n\nClasses and Interfaces: \npublic abstract class AbstractRequestExpectationManager extends Object implements RequestExpectationManager; // Base class for RequestExpectationManager implementations responsible for storing expectations and actual requests, and checking for unsatisfied expectations at the end.\nprotected static class AbstractRequestExpectationManager.RequestExpectationGroup extends Object; // Helper class to manage a group of remaining expectations.\npublic class DefaultRequestExpectation extends Object implements RequestExpectation; // Default implementation of RequestExpectation that simply delegates to the request matchers and the response creator it contains.\nprotected static class DefaultRequestExpectation.RequestCount extends Object; // Helper class that keeps track of actual vs expected request count.\npublic final class ExpectedCount extends Object; // A simple type representing a range for an expected count.\npublic class MockMvcClientHttpRequestFactory extends Object implements org.springframework.http.client.ClientHttpRequestFactory; // A ClientHttpRequestFactory for requests executed via MockMvc.\npublic final class MockRestServiceServer extends Object; // Main entry point for client-side REST testing.\npublic static interface MockRestServiceServer.MockRestServiceServerBuilder; // Builder to create a MockRestServiceServer.\npublic interface RequestExpectation extends ResponseActions, RequestMatcher, ResponseCreator; // An extension of ResponseActions that also implements RequestMatcher and ResponseCreator\npublic interface RequestExpectationManager; // Encapsulates the behavior required to implement MockRestServiceServer including its public API (create expectations + verify/reset) along with an extra method for verifying actual requests.\n@FunctionalInterface public interface RequestMatcher; // A contract for matching requests to expectations.\npublic interface ResponseActions; // A contract for setting up request expectations and defining a response.\n@FunctionalInterface public interface ResponseCreator; // A contract for creating a ClientHttpResponse.\npublic class SimpleRequestExpectationManager extends AbstractRequestExpectationManager; // Simple RequestExpectationManager that matches requests to expectations sequentially, i.e.\npublic class UnorderedRequestExpectationManager extends AbstractRequestExpectationManager; // RequestExpectationManager that matches requests to expectations regardless of the order of declaration of expected requests.\n", "des": "Contains client-side REST testing support."}
{"index": 1706, "repo": "spring-integration-jmx-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class AttributePollingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(IntegrationMBeanExportConfiguration.class) public @interface EnableIntegrationMBeanExport; // Enables default exporting for Spring Integration components in an existing application, as well as well all @ManagedResource annotated beans.\n@Configuration(proxyBeanMethods=false) public class IntegrationMBeanExportConfiguration extends Object implements org.springframework.context.annotation.ImportAware, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.BeanFactoryAware; // @Configuration class that registers a IntegrationMBeanExporter bean.\npublic class JmxIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The JMX Integration infrastructure beanFactory initializer.\npublic class JmxNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's jmx namespace.\npublic class MBeanExporterParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'mbean-export' element of the integration JMX namespace.\npublic class MBeanTreePollingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractPollingInboundChannelAdapterParser;\npublic class NotificationListeningChannelAdapterParser extends org.springframework.integration.config.xml.AbstractChannelAdapterParser;\npublic class NotificationPublishingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class OperationInvokingChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser;\npublic class OperationInvokingOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser;\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 3417, "repo": "commons-imaging-1.0-alpha3", "code": "Package: internal\n\nClasses and Interfaces: \nClass Debug; // Internal-only debug class.\nClass Util; // Internal utilities.\n", "des": "Internal utility classes."}
{"index": 965, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: server\n\nClasses and Interfaces: \nClass AbstractActionEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations.\nClass AbstractActionMethodEndpointMapping; // Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.\nClass AbstractAddressingEndpointMapping; // Abstract base class for EndpointMapping implementations that handle WS-Addressing.\nClass AnnotationActionEndpointMapping; // Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.\nClass SimpleActionEndpointMapping; // Implementation of the EndpointMapping interface to map from WS-Addressing Action Message Addressing Property to endpoint beans.\n", "des": "Contains servers-side WS-Addressing support, in the form of EndpointMappings."}
{"index": 287, "repo": "pdfbox-3.0.0-beta1", "code": "Package: logicalstructure\n\nClasses and Interfaces: \nClass PDAttributeObject; // An attribute object.\nClass PDDefaultAttributeObject; // A default attribute object.\nClass PDMarkedContentReference; // A marked-content reference.\nClass PDMarkInfo; // The MarkInfo provides additional information relevant to specialized uses of structured documents.\nClass PDObjectReference; // An object reference.\nClass PDParentTreeValue; // Described in the PDF specification in the ParentTree segment of the table \"Entries in the structure tree root\".\nClass PDStructureElement; // A structure element.\nClass PDStructureNode; // A node in the structure tree.\nClass PDStructureTreeRoot; // A root of a structure tree.\nClass PDUserAttributeObject; // A User attribute object.\nClass PDUserProperty; // A user property.\nClass Revisions<T>;\n", "des": "The logical structure package provides a mechanism for incorporating structural information about a document's content into a PDF file."}
{"index": 2493, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: r2dbc\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration.class) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnBean(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnEnabledHealthIndicator(\"r2dbc\") public class ConnectionFactoryHealthContributorAutoConfiguration extends CompositeReactiveHealthContributorConfiguration<org.springframework.boot.actuate.r2dbc.ConnectionFactoryHealthIndicator,io.r2dbc.spi.ConnectionFactory>; // Auto-configuration for ConnectionFactoryHealthIndicator.\n", "des": "Auto-configuration for actuator R2DBC."}
{"index": 1156, "repo": "commons-math3-3.6.1", "code": "Package: util\n\nClasses and Interfaces: \nInterface ExceptionContextProvider; // Interface for accessing the context data structure stored in Commons Math exceptions.\nInterface Localizable; // Interface for localizable strings.\nClass ArgUtils; // Utility class for transforming the list of arguments passed to constructors of exceptions.\nClass DummyLocalizable; // Dummy implementation of the Localizable interface, without localization.\nClass ExceptionContext; // Class that contains the actual implementation of the functionality mandated by the ExceptionContext interface.\nEnum LocalizedFormats; // Enumeration for localized messages formats used in exceptions messages.\n", "des": "Classes supporting exception localization."}
{"index": 687, "repo": "jackson-databind-2.15.2", "code": "Package: jdk14\n\nClasses and Interfaces: \nClass JDK14Util; // Helper class to support some of JDK 14 (and later) features without Jackson itself being run on (or even built with) Java 14.\n", "des": "Contains helper class(es) needed to support some of JDK14+ features without requiring running or building using JDK 14."}
{"index": 2931, "repo": "groovy-4.0.13", "code": "Package: io\n\nClasses and Interfaces: \npublic abstract class AbstractReaderSource extends Object implements ReaderSource; // For ReaderSources that can choose a parent class, a base that provides common functionality.\npublic class FileReaderSource extends AbstractReaderSource; // A ReaderSource for source files.\npublic class InputStreamReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class NullWriter extends Writer; // A Writer that eats its input.\npublic interface ReaderSource extends HasCleanup; // An interface for things that can supply (and potentially resupply) a Reader on a source stream.\npublic class StringReaderSource extends AbstractReaderSource; // A ReaderSource for source strings.\npublic class URLReaderSource extends AbstractReaderSource; // A ReaderSource for source files hosted at a URL.\n", "des": "Internal classes for Groovier Input/Output."}
{"index": 3485, "repo": "opennlp-uima-2.2.0", "code": "Package: sentdetect\n\nClasses and Interfaces: \nInterface SentenceModelResource;\nClass AbstractSentenceDetector;\nClass SentenceDetector; // OpenNLP Sentence annotator.\nClass SentenceModelResourceImpl;\n", "des": "Package related to identifying sentence boundaries."}
{"index": 1374, "repo": "spring-boot-actuator-3.1.1", "code": "Package: cache\n\nClasses and Interfaces: \n@Endpoint(id=\"caches\") public class CachesEndpoint extends Object; // @Endpoint to expose available caches.\npublic static class CachesEndpoint.CacheDescriptor extends Object implements OperationResponseBody; // Description of a Cache.\npublic static final class CachesEndpoint.CacheEntryDescriptor extends CachesEndpoint.CacheDescriptor; // Description of a Cache entry.\npublic static final class CachesEndpoint.CacheManagerDescriptor extends Object; // Description of a CacheManager.\npublic static final class CachesEndpoint.CachesDescriptor extends Object implements OperationResponseBody; // Description of the caches.\n@EndpointWebExtension(endpoint=CachesEndpoint.class) public class CachesEndpointWebExtension extends Object; // @EndpointWebExtension for the CachesEndpoint.\npublic class NonUniqueCacheException extends RuntimeException; // Exception thrown when multiple caches exist with the same name.\n", "des": "Actuator support for caches."}
{"index": 766, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: hyphenation\n\nClasses and Interfaces: \nInterface PatternConsumer; // This interface is used to connect the XML pattern file parser to the hyphenation tree.\nClass ByteVector; // This class implements a simple byte vector with access to the underlying array.\nClass CharVector; // This class implements a simple char vector with access to the underlying array.\nClass Hyphen; // This class represents a hyphen.\nClass Hyphenation; // This class represents a hyphenated word.\nClass HyphenationTree; // This tree structure stores the hyphenation patterns in an efficient way for fast lookup.\nClass PatternParser; // A SAX document handler to read and parse hyphenation patterns from a XML file.\nClass TernaryTree; // Ternary Search Tree.\n", "des": "Hyphenation code for the CompoundWordTokenFilter."}
{"index": 356, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: vector\n\nClasses and Interfaces: \nInterface ParquetDataColumnReader; // The interface to wrap the underlying Parquet dictionary and non dictionary encoded page reader.\nInterface VectorizedColumnReader;\nClass BaseVectorizedColumnReader; // It's column level Parquet reader which is used to read a batch of records for a column, part of the code is referred from Apache Spark and Apache Parquet.\nClass BaseVectorizedColumnReader.NullIntIterator;\nClass BaseVectorizedColumnReader.RLEIntIterator;\nClass BaseVectorizedColumnReader.ValuesReaderIntIterator;\nClass ParquetDataColumnReaderFactory; // Parquet file has self-describing schema which may differ from the user required schema (e.g.\nClass ParquetDataColumnReaderFactory.DefaultParquetDataColumnReader; // The default data column reader for existing Parquet page reader which works for both dictionary or non dictionary types, Mirror from dictionary encoding path.\nClass ParquetDataColumnReaderFactory.TypesFromBooleanPageReader; // The reader who reads from the underlying boolean value value.\nClass ParquetDataColumnReaderFactory.TypesFromDecimalPageReader; // The reader who reads from the underlying decimal value value.\nClass ParquetDataColumnReaderFactory.TypesFromDoublePageReader; // The reader who reads from the underlying double value value.\nClass ParquetDataColumnReaderFactory.TypesFromFloatPageReader; // The reader who reads from the underlying float value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt32DecimalPageReader; // The reader who reads from the underlying decimal value which is stored in an INT32 physical type.\nClass ParquetDataColumnReaderFactory.TypesFromInt32PageReader; // The reader who reads from the underlying int32 value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt64DecimalPageReader; // The reader who reads from the underlying decimal value which is stored in an INT64 physical type.\nClass ParquetDataColumnReaderFactory.TypesFromInt64PageReader; // The reader who reads from the underlying int64 value value.\nClass ParquetDataColumnReaderFactory.TypesFromInt96PageReader; // The reader who reads from the underlying Timestamp value value.\nClass ParquetDataColumnReaderFactory.TypesFromStringPageReader; // The reader who reads from the underlying UTF8 string.\n", "des": "Hive Parquet Vectorized Reader related."}
{"index": 1738, "repo": "spring-jdbc-6.0.11", "code": "Package: xml\n\nClasses and Interfaces: \npublic class Jdbc4SqlXmlHandler extends Object implements SqlXmlHandler; // Default implementation of the SqlXmlHandler interface.\npublic class SqlXmlFeatureNotImplementedException extends org.springframework.dao.InvalidDataAccessApiUsageException; // Exception thrown when the underlying implementation does not support the requested feature of the API.\npublic interface SqlXmlHandler; // Abstraction for handling XML fields in specific databases.\npublic interface SqlXmlValue extends SqlValue; // Subinterface of SqlValue that supports passing in XML data to specified column and adds a cleanup callback, to be invoked after the value has been set and the corresponding statement has been executed.\npublic interface XmlBinaryStreamProvider; // Interface defining handling involved with providing OutputStream data for XML input.\npublic interface XmlCharacterStreamProvider; // Interface defining handling involved with providing Writer data for XML input.\npublic interface XmlResultProvider; // Interface defining handling involved with providing Result data for XML input.\n", "des": "Abstraction for handling fields of SQLXML data type."}
{"index": 1084, "repo": "graal-sdk-1.0.0-rc7", "code": "Package: options\n\nClasses and Interfaces: \nInterface OptionDescriptors; // An interface to a set of OptionDescriptors.\nInterface OptionValues; // Represents a set of option values based on an OptionDescriptor.\nClass OptionDescriptor; // Represents metadata for a single option.\nClass OptionKey<T>; // Represents the option key for an option specification.\nClass OptionType<T>; // Represents a type of an option that allows to convert string values to Java values.\nEnum OptionCategory; // Categorizes options according to user relevance.\n", "des": "The Graal-SDK options package contains reusable collection classes for options."}
{"index": 2486, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: observation\n\nSub Packages: \npackage observation.batch; // Auto-configuration for Spring Batch observations.\npackage observation.graphql; // Auto-configuration for Spring GraphQL observations.\n\nClasses and Interfaces: \n@AutoConfiguration(after={CompositeMeterRegistryAutoConfiguration.class,MicrometerTracingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.observation.ObservationRegistry.class) @EnableConfigurationProperties(ObservationProperties.class) public class ObservationAutoConfiguration extends Object; // Auto-configuration for the Micrometer Observation API.\n@ConfigurationProperties(\"management.observations\") public class ObservationProperties extends Object; // @ConfigurationProperties for configuring Micrometer observations.\npublic static class ObservationProperties.Http extends Object;\npublic static class ObservationProperties.Http.Client extends Object;\npublic static class ObservationProperties.Http.Client.ClientRequests extends Object;\npublic static class ObservationProperties.Http.Server extends Object;\npublic static class ObservationProperties.Http.Server.ServerRequests extends Object;\n@FunctionalInterface public interface ObservationRegistryCustomizer<T extends io.micrometer.observation.ObservationRegistry>; // Callback interface that can be used to customize auto-configured observation registries.\n", "des": "Auto-configuration for the Micrometer Observation API."}
{"index": 668, "repo": "commons-lang3-3.12.0", "code": "Package: event\n\nClasses and Interfaces: \nClass EventListenerSupport<L>; // An EventListenerSupport object can be used to manage a list of event listeners of a particular type.\nClass EventUtils; // Provides some useful event-based utility methods.\n", "des": "Provides some useful event-based utilities."}
{"index": 2462, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: humio\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.humio.HumioMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"humio\") @EnableConfigurationProperties(HumioProperties.class) public class HumioMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Humio.\n@ConfigurationProperties(prefix=\"management.humio.metrics.export\") public class HumioProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Humio metrics export.\n", "des": "Support for exporting actuator metrics to Humio."}
{"index": 738, "repo": "spring-data-solr-4.3.15", "code": "Package: schema\n\nClasses and Interfaces: \nInterface ContentParser;\nInterface SchemaDefinition.SchemaField;\nInterface SchemaOperations; // Operations interface for executing modification on a managed schema.\nClass DefaultSchemaOperations; // SchemaOperations implementation based on SolrTemplate.\nClass MappingJacksonRequestContentParser;\nClass MappingJacksonResponseParser;\nClass SchemaDefinition;\nClass SchemaDefinition.CopyFieldDefinition;\nClass SchemaDefinition.CopyFieldDefinition.Builder;\nClass SchemaDefinition.FieldDefinition;\nClass SchemaDefinition.FieldDefinition.Builder;\nClass SchemaDefinition.FieldDefinitionBuilder;\nClass SchemaDefinition.Filter;\nClass SchemaDefinition.Tokenizer;\nClass SolrJsonRequest;\nClass SolrJsonResponse;\nClass SolrPersistentEntitySchemaCreator;\nClass SolrSchemaResolver;\nClass SolrSchemaWriter;\nEnum SolrPersistentEntitySchemaCreator.Feature;\nClass SchemaModificationException; // NonTransientDataAccessException raised when schema modification requests fail.\n", "des": "Everything Apache Solr schema specific."}
{"index": 1872, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: authc\n\nSub Packages: \npackage authc.credential; // Support for validating credentials (such as passwords or X509 certificates) during authentication via the CredentialsMatcher interface and its supporting implementations.\npackage authc.pam; // Support for PAM, or Pluggable Authentication Modules, which is the capability to authenticate a user against multiple configurable (pluggable) modules (Shiro calls these Realms).\n\nClasses and Interfaces: \npublic abstract class AbstractAuthenticator extends Object implements Authenticator, LogoutAware; // Superclass for almost all Authenticator implementations that performs the common work around authentication attempts.\npublic interface Account extends AuthenticationInfo, AuthorizationInfo; // An Account is a convenience interface that extends both AuthenticationInfo and AuthorizationInfo and represents authentication and authorization for a single account in a single Realm.\npublic class AccountException extends AuthenticationException; // Exception thrown due to a problem with the account under which an authentication attempt is being executed.\npublic class AuthenticationException extends org.apache.shiro.lang.ShiroException; // General exception thrown due to an error during the Authentication process.\npublic interface AuthenticationInfo extends Serializable; // AuthenticationInfo represents a Subject's (aka user's) stored account information relevant to the authentication/log-in process only.\npublic interface AuthenticationListener; // An AuthenticationListener listens for notifications while Subjects authenticate with the system.\npublic interface AuthenticationToken extends Serializable; // An AuthenticationToken is a consolidation of an account's principals and supporting credentials submitted by a user during an authentication attempt.\npublic interface Authenticator; // An Authenticator is responsible for authenticating accounts in an application.\npublic class BearerToken extends Object implements HostAuthenticationToken; // A AuthenticationToken that contains an a Bearer token or API key, typically received via an HTTP Authorization header.\npublic class ConcurrentAccessException extends AccountException; // Thrown when an authentication attempt has been received for an account that has already been authenticated (i.e.\npublic class CredentialsException extends AuthenticationException; // Exception thrown due to a problem with the credential(s) submitted for an account during the authentication process.\npublic class DisabledAccountException extends AccountException; // Thrown when attempting to authenticate and the corresponding account has been disabled for some reason.\npublic class ExcessiveAttemptsException extends AccountException; // Thrown when a system is configured to only allow a certain number of authentication attempts over a period of time and the current session has failed to authenticate successfully within that number.\n", "des": "Core interfaces and exceptions concerning Authentication (the act of logging-in)."}
{"index": 1059, "repo": "avro-1.11.2", "code": "Package: file\n\nClasses and Interfaces: \nInterface FileReader<D>; // Interface for reading data from a file.\nInterface SeekableInput; // An InputStream that supports seek and tell.\nInterface Syncable;\nClass BZip2Codec; // Implements bzip2 compression and decompression.\nClass Codec; // Interface for Avro-supported compression codecs for data files.\nClass CodecFactory; // Encapsulates the ability to specify and configure a compression codec.\nClass DataFileConstants; // Constants used in data files.\nClass DataFileReader<D>; // Random access to files written with DataFileWriter.\nClass DataFileReader12<D>; // Read files written by Avro version 1.2.\nClass DataFileStream<D>; // Streaming access to files written by DataFileWriter.\nClass DataFileStream.Header; // A handle that can be used to reopen a DataFile without re-reading the header of the stream.\nClass DataFileWriter<D>; // Stores in a file a sequence of data conforming to a schema.\nClass DeflateCodec; // Implements DEFLATE (RFC1951) compression and decompression.\nClass SeekableByteArrayInput; // A SeekableInput backed with data in a byte array.\nClass SeekableFileInput; // A FileInputStream that implements SeekableInput.\nClass SnappyCodec; // Implements Snappy compression and decompression.\nClass SyncableFileOutputStream; // An implementation of Syncable which writes to a file.\nClass XZCodec; // Implements xz compression and decompression.\nClass ZstandardCodec;\nClass DataFileWriter.AppendWriteException; // Thrown by DataFileWriter.append(Object) when an exception occurs while writing a datum to the buffer.\n", "des": "A container file for Avro data."}
{"index": 1136, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: timeline\n\nClasses and Interfaces: \nClass TimelineAbout;\nClass TimelineDelegationTokenResponse; // The response of delegation token related request\nClass TimelineDomain; // This class contains the information about a timeline domain, which is used to a user to host a number of timeline entities, isolating them from others'.\nClass TimelineDomains; // The class that hosts a list of timeline domains.\nClass TimelineEntities; // The class that hosts a list of timeline entities.\nClass TimelineEntity; // The class that contains the the meta information of some conceptual entity and its related events.\nClass TimelineEntityGroupId; // TimelineEntityGroupId is an abstract way for timeline service users to represent “a group of related timeline data.\nClass TimelineEvent; // The class that contains the information of an event that is related to some conceptual entity of an application.\nClass TimelineEvents; // The class that hosts a list of events, which are categorized according to their related entities.\nClass TimelineEvents.EventsOfOneEntity; // The class that hosts a list of events that are only related to one entity.\nClass TimelineHealth; // This class holds health information for ATS.\nClass TimelinePutResponse; // A class that holds a list of put errors.\nClass TimelinePutResponse.TimelinePutError; // A class that holds the error code for one entity.\nEnum TimelineHealth.TimelineHealthStatus; // Timline health status.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 841, "repo": "calcite-core-1.34.0", "code": "Package: core\n\nClasses and Interfaces: \nInterface RelFactories.AggregateFactory; // Can create a LogicalAggregate of the appropriate type for this rule's calling convention.\nInterface RelFactories.CorrelateFactory; // Can create a correlate of the appropriate type for a rule's calling convention.\nInterface RelFactories.ExchangeFactory; // Can create a Exchange of the appropriate type for a rule's calling convention.\nInterface RelFactories.FilterFactory; // Can create a Filter of the appropriate type for this rule's calling convention.\nInterface RelFactories.JoinFactory; // Can create a join of the appropriate type for a rule's calling convention.\nInterface RelFactories.MatchFactory; // Can create a Match of the appropriate type for a rule's calling convention.\nInterface RelFactories.ProjectFactory; // Can create a LogicalProject of the appropriate type for this rule's calling convention.\nInterface RelFactories.RepeatUnionFactory; // Can create a RepeatUnion of the appropriate type for a rule's calling convention.\nInterface RelFactories.SemiJoinFactory; // Use RelFactories.JoinFactory instead.\nInterface RelFactories.SetOpFactory; // Can create a SetOp for a particular kind of set operation (UNION, EXCEPT, INTERSECT) and of the appropriate type for this rule's calling convention.\nInterface RelFactories.SnapshotFactory; // Can create a Snapshot of the appropriate type for a rule's calling convention.\nInterface RelFactories.SortExchangeFactory; // Can create a SortExchange of the appropriate type for a rule's calling convention.\nInterface RelFactories.SortFactory; // Can create a Sort of the appropriate type for this rule's calling convention.\nInterface RelFactories.SpoolFactory; // Can create a Spool of the appropriate type for a rule's calling convention.\nInterface RelFactories.TableFunctionScanFactory; // Can create a TableFunctionScan of the appropriate type for a rule's calling convention.\nInterface RelFactories.TableScanFactory; // Can create a TableScan of the appropriate type for a rule's calling convention.\nInterface RelFactories.ValuesFactory; // Can create a Values of the appropriate type for a rule's calling convention.\nClass Aggregate; // Relational operator that eliminates duplicates and computes totals.\nClass Aggregate.AggCallBinding; // Implementation of the SqlOperatorBinding interface for an aggregate call applied to a set of operands in the context of a LogicalAggregate.\n", "des": "Defines core relational expressions."}
{"index": 1500, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: wizard\n\nClasses and Interfaces: \npublic abstract class AbstractWizardModel extends Object implements IWizardModel; // Abstract wizard model that provides an implementation for handling wizard model listeners and provides base implementations of many methods.\npublic class AjaxWizardButtonBar extends WizardButtonBar; // A bar of buttons for wizards utilizing AjaxFormSubmitBehavior.\npublic class CancelButton extends WizardButton; // Models a cancel button in the wizard.\npublic class FinishButton extends WizardButton; // Models a cancel button in the wizard.\npublic interface IWizard extends org.apache.wicket.util.io.IClusterable; // Interface for the wizard component.\npublic interface IWizardModel extends org.apache.wicket.util.io.IClusterable; // This interface defines the model for wizards.\npublic interface IWizardModelListener extends org.apache.wicket.util.io.IClusterable; // Receives notifications for wizard model state changes.\npublic interface IWizardStep extends org.apache.wicket.util.io.IClusterable; // Models one step in a wizard, and is the equivalent of one panel in a wizard from an end-user's perspective.\npublic class LastButton extends WizardButton; // Models a 'last' button in the wizard.\npublic class NextButton extends WizardButton; // Models a next button in the wizard.\npublic class PreviousButton extends WizardButton; // Models a previous button in the wizard.\npublic class StaticContentStep extends WizardStep; // A wizard step that displays the provided static content without expecting any input.\npublic class Wizard extends org.apache.wicket.markup.html.panel.Panel implements IWizardModelListener, IWizard; // A wizard is a dialog component that takes users through a number of steps to complete a task.\npublic abstract class WizardButton extends org.apache.wicket.markup.html.form.Button; // Base class for buttons that work with the wizard component.\npublic class WizardButtonBar extends org.apache.wicket.markup.html.panel.Panel; // The default bar of button components for wizards.\npublic class WizardModel extends AbstractWizardModel; // Default implementation of IWizardModel, which models a semi-static wizard.\n", "des": "Package for working with Wizard components."}
{"index": 1818, "repo": "spring-integration-mail-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultMailHeaderMapper extends Object implements org.springframework.integration.mapping.HeaderMapper<jakarta.mail.internet.MimeMessage>; // Maps an inbound MimeMessage to a Map.\npublic final class MailUtils extends Object; // Utilities for handling mail messages.\n", "des": "Provides classes to support email."}
{"index": 2961, "repo": "spring-integration-redis-6.1.2", "code": "Package: metadata\n\nClasses and Interfaces: \npublic class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore; // Redis implementation of ConcurrentMetadataStore.\n", "des": "Provides support for Redis-based MetadataStores."}
{"index": 3474, "repo": "hilt-android-2.47", "code": "Package: components\n\nClasses and Interfaces: \nInterface ActivityComponent; // A Hilt component that has the lifetime of the activity.\nInterface ActivityRetainedComponent; // A Hilt component that has the lifetime of a configuration surviving activity.\nInterface FragmentComponent; // A Hilt component that has the lifetime of the fragment.\nInterface ServiceComponent; // A Hilt component that has the lifetime of the service.\nInterface ViewComponent; // A Hilt component that has the lifetime of the view.\nInterface ViewModelComponent; // A Hilt component that has the lifetime of a single ViewModel.\nInterface ViewWithFragmentComponent; // A Hilt component that has the lifetime of the view.\n", "des": "This package contains Hilt's built-in Components for Android."}
{"index": 1695, "repo": "spring-data-couchbase-5.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.config; // This package contains the support classes to configure repositories in the context of Couchbase.\npackage repository.query; // This package contains classes related to query derivation and concrete ways of querying couchbase.\npackage repository.support; // This package contains the Couchbase implementations to support the Spring Data repository abstraction.\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Collection; // Collection Annotation\n@NoRepositoryBean public interface CouchbaseRepository<T,ID> extends PagingAndSortingRepository<T,ID>, CrudRepository<T,ID>; // Couchbase specific Repository interface.\npublic interface DynamicProxyable<REPO>; // The generic parameter needs to be REPO which is either a CouchbaseRepository parameterized on T,ID or a ReactiveCouchbaseRepository parameterized on T,ID. i.e.: interface AirportRepository extends CouchbaseRepository<Airport, String>, DynamicProxyable<AirportRepository>\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Options; // Scope Annotation\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Documented public @interface Query; // Annotation to support the use of N1QL queries with Couchbase.\n@NoRepositoryBean public interface ReactiveCouchbaseRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveCrudRepository<T,ID>; // Couchbase-specific ReactiveSortingRepository implementation.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface ScanConsistency; // Scan Consistency Annotation\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE,TYPE}) @Documented public @interface Scope; // Scope Annotation\n", "des": "This package contains the Couchbase interfaces to support the Spring Data repository abstraction."}
{"index": 2247, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.config; // Support infrastructure for the configuration of key/value specific repositories.\npackage repository.query; // Query derivation mechanism for key/value specific repositories providing a generic SpEL based implementation.\npackage repository.support; // Support infrastructure for query derivation of key/value specific repositories.\n\nClasses and Interfaces: \npublic interface KeyValueRepository<T,ID> extends ListCrudRepository<T,ID>, ListPagingAndSortingRepository<T,ID>;\n", "des": "Key/value specific repository implementation."}
{"index": 99, "repo": "ignite-core-2.15.0", "code": "Package: failover\n\nSub Packages: \npackage failover.always; // Contains default \"always\" failover SPI.\npackage failover.jobstealing; // Contains job stealing failover SPI.\npackage failover.never; // Contains \"never\" failover SPI.\n\nClasses and Interfaces: \nInterface FailoverContext; // This interface defines a set of operations available to failover SPI one a given failed job.\nInterface FailoverSpi; // Failover SPI provides developer with ability to supply custom logic for handling failed execution of a grid job.\n", "des": "Contains APIs for failover SPI."}
{"index": 506, "repo": "commons-vfs2-2.9.0", "code": "Package: vfs2\n\nSub Packages: \npackage vfs2.auth; // VFS Authentication implementation\npackage vfs2.cache; // VFS File caching\npackage vfs2.events; // VFS Events\npackage vfs2.filter; // Implementations of org.apache.commons.vfs2.FileFilter.\npackage vfs2.function; // Functional interface types in the style of java.util.function.\npackage vfs2.impl; // The standard VFS implementation.\npackage vfs2.operations; // VFS Operations handling.\npackage vfs2.provider; // The File Provider API, and utility classes.\npackage vfs2.tasks; // The VFS Ant Tasks.\npackage vfs2.util; // Utility classes used by the VFS.\n\nClasses and Interfaces: \nInterface FileContent; // Represents the data content of a file.\nInterface FileContentInfo; // Informs on the content of a file with content type and encoding.\nInterface FileContentInfoFactory; // Creates FileContentInfo instances to determine the content-info for given file contents.\nInterface FileFilter; // This interface is used to select files when traversing the direct children of the base.\nInterface FileListener; // Listens for changes to a file.\nInterface FileMonitor; // FileMonitor interface.\nInterface FileName; // Represents a file name.\nInterface FileObject; // Represents a file, and is used to access the content and structure of the file.\nInterface FilesCache; // The fileCache interface.\nInterface FileSelectInfo; // Information about a file, that is used to select files during the traversal of a hierarchy.\nInterface FileSelector; // This interface is used to select files when traversing a file hierarchy.\nInterface FileSystem; // A file system, made up of a hierarchy of files.\nInterface FileSystemManager; // A FileSystemManager manages a set of file systems.\nInterface RandomAccessContent; // Provides random access over content.\nInterface UserAuthenticator; // The user authenticator is used to query credentials from the user.\nClass AllFileSelector; // A FileSelector that selects everything.\nClass FileChangeEvent; // An event fired when a file is changed.\nClass FileDepthSelector; // A FileSelector that selects all files in a particular depth range.\nClass FileExtensionSelector; // A FileSelector that selects based on file extensions.\n", "des": "The public VFS API."}
{"index": 1268, "repo": "spring-core-6.0.11", "code": "Package: core\n\nSub Packages: \npackage core.annotation; // Core support package for annotations, meta-annotations, and merged annotations with attribute overrides.\npackage core.codec; // Encoder and Decoder abstractions to convert between a reactive stream of bytes and Java objects.\npackage core.convert; // Type conversion system API.\npackage core.env; // Spring's environment abstraction consisting of bean definition profile and hierarchical property source support.\npackage core.io; // Generic abstraction for (file-based) resources, used throughout the framework.\npackage core.log; // Useful delegates for Spring's logging conventions.\npackage core.metrics; // Support package for recording metrics during application startup.\npackage core.serializer; // Root package for Spring's serializer interfaces and implementations.\npackage core.style; // Support for styling values as Strings, with ToStringCreator as central class.\npackage core.task; // This package defines Spring's core TaskExecutor abstraction, and provides SyncTaskExecutor and SimpleAsyncTaskExecutor implementations.\npackage core.type; // Core support package for type introspection.\n\nClasses and Interfaces: \npublic interface AliasRegistry; // Common interface for managing aliases.\npublic interface AttributeAccessor; // Interface defining a generic contract for attaching and accessing metadata to/from arbitrary objects.\npublic abstract class AttributeAccessorSupport extends Object implements AttributeAccessor, Serializable; // Support class for AttributeAccessors, providing a base implementation of all methods.\npublic final class BridgeMethodResolver extends Object; // Helper for resolving synthetic bridge Methods to the Method being bridged.\npublic final class CollectionFactory extends Object; // Factory for collections that is aware of common Java and Spring collection types.\npublic class ConfigurableObjectInputStream extends ObjectInputStream; // Special ObjectInputStream subclass that resolves class names against a specific ClassLoader.\npublic class Constants extends Object; // This class can be used to parse other classes containing constant definitions in public static final members.\npublic static class Constants.ConstantException extends IllegalArgumentException; // Exception thrown when the Constants class is asked for an invalid constant name.\npublic final class Conventions extends Object; // Provides methods to support various naming and other conventions used throughout the framework.\npublic abstract class CoroutinesUtils extends Object; // Utilities for working with Kotlin Coroutines.\n", "des": "Provides basic classes for exception handling and version detection, and other core helpers that are not specific to any part of the framework."}
{"index": 3786, "repo": "lucene-analysis-common-9.7.0", "code": "Package: fr\n\nClasses and Interfaces: \nClass FrenchAnalyzer; // Analyzer for French language.\nClass FrenchLightStemFilter; // A TokenFilter that applies FrenchLightStemmer to stem French words.\nClass FrenchLightStemFilterFactory; // Factory for FrenchLightStemFilter.\nClass FrenchLightStemmer; // Light Stemmer for French.\nClass FrenchMinimalStemFilter; // A TokenFilter that applies FrenchMinimalStemmer to stem French words.\nClass FrenchMinimalStemFilterFactory; // Factory for FrenchMinimalStemFilter.\nClass FrenchMinimalStemmer; // Light Stemmer for French.\n", "des": "Analyzer for French."}
{"index": 3219, "repo": "commons-configuration2-2.9.0", "code": "Package: interpol\n\nClasses and Interfaces: \nInterface Lookup; // Definition of an interface for looking up variables during interpolation.\nClass ConfigurationInterpolator; // A class that handles interpolation (variable substitution) for configuration objects.\nClass ConstantLookup; // Looks up constant fields in classes.\nClass EnvironmentLookup;\nClass ExprLookup; // Lookup that allows expressions to be evaluated.\nClass ExprLookup.Variable; // The key and corresponding object that will be made available to the JexlContext for use in expressions.\nClass ExprLookup.Variables; // List wrapper used to allow the Variables list to be created as beans in DefaultConfigurationBuilder.\nClass InterpolatorSpecification; // A simple value class defining a ConfigurationInterpolator.\nClass InterpolatorSpecification.Builder; // A builder class for creating instances of InterpolatorSpecification.\nClass SystemPropertiesLookup;\nEnum DefaultLookups; // An enumeration class defining constants for built-in Lookup objects available for Configuration instances.\nEnum DummyLookup; // A simple dummy Lookup implementation.\n", "des": "A package with helper classes used for interpolation (variable substitution)."}
{"index": 3296, "repo": "opencms-core-15.0", "code": "Package: main\n\nClasses and Interfaces: \nInterface I_CmsEventListener; // Implement this interface in case your class has to react to CmsEvents that are thrown by system.\nInterface I_CmsRequestHandler; // Describes an OpenCms request handler.\nInterface I_CmsResourceInit; // This interface checks the requested resource from the OpenCms request context and returns it to the calling method, which will usually be OpenCms.initResource(CmsObject, String, HttpServletRequest, HttpServletResponse).\nInterface I_CmsSessionDestroyHandler; // Interface used for notifying objects stored in a session when the session is destroyed.\nInterface I_CmsSessionStorageProvider; // This interface is used to define the session storage implementation provider.\nInterface I_CmsShellCommands; // Provides scriptable access to a class from the CmsShell.\nInterface I_CmsStartStopHandler; // Interface for plugins that need to be called during startup and shutdown.\nInterface I_CmsThrowable; // Provides localized Exception handling based on the OpenCms default locale.\nClass A_CmsAuthorizationHandler; // Abstract class to grant the needed access to the session manager.\nClass CmsAliasResourceHandler; // Resource init handler for detail-pages.\nClass CmsBroadcast; // A single broadcast message, send from one OpenCms user to another.\nClass CmsContextInfo; // Contains user information for automated creation of a CmsRequestContext during system runtime.\nClass CmsDefaultSessionStorageProvider; // The default session storage provider implementation.\nClass CmsDuplicateRemovingLogBuffer; // Class used to collect log messages and later write them to the actual log but with duplicates removed.\nClass CmsDuplicateRemovingLogBuffer.Entry; // Entry to write to the log.\nClass CmsEvent; // Event class for OpenCms for system wide events that are thrown by various operations (e.g.\nClass CmsEventManager; // Manager that controls the OpenCms event system.\nClass CmsHttpAuthenticationSettings; // Contains the settings to handle HTTP basic authentication.\nClass CmsLog; // Provides the OpenCms logging mechanism.\nClass CmsPermalinkResourceHandler; // Resource init handler that loads a resource given its permalink.\nClass CmsProtectedStaticFileHandler; // Resource init handler that provides an alternative way of serving static files like images or binary files, using the API authorization mechanism instead of the normal authorization handler.\nClass CmsServletContainerSettings; // Stores specific servlet container options, that might influence OpenCms behavior.\n", "des": "Provides the main OpenCms \"operating system\"."}
{"index": 499, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: reflect\n\nClasses and Interfaces: \nInterface DoFnInvoker<InputT,OutputT>; // Interface for invoking the DoFn processing methods.\nInterface DoFnInvoker.ArgumentProvider<InputT,OutputT>; // Interface for runner implementors to provide implementations of extra context information.\nInterface DoFnSignature.DoFnMethod; // A method delegated to an annotated method of an underlying DoFn.\nInterface DoFnSignature.MethodWithExtraParameters; // A method delegated to an annotated method of an underlying DoFn that accepts a dynamic list of parameters.\nInterface DoFnSignature.Parameter.Cases<ResultT>; // An interface for destructuring a DoFnSignature.Parameter.\nInterface OnTimerInvoker<InputT,OutputT>; // Interface for invoking the DoFn.OnTimer method for a particular timer.\nClass DoFnInvoker.BaseArgumentProvider<InputT,OutputT>; // This DoFnInvoker.ArgumentProvider throws UnsupportedOperationException for all parameters.\nClass DoFnInvoker.DelegatingArgumentProvider<InputT,OutputT>; // An DoFnInvoker.ArgumentProvider that forwards all calls to the supplied delegate.\nClass DoFnInvoker.FakeArgumentProvider<InputT,OutputT>; // A fake DoFnInvoker.ArgumentProvider used during testing.\nClass DoFnInvokers; // Static utilities for working with DoFnInvoker.\nClass DoFnSignature; // Describes the signature of a DoFn, in particular, which features it uses, which extra context it requires, types of the input and output elements, etc.\nClass DoFnSignature.BundleMethod; // Describes a DoFn.StartBundle or DoFn.FinishBundle method.\nClass DoFnSignature.FieldAccessDeclaration; // Decscribes a field access declaration.\nClass DoFnSignature.GetInitialRestrictionMethod; // Describes a DoFn.GetInitialRestriction method.\nClass DoFnSignature.GetInitialWatermarkEstimatorStateMethod; // Describes a DoFn.GetInitialWatermarkEstimatorState method.\nClass DoFnSignature.GetRestrictionCoderMethod; // Describes a DoFn.GetRestrictionCoder method.\nClass DoFnSignature.GetSizeMethod; // Describes a DoFn.GetSize method.\nClass DoFnSignature.GetWatermarkEstimatorStateCoderMethod; // Describes a DoFn.GetRestrictionCoder method.\n", "des": "For internal use only; no backwards-compatibility guarantees."}
{"index": 415, "repo": "hadoop-azure-3.3.6", "code": "Package: azurebfs\n\nSub Packages: \npackage azurebfs.commit; // Support for manifest committer.\npackage azurebfs.extensions; // This package is for extension points under ABFS; There are no stability guarantees as these extension points are deep inside the ABFS implementation code.\npackage azurebfs.oauth2; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\npackage azurebfs.security; // Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.\n\nClasses and Interfaces: \nClass Abfs; // Azure Blob File System implementation of AbstractFileSystem.\nClass AbfsConfiguration; // Configuration for Azure Blob FileSystem.\nClass AbfsCountersImpl; // Instrumentation of Abfs counters.\nClass Abfss; // Azure Blob File System implementation of AbstractFileSystem.\nClass AzureBlobFileSystem; // A FileSystem for reading and writing files stored on Windows Azure\nClass AzureBlobFileSystemStore; // Provides the bridging logic between Hadoop's abstract filesystem and Azure Storage.\nClass AzureBlobFileSystemStore.AzureBlobFileSystemStoreBuilder; // A builder class for AzureBlobFileSystemStore.\nClass SecureAzureBlobFileSystem; // A secure FileSystem for reading and writing files stored on Windows Azure\nEnum AbfsStatistic; // Statistic which are collected in Abfs.\n", "des": "A distributed implementation of FileSystem for reading and writing files on Azure Storage."}
{"index": 364, "repo": "commons-geometry-euclidean-1.0", "code": "Package: threed\n\nSub Packages: \npackage threed.line; // This package provides classes and utilities for lines in 3D Euclidean space.\npackage threed.mesh; // This package contains types representing 3D mesh data structures.\npackage threed.rotation; // This package provides components related to rotations in 3 dimensional Euclidean space.\npackage threed.shape; // This package provides utilities for constructing basic 3D shapes.\n\nClasses and Interfaces: \nInterface BoundarySource3D; // Extension of the BoundarySource interface for Euclidean 3D space.\nInterface ConvexPolygon3D; // Interface representing a closed, finite convex polygon in Euclidean 3D space.\nInterface PlaneConvexSubset; // Interface representing a finite or infinite convex subset of points in a plane in Euclidean 3D space.\nInterface PlaneConvexSubset.Embedded; // Interface used to represent plane convex subsets as embedded 2D subspace regions.\nInterface PlaneSubset; // Interface representing a subset of points in a plane in Euclidean 3D space.\nInterface PlaneSubset.Embedded; // Interface used to represent plane subsets as embedded 2D subspace regions.\nInterface Triangle3D; // Interface representing a triangle in Euclidean 3D space.\nClass AffineTransformMatrix3D; // Class using a matrix to represent affine transformations in 3 dimensional Euclidean space.\nClass BoundaryList3D; // BoundarySource3D implementation that uses boundaries stored in a list.\nClass Bounds3D; // Class containing minimum and maximum points defining a 3D axis-aligned bounding box.\nClass Bounds3D.Builder; // Class used to construct Bounds3D instances.\nClass ConvexVolume; // Class representing a finite or infinite convex volume in Euclidean 3D space.\nClass EmbeddedTreePlaneSubset; // Class representing an arbitrary subset of a plane using a RegionBSPTree2D.\nClass EmbeddingPlane; // Extension of the Plane class that supports embedding of 2D subspaces in the plane.\nClass EmbeddingPlane.SubspaceTransform; // Class containing a transformed plane instance along with a subspace (2D) transform.\nClass Plane; // Class representing a plane in 3 dimensional Euclidean space.\nClass Planes; // Class containing factory methods for constructing Plane and PlaneSubset instances.\n", "des": "This package provides basic 3D geometry components."}
{"index": 3882, "repo": "solr-solrj-9.3.0", "code": "Package: solrj\n\nSub Packages: \npackage solrj.beans; // Annotation based mapping of client objects to Solr documents.\npackage solrj.cloud; // Common classes for SolrCloud.\npackage solrj.embedded; // SolrJ client implementations for embedded solr access.\npackage solrj.impl; // Concrete implementations of client API classes.\npackage solrj.request; // Convenience classes for dealing with various types of Solr requests.\npackage solrj.response; // Convenience classes for dealing with various types of Solr responses.\npackage solrj.routing; // Classes to handle query routing preferences\npackage solrj.util; // Utilities for Solr client applications.\n\nClasses and Interfaces: \nInterface FastStreamingDocsCallback;\nInterface V2RequestSupport; // A a request object is able to convert itself to V2 Request it should implement this interface\nClass ResponseParser;\nClass SolrClient; // Abstraction through which all communication with a Solr server may be routed\nClass SolrQuery; // This is an augmented SolrParams with get/set/add fields for common fields used in the Standard and Dismax request handlers\nClass SolrQuery.SortClause; // A single sort clause, encapsulating what to sort and the sort order.\nClass SolrRequest<T extends SolrResponse>;\nClass SolrResponse;\nClass StreamingResponseCallback; // A callback interface for streaming response\nEnum RoutedAliasTypes; // Types of Routed Alias supported.\nEnum SolrQuery.ORDER;\nEnum SolrRequest.METHOD;\nEnum SolrRequest.SolrClientContext;\nEnum SolrRequest.SolrRequestType;\nClass SolrServerException; // Exception to catch all types of communication / parsing issues associated with talking to SOLR\n", "des": "Primary APIs for communicating with a Solr Server from a Java client."}
{"index": 2928, "repo": "groovy-4.0.13", "code": "Package: classgen\n\nSub Packages: \npackage classgen.asm; // Helper classes for ASMClassGenerator.\n\nClasses and Interfaces: \npublic class AnnotationVisitor extends Object; // An Annotation visitor responsible for: reading annotation metadata (@Retention, @Target, attribute types) verify that an AnnotationNode conforms to annotation meta enhancing an AnnotationNode AST to reflect real annotation meta\npublic class AsmClassGenerator extends ClassGenerator; // Generates Java class versions of Groovy classes using ASM.\npublic abstract class BytecodeExpression extends Expression; // Represents some custom bytecode generation by the compiler.\npublic abstract class BytecodeInstruction extends Object; // Helper class used by the class generator.\npublic class BytecodeSequence extends Statement; // This class represents a sequence of BytecodeInstructions or ASTNodes.\npublic class ClassCompletionVerifier extends ClassCodeVisitorSupport; // Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members\npublic abstract class ClassGenerator extends ClassCodeVisitorSupport; // Abstract base class for generator of Java class versions of Groovy AST classes\npublic class ClassGeneratorException extends RuntimeException; // An exception thrown by the class generator\npublic class DummyClassGenerator extends ClassGenerator; // To generate a class that has all the fields and methods, except that fields are not initialized and methods are empty.\npublic class EnumCompletionVisitor extends ClassCodeVisitorSupport; // Enums have a parent constructor with two arguments from java.lang.Enum.\npublic class EnumVisitor extends ClassCodeVisitorSupport;\npublic class ExtendedVerifier extends ClassCodeVisitorSupport; // A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.\npublic class FinalVariableAnalyzer extends ClassCodeVisitorSupport;\npublic static interface FinalVariableAnalyzer.VariableNotFinalCallback;\npublic class GeneratorContext extends Object; // A context shared across generations of a class and its inner classes.\npublic class InnerClassCompletionVisitor extends InnerClassVisitorHelper;\npublic class InnerClassVisitor extends InnerClassVisitorHelper;\npublic abstract class InnerClassVisitorHelper extends ClassCodeVisitorSupport;\npublic class ReturnAdder extends Object; // Utility class to add return statements.\n@FunctionalInterface public static interface ReturnAdder.ReturnStatementListener;\n", "des": "Generates Java classes for Groovy classes using ASM."}
{"index": 2584, "repo": "spring-rabbit-3.0.6", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target({}) @Retention(RUNTIME) public @interface Argument; // Represents an argument used when declaring queues etc within a QueueBinding.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Import(RabbitListenerConfigurationSelector.class) public @interface EnableRabbit; // Enable Rabbit listener annotated endpoints that are created under the cover by a RabbitListenerContainerFactory.\n@Target({}) @Retention(RUNTIME) public @interface Exchange; // An exchange to which to bind a RabbitListener queue.\npublic class MultiRabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.context.EnvironmentAware; // An ImportBeanDefinitionRegistrar class that registers a MultiRabbitListenerAnnotationBeanPostProcessor bean, if MultiRabbit is enabled.\npublic class MultiRabbitListenerAnnotationBeanPostProcessor extends RabbitListenerAnnotationBeanPostProcessor; // An extension of RabbitListenerAnnotationBeanPostProcessor that indicates the proper RabbitAdmin bean to be used when processing to the listeners, and also associates it to the declarables (Exchanges, Queues, and Bindings) returned.\n@Target({}) @Retention(RUNTIME) public @interface Queue; // A queue definition used within the bindings attribute of a QueueBinding.\n@Target({}) @Retention(RUNTIME) public @interface QueueBinding; // Defines a queue, the exchange it is to be bound to, and an optional binding key; used with @RabbitListener.\npublic class RabbitBootstrapConfiguration extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // An ImportBeanDefinitionRegistrar class that registers a RabbitListenerAnnotationBeanPostProcessor bean capable of processing Spring's @RabbitListener annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @MessageMapping @Documented public @interface RabbitHandler; // Annotation that marks a method to be the target of a Rabbit message listener within a class that is annotated with RabbitListener.\n", "des": "Annotations and supporting classes for declarative Rabbit listener endpoint"}
{"index": 3626, "repo": "solr-test-framework-9.3.0", "code": "Package: util\n\nClasses and Interfaces: \nInterface RESTfulServerProvider;\nClass BadZookeeperThreadsFilter;\nClass BaseTestHarness;\nClass DirectoryUtil;\nClass DOMUtilTestBase;\nClass EmbeddedSolrServerTestRule; // Provides an EmbeddedSolrServer for tests.\nClass ErrorLogMuter; // Helper code for \"Muting\" ERROR log messages that you expect as a result of the things you are testing, so they aren't a distraction in test logs.\nClass ExternalPaths; // Some tests need to reach outside the classpath to get certain resources (e.g.\nClass LogLevel.Configurer;\nClass LogListener; // Helper code to listen for LogEvent messages (via a Queue) that you expect as a result of the things you are testing, So you can make assertions about when a particular action should/shouldn't cause Solr to produce a particular Log message\nClass MockCoreContainer;\nClass MockCoreContainer.MockCoreDescriptor;\nClass NotSecurePseudoRandomSpi; // A mocked up instance of SecureRandom that just uses Random under the covers.\nClass QueryMatchers;\nClass RandomForceMergePolicy; // A MergePolicy with a no-arg constructor that proxies to a ForceMergePolicy wrapped instance retrieved from LuceneTestCase.newMergePolicy(java.util.Random).\nClass RandomForceMergePolicyFactory; // A MergePolicyFactory for RandomForceMergePolicy.\nClass RandomizeSSL.SSLRandomizer; // A simple data structure for encapsulating the effective values to be used when randomizing SSL in a test, based on the configured values in the RandomizeSSL annotation.\nClass RandomMergePolicy; // A MergePolicy with a no-arg constructor that proxies to an instance retrieved from LuceneTestCase.newMergePolicy(java.util.Random).\nClass RandomMergePolicyFactory; // A MergePolicyFactory for RandomMergePolicy.\nClass ReadOnlyCoresLocator;\nClass RestTestBase;\nClass RestTestHarness; // Facilitates testing Solr's REST API via a provided embedded Jetty\nClass RevertDefaultThreadHandlerRule;\nClass SolrClientTestRule; // Provides access to a SolrClient instance and a running Solr in tests.\nClass SolrTestNonSecureRandomProvider;\n", "des": "Misc utilities useful when implementing test cases."}
{"index": 304, "repo": "pdfbox-3.0.0-beta1", "code": "Package: visible\n\nClasses and Interfaces: \nInterface PDFTemplateBuilder; // That class builds visible signature template which will be added in our PDF document.\nClass PDFTemplateCreator; // Class to build PDF template.\nClass PDFTemplateStructure; // Structure of PDF document with visible signature.\nClass PDVisibleSigBuilder; // Implementation of PDFTemplateBuilder.\nClass PDVisibleSignDesigner; // Class for visible signature design properties.\nClass PDVisibleSigProperties; // This builder class is in order to create visible signature properties.\n", "des": "This is the visual signature part that help creating the visual representation for the digital signature."}
{"index": 1936, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: hazelcast\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @EnableConfigurationProperties(HazelcastProperties.class) @Import({org.springframework.boot.autoconfigure.hazelcast.HazelcastClientConfiguration.class,org.springframework.boot.autoconfigure.hazelcast.HazelcastServerConfiguration.class}) public class HazelcastAutoConfiguration extends Object; // Auto-configuration for Hazelcast IMDG.\n@FunctionalInterface public interface HazelcastConfigCustomizer; // Callback interface that can be implemented by beans wishing to customize the Hazelcast server configuration.\npublic abstract class HazelcastConfigResourceCondition extends ResourceCondition; // SpringBootCondition used to check if the Hazelcast configuration is available.\n@AutoConfiguration(after={HazelcastAutoConfiguration.class,HibernateJpaAutoConfiguration.class}) @ConditionalOnClass({com.hazelcast.core.HazelcastInstance.class,org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.class}) @Import(org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration.HazelcastInstanceEntityManagerFactoryDependsOnPostProcessor.class) public class HazelcastJpaDependencyAutoConfiguration extends Object; // Additional configuration to ensure that EntityManagerFactory beans depend on the hazelcastInstance bean.\n@ConfigurationProperties(prefix=\"spring.hazelcast\") public class HazelcastProperties extends Object; // Configuration properties for the hazelcast integration.\n", "des": "Auto-configuration for Hazelcast."}
{"index": 447, "repo": "lucene-analyzers-icu-8.11.2", "code": "Package: tokenattributes\n\nClasses and Interfaces: \nClass ICUCollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 2117, "repo": "spring-retry-2.0.2", "code": "Package: listener\n\nClasses and Interfaces: \npublic class MethodInvocationRetryListenerSupport extends Object implements RetryListener; // Empty method implementation of RetryListener with focus on the AOP reflective method invocations providing convenience retry listener type-safe (with a `MethodInvocationRetryCallback` callback parameter) specific methods.\n@Deprecated(since=\"2.0.1\", forRemoval=true) public class RetryListenerSupport extends Object implements RetryListener;\n", "des": "Infrastructure implementations of retry interceptor concerns."}
{"index": 1196, "repo": "commons-math3-3.6.1", "code": "Package: direct\n\nClasses and Interfaces: \nClass AbstractSimplex; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>; // As of 3.1 (to be removed in 4.0).\nClass BaseAbstractMultivariateVectorOptimizer<FUNC extends MultivariateVectorFunction>; // As of 3.1 (to be removed in 4.0).\nClass BOBYQAOptimizer; // As of 3.1 (to be removed in 4.0).\nClass CMAESOptimizer; // As of 3.1 (to be removed in 4.0).\nClass CMAESOptimizer.PopulationSize; // Population size.\nClass CMAESOptimizer.Sigma; // Input sigma values.\nClass MultiDirectionalSimplex; // As of 3.1 (to be removed in 4.0).\nClass MultivariateFunctionMappingAdapter; // As of 3.1 (to be removed in 4.0).\nClass MultivariateFunctionPenaltyAdapter; // As of 3.1 (to be removed in 4.0).\nClass NelderMeadSimplex; // As of 3.1 (to be removed in 4.0).\nClass PowellOptimizer; // As of 3.1 (to be removed in 4.0).\nClass SimplexOptimizer; // As of 3.1 (to be removed in 4.0).\n", "des": "This package provides optimization algorithms that don't require derivatives."}
{"index": 1901, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: batch\n\nClasses and Interfaces: \n@AutoConfiguration(after={HibernateJpaAutoConfiguration.class,TransactionAutoConfiguration.class}) @ConditionalOnClass({org.springframework.batch.core.launch.JobLauncher.class,javax.sql.DataSource.class,org.springframework.jdbc.datasource.init.DatabasePopulator.class}) @ConditionalOnBean({javax.sql.DataSource.class,org.springframework.transaction.PlatformTransactionManager.class}) @ConditionalOnMissingBean(value=org.springframework.batch.core.configuration.support.DefaultBatchConfiguration.class, annotation=org.springframework.batch.core.configuration.annotation.EnableBatchProcessing.class) @EnableConfigurationProperties(BatchProperties.class) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) public class BatchAutoConfiguration extends Object; // Auto-configuration for Spring Batch.\n@FunctionalInterface public interface BatchConversionServiceCustomizer; // Callback interface that can be implemented by beans wishing to customize the ConfigurableConversionService that is provided by DefaultBatchConfiguration while retaining its default auto-configuration.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface BatchDataSource; // Qualifier annotation for a DataSource to be injected into Batch auto-configuration.\npublic class BatchDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the Spring Batch database.\n@ConfigurationProperties(prefix=\"spring.batch\") public class BatchProperties extends Object; // Configuration properties for Spring Batch.\npublic static class BatchProperties.Jdbc extends Object;\npublic static class BatchProperties.Job extends Object;\npublic class JobExecutionEvent extends org.springframework.context.ApplicationEvent; // Spring ApplicationEvent encapsulating a JobExecution.\npublic class JobExecutionExitCodeGenerator extends Object implements org.springframework.context.ApplicationListener<JobExecutionEvent>, org.springframework.boot.ExitCodeGenerator; // ExitCodeGenerator for JobExecutionEvents.\n", "des": "Auto-configuration for Spring Batch."}
{"index": 522, "repo": "commons-vfs2-2.9.0", "code": "Package: http\n\nClasses and Interfaces: \nClass HttpClientFactory; // Create a HttpClient instance.\nClass HttpFileContentInfoFactory; // Creates FileContentInfo instances for HTTP.\nClass HttpFileNameParser; // Implementation for http.\nClass HttpFileObject<FS extends HttpFileSystem>; // A file object backed by Apache Commons HttpClient.\nClass HttpFileProvider; // An HTTP provider that uses commons-httpclient.\nClass HttpFileSystem; // An HTTP file system.\nClass HttpFileSystemConfigBuilder; // Configuration options for HTTP.\n", "des": "The HTTP File Provider"}
{"index": 900, "repo": "commons-jcs3-core-3.1", "code": "Package: lru\n\nClasses and Interfaces: \nClass LHMLRUMemoryCache<K,V>; // This is a test memory manager using the jdk1.4 LinkedHashMap.\nClass LRUMemoryCache<K,V>; // A fast reference management system.\n", "des": "The primary memory plugin using a 'least recently used' removal policy."}
{"index": 2175, "repo": "spring-security-web-6.1.2", "code": "Package: expression\n\nClasses and Interfaces: \npublic class DefaultHttpSecurityExpressionHandler extends org.springframework.security.access.expression.AbstractSecurityExpressionHandler<RequestAuthorizationContext> implements org.springframework.security.access.expression.SecurityExpressionHandler<RequestAuthorizationContext>; // A SecurityExpressionHandler that uses a RequestAuthorizationContext to create a WebSecurityExpressionRoot.\npublic class DefaultWebSecurityExpressionHandler extends org.springframework.security.access.expression.AbstractSecurityExpressionHandler<FilterInvocation> implements org.springframework.security.access.expression.SecurityExpressionHandler<FilterInvocation>;\npublic final class ExpressionBasedFilterInvocationSecurityMetadataSource extends DefaultFilterInvocationSecurityMetadataSource; // Expression-based FilterInvocationSecurityMetadataSource.\npublic final class WebExpressionAuthorizationManager extends Object implements org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext>; // An expression-based AuthorizationManager that determines the access by evaluating the provided expression.\n@Deprecated public class WebExpressionVoter extends Object implements org.springframework.security.access.AccessDecisionVoter<FilterInvocation>;\npublic class WebSecurityExpressionRoot extends org.springframework.security.access.expression.SecurityExpressionRoot;\n", "des": "Implementation of web security expressions."}
{"index": 1917, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: neo4j\n\nClasses and Interfaces: \n@AutoConfiguration(before=TransactionAutoConfiguration.class, after=Neo4jAutoConfiguration.class) @ConditionalOnClass({org.neo4j.driver.Driver.class,org.springframework.data.neo4j.core.transaction.Neo4jTransactionManager.class,org.springframework.transaction.PlatformTransactionManager.class}) @EnableConfigurationProperties(Neo4jDataProperties.class) @ConditionalOnBean(org.neo4j.driver.Driver.class) public class Neo4jDataAutoConfiguration extends Object; // Auto-configuration for Spring Data Neo4j.\n@ConfigurationProperties(prefix=\"spring.data.neo4j\") public class Neo4jDataProperties extends Object; // Configuration properties for Spring Data Neo4j.\n@AutoConfiguration(after=Neo4jDataAutoConfiguration.class) @ConditionalOnClass({org.neo4j.driver.Driver.class,org.springframework.data.neo4j.core.ReactiveNeo4jTemplate.class,org.springframework.transaction.ReactiveTransactionManager.class,reactor.core.publisher.Flux.class}) @ConditionalOnBean(org.neo4j.driver.Driver.class) public class Neo4jReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's reactive Neo4j support.\n", "des": "Auto-configuration for Spring Data Neo4j."}
{"index": 3094, "repo": "spring-ws-core-4.0.5", "code": "Package: http\n\nClasses and Interfaces: \npublic abstract class AbstractHttpSenderConnection extends AbstractSenderConnection implements FaultAwareWebServiceConnection; // Abstract base class for WebServiceConnection implementations that send request over HTTP.\npublic abstract class AbstractHttpWebServiceMessageSender extends Object implements WebServiceMessageSender; // Abstract base class for WebServiceMessageSender implementations that use HTTP.\npublic class ClientHttpRequestConnection extends AbstractHttpSenderConnection; // Implementation of the WebServiceConnection interface that is based on the Spring 3 ClientHttpRequest and ClientHttpResponse.\npublic class ClientHttpRequestMessageSender extends AbstractHttpWebServiceMessageSender; // WebServiceMessageSender implementation based on the ClientHttpRequestFactory introduced in Spring 3.\n@Deprecated public class CommonsHttpConnection extends AbstractHttpSenderConnection;\n@Deprecated public class CommonsHttpMessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean;\npublic class HttpComponents5ClientFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.hc.client5.http.impl.classic.CloseableHttpClient>; // FactoryBean to set up a CloseableHttpClient using HttpComponents HttpClient 5.\n@FunctionalInterface public static interface HttpComponents5ClientFactory.HttpClientBuilderCustomizer;\n@FunctionalInterface public static interface HttpComponents5ClientFactory.PoolingHttpClientConnectionManagerBuilderCustomizer;\npublic class HttpComponents5Connection extends AbstractHttpSenderConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient 5.\npublic class HttpComponents5MessageSender extends AbstractHttpWebServiceMessageSender implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // WebServiceMessageSender implementation that uses Apache HttpClient to execute POST requests.\npublic static class HttpComponents5MessageSender.RemoveSoapHeadersInterceptor extends Object implements org.apache.hc.core5.http.HttpRequestInterceptor; // HttpClient HttpRequestInterceptor implementation that removes Content-Length and Transfer-Encoding headers from the request.\npublic class HttpComponentsConnection extends AbstractHttpSenderConnection; // Implementation of WebServiceConnection that is based on Apache HttpClient.\n", "des": "Package providing support for handling messages via HTTP."}
{"index": 337, "repo": "kafka-clients-3.5.0", "code": "Package: policy\n\nClasses and Interfaces: \nInterface AlterConfigPolicy; // An interface for enforcing a policy on alter configs requests.\nInterface CreateTopicPolicy; // An interface for enforcing a policy on create topics requests.\nClass AlterConfigPolicy.RequestMetadata; // Class containing the create request parameters.\nClass CreateTopicPolicy.RequestMetadata; // Class containing the create request parameters.\n", "des": "Provides pluggable interfaces for expressing policies on topics and configs."}
{"index": 2165, "repo": "wicket-core-10.0.0-M1", "code": "Package: response\n\nClasses and Interfaces: \npublic class ByteArrayResponse extends org.apache.wicket.request.Response; // Response used to capture output as a byte array\npublic class NullResponse extends org.apache.wicket.request.Response; // Response implementation that discards all output.\npublic class StringResponse extends org.apache.wicket.request.Response; // Response object that writes to an AppendingStringBuffer.\n", "des": "Several response implementations."}
{"index": 365, "repo": "commons-geometry-euclidean-1.0", "code": "Package: line\n\nClasses and Interfaces: \nInterface Linecastable3D; // Interface for objects that support linecast operations in Euclidean 3D space.\nClass EmbeddedTreeLineSubset3D; // Class representing an arbitrary subset of a line in 3D Euclidean space using a RegionBSPTree1D.\nClass Line3D; // Class representing a line in 3D space.\nClass Line3D.SubspaceTransform; // Class containing a transformed line instance along with a subspace (1D) transform.\nClass LinecastPoint3D; // Class representing intersections resulting from linecast operations in Euclidean 3D space.\nClass LineConvexSubset3D; // Class representing a convex subset of a line in 3D Euclidean space.\nClass Lines3D; // Class containing factory methods for constructing Line3D and LineSubset3D instances.\nClass LineSubset3D; // Class representing a subset of a line in 3D Euclidean space.\nClass Ray3D; // Class representing a ray in 3D Euclidean space.\nClass ReverseRay3D; // Class representing a portion of a line in 3D Euclidean space that starts at infinity and continues in the direction of the line up to a single end point.\nClass Segment3D; // Class representing a line segment in 3D Euclidean space.\n", "des": "This package provides classes and utilities for lines in 3D Euclidean space."}
{"index": 1382, "repo": "spring-boot-actuator-3.1.1", "code": "Package: elasticsearch\n\nClasses and Interfaces: \npublic class ElasticsearchRestClientHealthIndicator extends AbstractHealthIndicator; // HealthIndicator for an Elasticsearch cluster using a RestClient.\n", "des": "Actuator support for Elasticsearch."}
{"index": 2053, "repo": "spring-ws-security-4.0.5", "code": "Package: callback\n\nClasses and Interfaces: \npublic abstract class AbstractCallbackHandler extends Object implements CallbackHandler; // Abstract implementation of a CallbackHandler.\npublic class CallbackHandlerChain extends AbstractCallbackHandler; // Represents a chain of CallbackHandlers.\npublic class CleanupCallback extends Object implements Callback, Serializable; // Underlying security services instantiate and pass a CleanupCallback to the handle method of a CallbackHandler to clean up security state.\n", "des": "Contains generic CallbackHandler implementations."}
{"index": 3102, "repo": "jena-querybuilder-4.9.0", "code": "Package: rewriters\n\nClasses and Interfaces: \npublic class AbstractRewriter<T> extends Object; // The base class for rewriters.\npublic class BuildElementVisitor extends Object implements ElementVisitor; // An element visitor that does an in-place modification of the elements to fix union-of-one and similar issues.\npublic class ElementRewriter extends AbstractRewriter<Element> implements ElementVisitor; // A rewriter that implements an ElementVisitor\npublic class ExprRewriter extends AbstractRewriter<Expr> implements ExprVisitor; // A rewriter that implements an ExprVisitor\npublic class PathRewriter extends AbstractRewriter<Path> implements PathVisitor; // A rewriter that implements PathVisitor.\n", "des": "Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality."}
{"index": 3265, "repo": "opencms-core-15.0", "code": "Package: postgresql\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // PostgreSql implementation of the history driver methods.\nClass CmsProjectDriver; // PostgreSql implementation of the project driver methods.\nClass CmsSqlManager; // PostgreSql implementation of the SQL manager.\nClass CmsSubscriptionDriver; // PostgreSQL implementation of the subscription driver.\nClass CmsUserDriver; // PostgreSql implementation of the user driver methods.\nClass CmsVfsDriver; // PostgreSql implementation of the VFS driver methods.\n", "des": "PostgreSql implementation of the OpenCms database connector."}
{"index": 296, "repo": "pdfbox-3.0.0-beta1", "code": "Package: form\n\nClasses and Interfaces: \nClass PDFormXObject; // A Form XObject.\nClass PDTransparencyGroup; // A transparency group.\nClass PDTransparencyGroupAttributes; // Transparency group attributes.\n", "des": "This package deals with Form XObjects that are stored in a PDF document."}
{"index": 1458, "repo": "spring-data-redis-3.1.2", "code": "Package: hash\n\nClasses and Interfaces: \npublic class BeanUtilsHashMapper<T> extends Object implements HashMapper<T,String,String>; // HashMapper based on Apache Commons BeanUtils project.\npublic class DecoratingStringHashMapper<T> extends Object implements HashMapper<T,String,String>; // Delegating hash mapper used for flattening objects into Strings.\npublic interface HashMapper<T,K,V>; // Core mapping contract between Java types and Redis hashes/maps.\npublic class Jackson2HashMapper extends Object implements HashMapper<Object,String,Object>; // ObjectMapper based HashMapper implementation that allows flattening.\npublic class ObjectHashMapper extends Object implements HashMapper<Object,byte[],byte[]>; // HashMapper based on MappingRedisConverter.\n", "des": "Dedicated support package for Redis hashes."}
{"index": 3533, "repo": "opennlp-tools-2.2.0", "code": "Package: quasinewton\n\nClasses and Interfaces: \nInterface Function; // Interface for a function.\nInterface QNMinimizer.Evaluator; // Evaluate quality of training parameters.\nClass ArrayMath;\nClass LineSearch; // Class that performs line search to find minimum.\nClass LineSearch.LineSearchResult; // Represents a LineSearch result.\nClass NegLogLikelihood; // Evaluate negative log-likelihood and its gradient from DataIndexer.\nClass ParallelNegLogLikelihood; // Evaluate negative log-likelihood and its gradient in parallel\nClass QNMinimizer; // Implementation of L-BFGS which supports L1-, L2-regularization and Elastic Net for solving convex optimization problems.\nClass QNMinimizer.L2RegFunction; // L2-regularized objective Function.\nClass QNModel; // A maximum entropy model which has been trained using the Quasi Newton (QN) algorithm.\nClass QNTrainer; // A Maxent model Trainer using L-BFGS algorithm.\n", "des": "Package related to ML by means of the Quasi Newton (QN) algorithm."}
{"index": 3464, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface Getter; // The contract for getting value for a persistent property from its container/owner\nInterface PropertyAccess; // Describes access to a particular persistent property in terms of getting and setting values.\nInterface PropertyAccessStrategy; // Describes a strategy for persistent property access (field, JavaBean-style property, etc).\nInterface PropertyAccessStrategyResolver; // Contract for resolving the PropertyAccessStrategy to use.\nInterface Setter; // The contract for setting a persistent property value into its container/owner\nClass EnhancedGetterMethodImpl;\nClass EnhancedSetterImpl; // A specialized Setter implementation for handling setting values into a bytecode-enhanced Class.\nClass GetterFieldImpl; // Field-based implementation of Getter\nClass GetterMethodImpl;\nClass SetterFieldImpl; // Field-based implementation of Setter\nClass SetterMethodImpl;\nEnum BuiltInPropertyAccessStrategies; // Describes the built-in externally-nameable PropertyAccessStrategy implementations.\nClass PropertyAccessBuildingException; // Indicates a problem while building a PropertyAccess\nClass PropertyAccessException; // Indicates a problem reading or writing value from/to a persistent property.\nClass PropertyAccessSerializationException;\n", "des": "Defines strategies for accessing the persistent properties of an entity or composite."}
{"index": 3376, "repo": "opencms-core-15.0", "code": "Package: containerpage\n\nClasses and Interfaces: \nInterface I_CmsADEConfiguration; // Configurable & expandable configuration.\nInterface I_CmsFormatterBean; // Interface representing a configured formatter.\nClass CmsADECache; // Cache object instance for simultaneously cache online and offline items.\nClass CmsADECacheSettings; // The cache settings for ADE.\nClass CmsADESessionCache; // ADE's session cache.\nClass CmsADESessionCache.LastPageBean; // Stores information about the container page which was last edited, so we can jump back to it later.\nClass CmsConfigurationFileFinder; // Helper class for locating configuration files by looking up their location in properties of another resource.\nClass CmsConfigurationItem; // A single item of the ADE file type configuration.\nClass CmsContainerBean; // One container of a container page.\nClass CmsContainerElementBean; // One element of a container in a container page.\nClass CmsContainerPageBean; // Describes one locale of a container page.\nClass CmsDynamicFunctionBean; // A class which contains the data parsed from a dynamic function XML content.\nClass CmsDynamicFunctionBean.Format; // A bean which contains a single format for a dynamic function, which contains of the function JSP, the container settings and the parameters.\nClass CmsDynamicFunctionParser; // The parser class for creating dynamic function beans from XML contents.\nClass CmsFlexFormatterBean; // Formatter configuration for flex formatters.\nClass CmsFormatterBean; // A bean containing formatter configuration data as strings.\nClass CmsFormatterConfiguration; // Represents a formatter configuration.\nClass CmsFormatterConfiguration.FormatterComparator; // This class is used to sort lists of formatter beans in order of importance.\nClass CmsFormatterConfiguration.IsDetail; // Predicate which checks whether the given formatter is a detail formatter.\nClass CmsFormatterConfiguration.IsDisplay; // Predicate which checks whether the given formatter is a display formatter.\nClass CmsFormatterConfiguration.IsSchemaFormatter; // Predicate to check whether the formatter is from a schema.\nClass CmsFunctionFormatterBean; // A bean containing formatter configuration data as strings.\nClass CmsGroupContainerBean; // A group container.\nClass CmsHtmlRedirectHandler; // Content handler for HTML redirects.\nClass CmsLazyFolder; // Helper class for creating a folder if it doesn'T already exist.\n", "des": "Contains functions for the ADE main pages, commonly called \"Container Pages\" in OpenCms."}
{"index": 503, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: util\n\nSub Packages: \npackage util.common; // Defines utilities shared by multiple PipelineRunner implementations.\n\nClasses and Interfaces: \nInterface BackOff; // Back-off policy when retrying an operation.\nInterface HistogramData.BucketType;\nInterface MutationDetector; // An object for detecting illegal mutations.\nInterface NameUtils.NameOverride; // Classes may implement this interface to change how names are generated for their instances.\nInterface ShardedFile; // Bare-bones class for using sharded files.\nInterface Sleeper; // Sleeper interface to use for requesting the current thread to sleep as specified in Thread.sleep(long).\nInterface ThrowingRunnable; // Like Runnable but allowed to throw any exception.\nInterface ThrowingSupplier<T>; // Like Supplier but allowed to throw any exception.\nInterface Weighted; // Interface representing an object that has a weight, in unspecified units.\nInterface WindowedValue.SingleWindowedValue; // A WindowedValue which holds exactly single window per value.\nClass ApiSurface; // Represents the API surface of a package prefix.\nClass AppliedCombineFn<K,InputT,AccumT,OutputT>; // A CombineFnBase.GlobalCombineFn with a fixed accumulator coder.\nClass BackOffUtils; // Utilities for BackOff.\nClass BitSetCoder; // use BitSetCoder instead\nClass BucketingFunction; // Keep track of the minimum/maximum/sum of a set of timestamped long values.\nClass BufferedElementCountingOutputStream; // Provides an efficient encoding for Iterables containing small values by buffering up to bufferSize bytes of data before prefixing the count.\nClass ByteBuddyUtils; // Utilities for working with Byte Buddy.\nClass ByteStringOutputStream; // An OutputStream that produces ByteStrings.\nClass CoderUtils; // Utilities for working with Coders.\nClass CombineContextFactory; // Factory that produces Combine.Context based on different inputs.\nClass CombineFnUtil; // Static utility methods that create combine function instances.\nClass DoFnInfo<InputT,OutputT>; // Wrapper class holding the necessary information to serialize a DoFn.\nClass DoFnWithExecutionInformation; // The data that the Java SDK harness needs to execute a DoFn.\n", "des": "For internal use only; no backwards compatibility guarantees."}
{"index": 1745, "repo": "spring-batch-integration-5.0.2", "code": "Package: step\n\nClasses and Interfaces: \n@Deprecated(since=\"5.0\", forRemoval=true) public class DelegateStep extends AbstractStep;\n", "des": "Support classes related to steps when used with Spring Integration."}
{"index": 1537, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class ConnectorServerFactoryBean extends MBeanRegistrationSupport implements org.springframework.beans.factory.FactoryBean<JMXConnectorServer>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that creates a JSR-160 JMXConnectorServer, optionally registers it with the MBeanServer, and then starts it.\npublic abstract class JmxUtils extends Object; // Collection of generic utility methods to support Spring JMX.\npublic class MBeanRegistrationSupport extends Object; // Provides supporting infrastructure for registering MBeans with an MBeanServer.\npublic class MBeanServerConnectionFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<MBeanServerConnection>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that creates a JMX 1.2 MBeanServerConnection to a remote MBeanServer exposed via a JMXServerConnector.\npublic class MBeanServerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<MBeanServer>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // FactoryBean that obtains a MBeanServer reference through the standard JMX 1.2 MBeanServerFactory API.\npublic enum MetricType extends Enum<MetricType>; // Represents how the measurement values of a ManagedMetric will change over time.\npublic class NotificationListenerHolder extends Object; // Helper class that aggregates a NotificationListener, a NotificationFilter, and an arbitrary handback object, as well as the names of MBeans from which the listener wishes to receive Notifications.\npublic final class ObjectNameManager extends Object; // Helper class for the creation of ObjectName instances.\npublic enum RegistrationPolicy extends Enum<RegistrationPolicy>; // Indicates registration behavior when attempting to register an MBean that already exists.\n", "des": "Contains support classes for connecting to local and remote MBeanServers and for exposing an MBeanServer to remote clients."}
{"index": 324, "repo": "kafka-clients-3.5.0", "code": "Package: header\n\nClasses and Interfaces: \nInterface Header;\nInterface Headers;\n", "des": "Provides API for application-defined metadata attached to Kafka records."}
{"index": 2034, "repo": "spring-messaging-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class RSocketFrameTypeMessageCondition extends AbstractMessageCondition<RSocketFrameTypeMessageCondition>; // A condition to assist with mapping onto handler methods based on the RSocket frame type.\npublic class RSocketMessageHandler extends MessageMappingMessageHandler; // Extension of MessageMappingMessageHandler for handling RSocket requests with @ConnectMapping and @MessageMapping methods.\npublic class RSocketPayloadReturnValueHandler extends AbstractEncoderMethodReturnValueHandler; // Extension of AbstractEncoderMethodReturnValueHandler that handles encoded content by wrapping data buffers as RSocket payloads and by passing those through the RSocketPayloadReturnValueHandler.RESPONSE_HEADER header.\npublic class RSocketRequesterMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver; // Resolves arguments of type RSocket that can be used for making requests to the remote peer.\n", "des": "Support classes for working with annotated RSocket stream handling methods."}
{"index": 2702, "repo": "spring-integration-ftp-6.1.2", "code": "Package: filters\n\nClasses and Interfaces: \npublic class FtpPersistentAcceptOnceFileListFilter extends org.springframework.integration.file.filters.AbstractPersistentAcceptOnceFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Persistent file list filter using the server's file timestamp to detect if we've already 'seen' this file.\npublic class FtpRegexPatternFileListFilter extends org.springframework.integration.file.filters.AbstractRegexPatternFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Implementation of AbstractRegexPatternFileListFilter for FTP.\npublic class FtpSimplePatternFileListFilter extends org.springframework.integration.file.filters.AbstractSimplePatternFileListFilter<org.apache.commons.net.ftp.FTPFile>; // Implementation of AbstractSimplePatternFileListFilter for FTP.\npublic class FtpSystemMarkerFilePresentFileListFilter extends org.springframework.integration.file.filters.AbstractMarkerFilePresentFileListFilter<org.apache.commons.net.ftp.FTPFile>; // FTP implementation of AbstractMarkerFilePresentFileListFilter.\n", "des": "Provides classes supporting FTP file filtering."}
{"index": 1474, "repo": "spring-shell-core-3.1.2", "code": "Package: shell\n\nSub Packages: \npackage shell.jline; // Contains classes that leverage the JLine library to hook into the Spring Shell REPL.\npackage shell.result; // Contains strategies for dealing with results of commands.\n\nClasses and Interfaces: \npublic class Availability extends Object; // Indicates whether or not a command is currently available.\n@FunctionalInterface public interface AvailabilityProvider extends Supplier<Availability>; // Interface resolving Availability.\npublic final class AvailabilityReflectiveProcessor extends Object implements org.springframework.aot.hint.annotation.ReflectiveProcessor; // A ReflectiveProcessor implementation that registers methods of a return type Availability from a target which is a class.\npublic interface Command;\npublic static class Command.Help extends Object; // Encapsulates help metadata about a shell command.\npublic class CommandNotCurrentlyAvailable extends RuntimeException; // Indicates that a command exists but is currently not invokable.\npublic class CommandNotFound extends RuntimeException; // A result to be handled by the ResultHandler when no command could be mapped to user input\n@FunctionalInterface public interface CompletingParsedLine; // An extension of ParsedLine that, being aware of the quoting and escaping rules of the Parser that produced it, knows if and how a completion candidate should be escaped/quoted.\npublic class CompletionContext extends Object; // Represents the buffer context in which completion was triggered.\npublic class CompletionProposal extends Object; // Represents a proposal for TAB completion, made not only of the text to append, but also metadata about the proposal.\n@Order(0) public class DefaultShellApplicationRunner extends Object implements ShellApplicationRunner; // Default ShellApplicationRunner which dispatches to the first ordered ShellRunner able to handle the shell.\npublic class ExitRequest extends RuntimeException; // This exception, when thrown and caught, will ask the shell to gracefully shutdown.\npublic interface Input; // Represents the input buffer to the shell.\npublic interface InputProvider; // To be implemented by components able to provide a \"line\" of user input, whether interactively or by batch.\npublic class JnaRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar;\npublic interface MethodTargetRegistrar; // Strategy interface for registering commands.\npublic class ParameterResolverMissingException extends RuntimeException; // Thrown when no ParameterResolver is found for a parameter during a resolve operation.\n", "des": "Contains core classes for Spring Shell, irrespective of the way commands are actually implemented."}
{"index": 2846, "repo": "spring-integration-core-6.1.2", "code": "Package: codec\n\nSub Packages: \npackage codec.kryo; // The Kryo specific Codec classes.\n\nClasses and Interfaces: \npublic interface Codec; // Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes.\npublic class CodecMessageConverter extends IntegrationObjectSupport implements org.springframework.messaging.converter.MessageConverter; // A MessageConverter that delegates to a Codec to convert.\npublic class CompositeCodec extends Object implements Codec; // A Codec that can delegate to one out of many Codecs, each mapped to a class.\n", "des": "Provides base classes for the Codec abstraction."}
{"index": 1384, "repo": "spring-boot-actuator-3.1.1", "code": "Package: annotation\n\nClasses and Interfaces: \npublic abstract class AbstractDiscoveredEndpoint<O extends Operation> extends AbstractExposableEndpoint<O> implements DiscoveredEndpoint<O>; // Abstract base class for endpoints discovered by a EndpointDiscoverer.\npublic abstract class AbstractDiscoveredOperation extends Object implements Operation; // Abstract base class for endpoints operations discovered by a EndpointDiscoverer.\n@Target(METHOD) @Retention(RUNTIME) @Documented @Reflective(org.springframework.boot.actuate.endpoint.annotation.OperationReflectiveProcessor.class) public @interface DeleteOperation; // Identifies a method on an @Endpoint as being a delete operation.\npublic interface DiscoveredEndpoint<O extends Operation> extends ExposableEndpoint<O>; // An endpoint discovered by an EndpointDiscoverer.\npublic class DiscoveredOperationMethod extends OperationMethod; // An OperationMethod discovered by an EndpointDiscoverer.\npublic abstract class DiscovererEndpointFilter extends Object implements EndpointFilter<DiscoveredEndpoint<?>>; // EndpointFilter the matches based on the EndpointDiscoverer the created the endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Reflective public @interface Endpoint; // Identifies a type as being an actuator endpoint that provides information about the running application.\n@Target({FIELD,METHOD,PARAMETER,TYPE,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented @Qualifier public @interface EndpointConverter; // Qualifier for beans that are needed to convert @Endpoint input parameters.\npublic abstract class EndpointDiscoverer<E extends ExposableEndpoint<O>,O extends Operation> extends Object implements EndpointsSupplier<E>; // A Base for EndpointsSupplier implementations that discover @Endpoint beans and @EndpointExtension beans in an application context.\nprotected static final class EndpointDiscoverer.OperationKey extends Object; // A key generated for an Operation based on specific criteria from the actual operation implementation.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Reflective public @interface EndpointExtension; // Annotation primarily used as a meta-annotation to indicate that an annotation provides extension support for an endpoint.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface FilteredEndpoint; // Annotation that can be used on an @Endpoint to implement implicit filtering.\n", "des": "Annotation support for actuator endpoints."}
{"index": 1624, "repo": "spring-kafka-3.0.9", "code": "Package: core\n\nSub Packages: \npackage core.reactive; // Reactive component for consumer and producer.\n\nClasses and Interfaces: \npublic class ABSwitchCluster extends Object implements Supplier<String>; // A Supplier for bootstrap servers that can toggle between 2 lists of servers.\npublic class CleanupConfig extends Object; // Specifies time of KafkaStreams.cleanUp() execution.\npublic interface ConsumerFactory<K,V>; // The strategy to produce a Consumer instance(s).\npublic static interface ConsumerFactory.Listener<K,V>; // Called whenever a consumer is added or removed.\npublic interface ConsumerPostProcessor<K,V> extends Function<org.apache.kafka.clients.consumer.Consumer<K,V>,org.apache.kafka.clients.consumer.Consumer<K,V>>; // Called by consumer factories to perform post processing on newly created consumers.\npublic class DefaultKafkaConsumerFactory<K,V> extends KafkaResourceFactory implements ConsumerFactory<K,V>, org.springframework.beans.factory.BeanNameAware; // The ConsumerFactory implementation to produce new Consumer instances for provided Map configs and optional Deserializers on each ConsumerFactory.createConsumer() invocation.\npublic class DefaultKafkaProducerFactory<K,V> extends KafkaResourceFactory implements ProducerFactory<K,V>, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextStoppedEvent>, org.springframework.beans.factory.DisposableBean; // The ProducerFactory implementation for a singleton shared Producer instance.\nprotected static class DefaultKafkaProducerFactory.CloseSafeProducer<K,V> extends Object implements org.apache.kafka.clients.producer.Producer<K,V>; // A wrapper class for the delegate.\npublic class KafkaAdmin extends KafkaResourceFactory implements org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.SmartInitializingSingleton, KafkaAdminOperations; // An admin that delegates to an AdminClient to create topics defined in the application context.\npublic static class KafkaAdmin.NewTopics extends Object; // Wrapper for a collection of NewTopic to facilitate declaring multiple topics as a single bean.\n", "des": "Package for kafka core components"}
{"index": 1012, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: sax\n\nClasses and Interfaces: \nClass AbstractXmlReader; // Abstract base class for SAX XMLReader implementations.\nClass SaxUtils; // Convenient utility methods for dealing with SAX.\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 2641, "repo": "spring-integration-sftp-6.1.2", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class ApacheMinaSftpEvent extends org.springframework.integration.file.remote.server.FileServerEvent; // ApplicationEvent generated from Apache Mina sftp events.\npublic class ApacheMinaSftpEventListener extends Object implements org.apache.sshd.sftp.server.SftpEventListener, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean; // A listener for SFTP events emitted by an Apache Mina sshd/sftp server.\npublic class DirectoryCreatedEvent extends ApacheMinaSftpEvent; // An event emitted when a directory is created.\npublic class FileWrittenEvent extends ApacheMinaSftpEvent; // An event that is emitted when a file is written.\npublic class PathMovedEvent extends ApacheMinaSftpEvent; // An event emitted when a path is moved.\npublic class PathRemovedEvent extends ApacheMinaSftpEvent; // An event emitted when a file or directory is removed.\npublic class SessionClosedEvent extends ApacheMinaSftpEvent; // An event emitted when a session is closed.\npublic class SessionOpenedEvent extends ApacheMinaSftpEvent; // An event emitted when a session is opened.\n", "des": "Provides classes related to SFTP servers."}
{"index": 3457, "repo": "hibernate-core-5.6.15.Final", "code": "Package: enhanced\n\nClasses and Interfaces: \nInterface AccessCallback; // Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.\nInterface DatabaseStructure; // Encapsulates definition of the underlying data structure backing a sequence-style generator.\nInterface InitialValueAwareOptimizer; // Marker interface for optimizer which wishes to know the user-specified initial value.\nInterface Optimizer; // Performs optimization on an optimizable identifier generator.\nClass AbstractOptimizer; // Common support for optimizer implementations.\nClass HiLoOptimizer; // Optimizer which applies a 'hilo' algorithm in memory to achieve optimization.\nClass LegacyHiLoAlgorithmOptimizer; // Slight variation from HiLoOptimizer, maintaining compatibility with the values generated by the legacy Hibernate hilo based generators.\nClass NoopOptimizer; // An optimizer that performs no optimization.\nClass OptimizerFactory; // Factory for Optimizer instances.\nClass PooledLoOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value.\nClass PooledLoThreadLocalOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value, as well as using thread local to cache the generation state.\nClass PooledOptimizer; // Optimizer which uses a pool of values, storing the next low value of the range in the database.\nClass SequenceStructure; // Describes a sequence.\nClass SequenceStyleGenerator; // Generates identifier values based on a sequence-style database structure.\nClass TableGenerator; // An enhanced version of table-based id generation.\nClass TableStructure; // Describes a table used to mimic sequence behavior\nEnum StandardOptimizerDescriptor; // Enumeration of the standard Hibernate id generation optimizers.\n", "des": "Enhanced/improved versions of table and sequence based identifier generators targeting portability and unified configuration"}
{"index": 5, "repo": "connect-api-3.5.0", "code": "Package: header\n\nClasses and Interfaces: \nInterface Header; // A Header is a key-value pair, and multiple headers can be included with the key, value, and timestamp in each Kafka message.\nInterface Headers; // A mutable ordered collection of Header objects.\nInterface Headers.HeaderTransform; // A function to transform the supplied Header.\nClass ConnectHeaders; // A basic Headers implementation.\n", "des": "Provides an API for application-defined metadata attached to Connect records."}
{"index": 2841, "repo": "spring-integration-core-6.1.2", "code": "Package: aggregator\n\nClasses and Interfaces: \npublic abstract class AbstractAggregatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware; // Base class for MessageGroupProcessor implementations that aggregate the group of Messages into a single Message.\npublic abstract class AbstractCorrelatingMessageHandler extends AbstractMessageProducingHandler implements DiscardingMessageHandler, org.springframework.context.ApplicationEventPublisherAware, ManageableLifecycle; // Abstract Message handler that holds a buffer of correlated messages in a MessageStore.\nprotected static class AbstractCorrelatingMessageHandler.SequenceAwareMessageGroup extends SimpleMessageGroup;\npublic class AggregatingMessageHandler extends AbstractCorrelatingMessageHandler; // Aggregator specific implementation of AbstractCorrelatingMessageHandler.\npublic class BarrierMessageHandler extends AbstractReplyProducingMessageHandler implements MessageTriggerAction, DiscardingMessageHandler; // A message handler that suspends the thread until a message with corresponding correlation is passed into the trigger method or the timeout occurs.\npublic class CorrelatingMessageBarrier extends AbstractMessageHandler implements MessageSource<Object>; // This Endpoint serves as a barrier for messages that should not be processed yet.\n@FunctionalInterface public interface CorrelationStrategy; // Strategy for determining how messages can be correlated.\npublic class DefaultAggregateHeadersFunction extends Object implements Function<MessageGroup,Map<String,Object>>; // The Function implementation for a default headers merging in the aggregator component.\npublic class DefaultAggregatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor; // This implementation of MessageGroupProcessor will take the messages from the MessageGroup and pass them on in a single message with a Collection as a payload.\npublic class DelegatingMessageGroupProcessor extends Object implements MessageGroupProcessor, org.springframework.beans.factory.BeanFactoryAware, ManageableLifecycle; // The MessageGroupProcessor implementation with delegation to the provided delegate and optional aggregation for headers.\npublic class ExpressionEvaluatingCorrelationStrategy extends Object implements CorrelationStrategy, org.springframework.beans.factory.BeanFactoryAware; // CorrelationStrategy implementation that evaluates an expression.\npublic class ExpressionEvaluatingMessageGroupProcessor extends AbstractAggregatingMessageGroupProcessor; // A MessageGroupProcessor implementation that evaluates a SpEL expression.\n", "des": "Provides classes related to message aggregation."}
{"index": 2446, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: liquibase\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration.class) @ConditionalOnClass(liquibase.integration.spring.SpringLiquibase.class) @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.liquibase.LiquibaseEndpoint.class) public class LiquibaseEndpointAutoConfiguration extends Object; // Auto-configuration for LiquibaseEndpoint.\n", "des": "Auto-configuration for actuator Liquibase concerns."}
{"index": 1895, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class AbstractFactory<T> extends Object implements org.apache.shiro.lang.util.Factory<T>; // TODO - Class JavaDoc\npublic class AntPathMatcher extends Object implements PatternMatcher; // PathMatcher implementation for Ant-style path patterns.\npublic class CollectionUtils extends Object; // Static helper class for use dealing with Collections.\n@Deprecated public abstract class JavaEnvironment extends Object;\npublic class JdbcUtils extends Object; // A set of static helper methods for managing JDBC API objects.\npublic class MapContext extends Object implements Map<String,Object>, Serializable; // A MapContext provides a common base for context-based data storage in a Map.\npublic interface PatternMatcher; // Interface for components that can match source strings against a specified pattern string.\npublic class PermissionUtils extends Object; // Utility class to help with String-to-Permission object resolution.\npublic class RegExPatternMatcher extends Object implements PatternMatcher; // PatternMatcher implementation that uses standard java.util.regex objects.\npublic abstract class ThreadContext extends Object; // A ThreadContext provides a means of binding and unbinding objects to the current thread based on key/value pairs.\npublic interface ThreadState; // A ThreadState instance manages any state that might need to be bound and/or restored during a thread's execution.\n", "des": "Your run-of-the-mill 'util' package for components and logic widely used across the framework that can't find their home into a proper OO hierarchy (or, most likely for things used across many hierarchies)."}
{"index": 3615, "repo": "solr-test-framework-9.3.0", "code": "Package: solr\n\nSub Packages: \npackage solr.analysis; // Factories for Mock analysis classes that can be used in test configurations.\npackage solr.cloud; // Base classes and utilities for creating and testing Solr Cloud clusters.\npackage solr.core; // Factories for Mock classes that can be used in test configurations\npackage solr.embedded; // Classes for running embedded Solr Jetty Servers in tests.\npackage solr.handler; // Concrete implementations of org.apache.solr.request.SolrRequestHandler\npackage solr.search; // Mock classes for testing search.\npackage solr.spelling; // Mock classes for testing spelling.\npackage solr.util; // Misc utilities useful when implementing test cases.\n\nClasses and Interfaces: \nClass BaseDistributedSearchTestCase; // Helper base class for distributed search test cases\nClass BaseDistributedSearchTestCase.RandDate;\nClass BaseDistributedSearchTestCase.RandVal;\nClass EmbeddedSolrServerTestBase;\nClass JSONTestUtil;\nClass SolrIgnoredThreadsFilter; // This ignores those threads in Solr for which there is no way to clean up after a suite.\nClass SolrJettyTestBase;\nClass SolrTestCase; // All Solr test cases should derive from this class eventually.\nClass SolrTestCaseHS;\nClass SolrTestCaseHS.Client;\nClass SolrTestCaseHS.Client.Tester;\nClass SolrTestCaseHS.ClientProvider;\nClass SolrTestCaseHS.SolrInstance;\nClass SolrTestCaseHS.SolrInstances;\nClass SolrTestCaseJ4; // A junit4 Solr test harness that extends SolrTestCase and, by extension, LuceneTestCase.\nClass SolrTestCaseJ4.BVal;\nClass SolrTestCaseJ4.Doc;\nClass SolrTestCaseJ4.Fld;\nClass SolrTestCaseJ4.FldType;\nClass SolrTestCaseJ4.FVal;\nClass SolrTestCaseJ4.IRange;\nClass SolrTestCaseJ4.IVals;\nClass SolrTestCaseJ4.IValsPercent;\nClass SolrTestCaseJ4.RandomizingCloudHttp2SolrClientBuilder; // A variant of CloudHttp2SolrClient.Builder that will randomize some internal settings.\nClass SolrTestCaseJ4.RandomizingCloudSolrClientBuilder;\n", "des": "Common base classes for implementing tests."}
{"index": 2661, "repo": "spring-data-cassandra-4.1.2", "code": "Package: observability\n\nClasses and Interfaces: \npublic class CassandraObservationContext extends io.micrometer.observation.transport.SenderContext<Object>; // A Observation.Context for CqlSession.\npublic interface CassandraObservationConvention extends io.micrometer.observation.ObservationConvention<CassandraObservationContext>; // ObservationConvention for Cassandra.\npublic interface CassandraObservationSupplier; // Returns the Cassandra Observation.\npublic final class ObservableCqlSessionFactory extends Object; // Factory to wrap a CqlSession with a CqlSessionObservationInterceptor.\npublic class ObservableCqlSessionFactoryBean extends AbstractFactoryBean<com.datastax.oss.driver.api.core.CqlSession>; // Factory bean to construct a CqlSession integrated with given ObservationRegistry.\npublic class ObservableReactiveSession extends Object implements ReactiveSession; // Instrumented ReactiveSession for observability.\npublic final class ObservableReactiveSessionFactory extends Object; // Factory to wrap a ReactiveSession with ObservableReactiveSession.\npublic class ObservableReactiveSessionFactoryBean extends AbstractFactoryBean<ReactiveSession>; // Factory bean to construct a ReactiveSession integrated with given ObservationRegistry.\npublic enum ObservationRequestTracker extends Enum<ObservationRequestTracker> implements com.datastax.oss.driver.api.core.tracker.RequestTracker; // Trace implementation of the RequestTracker.\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 3656, "repo": "solr-core-9.3.0", "code": "Package: component\n\nClasses and Interfaces: \nInterface MergeStrategy; // The MergeStrategy class defines custom merge logic for distributed searches.\nInterface QueryElevationComponent.ElevationProvider; // Provides the elevations defined for queries.\nInterface StatsValues; // StatsValue defines the interface for the collection of statistical values about fields and facets.\nClass ActiveTasksListComponent; // List the active tasks that can be cancelled\nClass ActiveTasksListHandler; // Handles request for listing all active cancellable tasks\nClass DebugComponent; // Adds debugging information to a request.\nClass ExpandComponent; // The ExpandComponent is designed to work with the CollapsingPostFilter.\nClass FacetComponent; // Computes facets -- aggregations with counts of terms or ranges over the whole search results.\nClass FacetComponent.DistribFieldFacet; // This API is experimental and subject to change\nClass FacetComponent.FacetBase; // This API is experimental and subject to change\nClass FacetComponent.FacetContext; // Encapsulates facet ranges and facet queries such that their parameters are parsed and cached for efficient re-use.\nClass FacetComponent.FacetInfo; // This class is used exclusively for merging results from each shard in a distributed facet request.\nClass FacetComponent.FieldFacet; // This API is experimental and subject to change\nClass FacetComponent.QueryFacet; // This API is experimental and subject to change\nClass FacetComponent.ShardFacetCount; // This API is experimental and subject to change\nClass FieldFacetStats; // FieldFacetStats is a utility to accumulate statistics on a set of values in one field, for facet values present in another field.\nClass HighlightComponent; // Highlights query words in the search results.\nClass HttpShardHandler;\nClass HttpShardHandlerFactory;\nClass IterativeMergeStrategy;\nClass MoreLikeThisComponent; // TODO!\nClass PhrasesIdentificationComponent; // A component that can be used in isolation, or in conjunction with QueryComponent to identify & score \"phrases\" found in the input string, based on shingles in indexed fields.\nClass PhrasesIdentificationComponent.Phrase; // Model the data known about a single (candidate) Phrase -- which may or may not be indexed\nClass PhrasesIdentificationComponent.PhrasesContextData; // Simple container for all request options and data this component needs to store in the Request Context\n", "des": "SearchComponent implementations for use in SearchHandler"}
{"index": 486, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: annotations\n\nClasses and Interfaces: \nClass DefaultSchema.DefaultSchemaProvider; // SchemaProvider for default schemas.\nClass DefaultSchema.DefaultSchemaProviderRegistrar; // Registrar for default schemas.\nAnnotation Type DefaultSchema; // The DefaultSchema annotation specifies a SchemaProvider class to handle obtaining a schema and row for the specified class.\nAnnotation Type SchemaCaseFormat; // When used on a POJO, Java Bean, or AutoValue class the specified case format will be used for all the generated Schema fields.\nAnnotation Type SchemaCreate; // Can be put on a constructor or a static method, in which case that constructor or method will be used to created instance of the class by Beam's schema code.\nAnnotation Type SchemaFieldDescription; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the specified description is used for the generated schema field.\nAnnotation Type SchemaFieldName; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the specified name is used for the generated schema field.\nAnnotation Type SchemaFieldNumber; // When used on a POJO field, a Java Bean getter, or an AutoValue getter, the generated field will have the specified index.\nAnnotation Type SchemaIgnore; // When used on a POJO field or a JavaBean getter, that field or getter is ignored from the inferred schema.\n", "des": "Defines Schema and other classes for representing schema'd data in a Pipeline."}
{"index": 2258, "repo": "spring-vault-core-3.0.4", "code": "Package: event\n\nClasses and Interfaces: \npublic class AfterLoginEvent extends AuthenticationEvent; // Event published after logging into Vault.\npublic class AfterLoginTokenRenewedEvent extends AuthenticationEvent; // Event published after renewing a login token.\npublic class AfterLoginTokenRevocationEvent extends AuthenticationEvent; // Event published after revoking a login token.\npublic class AuthenticationErrorEvent extends ApplicationEvent; // Generic event class for authentication error events.\n@FunctionalInterface public interface AuthenticationErrorListener; // Listener for Vault exceptional AuthenticationEvents.\npublic abstract class AuthenticationEvent extends ApplicationEvent; // Abstract base class for authentication events.\n@FunctionalInterface public interface AuthenticationListener; // Listener for Vault AuthenticationEvents.\npublic class BeforeLoginTokenRenewedEvent extends AuthenticationEvent; // Event published before renewing a login token.\npublic class BeforeLoginTokenRevocationEvent extends AuthenticationEvent; // Event published before revoking a login token.\npublic class LoginFailedEvent extends AuthenticationErrorEvent; // Event published before renewing a login token.\npublic class LoginTokenExpiredEvent extends AuthenticationEvent; // Event published when dropping an expired login token.\npublic class LoginTokenRenewalFailedEvent extends AuthenticationErrorEvent; // Generic event class for authentication error events.\npublic class LoginTokenRevocationFailedEvent extends AuthenticationErrorEvent; // Generic event class for authentication error events.\n", "des": "Support classes for authentication application events."}
{"index": 1155, "repo": "commons-math3-3.6.1", "code": "Package: exception\n\nSub Packages: \npackage exception.util; // Classes supporting exception localization.\n\nClasses and Interfaces: \nClass ConvergenceException; // Error thrown when a numerical computation can not be performed because the numerical result failed to converge to a finite value.\nClass DimensionMismatchException; // Exception to be thrown when two dimensions differ.\nClass InsufficientDataException; // Exception to be thrown when there is insufficient data to perform a computation.\nClass MathArithmeticException; // Base class for arithmetic exceptions.\nClass MathIllegalArgumentException; // Base class for all preconditions violation exceptions.\nClass MathIllegalNumberException; // Base class for exceptions raised by a wrong number.\nClass MathIllegalStateException; // Base class for all exceptions that signal that the process throwing the exception is in a state that does not comply with the set of states that it is designed to be in.\nClass MathInternalError; // Exception triggered when something that shouldn't happen does happen.\nClass MathParseException; // Class to signal parse failures.\nClass MathRuntimeException; // As of release 4.0, all exceptions thrown by the Commons Math code (except NullArgumentException) inherit from this class.\nClass MathUnsupportedOperationException; // Base class for all unsupported features.\nClass MaxCountExceededException; // Exception to be thrown when some counter maximum value is exceeded.\nClass MultiDimensionMismatchException; // Exception to be thrown when two sets of dimensions differ.\nClass NoBracketingException; // Exception to be thrown when function values have the same sign at both ends of an interval.\nClass NoDataException; // Exception to be thrown when the required data is missing.\nClass NonMonotonicSequenceException; // Exception to be thrown when the a sequence of values is not monotonically increasing or decreasing.\nClass NotANumberException; // Exception to be thrown when a number is not a number.\nClass NotFiniteNumberException; // Exception to be thrown when a number is not finite.\nClass NotPositiveException; // Exception to be thrown when the argument is negative.\nClass NotStrictlyPositiveException; // Exception to be thrown when the argument is not greater than 0.\nClass NullArgumentException; // All conditions checks that fail due to a null argument must throw this exception.\nClass NumberIsTooLargeException; // Exception to be thrown when a number is too large.\n", "des": "Specialized exceptions for algorithms errors."}
{"index": 3750, "repo": "lucene-queryparser-9.7.0", "code": "Package: xml\n\nSub Packages: \npackage xml.builders; // XML Parser factories for different Lucene Query/Filters.\n\nClasses and Interfaces: \nInterface QueryBuilder; // Implemented by objects that produce Lucene Query objects from XML streams.\nClass CoreParser; // Assembles a QueryBuilder which uses only core Lucene Query objects\nClass CorePlusExtensionsParser; // Assembles a QueryBuilder which uses Query objects from Lucene's sandbox and queries modules in addition to core queries.\nClass CorePlusQueriesParser; // Assembles a QueryBuilder which uses Query objects from Lucene's queries module in addition to core queries.\nClass DOMUtils; // Helper methods for parsing XML\nClass QueryBuilderFactory; // Factory for QueryBuilder\nClass ParserException; // Thrown when the xml queryparser encounters invalid syntax/configuration.\n", "des": "Parser that produces Lucene Query objects from XML streams."}
{"index": 2057, "repo": "spring-ws-security-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic class CryptoFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.wss4j.common.crypto.Crypto>, org.springframework.beans.factory.InitializingBean; // Spring factory bean for a WSS4J Crypto.\n", "des": "Contains support classes for working with WSS4J 2.0."}
{"index": 899, "repo": "commons-jcs3-core-3.1", "code": "Package: memory\n\nSub Packages: \npackage memory.lru; // The primary memory plugin using a 'least recently used' removal policy.\npackage memory.mru; // A memory plugin implemented using a 'most recently used' removal policy.\npackage memory.soft; // A memory plugin implemented using soft references.\n\nClasses and Interfaces: \nClass AbstractDoubleLinkedListMemoryCache<K,V>; // This class contains methods that are common to memory caches using the double linked list, such as the LRU, MRU, FIFO, and LIFO caches.\nClass AbstractMemoryCache<K,V>; // This base includes some common code for memory caches.\n", "des": "Parent package for memory type plugins."}
{"index": 3174, "repo": "tomcat-api-10.1", "code": "Package: servlets\n\nClasses and Interfaces: \nClass CGIServlet; // CGI-invoking servlet for web applications, used to execute scripts which comply to the Common Gateway Interface (CGI) specification and are named in the path-info used to invoke this servlet.\nClass CGIServlet.HTTPHeaderInputStream; // This is an input stream specifically for reading HTTP headers.\nClass DefaultServlet; // The default resource-serving servlet for most web applications, used to serve static resources such as HTML pages and images.\nClass DefaultServlet.CompressionFormat;\nClass WebdavServlet; // Servlet which adds support for WebDAV level 2.\n", "des": "This package contains Servlets that implement some of the standard functionality provided by the Catalina servlet container."}
{"index": 2465, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: kairos\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.kairos.KairosMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"kairos\") @EnableConfigurationProperties(KairosProperties.class) public class KairosMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to KairosDB.\n@ConfigurationProperties(prefix=\"management.kairos.metrics.export\") public class KairosProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring KairosDB metrics export.\n", "des": "Support for exporting actuator metrics to KairosDB."}
{"index": 2362, "repo": "spring-boot-3.1.1", "code": "Package: support\n\nClasses and Interfaces: \npublic class ErrorPageFilter extends Object implements jakarta.servlet.Filter, ErrorPageRegistry, org.springframework.core.Ordered; // A Servlet Filter that provides an ErrorPageRegistry for non-embedded applications (i.e.\npublic class ServletContextApplicationContextInitializer extends Object implements org.springframework.context.ApplicationContextInitializer<org.springframework.web.context.ConfigurableWebApplicationContext>, org.springframework.core.Ordered; // ApplicationContextInitializer for setting the servlet context.\npublic abstract class SpringBootServletInitializer extends Object implements org.springframework.web.WebApplicationInitializer; // An opinionated WebApplicationInitializer to run a SpringApplication from a traditional WAR deployment.\n", "des": "Support classes for Servlet-based web servers."}
{"index": 2099, "repo": "spring-webflux-6.0.11", "code": "Package: resource\n\nClasses and Interfaces: \npublic abstract class AbstractFileNameVersionStrategy extends Object implements VersionStrategy; // Abstract base class for filename suffix based VersionStrategy implementations, e.g.\npublic abstract class AbstractPrefixVersionStrategy extends Object implements VersionStrategy; // Abstract base class for VersionStrategy implementations that insert a prefix into the URL path, e.g.\npublic abstract class AbstractResourceResolver extends Object implements ResourceResolver; // Base ResourceResolver providing consistent logging.\npublic class CachingResourceResolver extends AbstractResourceResolver; // A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and caches the result.\npublic class CachingResourceTransformer extends Object implements ResourceTransformer; // A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, or otherwise delegates to the resolver chain and caches the result.\npublic class ContentVersionStrategy extends AbstractFileNameVersionStrategy; // A VersionStrategy that calculates a Hex MD5 hash from the content of the resource and appends it to the file name, e.g.\npublic class CssLinkResourceTransformer extends ResourceTransformerSupport; // A ResourceTransformer implementation that modifies links in a CSS file to match the public URL paths that should be exposed to clients (e.g.\nprotected abstract static class CssLinkResourceTransformer.AbstractLinkParser extends Object implements CssLinkResourceTransformer.LinkParser; // Abstract base class for CssLinkResourceTransformer.LinkParser implementations.\n@FunctionalInterface protected static interface CssLinkResourceTransformer.LinkParser; // Extract content chunks that represent links.\npublic class EncodedResourceResolver extends AbstractResourceResolver; // Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.\npublic class FixedVersionStrategy extends AbstractPrefixVersionStrategy; // A VersionStrategy that relies on a fixed version applied as a request path prefix, e.g.\npublic interface HttpResource extends org.springframework.core.io.Resource; // Extended interface for a Resource to be written to an HTTP response.\npublic class PathResourceResolver extends AbstractResourceResolver; // A simple ResourceResolver that tries to find a resource under the given locations matching to the request path.\npublic interface ResourceResolver; // A strategy for resolving a request to a server-side resource.\n", "des": "Support classes for serving static resources."}
{"index": 3029, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractRefreshableWebApplicationContext extends org.springframework.context.support.AbstractRefreshableConfigApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource; // AbstractRefreshableApplicationContext subclass which implements the ConfigurableWebApplicationContext interface for web environments.\npublic class AnnotationConfigWebApplicationContext extends AbstractRefreshableWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry; // WebApplicationContext implementation which accepts component classes as input — in particular @Configuration classes, but also plain @Component classes as well as JSR-330 compliant classes using jakarta.inject annotations.\npublic class ContextExposingHttpServletRequest extends HttpServletRequestWrapper; // HttpServletRequest decorator that makes all Spring beans in a given WebApplicationContext accessible as request attributes, through lazy checking once an attribute gets accessed.\npublic class GenericWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource; // Subclass of GenericApplicationContext, suitable for web environments.\npublic class GroovyWebApplicationContext extends AbstractRefreshableWebApplicationContext implements groovy.lang.GroovyObject; // WebApplicationContext implementation which takes its configuration from Groovy bean definition scripts and/or XML files, as understood by a GroovyBeanDefinitionReader.\npublic class HttpRequestHandlerServlet extends HttpServlet; // Simple HttpServlet that delegates to an HttpRequestHandler bean defined in Spring's root web application context.\npublic class RequestHandledEvent extends org.springframework.context.ApplicationEvent; // Event raised when a request is handled within an ApplicationContext.\npublic class ServletConfigPropertySource extends org.springframework.core.env.EnumerablePropertySource<ServletConfig>; // PropertySource that reads init parameters from a ServletConfig object.\npublic class ServletContextAttributeExporter extends Object implements ServletContextAware; // Exporter that takes Spring-defined objects and exposes them as ServletContext attributes.\npublic class ServletContextAttributeFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<Object>, ServletContextAware; // FactoryBean that fetches a specific, existing ServletContext attribute.\npublic class ServletContextAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor; // BeanPostProcessor implementation that passes the ServletContext to beans that implement the ServletContextAware interface.\n", "des": "Classes supporting the org.springframework.web.context package, such as WebApplicationContext implementations and various utility classes."}
{"index": 1267, "repo": "spring-core-6.0.11", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class ParallelSorter extends Object; // For the efficient sorting of multiple arrays in parallel.\npublic static class ParallelSorter.Generator extends AbstractClassGenerator;\npublic abstract class StringSwitcher extends Object; // This class implements a simple String → int mapping for a fixed set of keys.\npublic static class StringSwitcher.Generator extends AbstractClassGenerator;\n", "des": "Spring's repackaging of the CGLIB util package (for internal use only)."}
{"index": 1767, "repo": "spring-data-mongodb-4.1.2", "code": "Package: observability\n\nClasses and Interfaces: \npublic class ContextProviderFactory extends Object; // Factory to create a ContextProvider to propagate the request context across tasks.\npublic interface MongoHandlerObservationConvention extends io.micrometer.observation.ObservationConvention<org.springframework.data.mongodb.observability.MongoHandlerContext>; // ObservationConvention for MongoHandlerContext.\npublic class MongoObservationCommandListener extends Object implements com.mongodb.event.CommandListener; // Implement MongoDB's CommandListener using Micrometer's Observation API.\n", "des": "Infrastructure to provide driver observability using Micrometer."}
{"index": 2411, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: amqp\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration.class) @ConditionalOnClass(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnBean(org.springframework.amqp.rabbit.core.RabbitTemplate.class) @ConditionalOnEnabledHealthIndicator(\"rabbit\") public class RabbitHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.amqp.RabbitHealthIndicator,org.springframework.amqp.rabbit.core.RabbitTemplate>; // Auto-configuration for RabbitHealthIndicator.\n", "des": "Auto-configuration for actuator AMQP concerns."}
{"index": 338, "repo": "kafka-clients-3.5.0", "code": "Package: quota\n\nClasses and Interfaces: \nInterface ClientQuotaCallback; // Quota callback interface for brokers that enables customization of client quota computation.\nInterface ClientQuotaEntity; // The metadata for an entity for which quota is configured.\nInterface ClientQuotaEntity.ConfigEntity; // Interface representing a quota configuration entity.\nEnum ClientQuotaEntity.ConfigEntityType; // Entity type of a ClientQuotaEntity.ConfigEntity\nEnum ClientQuotaType; // Types of quotas that may be configured on brokers for client requests.\n", "des": "Provides pluggable interface for enforcing client quotas from a Kafka server."}
{"index": 3598, "repo": "lucene-test-framework-9.7.0", "code": "Package: util\n\nSub Packages: \npackage util.automaton; // Support for testing automata.\npackage util.fst; // Support for FST testing.\n\nClasses and Interfaces: \nInterface LuceneTestCase.ThrowingConsumer<T>; // A Consumer that can throw any checked exception.\nInterface LuceneTestCase.ThrowingRunnable; // A runnable that can throw any checked exception.\nInterface TestRuleIgnoreTestSuites.NestedTestSuite; // Marker interface for nested suites that should be ignored if executed in stand-alone mode.\nClass BaseBitSetTestCase<T extends BitSet>; // Base test case for BitSets.\nClass BaseDocIdSetTestCase<T extends DocIdSet>; // Base test class for DocIdSets.\nClass English; // Converts numbers to english strings for testing.\nClass FailOnNonBulkMergesInfoStream; // Hackidy-Häck-Hack to cause a test to fail on non-bulk merges\nClass FailureMarker; // A RunListener that detects suite/ test failures.\nClass LineFileDocs; // Minimal port of benchmark's LneDocSource + DocMaker, so tests can enum docs from a line file created by benchmark's WriteLineDoc task\nClass LuceneJUnit3MethodProvider; // Backwards compatible test* method provider (public, non-static).\nClass LuceneTestCase; // Base class for all Lucene unit tests, Junit3 or Junit4 variant.\nClass NullInfoStream; // Prints nothing.\nClass QuickPatchThreadsFilter; // Last minute patches.\nClass RamUsageTester; // Crawls object graph to collect RAM usage for testing\nClass RamUsageTester.Accumulator; // An accumulator of object references.\nClass Rethrow; // Sneaky: rethrowing checked exceptions as unchecked ones.\nClass RunListenerPrintReproduceInfo; // A suite listener printing a \"reproduce string\".\nClass StringMockResourceLoader; // Fake resource loader for tests: works if you want to fake reading a single file\nClass TestRuleAssertionsRequired; // Require assertions for Lucene/Solr packages.\nClass TestRuleIgnoreAfterMaxFailures; // This rule keeps a count of failed tests (suites) and will result in an AssumptionViolatedException after a given number of failures for all tests following this condition.\n", "des": "General test support."}
{"index": 2391, "repo": "spring-batch-core-5.0.2", "code": "Package: support\n\nSub Packages: \npackage support.state; // States used in defining the underlying Spring Batch state machine\n\nClasses and Interfaces: \npublic class DefaultStateTransitionComparator extends Object implements Comparator<StateTransition>; // Sorts by decreasing specificity of pattern, based on just counting wildcards (with * taking precedence over ?).\npublic class SimpleFlow extends Object implements Flow, org.springframework.beans.factory.InitializingBean; // A Flow that branches conditionally depending on the exit status of the last State.\npublic final class StateTransition extends Object; // Value object representing a potential transition from one State to another.\n", "des": "Basic implementations of flow constructs"}
{"index": 207, "repo": "nutch-2.4", "code": "Package: extractor\n\nClasses and Interfaces: \nClass JsoupIndexingFilter;\n", "des": "Indexing filter for jsoup-extractor plugin"}
{"index": 707, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "code": "Package: ftp\n\nClasses and Interfaces: \nClass Ftp; // The factory for Spring Integration FTP components.\nClass FtpInboundChannelAdapterSpec; // A RemoteFileInboundChannelAdapterSpec for a FtpInboundFileSynchronizingMessageSource.\nClass FtpMessageHandlerSpec;\nClass FtpOutboundGatewaySpec;\n", "des": "Provides FTP Components support for Spring Integration Java DSL."}
{"index": 2397, "repo": "spring-batch-core-5.0.2", "code": "Package: partition\n\nSub Packages: \npackage partition.support; // Implementation of common partition components.\n\nClasses and Interfaces: \n@FunctionalInterface public interface PartitionHandler; // Interface defining the responsibilities of controlling the execution of a partitioned StepExecution.\npublic interface StepExecutionSplitter; // Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on.\n", "des": "Interfaces for partitioning components."}
{"index": 791, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: minhash\n\nClasses and Interfaces: \nClass MinHashFilter; // Generate min hash tokens from an incoming stream of tokens.\nClass MinHashFilterFactory; // TokenFilterFactory for MinHashFilter.\n", "des": "MinHash filtering (for LSH)."}
{"index": 2085, "repo": "spring-webmvc-6.0.11", "code": "Package: groovy\n\nClasses and Interfaces: \npublic interface GroovyMarkupConfig; // Interface to be implemented by objects that configure and manage a Groovy MarkupTemplateEngine for automatic lookup in a web environment.\npublic class GroovyMarkupConfigurer extends groovy.text.markup.TemplateConfiguration implements GroovyMarkupConfig, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // An extension of Groovy's TemplateConfiguration and an implementation of Spring MVC's GroovyMarkupConfig for creating a MarkupTemplateEngine for use in a web application.\npublic class GroovyMarkupView extends AbstractTemplateView; // An AbstractTemplateView subclass based on Groovy XML/XHTML markup templates.\npublic class GroovyMarkupViewResolver extends AbstractTemplateViewResolver; // Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e.\n", "des": "Support classes for the integration of Groovy Templates as Spring web view technology."}
{"index": 344, "repo": "hadoop-hdfs-3.3.6", "code": "Package: diskbalancer\n\nSub Packages: \npackage diskbalancer.command; // Commands for disk balancer command line tool.\npackage diskbalancer.connectors; // Connectors package is a set of logical connectors that connect to various data sources to read the hadoop cluster information.\npackage diskbalancer.datamodel; // Disk Balancer Data Model is the Data Model for the cluster that Disk Balancer is working against.\npackage diskbalancer.planner; // Planner takes a DiskBalancerVolumeSet, threshold and computes a series of steps that lead to an even data distribution between volumes of this DiskBalancerVolumeSet.\n\nClasses and Interfaces: \nEnum DiskBalancerException.Result; // Results returned by the RPC layer of DiskBalancer.\nClass DiskBalancerException; // Disk Balancer Exceptions.\n", "des": "Disk Balancer connects to a .DataNode and attempts to spread data across all volumes evenly."}
{"index": 3387, "repo": "commons-imaging-1.0-alpha3", "code": "Package: itu_t4\n\nClasses and Interfaces: \nClass T4AndT6Compression;\n", "des": "Provides ITU-T T.4 and T.6 compression classes."}
{"index": 858, "repo": "calcite-core-1.34.0", "code": "Package: sql\n\nSub Packages: \npackage sql.advise; // Provides hints and corrections for editing SQL statements.\npackage sql.ddl; // Parse tree for SQL DDL statements.\npackage sql.dialect; // SQL unparsers for JDBC dialects.\npackage sql.fun; // Defines the set of standard SQL row-level functions and operators.\npackage sql.parser; // Provides a SQL parser.\npackage sql.pretty; // Provides a pretty-printer for SQL statements.\npackage sql.type; // SQL type system.\npackage sql.util; // Utility classes for the SQL object model, parsing, and validation.\npackage sql.validate; // SQL validation.\n\nClasses and Interfaces: \nInterface SqlDialect.Context; // Information for creating a dialect.\nInterface SqlDialectFactory; // Creates a SqlDialect appropriate for a given database metadata object.\nInterface SqlLiteral.SqlSymbol;\nInterface SqlOperandCountRange; // A class that describes how many operands an operator can take.\nInterface SqlOperatorTable; // SqlOperatorTable defines a directory interface for enumerating and looking up SQL operators and functions.\nInterface SqlSpecialOperator.TokenSequence; // List of tokens: the input to a parser.\nInterface SqlSplittableAggFunction; // Aggregate function that can be split into partial aggregates.\nInterface SqlSplittableAggFunction.Registry<E>; // Collection in which one can register an element.\nInterface SqlTableFunction; // A function that returns a table.\nInterface SqlWriter; // A SqlWriter is the target to construct a SQL statement from a parse tree.\nInterface SqlWriter.Frame; // A Frame is a piece of generated text which shares a common indentation level.\nInterface SqlWriter.FrameType; // Frame type.\nInterface SqlWriterConfig; // Configuration for SqlWriter and SqlPrettyWriter.\nInterface Symbolizable; // Sub-class should be a Enum and can convert to a SqlLiteral.\nClass ExplicitOperatorBinding; // ExplicitOperatorBinding implements SqlOperatorBinding via an underlying array of known operand types.\nClass SqlAbstractDateTimeLiteral; // A SQL literal representing a DATE, TIME or TIMESTAMP value.\nClass SqlAccessType; // SqlAccessType is represented by a set of allowed access types.\nClass SqlAggFunction; // Abstract base class for the definition of an aggregate function: an operator which aggregates sets of values into a result.\n", "des": "Provides a SQL parser and object model."}
{"index": 621, "repo": "freemarker-2.3.32", "code": "Package: ant\n\nClasses and Interfaces: \nClass FreemarkerXmlTask; // FMPP is a more complete solution.\nClass JythonAntTask; // Used internally, public for technical reasons only.\nClass UnlinkedJythonOperationsImpl; // Used internally, public for technical reasons only.\n", "des": "Ant task to transform XML files with a template; a more powerful alternative is FMPP."}
{"index": 419, "repo": "hadoop-azure-3.3.6", "code": "Package: security\n\nClasses and Interfaces: \nClass AbfsDelegationTokenIdentifier; // Delegation token Identifier for ABFS delegation tokens.\nClass AbfsDelegationTokenManager; // Class for delegation token Manager.\nClass AbfsDtFetcher; // A DT fetcher for Abfs.\nClass AbfssDtFetcher; // The DT Fetcher for abfss.\nClass AbfsTokenRenewer; // Token Renewer for renewing ABFS delegation tokens with remote service.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 1292, "repo": "spring-core-6.0.11", "code": "Package: backoff\n\nClasses and Interfaces: \n@FunctionalInterface public interface BackOff; // Provide a BackOffExecution that indicates the rate at which an operation should be retried.\n@FunctionalInterface public interface BackOffExecution; // Represent a particular back-off execution.\npublic class ExponentialBackOff extends Object implements BackOff; // Implementation of BackOff that increases the back off period for each retry attempt.\npublic class FixedBackOff extends Object implements BackOff; // A simple BackOff implementation that provides a fixed interval between two attempts and a maximum number of retries.\n", "des": "A generic back-off abstraction."}
{"index": 1229, "repo": "spring-hateoas-2.1.2", "code": "Package: client\n\nClasses and Interfaces: \npublic final class Hop extends Object; // Container for customizations to a single traverson \"hop\"\npublic class JsonPathLinkDiscoverer extends Object implements LinkDiscoverer; // LinkDiscoverer that uses JsonPath to find links inside a representation.\npublic interface LinkDiscoverer extends org.springframework.plugin.core.Plugin<MediaType>; // Interface to allow discovering links by relation type from some source.\npublic class LinkDiscoverers extends Object; // Value object to wrap a PluginRegistry for LinkDiscoverer so that it's easier to inject them into clients wanting to lookup a LinkDiscoverer for a given MediaTypes.\npublic class Traverson extends Object; // Component to ease traversing hypermedia APIs by following links with relation types.\npublic interface TraversonDefaults; // SPI that exposes HttpMessageConverters and LinkDiscoverers to be used by default by Traverson.\n", "des": "Client side support."}
{"index": 97, "repo": "ignite-core-2.15.0", "code": "Package: vm\n\nClasses and Interfaces: \nClass TcpDiscoveryVmIpFinder; // IP Finder which works only with pre-configured list of IP addresses specified via TcpDiscoveryVmIpFinder.setAddresses(Collection) method.\n", "des": "Contains local JVM-based IP finder."}
{"index": 2701, "repo": "spring-integration-ftp-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic final class Ftp extends Object; // The factory for FTP components.\npublic class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource>; // A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource.\npublic class FtpMessageHandlerSpec extends org.springframework.integration.file.dsl.FileTransferringMessageHandlerSpec<org.apache.commons.net.ftp.FTPFile,FtpMessageHandlerSpec>; // A FileTransferringMessageHandlerSpec for FTP.\npublic class FtpOutboundGatewaySpec extends org.springframework.integration.file.dsl.RemoteFileOutboundGatewaySpec<org.apache.commons.net.ftp.FTPFile,FtpOutboundGatewaySpec>; // A RemoteFileOutboundGatewaySpec for FTP.\npublic class FtpStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpStreamingInboundChannelAdapterSpec,FtpStreamingMessageSource>; // A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource.\n", "des": "Provides FTP Components for the Java DSL."}
{"index": 127, "repo": "ignite-core-2.15.0", "code": "Package: systemview\n\nSub Packages: \npackage systemview.view; // Contains SystemView clases that exists in Ignite.\n\nClasses and Interfaces: \nInterface ReadOnlySystemViewRegistry; // Read only system view registry.\nInterface SystemViewExporterSpi; // Exporter of system view to the external recepient.\n", "des": "Contains common classes and interfaces for system view SPI implementations."}
{"index": 1238, "repo": "spring-hateoas-2.1.2", "code": "Package: uber\n\nClasses and Interfaces: \npublic class Jackson2UberModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Jackson SimpleModule for UBER+JSON serializers and deserializers.\npublic class UberLinkDiscoverer extends Object implements LinkDiscoverer; // Find links by rel in an UBER+JSON representation.\n", "des": "UBER media type objects."}
{"index": 3177, "repo": "tomcat-api-10.1", "code": "Package: tribes\n\nClasses and Interfaces: \nInterface Channel; // Channel interface A channel is a representation of a group of nodes all participating in some sort of communication with each other. The channel is the main API class for Tribes, this is essentially the only class that an application needs to be aware of.\nInterface ChannelInterceptor; // A ChannelInterceptor is an interceptor that intercepts messages and membership messages in the channel stack.\nInterface ChannelInterceptor.InterceptorEvent;\nInterface ChannelListener; // An interface to listens to incoming messages from a channel.\nInterface ChannelMessage; // Message that is passed through the interceptor stack after the data serialized in the Channel object and then passed down to the interceptor and eventually down to the ChannelSender component\nInterface ChannelReceiver; // ChannelReceiver Interface The ChannelReceiver interface is the data receiver component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface).\nInterface ChannelSender; // ChannelReceiver Interface The ChannelSender interface is the data sender component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface). The channel sender must support \"silent\" members, ie, be able to send a message to a member that is not in the membership, but is part of the destination parameter\nInterface ErrorHandler; // The ErrorHandler class is used when sending messages that are sent asynchronously and the application still needs to get confirmation when the message was sent successfully or when a message errored out.\nInterface Heartbeat; // Can be implemented by the ChannelListener and Membership listeners to receive heartbeat notifications from the Channel\nInterface JmxChannel;\nInterface ManagedChannel; // Channel interface A managed channel interface gives you access to the components of the channels such as senders, receivers, interceptors etc for configurations purposes\nInterface Member; // The Member interface, defines a member in the group.\nInterface MembershipListener; // The MembershipListener interface is used as a callback to the membership service.\nInterface MembershipProvider;\nInterface MembershipService; // MembershipService Interface The MembershipService interface is the membership component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface).\nInterface MessageListener; // The listener to be registered with the ChannelReceiver, internal Tribes component.\nClass ByteMessage; // A byte message is not serialized and deserialized by the channel instead it is sent as a byte array By default Tribes uses java serialization when it receives an object to be sent over the wire.\n", "des": "QuickStart"}
{"index": 2638, "repo": "spring-integration-sftp-6.1.2", "code": "Package: gateway\n\nClasses and Interfaces: \npublic class SftpOutboundGateway extends org.springframework.integration.file.remote.gateway.AbstractRemoteFileOutboundGateway<org.apache.sshd.sftp.client.SftpClient.DirEntry>; // Outbound Gateway for performing remote file operations via SFTP.\n", "des": "Provides classes supporting SFTP gateways."}
{"index": 2780, "repo": "spring-security-ldap-6.1.2", "code": "Package: ppolicy\n\nClasses and Interfaces: \npublic class PasswordPolicyAwareContextSource extends DefaultSpringSecurityContextSource; // Extended version of the DefaultSpringSecurityContextSource which adds support for the use of PasswordPolicyControl to make use of user account data stored in the directory.\npublic class PasswordPolicyControl extends Object implements Control; // A Password Policy request control.\npublic final class PasswordPolicyControlExtractor extends Object; // Obtains the PasswordPolicyControl from a context for use by other classes.\npublic class PasswordPolicyControlFactory extends ControlFactory; // Transforms a control object to a PasswordPolicyResponseControl object, if appropriate.\npublic interface PasswordPolicyData;\npublic enum PasswordPolicyErrorStatus extends Enum<PasswordPolicyErrorStatus>; // Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages.\npublic class PasswordPolicyException extends RuntimeException; // Generic exception raised by the ppolicy package.\npublic class PasswordPolicyResponseControl extends PasswordPolicyControl; // Represents the response control received when a PasswordPolicyControl is used when binding to a directory.\n", "des": "Implementation of password policy functionality based on the Password Policy for LDAP Directories."}
{"index": 1027, "repo": "hadoop-aws-3.3.6", "code": "Package: delegation\n\nClasses and Interfaces: \nInterface AWSPolicyProvider; // Interface for providers of AWS policy for accessing data.\nInterface DelegationOperations; // All operations used for delegation which aren't in the store context.\nInterface DelegationTokenProvider; // Interface for S3A Delegation Token access.\nClass AbstractDelegationTokenBinding; // An AbstractDelegationTokenBinding implementation is a class which handles the binding of its underlying authentication mechanism to the Hadoop Delegation token mechanism.\nClass AbstractDTService; // This is the base class for both the delegation binding code and the back end service created; allows for shared methods across both.\nClass AbstractS3ATokenIdentifier; // An S3A Delegation Token Identifier: contains the information needed to talk to S3A.\nClass DelegationConstants; // All the constants related to delegation tokens.\nClass EncryptionSecretOperations; // These support operations on EncryptionSecrets which use the AWS SDK operations.\nClass EncryptionSecrets; // Encryption options in a form which can serialized or marshalled as a hadoop Writeable.\nClass FullCredentialsTokenBinding; // Full credentials: they are simply passed as-is, rather than converted to a session.\nClass FullCredentialsTokenIdentifier; // The full credentials payload is the same of that for a session token, but a different token kind is used.\nClass RoleTokenBinding; // Role Token support requests an explicit role and automatically restricts that role to the given policy of the binding.\nClass RoleTokenIdentifier; // Role token identifier.\nClass S3ADelegationTokens; // Support for creating a DT from a filesystem.\nClass S3ADtFetcher; // A DT fetcher for S3A.\nClass SessionTokenBinding; // The session token DT binding: creates an AWS session token for the DT, extracts and serves it up afterwards.\nClass SessionTokenIdentifier; // A token identifier which contains a set of AWS session credentials, credentials which will be valid until they expire.\nEnum AWSPolicyProvider.AccessLevel; // Access levels.\nEnum S3ADelegationTokens.TokenIssuingPolicy; // How will tokens be issued on request? The S3ADelegationTokens.TokenIssuingPolicy.RequestNewToken policy does not guarantee that a tokens can be created, only that an attempt will be made to request one.\nClass DelegationTokenIOException; // General IOException for Delegation Token issues.\n", "des": "Extensible delegation token support for the S3A connector."}
{"index": 539, "repo": "commons-geometry-core-1.0", "code": "Package: core\n\nSub Packages: \npackage core.internal; // This package contains utilities intended for internal use only.\npackage core.partitioning; // This package contains code related to partitioning of spaces by hyperplanes.\n\nClasses and Interfaces: \nInterface Embedding<P extends Point<P>,S extends Point<S>>; // This interface defines mappings between a space and one of its subspaces.\nInterface Point<P extends Point<P>>; // Interface representing a point in a mathematical space.\nInterface Region<P extends Point<P>>; // Interface representing a region in a space.\nInterface RegionEmbedding<P extends Point<P>,S extends Point<S>>; // Interface representing a geometric element that embeds a region in a subspace.\nInterface Sized; // Interface representing a geometric element with a size.\nInterface Spatial; // Interface representing a generic element in a mathematical space.\nInterface Transform<P extends Point<P>>; // Interface representing geometric transforms in a space, i.e.\nInterface Vector<V extends Vector<V>>; // Interface representing a vector in a vector space or displacement vectors in an affine space.\nEnum RegionLocation; // Enumeration containing the possible locations of a point with respect to a region.\n", "des": "This package contains the core interfaces and classes for commons-geometry."}
{"index": 2474, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: wavefront\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after={MetricsAutoConfiguration.class,WavefrontAutoConfiguration.class}) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass({io.micrometer.wavefront.WavefrontMeterRegistry.class,com.wavefront.sdk.common.WavefrontSender.class}) @ConditionalOnEnabledMetricsExport(\"wavefront\") @EnableConfigurationProperties(WavefrontProperties.class) @Import(WavefrontSenderConfiguration.class) public class WavefrontMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Wavefront.\npublic class WavefrontPropertiesConfigAdapter extends PushRegistryPropertiesConfigAdapter<WavefrontProperties.Metrics.Export> implements io.micrometer.wavefront.WavefrontConfig; // Adapter to convert WavefrontProperties to a WavefrontConfig.\n", "des": "Support for exporting actuator metrics to Wavefront."}
{"index": 90, "repo": "ignite-core-2.15.0", "code": "Package: isolated\n\nClasses and Interfaces: \nClass IsolatedDiscoverySpi; // Special discovery SPI implementation to start a single-node cluster in \"isolated\" mode.\nClass IsolatedNode; // Special isolated node.\n", "des": "Contains implementation of special \"isolated\" mode for single-node cluster."}
{"index": 492, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: transforms\n\nClasses and Interfaces: \nInterface Cast.Validator; // Interface for statically validating casts.\nInterface SchemaTransform; // An abstraction to create schema capable and aware transforms.\nInterface SchemaTransformProvider; // Provider to create SchemaTransform instances for use in Beam SQL and other SDKs.\nClass AddFields; // A transform to add new nullable fields to a PCollection's schema.\nClass AddFields.Inner<T>; // Inner PTransform for AddFields.\nClass Cast<T>; // Set of utilities for casting rows between schemas.\nClass Cast.CompatibilityError; // Describes compatibility errors during casting.\nClass Cast.Narrowing; // Narrowing changes type without guarantee to preserve data.\nClass Cast.Widening; // Widening changes to type that can represent any possible value of the original type.\nClass CoGroup; // A transform that performs equijoins across multiple schema PCollections.\nClass CoGroup.By; // Defines the set of fields to extract for the join key, as well as other per-input join options.\nClass CoGroup.ExpandCrossProduct; // A PTransform that calculates the cross-product join.\nClass CoGroup.Impl; // The implementing PTransform.\nClass CoGroup.Result;\nClass Convert; // A set of utilities for converting between different objects supporting schemas.\nClass DropFields; // A transform to drop fields from a schema.\nClass DropFields.Inner<T>; // Implementation class for DropFields.\nClass Filter; // A PTransform for filtering a collection of schema types.\nClass Filter.Inner<T>; // Implementation of the filter.\nClass Group; // A generic grouping transform for schema PCollections.\nClass Group.AggregateCombiner<InputT>; // a PTransform that does a combine using an aggregation built up by calls to aggregateField and aggregateFields.\nClass Group.ByFields<InputT>; // a PTransform that groups schema elements based on the given fields.\nClass Group.CombineFieldsByFields<InputT>; // a PTransform that does a per-key combine using an aggregation built up by calls to aggregateField and aggregateFields.\nClass Group.CombineFieldsGlobally<InputT>; // a PTransform that does a global combine using an aggregation built up by calls to aggregateField and aggregateFields.\n", "des": "Defines transforms that work on PCollections with schemas.."}
{"index": 2056, "repo": "spring-ws-security-4.0.5", "code": "Package: callback\n\nClasses and Interfaces: \npublic abstract class AbstractWsPasswordCallbackHandler extends AbstractCallbackHandler; // Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.\npublic class KeyStoreCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.\npublic class SimplePasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Simple callback handler that validates passwords against a in-memory Properties object.\npublic class SpringSecurityPasswordValidationCallbackHandler extends AbstractWsPasswordCallbackHandler implements org.springframework.beans.factory.InitializingBean; // Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.\npublic class UsernameTokenPrincipalCallback extends Object implements Callback, Serializable; // Underlying security services instantiate and pass a UsernameTokenPrincipalCallback to the handle method of a CallbackHandler to pass a security WSUsernameTokenPrincipal.\n", "des": "Contains CallbackHandler implementations for WSS4J 2.0."}
{"index": 2108, "repo": "spring-webflux-6.0.11", "code": "Package: adapter\n\nClasses and Interfaces: \npublic abstract class AbstractListenerWebSocketSession<T> extends AbstractWebSocketSession<T> implements Subscriber<Void>; // Base class for WebSocketSession implementations that bridge between event-listener WebSocket APIs (e.g.\npublic abstract class AbstractWebSocketSession<T> extends Object implements WebSocketSession; // Convenient base class for WebSocketSession implementations that holds common fields and exposes accessors.\npublic final class ContextWebSocketHandler extends Object implements WebSocketHandler; // WebSocketHandler decorator that enriches the context of the target handler.\n@WebSocket public class JettyWebSocketHandlerAdapter extends Object; // Jetty @WebSocket handler that delegates events to a reactive WebSocketHandler and its session.\npublic class JettyWebSocketSession extends AbstractListenerWebSocketSession<org.eclipse.jetty.websocket.api.Session>; // Spring WebSocketSession implementation that adapts to a Jetty WebSocket Session.\npublic abstract class Netty5WebSocketSessionSupport<T> extends AbstractWebSocketSession<T>; // Base class for Netty-based WebSocketSession adapters that provides convenience methods to convert Netty WebSocketFrames to and from WebSocketMessages.\npublic abstract class NettyWebSocketSessionSupport<T> extends AbstractWebSocketSession<T>; // Base class for Netty-based WebSocketSession adapters that provides convenience methods to convert Netty WebSocketFrames to and from WebSocketMessages.\npublic class ReactorNetty2WebSocketSession extends Netty5WebSocketSessionSupport<ReactorNetty2WebSocketSession.WebSocketConnection>; // WebSocketSession implementation for use with the Reactor Netty's (Netty 5) NettyInbound and NettyOutbound.\npublic static class ReactorNetty2WebSocketSession.WebSocketConnection extends Object; // Simple container for NettyInbound and NettyOutbound.\npublic class ReactorNettyWebSocketSession extends NettyWebSocketSessionSupport<ReactorNettyWebSocketSession.WebSocketConnection>; // WebSocketSession implementation for use with the Reactor Netty's NettyInbound and NettyOutbound.\npublic static class ReactorNettyWebSocketSession.WebSocketConnection extends Object; // Simple container for NettyInbound and NettyOutbound.\npublic class StandardWebSocketHandlerAdapter extends Endpoint; // Adapter for the Jakarta WebSocket API (JSR-356) that delegates events to a reactive WebSocketHandler and its session.\n", "des": "Classes adapting Spring's Reactive WebSocket API to and from WebSocket runtimes."}
{"index": 1949, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: jmx\n\nClasses and Interfaces: \n@AutoConfiguration @EnableConfigurationProperties(JmxProperties.class) @ConditionalOnClass(org.springframework.jmx.export.MBeanExporter.class) @ConditionalOnProperty(prefix=\"spring.jmx\", name=\"enabled\", havingValue=\"true\") public class JmxAutoConfiguration extends Object; // Auto-configuration to enable/disable Spring's @EnableMBeanExport mechanism based on configuration properties.\n@ConfigurationProperties(prefix=\"spring.jmx\") public class JmxProperties extends Object; // Configuration properties for JMX.\npublic class ParentAwareNamingStrategy extends org.springframework.jmx.export.naming.MetadataNamingStrategy implements org.springframework.context.ApplicationContextAware; // Extension of MetadataNamingStrategy that supports a parent ApplicationContext.\n", "des": "Auto-configuration for JMX."}
{"index": 1680, "repo": "spring-oxm-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class AbstractMarshaller extends Object implements Marshaller, Unmarshaller; // Abstract implementation of the Marshaller and Unmarshaller interface.\npublic class MarshallingSource extends SAXSource; // Source implementation that uses a Marshaller.Can be constructed with a Marshaller and an object to be marshalled.\npublic abstract class SaxResourceUtils extends Object; // Convenient utility methods for dealing with SAX.\n", "des": "Provides generic support classes for using Spring's O/X Mapping integration within various scenario's."}
{"index": 2281, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: highlight\n\nClasses and Interfaces: \npublic class Highlight extends Object;\npublic abstract class HighlightCommonParameters extends Object;\npublic abstract static class HighlightCommonParameters.HighlightCommonParametersBuilder<SELF extends HighlightCommonParameters.HighlightCommonParametersBuilder<SELF>> extends Object;\npublic class HighlightField extends Object;\npublic class HighlightFieldParameters extends HighlightCommonParameters;\npublic static final class HighlightFieldParameters.HighlightFieldParametersBuilder extends HighlightCommonParameters.HighlightCommonParametersBuilder<HighlightFieldParameters.HighlightFieldParametersBuilder>;\npublic class HighlightParameters extends HighlightCommonParameters;\npublic static final class HighlightParameters.HighlightParametersBuilder extends HighlightCommonParameters.HighlightCommonParametersBuilder<HighlightParameters.HighlightParametersBuilder>;\n", "des": "classes to define highlight settings parameters of a query"}
{"index": 1375, "repo": "spring-boot-actuator-3.1.1", "code": "Package: cassandra\n\nClasses and Interfaces: \npublic class CassandraDriverHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Cassandra data stores.\npublic class CassandraDriverReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // Simple implementation of a ReactiveHealthIndicator returning status information for Cassandra data stores.\n", "des": "Actuator support for Cassandra."}
{"index": 1467, "repo": "spring-data-redis-3.1.2", "code": "Package: atomic\n\nClasses and Interfaces: \npublic class RedisAtomicDouble extends Number implements Serializable, BoundKeyOperations<String>; // Atomic double backed by Redis.\npublic class RedisAtomicInteger extends Number implements Serializable, BoundKeyOperations<String>; // Atomic integer backed by Redis.\npublic class RedisAtomicLong extends Number implements Serializable, BoundKeyOperations<String>; // Atomic long backed by Redis.\n", "des": "Small toolkit mirroring the java.util.atomic package in Redis."}
{"index": 429, "repo": "kafka-streams-3.5.0", "code": "Package: streams\n\nSub Packages: \npackage streams.errors; // Provides common exception classes for Streams applications.\npackage streams.kstream; // Provides a high-level programming model (DSL) to express a (stateful) data flow computation over input streams and tables.\npackage streams.processor; // Provides a low-level programming model (Processor API, aka, PAPI) to express a (stateful) data flow computation over input topics.\npackage streams.query; // Provides a query API (aka Interactive Queries) over state stores, for extracting data from a stateful Kafka Streams application.\npackage streams.state; // Provides interfaces for managing the intermediate state of a stateful streams application.\n\nClasses and Interfaces: \nInterface KafkaClientSupplier; // KafkaClientSupplier can be used to provide custom Kafka clients to a KafkaStreams instance.\nInterface KafkaStreams.StateListener; // Listen to KafkaStreams.State change events.\nInterface StreamsMetadata; // Metadata of a Kafka Streams client.\nInterface StreamsMetrics; // The Kafka Streams metrics interface for adding metric sensors and collecting metric values.\nInterface TaskMetadata; // Metadata of a task.\nInterface ThreadMetadata; // Metadata of a stream thread.\nInterface TopologyDescription; // A meta representation of a topology.\nInterface TopologyDescription.GlobalStore; // Represents a global store.\nInterface TopologyDescription.Node; // A node of a topology.\nInterface TopologyDescription.Processor; // A processor node of a topology.\nInterface TopologyDescription.Sink; // A sink node of a topology.\nInterface TopologyDescription.Source; // A source node of a topology.\nInterface TopologyDescription.Subtopology; // A connected sub-graph of a Topology.\nClass KafkaStreams; // A Kafka client that allows for performing continuous computation on input coming from one or more input topics and sends output to zero, one, or more output topics.\nClass KafkaStreams.CloseOptions; // Class that handles options passed in case of KafkaStreams instance scale down\nClass KeyQueryMetadata; // Represents all the metadata related to a key, where a particular key resides in a KafkaStreams application.\nClass KeyValue<K,V>; // A key-value pair defined for a single Kafka Streams record.\nClass LagInfo; // Encapsulates information about lag, at a store partition replica (active or standby).\n", "des": "Provides the Kafka Streams library for building streaming data applications."}
{"index": 3660, "repo": "solr-core-9.3.0", "code": "Package: loader\n\nClasses and Interfaces: \nClass CborLoader; // This class can load a single document or a stream of documents in CBOR format this is equivalent of loading a single json documet or an array of json documents\nClass ContentStreamLoader; // Load a ContentStream into Solr\nClass CSVLoader;\nClass CSVLoaderBase;\nClass JavabinLoader; // Update handler which uses the JavaBin format\nClass JsonLoader;\nClass XMLLoader;\n", "des": "ContentStreamLoader implementations for use in ContentStreamHandlerBase implementations"}
{"index": 781, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: gl\n\nClasses and Interfaces: \nClass GalicianAnalyzer; // Analyzer for Galician.\nClass GalicianMinimalStemFilter; // A TokenFilter that applies GalicianMinimalStemmer to stem Galician words.\nClass GalicianMinimalStemFilterFactory; // Factory for GalicianMinimalStemFilter.\nClass GalicianMinimalStemmer; // Minimal Stemmer for Galician\nClass GalicianStemFilter; // A TokenFilter that applies GalicianStemmer to stem Galician words.\nClass GalicianStemFilterFactory; // Factory for GalicianStemFilter.\nClass GalicianStemmer; // Galician stemmer implementing \"Regras do lematizador para o galego\".\n", "des": "Analyzer for Galician."}
{"index": 3214, "repo": "commons-configuration2-2.9.0", "code": "Package: combined\n\nClasses and Interfaces: \nInterface CombinedBuilderProperties<T>; // Definition of a properties interface for the parameters of a combined configuration builder.\nInterface ConfigurationBuilderProvider; // An interface for creating builders for configuration sources of a CombinedConfigurationBuilder.\nInterface MultiFileBuilderProperties<T>; // Definition of a properties interface for the parameters of a multiple file configuration builder.\nClass BaseConfigurationBuilderProvider; // A fully-functional, reflection-based implementation of the ConfigurationBuilderProvider interface which can deal with the default tags defining configuration sources.\nClass CombinedBuilderParametersImpl; // A specialized parameters object for a CombinedConfigurationBuilder.\nClass CombinedConfigurationBuilder; // A specialized ConfigurationBuilder implementation that creates a CombinedConfiguration from multiple configuration sources defined by an XML-based configuration definition file.\nClass CombinedConfigurationBuilderProvider; // A specialized ConfigurationBuilderProvider implementation which deals with combined configuration builders.\nClass ConfigurationDeclaration; // A specialized BeanDeclaration implementation that represents the declaration of a configuration source.\nClass FileExtensionConfigurationBuilderProvider; // A specialized implementation of ConfigurationBuilderProvider which determines the name of the result configuration class based on the extension of the file to load.\nClass MultiFileBuilderParametersImpl; // A specialized parameters object for MultiFileConfigurationBuilder.\nClass MultiFileConfigurationBuilder<T extends FileBasedConfiguration>; // A specialized ConfigurationBuilder implementation providing access to multiple file-based configurations based on a file name pattern.\nClass MultiFileConfigurationBuilderProvider; // A specialized ConfigurationBuilderProvider implementation for integrating MultiFileConfigurationBuilder with CombinedConfigurationBuilder.\nClass ReloadingCombinedConfigurationBuilder; // An extension of CombinedConfigurationBuilder which also supports reloading operations.\nClass ReloadingMultiFileConfigurationBuilder<T extends FileBasedConfiguration>; // A specialized MultiFileConfigurationBuilder implementation which adds support for reloading.\n", "des": "A package containing the implementation of the builder for combined configurations."}
{"index": 1660, "repo": "jena-core-4.9.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class BBRuleContext extends Object implements RuleContext; // Implementation of RuleContext for use in the backward chaining interpreter.\npublic class BFRuleContext extends Object implements RuleContext; // An implementation of the generic RuleContext interface used by the basic forward (BF) rule engine.\npublic class BindingStack extends Object implements BindingEnvironment; // Provides a trail of possible variable bindings for a forward rule.\npublic class BindingVector extends Object implements BindingEnvironment; // An implementation of a binding environment that maintains a single array of bound values for the variables in a rule.\npublic class BindingVectorMultiSet extends Object; // A multi set of BindingVector's divided in buckets matching an unique combination of values at given indices managed by RETEQueue\npublic class ChoicePointFrame extends GenericChoiceFrame; // Represents a single frame in the LP interpreter's choice point stack, represents the OR part of the search tree.\npublic class ConsumerChoicePointFrame extends GenericTripleMatchFrame implements LPAgendaEntry, LPInterpreterState; // Frame in the LPInterpreter's control stack used to represent matching to the results of a tabled predicate.\npublic class EnvironmentFrame extends FrameObject; // Represents a single frame in the LP interpreter's environment stack.\npublic class EnvironmentFrameWithDerivation extends EnvironmentFrame; // Extension of the normal AND-stack environment frame to support incremental derivation logging.\npublic class FrameObject extends Object; // Base class for stack frame objects.\npublic class FRuleEngine extends Object implements FRuleEngineI; // The processing engine for forward production rules.\npublic static class FRuleEngine.RuleStore extends Object; // Structure used to wrap up processed rule indexes.\npublic interface FRuleEngineI; // Rule engines implement the internals of forward rule inference graphs and the forward part of hybrid graphs.\npublic class FRuleEngineIFactory extends Object; // Factory class for creating FRuleEngineI.\npublic class Generator extends Object implements LPAgendaEntry, LPInterpreterContext; // A generator represents a set of memoized results for a single tabled subgoal.\npublic class GenericChoiceFrame extends FrameObject; // Core properties of choice frames used use to represent the OR state of the backtracking search.\n", "des": "Internal implementation objects used by the rule system interpreters and compilers."}
{"index": 2198, "repo": "spring-data-commons-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class AnnotationAuditingConfiguration extends Object implements AuditingConfiguration; // Default implementation for AuditingConfiguration.\npublic abstract class AuditingBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar; // A ImportBeanDefinitionRegistrar that serves as a base class for store specific implementations for configuring audit support.\npublic interface AuditingConfiguration; // Configuration information for auditing.\npublic class AuditingHandlerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser; // BeanDefinitionParser that parses an AuditingHandler BeanDefinition\npublic class IsNewAwareAuditingHandlerBeanDefinitionParser extends AuditingHandlerBeanDefinitionParser; // AuditingHandlerBeanDefinitionParser that will register am IsNewAwareAuditingHandler.\n", "des": "Types to abstract authentication concepts."}
{"index": 2524, "repo": "spring-security-core-6.1.2", "code": "Package: vote\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractAccessDecisionManager extends Object implements AccessDecisionManager, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware;\n@Deprecated public abstract class AbstractAclVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n@Deprecated public class AffirmativeBased extends AbstractAccessDecisionManager;\n@Deprecated public class AuthenticatedVoter extends Object implements AccessDecisionVoter<Object>;\n@Deprecated public class ConsensusBased extends AbstractAccessDecisionManager;\n@Deprecated public class RoleHierarchyVoter extends RoleVoter;\n@Deprecated public class RoleVoter extends Object implements AccessDecisionVoter<Object>;\n@Deprecated public class UnanimousBased extends AbstractAccessDecisionManager;\n", "des": "Implements a vote-based approach to authorization decisions."}
{"index": 3224, "repo": "commons-configuration2-2.9.0", "code": "Package: spring\n\nClasses and Interfaces: \nClass ConfigurationPropertiesFactoryBean; // FactoryBean which wraps a Commons CompositeConfiguration object for usage with PropertiesLoaderSupport.\nClass ConfigurationPropertySource; // Allow use of Apache Commons Configuration Objects as Spring PropertySources\n", "des": "A package containing integrations for the Spring Framework."}
{"index": 2003, "repo": "spring-integration-ws-6.1.2", "code": "Package: ws\n\nSub Packages: \npackage ws.config; // Contains parser classes for the Web Services namespace support.\npackage ws.dsl; // Contains classes for DSL support.\n\nClasses and Interfaces: \npublic abstract class AbstractWebServiceInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements org.springframework.ws.server.endpoint.MessageEndpoint, org.springframework.integration.context.OrderlyShutdownCapable;\npublic abstract class AbstractWebServiceOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // Base class for outbound Web Service-invoking Messaging Gateways.\npublic class DefaultSoapHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.ws.soap.SoapMessage> implements SoapHeaderMapper; // A HeaderMapper implementation for mapping to and from a SoapHeader.\npublic class MarshallingWebServiceInboundGateway extends AbstractWebServiceInboundGateway;\npublic class MarshallingWebServiceOutboundGateway extends AbstractWebServiceOutboundGateway; // An outbound Messaging Gateway for invoking Web Services that also supports marshalling and unmarshalling of the request and response messages.\n@SoapFault(faultCode=RECEIVER) public class ServiceUnavailableException extends org.springframework.ws.WebServiceException; // The WebServiceException extension to indicate that the server endpoint is temporary unavailable.\npublic class SimpleWebServiceInboundGateway extends AbstractWebServiceInboundGateway;\npublic class SimpleWebServiceOutboundGateway extends AbstractWebServiceOutboundGateway; // An outbound Messaging Gateway for invoking a Web Service.\npublic interface SoapHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.ws.soap.SoapMessage>; // A convenience interface that extends RequestReplyHeaderMapper, parameterized with SoapHeader.\npublic abstract class WebServiceHeaders extends Object; // Pre-defined header names to be used when storing or retrieving Web Service properties to/from integration Message Headers.\n", "des": "Provides several inbound and outbound Web Service components."}
{"index": 147, "repo": "ignite-core-2.15.0", "code": "Package: optimized\n\nClasses and Interfaces: \nInterface OptimizedMarshallerIdMapper; // ID mapper.\nClass OptimizedMarshaller; // Optimized implementation of Marshaller.\nClass OptimizedObjectOutputStream; // Optimized object output stream.\nClass OptimizedObjectPooledStreamRegistry;\nClass OptimizedObjectSharedStreamRegistry;\nClass OptimizedMarshallerInaccessibleClassException;\n", "des": "Contains Optimized marshaller."}
{"index": 2482, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: task\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration.class,org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics.class) @ConditionalOnBean({java.util.concurrent.Executor.class,io.micrometer.core.instrument.MeterRegistry.class}) public class TaskExecutorMetricsAutoConfiguration extends Object; // Auto-configuration for metrics on all available task executors and task schedulers.\n", "des": "Auto-configuration for task execution and scheduling metrics."}
{"index": 1331, "repo": "groovy-all-4.0.13", "code": "Package: asm\n\nClasses and Interfaces: \npublic class AssertionWriter extends Object;\npublic class BinaryBooleanExpressionHelper extends BinaryIntExpressionHelper; // Binary write operations specialised for Booleans\npublic class BinaryDoubleExpressionHelper extends BinaryLongExpressionHelper;\npublic class BinaryExpressionHelper extends Object;\npublic class BinaryExpressionMultiTypeDispatcher extends BinaryExpressionHelper; // This class is for internal use only! This class will dispatch to the right type adapters according to the kind of binary expression that is provided.\npublic abstract class BinaryExpressionWriter extends Object; // Base class for writing primitive typed operations\npublic class BinaryFloatExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryIntExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryLongExpressionHelper extends BinaryExpressionWriter;\npublic class BinaryObjectExpressionHelper extends BinaryExpressionWriter;\npublic class BytecodeDumper extends Object implements BytecodeProcessor; // A utility class which can be used in test cases to dump generated bytecode.\npublic class BytecodeHelper extends Object; // A helper class for bytecode generation with AsmClassGenerator.\npublic class BytecodeVariable extends Object; // Represents compile time variable metadata while compiling a method.\npublic class CallSiteWriter extends Object; // This class represents non-public API used by AsmClassGenerator.\npublic class ClosureWriter extends Object;\nprotected static class ClosureWriter.CorrectAccessedVariableVisitor extends CodeVisitorSupport;\nprotected static interface ClosureWriter.UseExistingReference;\npublic class CompileStack extends Object; // Manages different aspects of the code of a code block like handling labels, defining variables, and scopes.\npublic static class CompileStack.BlockRecorder extends Object;\nprotected static class CompileStack.LabelRange extends Object;\npublic class DelegatingController extends WriterController; // This class will delegate all calls to a WriterController given in the constructor.\npublic class ExpressionAsVariableSlot extends BytecodeExpression; // Helper class that takes an Expression and if visited will load it normally, storing the result in a helper variable, which then can be requested after the visit is completed.\npublic class InvocationWriter extends Object;\npublic class LambdaWriter extends ClosureWriter;\npublic class MethodCaller extends Object; // A helper class to invoke methods more easily in ASM\npublic class MethodCallerMultiAdapter extends Object;\npublic class MethodPointerExpressionWriter extends Object; // Generates bytecode for method pointer expressions.\n", "des": "Helper classes for ASMClassGenerator."}
{"index": 1954, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: embedded\n\nClasses and Interfaces: \n@AutoConfiguration(before=LdapAutoConfiguration.class) @EnableConfigurationProperties({LdapProperties.class,EmbeddedLdapProperties.class}) @ConditionalOnClass(com.unboundid.ldap.listener.InMemoryDirectoryServer.class) @Conditional(org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration.EmbeddedLdapCondition.class) @ImportRuntimeHints(org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration.EmbeddedLdapAutoConfigurationRuntimeHints.class) public class EmbeddedLdapAutoConfiguration extends Object; // Auto-configuration for Embedded LDAP.\n@ConfigurationProperties(prefix=\"spring.ldap.embedded\") public class EmbeddedLdapProperties extends Object; // Configuration properties for Embedded LDAP.\npublic static class EmbeddedLdapProperties.Credential extends Object;\npublic static class EmbeddedLdapProperties.Validation extends Object;\n", "des": "Auto-configuration for embedded LDAP."}
{"index": 1269, "repo": "spring-core-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Retention(RUNTIME) @Target(METHOD) @Documented public @interface AliasFor; // @AliasFor is an annotation that is used to declare aliases for annotation attributes.\npublic abstract class AnnotatedElementUtils extends Object; // General utility methods for finding annotations, meta-annotations, and repeatable annotations on AnnotatedElements.\npublic class AnnotationAttributes extends LinkedHashMap<String,Object>; // LinkedHashMap subclass representing annotation attribute key-value pairs as read by AnnotationUtils, AnnotatedElementUtils, and Spring's reflection- and ASM-based AnnotationMetadata implementations.\npublic class AnnotationAwareOrderComparator extends OrderComparator; // AnnotationAwareOrderComparator is an extension of OrderComparator that supports Spring's Ordered interface as well as the @Order and @Priority annotations, with an order value provided by an Ordered instance overriding a statically defined annotation value (if any).\npublic class AnnotationConfigurationException extends NestedRuntimeException; // Thrown by AnnotationUtils and synthesized annotations if an annotation is improperly configured.\n@FunctionalInterface public interface AnnotationFilter; // Callback interface that can be used to filter specific annotation types.\npublic abstract class AnnotationUtils extends Object; // General utility methods for working with annotations, handling meta-annotations, bridge methods (which the compiler generates for generic declarations) as well as super methods (for optional annotation inheritance).\npublic interface MergedAnnotation<A extends Annotation>; // A single merged annotation returned from a MergedAnnotations collection.\npublic static enum MergedAnnotation.Adapt extends Enum<MergedAnnotation.Adapt>; // Adaptations that can be applied to attribute values when creating Maps or AnnotationAttributes.\npublic abstract class MergedAnnotationCollectors extends Object; // Collector implementations that provide various reduction operations for MergedAnnotation instances.\npublic abstract class MergedAnnotationPredicates extends Object; // Predicate implementations that provide various test operations for MergedAnnotations.\npublic interface MergedAnnotations extends Iterable<MergedAnnotation<Annotation>>; // Provides access to a collection of merged annotations, usually obtained from a source such as a Class or Method.\npublic static final class MergedAnnotations.Search extends Object; // Fluent API for configuring the search algorithm used in the MergedAnnotations model and performing a search.\n", "des": "Core support package for annotations, meta-annotations, and merged annotations with attribute overrides."}
{"index": 2406, "repo": "spring-batch-core-5.0.2", "code": "Package: factory\n\nClasses and Interfaces: \npublic class FaultTolerantStepFactoryBean<T,S> extends SimpleStepFactoryBean<T,S>; // Factory bean for step that provides options for configuring skip behavior.\npublic class SimpleStepFactoryBean<T,S> extends Object implements org.springframework.beans.factory.FactoryBean<Step>, org.springframework.beans.factory.BeanNameAware; // Most common configuration options for simple steps should be found here.\n", "des": "Factories for step level components."}
{"index": 1570, "repo": "spring-restdocs-core-3.0.0", "code": "Package: request\n\nClasses and Interfaces: \npublic abstract class AbstractParametersSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document parameters from a request sent to a RESTful resource.\npublic class FormParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the form parameters supported by a RESTful resource.\npublic class ParameterDescriptor extends IgnorableDescriptor<ParameterDescriptor>; // A descriptor of a request or path parameter.\npublic class PathParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the path parameters supported by a RESTful resource.\npublic class QueryParametersSnippet extends AbstractParametersSnippet; // A Snippet that documents the query parameters supported by a RESTful resource.\npublic abstract class RequestDocumentation extends Object; // Static factory methods for documenting aspects of a request sent to a RESTful API.\npublic class RequestPartDescriptor extends IgnorableDescriptor<RequestPartDescriptor>; // A descriptor of a request part.\npublic class RequestPartsSnippet extends TemplatedSnippet; // A Snippet that documents the request parts supported by a RESTful resource.\n", "des": "Documenting query and path parameters of requests sent to a RESTful API."}
{"index": 2692, "repo": "spring-integration-http-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Inherited @Import(IntegrationGraphControllerRegistrar.class) public @interface EnableIntegrationGraphController; // Enables the IntegrationGraphController if org.springframework.web.servlet.DispatcherServlet or org.springframework.web.reactive.DispatcherHandler is present in the classpath.\npublic final class HttpContextUtils extends Object; // Utility class for accessing HTTP integration components from the BeanFactory.\npublic class HttpInboundEndpointParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser; // Parser for the 'inbound-channel-adapter' and 'inbound-gateway' elements of the 'http' namespace.\npublic class HttpIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The HTTP Integration infrastructure beanFactory initializer.\npublic class HttpNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler; // Namespace handler for Spring Integration's http namespace.\npublic class HttpOutboundChannelAdapterParser extends org.springframework.integration.config.xml.AbstractOutboundChannelAdapterParser; // Parser for the 'outbound-channel-adapter' element of the http namespace.\npublic class HttpOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractConsumerEndpointParser; // Parser for the 'outbound-gateway' element of the http namespace.\npublic class IntegrationGraphControllerParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // The BeanDefinitionParser for the <int-http:graph-controller> component.\npublic class IntegrationGraphControllerRegistrar extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar; // Registers the necessary beans for EnableIntegrationGraphController.\n", "des": "Provides classes for configuration - parsers, namespace handlers."}
{"index": 3439, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface CurrentSessionContext; // Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentTenantIdentifierResolver; // A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nClass AbstractCurrentSessionContext; // Base support for CurrentSessionContext implementors.\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 3084, "repo": "spring-ws-core-4.0.5", "code": "Package: endpoint\n\nSub Packages: \npackage endpoint.annotation; // JDK 1.5+ annotations for Spring-WS SOAP endpoints.\npackage endpoint.interceptor; // Provides miscellaneous endpoints EndpointInterceptor implementations for SOAP purposes.\npackage endpoint.mapping; // Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes.\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractFaultCreatingValidatingMarshallingPayloadEndpoint extends AbstractValidatingMarshallingPayloadEndpoint implements org.springframework.context.MessageSourceAware;\npublic abstract class AbstractSoapFaultDefinitionExceptionResolver extends AbstractEndpointExceptionResolver; // Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.\npublic class SimpleSoapExceptionResolver extends AbstractEndpointExceptionResolver; // Simple, SOAP-specific EndpointExceptionResolver implementation that stores the exception's message as the fault string.\npublic class SoapFaultAnnotationExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver; // Implementation of the EndpointExceptionResolver interface that uses the SoapFault annotation to map exceptions to SOAP Faults.\npublic class SoapFaultDefinition extends Object; // Defines properties for a SOAP Fault.\npublic class SoapFaultDefinitionEditor extends PropertyEditorSupport; // PropertyEditor for SoapFaultDefinition objects.\npublic class SoapFaultMappingExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver; // Exception resolver that allows for mapping exception class names to SOAP Faults.\n", "des": "Provides EndpointAdapter, EndpointMapping, and EndpointExceptionResolver implementations for SOAP."}
{"index": 2593, "repo": "spring-rabbit-3.0.6", "code": "Package: exception\n\nClasses and Interfaces: \npublic class FatalListenerExecutionException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed with an irrecoverable problem.\npublic class FatalListenerStartupException extends org.springframework.amqp.AmqpException; // Exception to be thrown when the execution of a listener method failed on startup.\npublic class MessageRejectedWhileStoppingException extends org.springframework.amqp.AmqpException; // Exception class that indicates a rejected message on shutdown.\n", "des": "Provides classes for listener exceptions."}
{"index": 603, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: resolver\n\nClasses and Interfaces: \nInterface ResolverHook; // OSGi Framework Resolver Hook instances are obtained from the OSGi Framework Resolver Hook Factory service.\nInterface ResolverHookFactory; // OSGi Framework Resolver Hook Factory Service.\n", "des": "Framework Resolver Hooks Package Version 1.0."}
{"index": 3600, "repo": "lucene-test-framework-9.7.0", "code": "Package: fst\n\nClasses and Interfaces: \nClass FSTTester<T>; // Helper class to test FSTs.\nClass FSTTester.InputOutput<T>; // Holds one input/output pair.\n", "des": "Support for FST testing."}
{"index": 28, "repo": "commons-collections4-4.4", "code": "Package: sequence\n\nClasses and Interfaces: \nInterface CommandVisitor<T>; // This interface should be implemented by user object to walk through EditScript objects.\nInterface ReplacementsHandler<T>; // This interface is devoted to handle synchronized replacement sequences.\nClass DeleteCommand<T>; // Command representing the deletion of one object of the first sequence.\nClass EditCommand<T>; // Abstract base class for all commands used to transform an objects sequence into another one.\nClass EditScript<T>; // This class gathers all the commands needed to transform one objects sequence into another objects sequence.\nClass InsertCommand<T>; // Command representing the insertion of one object of the second sequence.\nClass KeepCommand<T>; // Command representing the keeping of one object present in both sequences.\nClass ReplacementsFinder<T>; // This class handles sequences of replacements resulting from a comparison.\nClass SequencesComparator<T>; // This class allows to compare two objects sequences.\n", "des": "This package provides classes to compare two sequences of objects."}
{"index": 1426, "repo": "spring-boot-actuator-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \n@Deprecated(since=\"3.0.0\", forRemoval=true) public class DefaultWebMvcTagsProvider extends Object implements WebMvcTagsProvider;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public final class WebMvcTags extends Object;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebMvcTagsContributor;\n@Deprecated(since=\"3.0.0\", forRemoval=true) public interface WebMvcTagsProvider;\n", "des": "Actuator support for Spring MVC metrics."}
{"index": 2509, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: mappings\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnAvailableEndpoint(endpoint=org.springframework.boot.actuate.web.mappings.MappingsEndpoint.class) public class MappingsEndpointAutoConfiguration extends Object; // Auto-configuration for MappingsEndpoint.\n", "des": "Classes for auto-configuration of actuator web request mapping concerns."}
{"index": 1978, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nClasses and Interfaces: \npublic class AntPathRequestMatcherProvider extends Object implements RequestMatcherProvider; // RequestMatcherProvider that provides an AntPathRequestMatcher.\npublic final class PathRequest extends Object; // Factory that can be used to create a RequestMatcher for commonly used paths.\npublic static final class PathRequest.H2ConsoleRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<H2ConsoleProperties>; // The request matcher used to match against h2 console path.\n@FunctionalInterface public interface RequestMatcherProvider; // Interface that can be used to provide a RequestMatcher that can be used with Spring Security.\n@AutoConfiguration(before=UserDetailsServiceAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.authentication.DefaultAuthenticationEventPublisher.class) @EnableConfigurationProperties(SecurityProperties.class) @Import({org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration.class,SecurityDataConfiguration.class}) public class SecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security.\n@AutoConfiguration(after=SecurityAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @EnableConfigurationProperties(SecurityProperties.class) @ConditionalOnClass({org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer.class,org.springframework.security.config.http.SessionCreationPolicy.class}) public class SecurityFilterAutoConfiguration extends Object; // Auto-configuration for Spring Security's Filter.\npublic final class StaticResourceRequest extends Object; // Used to create a RequestMatcher for static resources in commonly used locations.\npublic static final class StaticResourceRequest.StaticResourceRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<DispatcherServletPath>; // The request matcher used to match against resource Locations.\n", "des": "Auto-configuration for Servlet-based Spring Security."}
{"index": 2865, "repo": "spring-integration-core-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class CollectionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // A HandlerMethodArgumentResolver implementation for Collection, Iterator or array MethodParameter.\npublic class ContinuationHandlerMethodArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // No-op resolver for method arguments of type Continuation.\npublic class IntegrationInvocableHandlerMethod extends org.springframework.messaging.handler.invocation.InvocableHandlerMethod; // An InvocableHandlerMethod extension for Spring Integration requirements.\npublic class IntegrationMessageHandlerMethodFactory extends org.springframework.messaging.handler.annotation.support.DefaultMessageHandlerMethodFactory; // Extension of the DefaultMessageHandlerMethodFactory for Spring Integration requirements.\npublic class MapArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // A HandlerMethodArgumentResolver implementation to resolve argument for the MethodParameter as a Map or Properties.\npublic class MessagingMethodInvokerHelper extends AbstractExpressionEvaluator implements ManageableLifecycle; // A helper class for processors that invoke a method on a target Object using a combination of message payload(s) and headers as arguments.\npublic static class MessagingMethodInvokerHelper.ParametersWrapper extends Object;\npublic class PayloadExpressionArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // The HandlerMethodArgumentResolver for evaluating Payload.expression() as a SpEL expression against message and converting result to expected parameter type.\npublic class PayloadsArgumentResolver extends AbstractExpressionEvaluator implements org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver; // The HandlerMethodArgumentResolver for resolving a Collection of payloads or expression against each payload.\n", "des": "Provides classes for message handlers support."}
{"index": 2194, "repo": "spring-security-web-6.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class OnCommittedResponseWrapper extends jakarta.servlet.http.HttpServletResponseWrapper; // Base class for response wrappers which encapsulate the logic for handling an event when the HttpServletResponse is committed.\npublic class RedirectUrlBuilder extends Object; // Internal class for building redirect URLs.\npublic abstract class TextEscapeUtils extends Object; // Internal utility for escaping characters in HTML strings.\npublic class ThrowableAnalyzer extends Object; // Handler for analyzing Throwable instances.\npublic interface ThrowableCauseExtractor; // Interface for handlers extracting the cause out of a specific Throwable type.\npublic final class UrlUtils extends Object; // Provides static methods for composing URLs.\n", "des": "Web utility classes."}
{"index": 3273, "repo": "opencms-core-15.0", "code": "Package: gwt\n\nSub Packages: \npackage gwt.shared; // Core shared stuff.\n\nClasses and Interfaces: \nInterface I_CmsClientMessageBundle; // Convenient client message bundle interface.\nInterface I_CmsCoreProvider; // Convenience interface to provide core server-side data to the client.\nInterface I_CmsFormValidator; // Interface for handling the server-side validation of a whole form.\nInterface I_CmsValidationService; // This interface is the server-side counterpart to the org.opencms.gwt.client.validation.I_CmsValidator.\nClass A_CmsClientMessageBundle; // Convenience class to access the localized messages of this OpenCms package.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAliasHelper; // This class contains the real implementations of service methods related to aliases.\nClass CmsBrokenLinkRenderer; // A helper class used to generate the necessary information for displaying links which will be broken if the user tries to delete a file in the ADE GUI.\nClass CmsClientUserSettingConverter; // Helper class to deal with loading and saving user preferences from the ADE user interface.\nClass CmsCoreService; // Provides general core services.\nClass CmsDefaultFormValidator; // A form validator which does nothing special and just validates form field values independently of each other.\nClass CmsDefaultResourceStatusProvider; // Helper class to generate all the data which is necessary for the resource status dialog(s).\nClass CmsDummySerializationPolicy; // A serialization policy which allows serialization and deserialization of all classes.\nClass CmsGwtActionElement; // Sitemap action used to generate the sitemap editor.\nClass CmsGwtService; // Wrapper for GWT services served through OpenCms.\nClass CmsGwtServiceContext; // This class contains the data that should be cached for a specific service class.\nClass CmsIconUtil; // Utility class to generate the resource icon CSS.\nClass CmsLogService; // Handles client side logging.\nClass CmsMessagesService; // Exports the register client messages into a single JavaScript resource.\nClass CmsPrefetchSerializationPolicy; // A GWT serialization policy for pre-fetching.\nClass CmsPropertyEditorHelper; // Helper class responsible for loading / saving properties when using the property dialog.\nClass CmsQuickLaunchProvider; // Provides the data for the buttons in the quick launch menu.\n", "des": "Provides core support for GWT."}
{"index": 3662, "repo": "solr-core-9.3.0", "code": "Package: highlight\n\nClasses and Interfaces: \nInterface SolrEncoder;\nInterface SolrFormatter;\nInterface SolrFragListBuilder;\nInterface SolrFragmenter;\nClass BreakIteratorBoundaryScanner;\nClass DefaultEncoder; // Use the DefaultEncoder\nClass DefaultSolrHighlighter;\nClass DefaultSolrHighlighter.FvhContainer;\nClass GapFragmenter;\nClass HighlightingPluginBase;\nClass HtmlEncoder; // Use the SimpleHTMLEncoder\nClass HtmlFormatter; // Use the SimpleHTMLFormatter\nClass RegexFragmenter; // Fragmenter that tries to produce snippets that \"look\" like a regular expression.\nClass ScoreOrderFragmentsBuilder;\nClass SimpleBoundaryScanner;\nClass SimpleFragListBuilder;\nClass SimpleFragmentsBuilder;\nClass SingleFragListBuilder;\nClass SolrBoundaryScanner;\nClass SolrFragmentsBuilder;\nClass SolrHighlighter;\nClass UnifiedSolrHighlighter; // Highlighter impl that uses UnifiedHighlighter\nClass UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter; // From UnifiedSolrHighlighter.getHighlighter(org.apache.solr.request.SolrQueryRequest).\nClass WeightedFragListBuilder;\n", "des": "SolrHighlighter API and related implementations and utilities"}
{"index": 1381, "repo": "spring-boot-actuator-3.1.1", "code": "Package: redis\n\nClasses and Interfaces: \npublic class RedisHealthIndicator extends AbstractHealthIndicator; // Simple implementation of a HealthIndicator returning status information for Redis data stores.\npublic class RedisReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // A ReactiveHealthIndicator for Redis.\n", "des": "Actuator support for Redis dependent on Spring Data."}
{"index": 1096, "repo": "hbase-server-3.0.0-alpha-4", "code": "Package: ipc\n\nClasses and Interfaces: \nInterface HBaseRPCErrorHandler; // An interface for calling out of RPC for error conditions.\nInterface PriorityFunction; // Function to figure priority of incoming request.\nInterface QueueBalancer; // Interface for balancing requests across IPC queues\nInterface RpcCall; // Interface of all necessary to carry out a RPC method invocation on the server.\nInterface RpcCallback; // Denotes a callback action that has to be executed at the end of an Rpc Call.\nInterface RpcCallContext; // Interface of all necessary to carry out a RPC service invocation on the server.\nInterface RpcServer.CallCleanup;\nInterface RpcServerInterface;\nClass AdaptiveLifoCoDelCallQueue; // Adaptive LIFO blocking queue utilizing CoDel algorithm to prevent queue overloading.\nClass AnnotationReadingPriorityFunction<T extends HBaseRpcServicesBase<?>>; // Reads special method annotations and table names to figure a priority for use by QoS facility in ipc; e.g: rpcs to hbase:meta get priority.\nClass BalancedQueueRpcExecutor; // An RpcExecutor that will balance requests evenly across all its queues, but still remains efficient with a single queue via an inlinable queue balancing mechanism.\nClass CallQueueInfo;\nClass CallRunner; // The request processing logic, which is usually executed in thread pools provided by an RpcScheduler.\nClass FastPathBalancedQueueRpcExecutor; // Balanced queue executor with a fastpath.\nClass FastPathRpcHandler;\nClass FastPathRWQueueRpcExecutor; // RPC Executor that extends RWQueueRpcExecutor with fast-path feature, used in FastPathBalancedQueueRpcExecutor.\nClass FifoRpcScheduler; // A very simple RpcScheduler} that serves incoming requests in order.\nClass HeapByteBufAllocator; // A pooled ByteBufAllocator that does not prefer direct buffers regardless of platform settings.\nClass MasterFifoRpcScheduler; // A special RpcScheduler} only used for master.\nClass MetaRWQueueRpcExecutor; // RPC Executor that uses different queues for reads and writes for meta.\nClass MetricsHBaseServer;\nClass MetricsHBaseServerWrapperImpl;\nClass NettyRpcServer; // An RPC server with Netty4 implementation.\nClass PluggableBlockingQueue; // Abstract class template for defining a pluggable blocking queue implementation to be used by the 'pluggable' call queue type in the RpcExecutor.\n", "des": "Tools to help define network clients and servers."}
{"index": 947, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: mime\n\nClasses and Interfaces: \nInterface Attachment; // Represents an attachment to a MimeMessage\nInterface MimeMessage; // Represents a Web service message with MIME attachments.\nClass AbstractMimeMessage; // Abstract implementation of the MimeMessage interface.\nClass AttachmentException; // Exception thrown when a MIME attachment could not be accessed.\n", "des": "Provides MIME functionality for use the Spring Web Services framework."}
{"index": 3045, "repo": "spring-web-6.0.11", "code": "Package: session\n\nClasses and Interfaces: \npublic class CookieWebSessionIdResolver extends Object implements WebSessionIdResolver; // Cookie-based WebSessionIdResolver.\npublic class DefaultWebSessionManager extends Object implements WebSessionManager; // Default implementation of WebSessionManager delegating to a WebSessionIdResolver for session id resolution and to a WebSessionStore.\npublic class HeaderWebSessionIdResolver extends Object implements WebSessionIdResolver; // Request and response header-based WebSessionIdResolver.\npublic class InMemoryWebSessionStore extends Object implements WebSessionStore; // Simple Map-based storage for WebSession instances.\npublic interface WebSessionIdResolver; // Contract for session ID resolution strategies.\npublic interface WebSessionManager; // Main class for access to the WebSession for an HTTP request.\npublic interface WebSessionStore; // Strategy for WebSession persistence.\n", "des": "Auxiliary interfaces and implementation classes for WebSession support."}
{"index": 723, "repo": "commons-codec-1.16.0", "code": "Package: bm\n\nClasses and Interfaces: \nInterface Rule.PhonemeExpr;\nInterface Rule.RPattern; // A minimal wrapper around the functionality of Pattern that we use, to allow for alternate implementations.\nClass BeiderMorseEncoder; // Encodes strings into their Beider-Morse phonetic encoding.\nClass Lang; // Language guessing utility.\nClass Languages; // Language codes.\nClass Languages.LanguageSet; // A set of languages.\nClass Languages.SomeLanguages; // Some languages, explicitly enumerated.\nClass PhoneticEngine; // Converts words into potential phonetic representations.\nClass Rule; // A phoneme rule.\nClass Rule.Phoneme;\nClass Rule.PhonemeList;\nEnum NameType; // Supported types of names.\nEnum RuleType; // Types of rule.\n", "des": "Implementation details of the Beider-Morse codec."}
{"index": 1549, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class RefreshableScriptTargetSource extends org.springframework.aop.target.dynamic.BeanFactoryRefreshableTargetSource; // Subclass of BeanFactoryRefreshableTargetSource that determines whether a refresh is required through the given ScriptFactory.\npublic class ResourceScriptSource extends Object implements ScriptSource; // ScriptSource implementation based on Spring's Resource abstraction.\npublic class ScriptFactoryPostProcessor extends Object implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware, ResourceLoaderAware, org.springframework.beans.factory.DisposableBean, org.springframework.core.Ordered; // BeanPostProcessor that handles ScriptFactory definitions, replacing each factory with the actual scripted Java object generated by it.\npublic class StandardScriptEvalException extends RuntimeException; // Exception decorating a ScriptException coming out of JSR-223 script evaluation, i.e.\npublic class StandardScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware; // javax.script (JSR-223) based implementation of Spring's ScriptEvaluator strategy interface.\npublic class StandardScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware; // ScriptFactory implementation based on the JSR-223 script engine abstraction (as included in Java).\npublic abstract class StandardScriptUtils extends Object; // Common operations for dealing with a JSR-223 ScriptEngine.\npublic class StaticScriptSource extends Object implements ScriptSource; // Static implementation of the ScriptSource interface, encapsulating a given String that contains the script source text.\n", "des": "Support classes for Spring's scripting package."}
{"index": 50, "repo": "ignite-core-2.15.0", "code": "Package: fifo\n\nClasses and Interfaces: \nInterface FifoEvictionPolicyMBean; // MBean for FIFO eviction policy.\nClass FifoEvictionPolicy<K,V>; // Eviction policy based on First In First Out (FIFO) algorithm and supports batch eviction.\nClass FifoEvictionPolicyFactory<K,V>; // Factory class for FifoEvictionPolicy.\n", "des": "Contains cache FIFO eviction policy implementations."}
{"index": 671, "repo": "commons-lang3-3.12.0", "code": "Package: math\n\nClasses and Interfaces: \nClass Fraction; // Fraction is a Number implementation that stores fractions accurately.\nClass IEEE754rUtils; // Provides IEEE-754r variants of NumberUtils methods.\nClass NumberUtils; // Provides extra functionality for Java Number classes.\n", "des": "Extends java.math for business mathematical classes."}
{"index": 564, "repo": "hadoop-common-3.3.4", "code": "Package: filter\n\nClasses and Interfaces: \nClass GlobFilter; // A glob pattern filter for metrics.\nClass RegexFilter; // A regex pattern filter for metrics\n", "des": "Builtin metrics filters (to be used in metrics config files)"}
{"index": 2596, "repo": "spring-rabbit-3.0.6", "code": "Package: logback\n\nClasses and Interfaces: \npublic class AmqpAppender extends ch.qos.logback.core.AppenderBase<ch.qos.logback.classic.spi.ILoggingEvent>; // A Logback appender that publishes logging events to an AMQP Exchange.\nprotected static class AmqpAppender.Event extends Object; // Small helper class to encapsulate a LoggingEvent, its MDC properties, and the number of retries.\n", "des": "Provides classes supporting Logback appenders."}
{"index": 1138, "repo": "hadoop-yarn-api-3.3.6", "code": "Package: resource\n\nClasses and Interfaces: \nInterface PlacementConstraint.Visitable; // Interface used to enable the elements of the constraint tree to be visited.\nInterface PlacementConstraint.Visitor<T>; // Visitor API for a constraint tree.\nClass PlacementConstraint; // PlacementConstraint represents a placement constraint for a resource allocation.\nClass PlacementConstraint.AbstractConstraint; // Abstract class that acts as the superclass of all placement constraint classes.\nClass PlacementConstraint.And; // Class that represents a composite constraint that is a conjunction of other constraints.\nClass PlacementConstraint.CardinalityConstraint; // Class that represents a cardinality constraint.\nClass PlacementConstraint.CompositeConstraint<R extends PlacementConstraint.Visitable>; // Class that represents composite constraints, which comprise other constraints, forming a constraint tree.\nClass PlacementConstraint.DelayedOr; // Class that represents a composite constraint that comprises a list of timed placement constraints (see PlacementConstraint.TimedPlacementConstraint).\nClass PlacementConstraint.Or; // Class that represents a composite constraint that is a disjunction of other constraints.\nClass PlacementConstraint.SingleConstraint; // Consider a set of nodes N that belongs to the scope specified in the constraint.\nClass PlacementConstraint.TargetConstraint; // Class that represents a target constraint.\nClass PlacementConstraint.TargetExpression; // Class representing the target expressions that are used in placement constraints.\nClass PlacementConstraint.TimedPlacementConstraint; // Represents a timed placement constraint that has to be satisfied within a time window.\nClass PlacementConstraints; // This class contains various static methods for the applications to create placement constraints (see also PlacementConstraint).\nClass PlacementConstraints.PlacementTargets; // Class with static methods for constructing target expressions to be used in placement constraints.\nEnum PlacementConstraint.TargetExpression.TargetType; // Enum specifying the type of the target expression.\nEnum PlacementConstraint.TimedPlacementConstraint.DelayUnit; // The unit of scheduling delay.\n", "des": "API related to resources."}
{"index": 3676, "repo": "solr-core-9.3.0", "code": "Package: parser\n\nClasses and Interfaces: \nInterface QueryParserConstants; // Token literal values and constants.\nClass QueryParser;\nClass QueryParserTokenManager; // Token Manager.\nClass SolrQueryParserBase; // This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.\nClass SolrQueryParserBase.RawQuery;\nClass Token; // Describes the input token stream.\nEnum QueryParser.Operator; // The default operator for parsing queries.\nEnum SolrQueryParserBase.MagicFieldName; // Identifies the list of all known \"magic fields\" that trigger special parsing behavior\nEnum SolrQueryParserBase.SynonymQueryStyle; // Query strategy when analyzed query terms overlap the same position (ie synonyms) consider if pants and khakis are query time synonyms\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Solr native variant of the Lucene Classic QueryParser"}
{"index": 3460, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ExpandingCollectionQuerySpace; // Describes a collection query space that allows adding joins with other query spaces; used while building a CollectionQuerySpace.\nInterface ExpandingCompositeQuerySpace; // Describes a composite query space that allows adding joins with other query spaces; used while building a CompositeQuerySpace.\nInterface ExpandingEntityIdentifierDescription; // Describes an entity identifier description that allows adding fetches; used while building a EntityIdentifierDescription.\nInterface ExpandingEntityQuerySpace; // Describes an entity query space that allows adding joins with other query spaces; used while building an EntityQuerySpace.\nInterface ExpandingFetchSource; // Describes the internal contract for things which can contain fetches.\nInterface ExpandingQuerySpace; // Describes a query space that allows adding joins with other query spaces; used while building a QuerySpace.\nInterface ExpandingQuerySpaces; // Models a collection of QuerySpace references and exposes the ability to create an ExpandingQuerySpace for \"returns\" and fetches; used when building a load plan.\nInterface LoadPlanBuildingAssociationVisitationStrategy; // Specialized AssociationVisitationStrategy implementation for building LoadPlan instances.\nInterface LoadPlanBuildingContext; // Provides access to context needed in building a LoadPlan.\nClass LoadPlanTreePrinter; // Prints a LoadPlan graph and its QuerySpaces graph as tree structures.\nClass MetamodelDrivenLoadPlanBuilder; // A metadata-driven builder of LoadPlans.\nClass QuerySpaceTreePrinter; // Prints a QuerySpaces graph as a tree structure.\nClass ReturnGraphTreePrinter; // Prints a Return graph as a tree structure.\nClass TreePrinterHelper; // A singleton helper class for printing tree structures using indentation.\n", "des": "Defines the SPI for building a metamodel-driven LoadPlan"}
{"index": 2898, "repo": "spring-integration-amqp-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic abstract class AbstractMessageListenerContainerSpec<S extends AbstractMessageListenerContainerSpec<S,C>,C extends org.springframework.amqp.rabbit.listener.AbstractMessageListenerContainer> extends MessageListenerContainerSpec<S,C>; // Base class for container specs for containers that extend AbstractMessageListenerContainer.\npublic final class Amqp extends Object; // Factory class for AMQP components.\npublic class AmqpAsyncOutboundGatewaySpec extends AmqpBaseOutboundEndpointSpec<AmqpAsyncOutboundGatewaySpec,AsyncAmqpOutboundGateway>;\npublic class AmqpBaseInboundChannelAdapterSpec<S extends AmqpBaseInboundChannelAdapterSpec<S>> extends org.springframework.integration.dsl.MessageProducerSpec<S,AmqpInboundChannelAdapter>; // The base MessageProducerSpec implementation for a AmqpInboundChannelAdapter.\npublic class AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,AmqpInboundGateway>; // A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.\npublic abstract class AmqpBaseOutboundEndpointSpec<S extends AmqpBaseOutboundEndpointSpec<S,E>,E extends AbstractAmqpOutboundEndpoint> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>; // The base MessageHandlerSpec for AbstractAmqpOutboundEndpoints.\npublic class AmqpInboundChannelAdapterDMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterDMLCSpec,org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer>; // Spec for an inbound channel adapter with a DirectMessageListenerContainer.\npublic class AmqpInboundChannelAdapterSMLCSpec extends AmqpInboundChannelAdapterSpec<AmqpInboundChannelAdapterSMLCSpec,org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer>; // Spec for an inbound channel adapter with a SimpleMessageListenerContainer.\n", "des": "Provides AMQP Component support for the Java DSL."}
{"index": 2747, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: interceptor\n\nClasses and Interfaces: \npublic class RepeatOperationsInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor; // A MethodInterceptor that can be used to automatically repeat calls to a method on a service.\n", "des": "Infrastructure implementations of repeat aop concerns."}
{"index": 1902, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: cache\n\nClasses and Interfaces: \npublic interface Cache2kBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the default setup for caches added to the manager through addCaches and for dynamically created caches.\n@AutoConfiguration(after={CouchbaseDataAutoConfiguration.class,HazelcastAutoConfiguration.class,HibernateJpaAutoConfiguration.class,RedisAutoConfiguration.class}) @ConditionalOnClass(org.springframework.cache.CacheManager.class) @ConditionalOnBean(org.springframework.cache.interceptor.CacheAspectSupport.class) @ConditionalOnMissingBean(value=org.springframework.cache.CacheManager.class, name=\"cacheResolver\") @EnableConfigurationProperties(CacheProperties.class) @Import({org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheConfigurationImportSelector.class,org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor.class}) public class CacheAutoConfiguration extends Object; // Auto-configuration for the cache abstraction.\n@FunctionalInterface public interface CacheManagerCustomizer<T extends org.springframework.cache.CacheManager>; // Callback interface that can be implemented by beans wishing to customize the cache manager before it is fully initialized, in particular to tune its configuration.\npublic class CacheManagerCustomizers extends Object; // Invokes the available CacheManagerCustomizer instances in the context for a given CacheManager.\n@ConfigurationProperties(prefix=\"spring.cache\") public class CacheProperties extends Object; // Configuration properties for the cache abstraction.\npublic static class CacheProperties.Caffeine extends Object; // Caffeine specific cache properties.\npublic static class CacheProperties.Couchbase extends Object; // Couchbase specific cache properties.\npublic static class CacheProperties.Infinispan extends Object; // Infinispan specific cache properties.\npublic static class CacheProperties.JCache extends Object; // JCache (JSR-107) specific cache properties.\npublic static class CacheProperties.Redis extends Object; // Redis-specific cache properties.\npublic enum CacheType extends Enum<CacheType>; // Supported cache types (defined in order of precedence).\n", "des": "Auto-configuration for the cache abstraction."}
{"index": 2895, "repo": "spring-integration-core-6.1.2", "code": "Package: util\n\nClasses and Interfaces: \npublic abstract class AbstractExpressionEvaluator extends Object implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\npublic class AcceptOnceCollectionFilter<T> extends Object implements CollectionFilter<T>; // An implementation of CollectionFilter that remembers the elements passed in the previous invocation in order to avoid returning those elements more than once.\npublic class AnnotatedMethodFilter extends Object implements org.springframework.expression.MethodFilter; // A MethodFilter implementation that enables the following: matching on method name, if available exclusion of void-returning methods if 'requiresReply' is true limiting to annotated methods if at least one is present .\npublic class BeanFactoryTypeConverter extends Object implements org.springframework.expression.TypeConverter, org.springframework.beans.factory.BeanFactoryAware;\npublic class CallerBlocksPolicy extends Object implements RejectedExecutionHandler; // A RejectedExecutionHandler that blocks the caller until the executor has room in its queue, or a timeout occurs (in which case a RejectedExecutionException is thrown.\n@FunctionalInterface public interface CheckedFunction<T,R>; // A Function-like interface which allows throwing Error.\npublic abstract class ClassUtils extends Object;\npublic interface CloseableIterator<E> extends Iterator<E>, AutoCloseable; // A CloseableIterator is intended to be used when it may hold resources (such as file or socket handles).\n@FunctionalInterface public interface CollectionFilter<T>; // Base strategy for filtering out a subset of a Collection of elements.\npublic class CompositeExecutor extends Object implements Executor; // An Executor that encapsulates two underlying executors.\npublic class CompoundTrigger extends Object implements org.springframework.scheduling.Trigger; // A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers.\npublic final class CoroutinesUtils extends Object; // Additional utilities for working with Kotlin Coroutines.\npublic class DynamicPeriodicTrigger extends Object implements org.springframework.scheduling.Trigger; // This is a dynamically changeable Trigger.\npublic class ErrorHandlingTaskExecutor extends Object implements org.springframework.core.task.TaskExecutor; // A TaskExecutor implementation that wraps an existing Executor instance in order to catch any exceptions.\n", "des": "Provides core utility classes."}
{"index": 3409, "repo": "commons-imaging-1.0-alpha3", "code": "Package: photometricinterpreters\n\nSub Packages: \npackage photometricinterpreters.floatingpoint; // Provides supplemental photometric interpreters for TIFF products based on floating-point data.\n\nClasses and Interfaces: \nClass PhotometricInterpreter; // Interpreter for photometric information in TIFF images.\nClass PhotometricInterpreterBiLevel;\nClass PhotometricInterpreterCieLab;\nClass PhotometricInterpreterCmyk;\nClass PhotometricInterpreterLogLuv; // Photometric interpretation Logluv support.\nClass PhotometricInterpreterPalette;\nClass PhotometricInterpreterRgb;\nClass PhotometricInterpreterYCbCr;\n", "des": "Classes for TIFF photometric interpretation (specifies the intended interpretation of the image pixel data)."}
{"index": 2481, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: startup\n\nClasses and Interfaces: \n@AutoConfiguration(after={MetricsAutoConfiguration.class,CompositeMeterRegistryAutoConfiguration.class}) @ConditionalOnClass(io.micrometer.core.instrument.MeterRegistry.class) @ConditionalOnBean(io.micrometer.core.instrument.MeterRegistry.class) public class StartupTimeMetricsListenerAutoConfiguration extends Object; // Auto-configuration for startup time metrics.\n", "des": "Auto-configuration for actuator startup time metrics."}
{"index": 1849, "repo": "spring-test-6.0.11", "code": "Package: transaction\n\nClasses and Interfaces: \n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface AfterTransaction; // Test annotation which indicates that the annotated void method should be executed after a transaction is ended for a test method configured to run within a transaction via Spring's @Transactional annotation.\n@Target({METHOD,ANNOTATION_TYPE}) @Retention(RUNTIME) @Documented public @interface BeforeTransaction; // Test annotation which indicates that the annotated void method should be executed before a transaction is started for a test method configured to run within a transaction via Spring's @Transactional annotation.\npublic abstract class TestContextTransactionUtils extends Object; // Utility methods for working with transactions and data access related beans within the Spring TestContext Framework.\npublic final class TestTransaction extends Object; // TestTransaction provides a collection of static utility methods for programmatic interaction with test-managed transactions within test methods, before methods, and after methods.\npublic class TransactionalTestExecutionListener extends AbstractTestExecutionListener; // TestExecutionListener that provides support for executing tests within test-managed transactions by honoring Spring's @Transactional annotation.\n", "des": "Transactional support classes for the Spring TestContext Framework."}
{"index": 490, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: parser\n\nSub Packages: \npackage parser.generated; // Defines utilities for deailing with schemas.\n\nClasses and Interfaces: \nClass FieldAccessDescriptorParser; // Parser for textual field-access selector.\n", "des": "Defines utilities for deailing with schemas."}
{"index": 3245, "repo": "opencms-core-15.0", "code": "Package: galleries\n\nSub Packages: \npackage galleries.shared; // Contains the shared client/server side gallery dialog classes.\n\nClasses and Interfaces: \nClass A_CmsTreeTabDataPreloader<T extends I_CmsGalleryTreeEntry<T>>; // Abstract class which is used to generate the data for showing an already opened tree in the gallery dialog.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAddContentRestriction; // Replacement configuration for the 'add content' dialog.\nClass CmsAddContentRestriction.TypeEntry; // Contains the replacements (and titles of the replacements) for a single type.\nClass CmsGalleryActionElement; // Gallery action used to generate the gallery dialog.\nClass CmsGalleryFilteredNavTreeBuilder; // Helper class for building a filtered sitemap tree for the gallery dialog's 'Sitemap' tab.\nClass CmsGalleryService; // Handles all RPC services related to the gallery dialog.\nClass CmsOpenGallery; // Provides methods to open gwt-based gallery dialog.\nClass CmsPreviewService; // Handles all RPC services related to the gallery preview dialog.\nClass CmsSiteSelectorOptionBuilder; // Helper class for building the options for the site selector in the gallery dialog.\nClass CmsTreeOpenState; // The tree open state of a gallery tree tab.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains server side classes for the gallery dialogs."}
{"index": 1972, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \n@FunctionalInterface public interface JwkSetUriReactiveJwtDecoderBuilderCustomizer; // Callback interface for the customization of the NimbusReactiveJwtDecoder.JwkSetUriReactiveJwtDecoderBuilder used to create the auto-configured ReactiveJwtDecoder for a JWK set URI that has been configured directly or obtained through an issuer URI.\n@AutoConfiguration(before={ReactiveSecurityAutoConfiguration.class,ReactiveUserDetailsServiceAutoConfiguration.class}) @EnableConfigurationProperties(OAuth2ResourceServerProperties.class) @ConditionalOnClass(org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class) @ConditionalOnWebApplication(type=REACTIVE) @Import({org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerConfiguration.JwtConfiguration.class,org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerConfiguration.OpaqueTokenConfiguration.class}) public class ReactiveOAuth2ResourceServerAutoConfiguration extends Object; // Auto-configuration for Reactive OAuth2 resource server support.\n", "des": "Auto-configuration for Spring Security's Reactive OAuth2 resource server."}
{"index": 384, "repo": "mahout-core-14.1", "code": "Package: list\n\nClasses and Interfaces: \nClass AbstractByteList; // Abstract base class for resizable lists holding byte elements; abstract.\nClass AbstractCharList; // Abstract base class for resizable lists holding char elements; abstract.\nClass AbstractDoubleList; // Abstract base class for resizable lists holding double elements; abstract.\nClass AbstractFloatList; // Abstract base class for resizable lists holding float elements; abstract.\nClass AbstractIntList; // Abstract base class for resizable lists holding int elements; abstract.\nClass AbstractList; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.\nClass AbstractLongList; // Abstract base class for resizable lists holding long elements; abstract.\nClass AbstractObjectList<T>; // Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.First see the package summary and javadoc tree view to get the broad picture.\nClass AbstractShortList; // Abstract base class for resizable lists holding short elements; abstract.\nClass ByteArrayList; // Resizable list holding byte elements; implemented with arrays.\nClass CharArrayList; // Resizable list holding char elements; implemented with arrays.\nClass DoubleArrayList; // Resizable list holding double elements; implemented with arrays.\nClass FloatArrayList; // Resizable list holding float elements; implemented with arrays.\nClass IntArrayList; // Resizable list holding int elements; implemented with arrays.\nClass LongArrayList; // Resizable list holding long elements; implemented with arrays.\nClass ObjectArrayList<T>; // Resizable list holding ${valueType} elements; implemented with arrays.\nClass ShortArrayList; // Resizable list holding short elements; implemented with arrays.\nClass SimpleLongArrayList; // Resizable list holding long elements; implemented with arrays; not efficient; just to demonstrate which methods you must override to implement a fully functional list.\n", "des": "Resizable lists holding objects or primitive data types such as int, double, etc."}
{"index": 471, "repo": "jackson-core-2.15.2", "code": "Package: type\n\nClasses and Interfaces: \nClass ResolvedType; // Type abstraction that represents Java type that has been resolved (i.e.\nClass TypeReference<T>; // This generic abstract class is used for obtaining full generics type information by sub-classing; it must be converted to ResolvedType implementation (implemented by JavaType from \"databind\" bundle) to be used.\nClass WritableTypeId; // This is a simple value class used between core streaming and higher level databinding to pass information about type ids to write.\nEnum WritableTypeId.Inclusion; // Enumeration of values that matches enum `As` from annotation `JsonTypeInfo`: separate definition to avoid dependency between streaming core and annotations packages; also allows more flexibility in case new values needed at this level of internal API.\n", "des": "Contains classes needed for type introspection, mostly used by data binding functionality."}
{"index": 1982, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: init\n\nClasses and Interfaces: \npublic class OnDatabaseInitializationCondition extends SpringBootCondition; // Condition that checks if the database initialization of a particular component should be considered.\n@ImportRuntimeHints(org.springframework.boot.autoconfigure.sql.init.SqlInitializationScriptsRuntimeHints.class) public class SqlDataSourceScriptDatabaseInitializer extends org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer; // DataSourceScriptDatabaseInitializer for the primary SQL database.\n@AutoConfiguration @EnableConfigurationProperties(SqlInitializationProperties.class) @Import({org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class,org.springframework.boot.autoconfigure.sql.init.R2dbcInitializationConfiguration.class,org.springframework.boot.autoconfigure.sql.init.DataSourceInitializationConfiguration.class}) @ConditionalOnProperty(prefix=\"spring.sql.init\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration.SqlInitializationModeCondition.class) public class SqlInitializationAutoConfiguration extends Object; // Auto-configuration for initializing an SQL database.\n@ConfigurationProperties(\"spring.sql.init\") public class SqlInitializationProperties extends Object; // Configuration properties for initializing an SQL database.\n@ImportRuntimeHints(org.springframework.boot.autoconfigure.sql.init.SqlInitializationScriptsRuntimeHints.class) public class SqlR2dbcScriptDatabaseInitializer extends org.springframework.boot.r2dbc.init.R2dbcScriptDatabaseInitializer; // R2dbcScriptDatabaseInitializer for the primary SQL database.\n", "des": "Auto-configuration for basic script-based initialization of an SQL database."}
{"index": 2915, "repo": "spring-xml-4.0.5", "code": "Package: xsd\n\nSub Packages: \npackage xsd.commons; // Contains a implementation of the XsdSchema interfaces that uses Apache WS-Commons XML Schema.\n\nClasses and Interfaces: \npublic class SimpleXsdSchema extends Object implements XsdSchema, org.springframework.beans.factory.InitializingBean; // The default XsdSchema implementation.\npublic interface XsdSchema; // Represents an abstraction for XSD schemas.\npublic interface XsdSchemaCollection; // Represents an abstraction for a collection of XSD schemas.\npublic class XsdSchemaException extends XmlException; // Base class for all WSDL definition exceptions.\n", "des": "Provides an abstraction over XSD XML schemas."}
{"index": 2136, "repo": "wicket-core-10.0.0-M1", "code": "Package: wicket\n\nSub Packages: \npackage wicket.authorization; // Contains classes that allow the user to specify authorization constraints via IAuthorizationStrategy.\npackage wicket.feedback; // Classes related to showing user feedback, generally as the result of form submission and/or validation.\npackage wicket.markup; // Base package for markup.\npackage wicket.model; // Core model support for Wicket components.\npackage wicket.resource; // Locale aware resouce loaders.\npackage wicket.response; // Several response implementations.\npackage wicket.validation; // This package provides interfaces for Wicket's validation support.\n\nClasses and Interfaces: \npublic abstract class Application extends Object implements ISessionStore.UnboundListener, IEventSink, IMetadataContext<Object,Application>; // Base class for all Wicket applications.\npublic class ApplicationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IApplicationListener> implements IApplicationListener; // ListenerCollection for IApplicationListeners\npublic class AttributeModifier extends Behavior implements org.apache.wicket.util.io.IClusterable; // This class allows a tag attribute of a component to be modified dynamically with a value obtained from a model object.\npublic static enum AttributeModifier.MarkerValue extends Enum<AttributeModifier.MarkerValue>; // Special attribute value markers.\npublic class BehaviorInstantiationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IBehaviorInstantiationListener> implements IBehaviorInstantiationListener; // ListenerCollection for IBehaviorInstantiationListeners\npublic enum ChildToDequeueType extends Enum<ChildToDequeueType>;\npublic abstract class ClassAttributeModifier extends AttributeAppender; // An AttributeModifier specialized in managing the CSS class attribute\npublic abstract class Component extends Object implements org.apache.wicket.util.io.IClusterable, IConverterLocator, IRequestableComponent, IHeaderContributor, org.apache.wicket.util.IHierarchical<Component>, IEventSink, IEventSource, IMetadataContext<Serializable,Component>, IFeedbackContributor; // Component serves as the highest level abstract base class for all components.\npublic class ConverterLocator extends Object implements IConverterLocator; // Implementation of IConverterLocator interface, which locates converters for a given type.\n", "des": "The core Wicket package."}
{"index": 3249, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsPublishService; // The synchronous publish list interface.\nInterface I_CmsPublishServiceAsync; // The asynchronous interface to the publish service.\n", "des": "Classes to handle client-side GWT-RPC services."}
{"index": 2777, "repo": "spring-jms-6.0.11", "code": "Package: destination\n\nClasses and Interfaces: \npublic class BeanFactoryDestinationResolver extends Object implements DestinationResolver, org.springframework.beans.factory.BeanFactoryAware; // DestinationResolver implementation based on a Spring BeanFactory.\npublic interface CachingDestinationResolver extends DestinationResolver; // Extension of the DestinationResolver interface, exposing methods for clearing the cache.\npublic class DestinationResolutionException extends JmsException; // Thrown by a DestinationResolver when it cannot resolve a destination name.\n@FunctionalInterface public interface DestinationResolver; // Strategy interface for resolving JMS destinations.\npublic class DynamicDestinationResolver extends Object implements DestinationResolver; // Simple DestinationResolver implementation resolving destination names as dynamic destinations.\npublic abstract class JmsDestinationAccessor extends JmsAccessor; // Base class for JmsTemplate and other JMS-accessing gateway helpers, adding destination-related properties to JmsAccessor's common properties.\npublic class JndiDestinationResolver extends org.springframework.jndi.JndiLocatorSupport implements CachingDestinationResolver; // DestinationResolver implementation which interprets destination names as JNDI locations (with a configurable fallback strategy).\n", "des": "Support classes for Spring's JMS framework."}
{"index": 1964, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: r2dbc\n\nClasses and Interfaces: \n@FunctionalInterface public interface ConnectionFactoryOptionsBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the ConnectionFactoryOptions through a ConnectionFactoryOptions.Builder whilst retaining default auto-configuration.\n@AutoConfiguration(before={DataSourceAutoConfiguration.class,SqlInitializationAutoConfiguration.class}) @ConditionalOnClass(io.r2dbc.spi.ConnectionFactory.class) @ConditionalOnResource(resources=\"classpath:META-INF/services/io.r2dbc.spi.ConnectionFactoryProvider\") @EnableConfigurationProperties(R2dbcProperties.class) @Import({org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations.PoolConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryConfigurations.GenericConfiguration.class,org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryDependentConfiguration.class}) public class R2dbcAutoConfiguration extends Object; // Auto-configuration for R2DBC.\npublic interface R2dbcConnectionDetails extends ConnectionDetails; // Details required to establish a connection to an SQL service using R2DBC.\n@ConfigurationProperties(prefix=\"spring.r2dbc\") public class R2dbcProperties extends Object; // Configuration properties for R2DBC.\npublic static class R2dbcProperties.Pool extends Object;\n@AutoConfiguration(before=TransactionAutoConfiguration.class) @ConditionalOnClass({org.springframework.r2dbc.connection.R2dbcTransactionManager.class,org.springframework.transaction.ReactiveTransactionManager.class}) @ConditionalOnSingleCandidate(io.r2dbc.spi.ConnectionFactory.class) @AutoConfigureOrder(2147483647) public class R2dbcTransactionManagerAutoConfiguration extends Object; // Auto-configuration for R2dbcTransactionManager.\n", "des": "Auto-Configuration for R2DBC."}
{"index": 853, "repo": "calcite-core-1.34.0", "code": "Package: rex\n\nClasses and Interfaces: \nInterface RexAction;\nInterface RexBiVisitor<R,P>; // Visitor pattern for traversing a tree of RexNode objects and passing a payload to each.\nInterface RexExecutor; // Can reduce expressions, writing a literal for each into a list.\nInterface RexPattern;\nInterface RexSqlConvertlet; // Converts a RexNode expression into a SqlNode expression.\nInterface RexSqlConvertletTable; // Collection of RexSqlConvertlets.\nInterface RexToSqlNodeConverter; // Converts expressions from RexNode to SqlNode.\nInterface RexVisitor<R>; // Visitor pattern for traversing a tree of RexNode objects.\nClass LogicVisitor; // Visitor pattern for traversing a tree of RexNode objects.\nClass RexAnalyzer; // Analyzes an expression, figures out what are the unbound variables, assigns a variety of values to each unbound variable, and evaluates the expression.\nClass RexBiVisitorImpl<R,P>; // Default implementation of RexBiVisitor, which visits each node but does nothing while it's there.\nClass RexBuilder; // Factory for row expressions.\nClass RexCall; // An expression formed by a call to an operator with zero or more expressions as operands.\nClass RexCallBinding; // RexCallBinding implements SqlOperatorBinding by referring to an underlying collection of RexNode operands.\nClass RexChecker; // Visitor which checks the validity of a RexNode expression.\nClass RexCorrelVariable; // Reference to the current row of a correlating relational expression.\nClass RexDynamicParam; // Dynamic parameter reference in a row-expression.\nClass RexExecutable; // Result of compiling code generated from a RexNode expression.\nClass RexExecutorImpl; // Evaluates a RexNode expression.\nClass RexFieldAccess; // Access to a field of a row-expression.\nClass RexFieldCollation; // Expression combined with sort flags (DESCENDING, NULLS LAST).\nClass RexInputRef; // Variable which references a field of an input relational expression.\nClass RexInterpreter; // Evaluates RexNode expressions.\nClass RexLiteral; // Constant value in a row-expression.\nClass RexLocalRef; // Local variable.\n", "des": "Provides a language for representing row-expressions."}
{"index": 1261, "repo": "spring-core-6.0.11", "code": "Package: core\n\nSub Packages: \npackage core.internal; // Spring's repackaging of the CGLIB core internal package (for internal use only).\n\nClasses and Interfaces: \npublic abstract class AbstractClassGenerator<T> extends Object implements ClassGenerator; // Abstract class for all code-generating CGLIB utilities.\nprotected static class AbstractClassGenerator.ClassLoaderData extends Object;\nprotected static class AbstractClassGenerator.Source extends Object;\npublic class Block extends Object;\npublic class ClassEmitter extends ClassTransformer;\npublic class ClassesKey extends Object;\npublic interface ClassGenerator;\npublic abstract class ClassInfo extends Object;\npublic class ClassLoaderAwareGeneratorStrategy extends DefaultGeneratorStrategy; // CGLIB GeneratorStrategy variant which exposes the application ClassLoader as current thread context ClassLoader for the time of class generation.\npublic class ClassNameReader extends Object;\npublic abstract class ClassTransformer extends ClassVisitor;\npublic class CodeEmitter extends LocalVariablesSorter;\npublic class CodeGenerationException extends RuntimeException;\npublic class CollectionUtils extends Object;\npublic interface Constants extends Opcodes;\npublic interface Converter;\npublic interface Customizer extends KeyFactoryCustomizer; // Customizes key types for KeyFactory when building equals, hashCode, and toString.\npublic class DebuggingClassWriter extends ClassVisitor;\npublic class DefaultGeneratorStrategy extends Object implements GeneratorStrategy;\npublic class DefaultNamingPolicy extends Object implements NamingPolicy; // The default policy used by AbstractClassGenerator.\npublic class DuplicatesPredicate extends Object implements Predicate;\npublic class EmitUtils extends Object;\npublic static class EmitUtils.ArrayDelimiters extends Object;\npublic interface FieldTypeCustomizer extends KeyFactoryCustomizer; // Customizes key types for KeyFactory right in constructor.\npublic interface GeneratorStrategy; // The GeneratorStrategy is responsible for taking a ClassGenerator and producing a byte array containing the data for the generated Class.\npublic interface HashCodeCustomizer extends KeyFactoryCustomizer;\npublic abstract class KeyFactory extends Object; // Generates classes to handle multi-valued keys, for use in things such as Maps and Sets.\npublic static class KeyFactory.Generator extends AbstractClassGenerator;\npublic interface KeyFactoryCustomizer; // Marker interface for customizers of KeyFactory\npublic class Local extends Object;\npublic class LocalVariablesSorter extends MethodVisitor; // A MethodVisitor that renumbers local variables in their order of appearance.\npublic abstract class MethodInfo extends Object;\n", "des": "Spring's repackaging of the CGLIB core package (for internal use only)."}
{"index": 2650, "repo": "spring-data-cassandra-4.1.2", "code": "Package: keyspace\n\nClasses and Interfaces: \npublic class AddColumnSpecification extends ColumnTypeChangeSpecification; // Value object representing a specification to add a column.\npublic class AlterColumnSpecification extends ColumnTypeChangeSpecification; // Value object representing a specification to alter a column.\npublic class AlterKeyspaceSpecification extends KeyspaceOptionsSpecification<AlterKeyspaceSpecification>; // Object to configure a ALTER KEYSPACE specification.\npublic class AlterTableSpecification extends TableOptionsSpecification<AlterTableSpecification>; // Object to configure a ALTER TABLE specification.\npublic class AlterUserTypeSpecification extends UserTypeNameSpecification; // Object to configure a ALTER TYPE specification.\npublic abstract class ColumnChangeSpecification extends Object; // Base value object class for column change specifications.\npublic class ColumnSpecification extends Object; // Object to configure a CQL column specification.\npublic abstract class ColumnTypeChangeSpecification extends ColumnChangeSpecification; // Base value object class for column changes that include DataType information.\npublic class CqlStringUtils extends Object;\npublic class CreateIndexSpecification extends IndexNameSpecification<CreateIndexSpecification> implements IndexDescriptor; // Object to configure a CREATE INDEX specification.\npublic static enum CreateIndexSpecification.ColumnFunction extends Enum<CreateIndexSpecification.ColumnFunction>; // Column functions to specify indexing behavior.\npublic class CreateKeyspaceSpecification extends KeyspaceOptionsSpecification<CreateKeyspaceSpecification> implements KeyspaceDescriptor; // Object to configure a CREATE KEYSPACE specification.\npublic class CreateTableSpecification extends TableSpecification<CreateTableSpecification>; // Object to configure a CREATE TABLE specification.\npublic class CreateUserTypeSpecification extends UserTypeSpecification<CreateUserTypeSpecification>; // Object to configure a CREATE TYPE specification.\npublic class DataCenterReplication extends Object; // Value object representing replication factor for a given data center.\npublic class DefaultOption extends Object implements Option; // A default implementation of Option.\npublic class DropColumnSpecification extends ColumnChangeSpecification; // Value object representing a specification to drop a column.\npublic class DropIndexSpecification extends IndexNameSpecification<DropIndexSpecification>; // Value object representing a DROP INDEX specification.\npublic class DropKeyspaceSpecification extends KeyspaceActionSpecification; // Object to configure a DROP KEYSPACE specification.\npublic class DropTableSpecification extends TableNameSpecification; // Object to configure a DROP TABLE specification.\npublic class DropUserTypeSpecification extends UserTypeNameSpecification; // Object to configure a DROP TYPE specification.\npublic class FieldSpecification extends Object; // Base value object class to specify user type fields.\n", "des": "Keyspace object action specifications such as CREATE TABLE, DROP INDEX."}
{"index": 595, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: resolver\n\nClasses and Interfaces: \nInterface BaseDescription; // This class represents a base description object for a state.\nInterface BundleDelta; // BundleDeltas represent the changes related to an individual bundle between two states.\nInterface BundleDescription; // This class represents a specific version of a bundle in the system.\nInterface BundleSpecification; // A representation of one bundle import constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface ExportPackageDescription; // This class represents a specific version of an exported package in the system.\nInterface GenericDescription; // A description of a generic capability.\nInterface GenericSpecification; // A specification which depends on a generic capability\nInterface HostSpecification; // A representation of one host bundle constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface ImportPackageSpecification; // A representation of one package import constraint as seen in a bundle manifest and managed by a state and resolver.\nInterface NativeCodeDescription; // This class represents a native code description.\nInterface NativeCodeSpecification; // This class represents a native code specification.\nInterface PlatformAdmin; // Framework service which allows bundle programmers to inspect the bundles and packages known to the Framework.\nInterface Resolver; // An implementation of a resolver which resolves the constraints of the bundles in a system.\nInterface ResolverError; // ResolverErrors represent a single error that prevents a bundle from resolving in a State object.\nInterface State; // The state of a system as reported by a resolver.\nInterface StateDelta; // A state delta contains all the changes to bundles within a state.\nInterface StateHelper; // A helper class that provides convenience methods for manipulating state objects.\nInterface StateObjectFactory; // A factory for states and their component objects.\nInterface VersionConstraint; // VersionConstraints represent the relationship between two bundles (in the case of bundle requires) or a bundle and a package (in the case of import/export).\nClass DisabledInfo; // A disabled info represents a policy decision to disable a bundle which exists in a State.\nClass StateWire; // A state wire represents a decision made by a resolver to wire a requirement to a capability.\nClass VersionRange; // This class represents a version range.\nClass ResolverHookException; // A runtime exception thrown by a resolver to indicate that a resolver hook threw an unexpected exception and the resolve operation terminated.\n", "des": "Provides the Equinox resolver API."}
{"index": 2586, "repo": "spring-rabbit-3.0.6", "code": "Package: batch\n\nClasses and Interfaces: \npublic interface BatchingStrategy; // Strategy for batching messages.\npublic class MessageBatch extends Object; // An object encapsulating a Message containing the batch of messages, the exchange, and routing key.\npublic class SimpleBatchingStrategy extends Object implements BatchingStrategy; // A simple batching strategy that supports only one exchange/routingKey; includes a batch size, a batched message size limit and a timeout.\n", "des": "Provides classes for message batching."}
{"index": 1075, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: hamlet\n\nClasses and Interfaces: \nInterface HamletSpec._;\nInterface HamletSpec._Anchor;\nInterface HamletSpec._Block; // %block -(FORM|FIELDSET)\nInterface HamletSpec._Body;\nInterface HamletSpec._Cell;\nInterface HamletSpec._Child;\nInterface HamletSpec._Content;\nInterface HamletSpec._Dl;\nInterface HamletSpec._FieldSet;\nInterface HamletSpec._FontSize; // Part of %pre.exclusion\nInterface HamletSpec._FontStyle; // %fontstyle -(%pre.exclusion)\nInterface HamletSpec._Form;\nInterface HamletSpec._FormCtrl;\nInterface HamletSpec._Head;\nInterface HamletSpec._Html;\nInterface HamletSpec._ImgObject; // Part of %pre.exclusion\nInterface HamletSpec._InsDel; // INS and DEL are unusual for HTML \"in that they may serve as either block-level or inline elements (but not both)\".\nInterface HamletSpec._Label;\nInterface HamletSpec._Legend;\nInterface HamletSpec._Li;\nInterface HamletSpec._Object;\nInterface HamletSpec._Option;\nInterface HamletSpec._Param;\nInterface HamletSpec._RawContent;\nInterface HamletSpec._Script;\nInterface HamletSpec._Special; // %special -(A|%pre.exclusion)\nInterface HamletSpec._SubSup; // Part of %pre.exclusion\nInterface HamletSpec._Table;\nInterface HamletSpec._TableCol;\nInterface HamletSpec._TableRow;\nInterface HamletSpec._Tr;\nInterface HamletSpec.A;\nInterface HamletSpec.ABBR;\nInterface HamletSpec.ACRONYM;\nInterface HamletSpec.ADDRESS;\nInterface HamletSpec.AREA;\nInterface HamletSpec.Attrs; // %attrs\nInterface HamletSpec.B;\nInterface HamletSpec.BASE;\nInterface HamletSpec.BDO; // The dir attribute is required for the BDO element\nInterface HamletSpec.Block; // %block\n", "des": "Deprecated."}
{"index": 660, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: exception\n\nClasses and Interfaces: \nClass InvalidVolumeException; // This exception is thrown when a volume is found not valid.\nClass VolumeException; // Base class for all volume related exceptions.\nClass VolumeProvisioningException; // Exception throws when volume provisioning is failed.\n", "des": "This package contains volume related exception classes."}
{"index": 1283, "repo": "spring-core-6.0.11", "code": "Package: style\n\nClasses and Interfaces: \npublic class DefaultToStringStyler extends Object implements ToStringStyler; // Spring's default toString() styler.\npublic class DefaultValueStyler extends Object implements ValueStyler; // Converts objects to String form, generally for debugging purposes, using Spring's toString styling conventions.\npublic class SimpleValueStyler extends DefaultValueStyler; // ValueStyler that converts objects to String form — generally for debugging purposes — using simple styling conventions that mimic the toString() styling conventions for standard JDK implementations of collections, maps, and arrays.\npublic abstract class StylerUtils extends Object; // Simple utility class to allow for convenient access to value styling logic, mainly to support descriptive logging messages.\npublic class ToStringCreator extends Object; // Utility class that builds pretty-printing toString() methods with pluggable styling conventions.\npublic interface ToStringStyler; // A strategy interface for pretty-printing toString() methods.\npublic interface ValueStyler; // Strategy that encapsulates value String styling algorithms according to Spring conventions.\n", "des": "Support for styling values as Strings, with ToStringCreator as central class."}
{"index": 1153, "repo": "commons-math3-3.6.1", "code": "Package: distribution\n\nSub Packages: \npackage distribution.fitting; // Fitting of parameters against distributions.\n\nClasses and Interfaces: \nInterface IntegerDistribution; // Interface for distributions on the integers.\nInterface MultivariateRealDistribution; // Base interface for multivariate distributions on the reals.\nInterface RealDistribution; // Base interface for distributions on the reals.\nClass AbstractIntegerDistribution; // Base class for integer-valued discrete distributions.\nClass AbstractMultivariateRealDistribution; // Base class for multivariate probability distributions.\nClass AbstractRealDistribution; // Base class for probability distributions on the reals.\nClass BetaDistribution; // Implements the Beta distribution.\nClass BinomialDistribution; // Implementation of the binomial distribution.\nClass CauchyDistribution; // Implementation of the Cauchy distribution.\nClass ChiSquaredDistribution; // Implementation of the chi-squared distribution.\nClass ConstantRealDistribution; // Implementation of the constant real distribution.\nClass EnumeratedDistribution<T>; // A generic implementation of a discrete probability distribution (Wikipedia) over a finite sample space, based on an enumerated list of <value, probability> pairs.\nClass EnumeratedIntegerDistribution; // Implementation of an integer-valued EnumeratedDistribution.\nClass EnumeratedRealDistribution; // Implementation of a real-valued EnumeratedDistribution.\nClass ExponentialDistribution; // Implementation of the exponential distribution.\nClass FDistribution; // Implementation of the F-distribution.\nClass GammaDistribution; // Implementation of the Gamma distribution.\nClass GeometricDistribution; // Implementation of the geometric distribution.\nClass GumbelDistribution; // This class implements the Gumbel distribution.\nClass HypergeometricDistribution; // Implementation of the hypergeometric distribution.\nClass KolmogorovSmirnovDistribution; // to be removed in version 4.0 - use KolmogorovSmirnovTest\nClass LaplaceDistribution; // This class implements the Laplace distribution.\nClass LevyDistribution; // This class implements the Lévy distribution.\nClass LogisticDistribution; // This class implements the Logistic distribution.\nClass LogNormalDistribution; // Implementation of the log-normal (gaussian) distribution.\nClass MixtureMultivariateNormalDistribution; // Multivariate normal mixture distribution.\n", "des": "Implementations of common discrete and continuous distributions."}
{"index": 873, "repo": "calcite-core-1.34.0", "code": "Package: format\n\nClasses and Interfaces: \nInterface FormatElement; // A format element in a format string.\nInterface FormatModel; // Describes the format strings used by a formatting function such as FORMAT_TIMESTAMP or CAST(string AS DATE FORMAT formatString).\nClass FormatModels; // Utilities for FormatModel.\nEnum FormatElementEnum; // Implementation of FormatElement containing the standard format elements.\n", "des": "Utility classes for handling format strings."}
{"index": 2135, "repo": "spring-context-support-6.0.11", "code": "Package: freemarker\n\nClasses and Interfaces: \npublic class FreeMarkerConfigurationFactory extends Object; // Factory that configures a FreeMarker Configuration.\npublic class FreeMarkerConfigurationFactoryBean extends FreeMarkerConfigurationFactory implements org.springframework.beans.factory.FactoryBean<freemarker.template.Configuration>, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware; // Factory bean that creates a FreeMarker Configuration and provides it as bean reference.\npublic abstract class FreeMarkerTemplateUtils extends Object; // Utility class for working with FreeMarker.\npublic class SpringTemplateLoader extends Object implements freemarker.cache.TemplateLoader; // FreeMarker TemplateLoader adapter that loads via a Spring ResourceLoader.\n", "des": "Support classes for setting up FreeMarker within a Spring application context."}
{"index": 953, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: method\n\nSub Packages: \npackage method.dom; // Provides DOM-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\npackage method.jaxb; // Provides JAXB2-based implementations of the MethodArgumentResolver and MethodReturnValueHandler interfaces.\n\nClasses and Interfaces: \nInterface MethodArgumentResolver; // Strategy interface used to resolve method parameters into arguments.\nInterface MethodReturnValueHandler; // Strategy interface used to handle method return values.\nClass AbstractPayloadMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.\nClass AbstractPayloadSourceMethodProcessor; // Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.\nClass MarshallingPayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.\nClass MessageContextMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports MessageContext arguments.\nClass SourcePayloadMethodProcessor; // Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports Source objects.\nClass StaxPayloadMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports StAX XMLStreamReader and XMLEventReader arguments.\nClass XPathParamMethodArgumentResolver; // Implementation of MethodArgumentResolver that supports the @XPathParam annotation.\n", "des": "Provides the MethodArgumentResolver and MethodReturnValueHandler abstractions, and various implementations thereof."}
{"index": 3795, "repo": "lucene-analysis-common-9.7.0", "code": "Package: it\n\nClasses and Interfaces: \nClass ItalianAnalyzer; // Analyzer for Italian.\nClass ItalianLightStemFilter; // A TokenFilter that applies ItalianLightStemmer to stem Italian words.\nClass ItalianLightStemFilterFactory; // Factory for ItalianLightStemFilter.\nClass ItalianLightStemmer; // Light Stemmer for Italian.\n", "des": "Analyzer for Italian."}
{"index": 2331, "repo": "spring-boot-3.1.1", "code": "Package: init\n\nSub Packages: \npackage init.dependency; // Infrastructure for establishing database initialization bean dependencies.\n\nClasses and Interfaces: \npublic abstract class AbstractScriptDatabaseInitializer extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.InitializingBean; // Base class for an InitializingBean that performs SQL database initialization using schema (DDL) and data (DML) scripts.\npublic static class AbstractScriptDatabaseInitializer.Scripts extends Object implements Iterable<org.springframework.core.io.Resource>; // Scripts to be used to initialize the database.\npublic enum DatabaseInitializationMode extends Enum<DatabaseInitializationMode>; // Supported database initialization modes.\npublic class DatabaseInitializationSettings extends Object; // Settings for initializing an SQL database.\n", "des": "Support for initialization of an SQL database."}
{"index": 2534, "repo": "spring-security-core-6.1.2", "code": "Package: context\n\nClasses and Interfaces: \npublic interface DeferredSecurityContext extends Supplier<SecurityContext>; // An interface that allows delayed access to a SecurityContext that may be generated.\npublic final class ListeningSecurityContextHolderStrategy extends Object implements SecurityContextHolderStrategy; // An API for notifying when the SecurityContext changes.\npublic final class ObservationSecurityContextChangedListener extends Object implements SecurityContextChangedListener; // A SecurityContextChangedListener that adds events to an existing Observation If no Observation is present when an event is fired, then the event is unrecorded.\npublic final class ReactiveSecurityContextHolder extends Object; // Allows getting and setting the Spring SecurityContext into a Context.\npublic interface SecurityContext extends Serializable; // Interface defining the minimum security information associated with the current thread of execution.\npublic class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent; // An event that represents a change in SecurityContext\n@FunctionalInterface public interface SecurityContextChangedListener; // A listener for SecurityContextChangedEvents\npublic class SecurityContextHolder extends Object; // Associates a given SecurityContext with the current execution thread.\npublic interface SecurityContextHolderStrategy; // A strategy for storing security context information against a thread.\npublic class SecurityContextImpl extends Object implements SecurityContext; // Base implementation of SecurityContext.\n@Transient public class TransientSecurityContext extends SecurityContextImpl; // A SecurityContext that is annotated with @Transient and thus should never be stored across requests.\n", "des": "Classes related to the establishment of a security context for the duration of a request (such as an HTTP or RMI invocation)."}
{"index": 2005, "repo": "spring-integration-ws-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic abstract class BaseWsInboundGatewaySpec<S extends BaseWsInboundGatewaySpec<S,E>,E extends AbstractWebServiceInboundGateway> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,E>; // Base MessagingGatewaySpec for web services.\npublic abstract class BaseWsOutboundGatewaySpec<S extends BaseWsOutboundGatewaySpec<S,E>,E extends AbstractWebServiceOutboundGateway> extends org.springframework.integration.dsl.MessageHandlerSpec<S,E>; // The base MessageHandlerSpec for AbstractWebServiceOutboundGateways.\npublic class MarshallingWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<MarshallingWsInboundGatewaySpec,MarshallingWebServiceInboundGateway>; // The spec for a MarshallingWebServiceInboundGateway.\npublic class MarshallingWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec,MarshallingWebServiceOutboundGateway>; // The spec for a MarshallingWebServiceOutboundGateway.\npublic static class MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec,MarshallingWebServiceOutboundGateway>; // Spec for a MarshallingWebServiceOutboundGateway where an external WebServiceTemplate is not provided.\npublic class SimpleWsInboundGatewaySpec extends BaseWsInboundGatewaySpec<SimpleWsInboundGatewaySpec,SimpleWebServiceInboundGateway>; // The spec for a SimpleWebServiceInboundGateway.\npublic class SimpleWsOutboundGatewaySpec extends BaseWsOutboundGatewaySpec<SimpleWsOutboundGatewaySpec,SimpleWebServiceOutboundGateway>; // The spec for a SimpleWebServiceOutboundGateway.\npublic static class SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec,SimpleWebServiceOutboundGateway>; // Spec for a SimpleWebServiceOutboundGateway where an external WebServiceTemplate is not provided.\npublic final class Ws extends Object; // Factory class for web service components.\n", "des": "Contains classes for DSL support."}
{"index": 2957, "repo": "spring-integration-redis-6.1.2", "code": "Package: channel\n\nClasses and Interfaces: \npublic class SubscribableRedisChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.integration.channel.BroadcastCapableChannel, org.springframework.integration.support.management.ManageableSmartLifecycle; // An AbstractMessageChannel implementation with BroadcastCapableChannel aspect to provide a pub-sub semantics to consume messages fgrom Redis topic.\n", "des": "Provides classes related to Redis-backed channels."}
{"index": 3705, "repo": "solr-core-9.3.0", "code": "Package: security\n\nClasses and Interfaces: \nInterface AuditLoggerPlugin.AuditEventFormatter; // Interface for formatting the event\nInterface AuditLoggerPlugin.MuteRule;\nInterface AuthorizationPlugin; // Authorization interface that needs to be implemented to write an authorization plugin.\nInterface BasicAuthPlugin.AuthenticationProvider;\nInterface ConfigEditablePlugin; // An interface to be implemented by a Plugin whose Configuration is runtime editable\nInterface HttpClientBuilderPlugin; // Plugin interface for configuring internal HttpClients.\nInterface PermissionNameProvider; // A requestHandler should implement this interface to provide the well known permission at request time\nInterface VerifiedUserRoles; // Interface used to pass verified user roles in a Principal object.\nClass AllowListUrlChecker; // Validates URLs based on an allow list or a ClusterState in SolrCloud.\nClass AuditEvent; // Audit event that takes request and auth context as input to be able to audit log custom things.\nClass AuditLoggerPlugin; // Base class for Audit logger plugins.\nClass AuditLoggerPlugin.JSONAuditEventFormatter; // Event formatter that returns event as JSON string\nClass AuthenticationPlugin;\nClass AuthorizationContext; // Request context for Solr to be used by Authorization plugin.\nClass AuthorizationContext.CollectionRequest;\nClass AuthorizationResponse;\nClass AuthorizationUtils;\nClass AuthorizationUtils.AuthorizationFailure;\nClass BasicAuthPlugin;\nClass CertAuthPlugin; // An authentication plugin that sets principal based on the certificate subject\nClass ExternalRoleRuleBasedAuthorizationPlugin; // Rule Based Authz plugin implementation which reads user roles from the request.\nClass HttpServletAuthorizationContext; // An AuthorizationContext implementation that delegates many methods to an underlying HttpServletRequest\nClass MultiAuthPlugin; // Authentication plugin that supports multiple Authorization schemes, such as Bearer and Basic.\nClass MultiAuthRuleBasedAuthorizationPlugin; // Authorization plugin designed to work with the MultiAuthPlugin to support different AuthorizationPlugin per scheme.\nClass MultiDestinationAuditLogger; // Audit logger that chains other loggers.\nClass PKIAuthenticationPlugin;\nClass PKIAuthenticationPlugin.PKIHeaderData;\nClass PrintWriterWrapper; // Wrapper for PrintWriter that delegates to constructor arg\nClass PublicKeyAPI; // V2 API for fetching the public key of the receiving node.\nClass PublicKeyAPI.PublicKeyResponse;\nClass PublicKeyHandler;\nClass RuleBasedAuthorizationPlugin; // Original implementation of Rule Based Authz plugin which configures user/role mapping in the security.json configuration\n", "des": "Commonly used classes for Solr security framework."}
{"index": 2079, "repo": "spring-webmvc-6.0.11", "code": "Package: form\n\nClasses and Interfaces: \npublic abstract class AbstractCheckedElementTag extends AbstractHtmlInputElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering an HTML 'input' element with a 'type' of 'checkbox' or 'radio'.\npublic abstract class AbstractDataBoundFormElementTag extends AbstractFormTag implements EditorAwareTag; // Base tag for all data-binding aware JSP form tags.\npublic abstract class AbstractFormTag extends HtmlEscapingAwareTag; // Base class for all JSP form tags.\npublic abstract class AbstractHtmlElementBodyTag extends AbstractHtmlElementTag implements BodyTag; // Convenient superclass for many html tags that render content using the databinding features of the AbstractHtmlElementTag.\npublic abstract class AbstractHtmlElementTag extends AbstractDataBoundFormElementTag implements DynamicAttributes; // Base class for databinding-aware JSP tags that render HTML element.\npublic abstract class AbstractHtmlInputElementTag extends AbstractHtmlElementTag; // Base class for databinding-aware JSP tags that render HTML form input element.\npublic abstract class AbstractMultiCheckedElementTag extends AbstractCheckedElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering multiple HTML 'input' elements with a 'type' of 'checkbox' or 'radio'.\npublic abstract class AbstractSingleCheckedElementTag extends AbstractCheckedElementTag; // Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering a single HTML 'input' element with a 'type' of 'checkbox' or 'radio'.\npublic class ButtonTag extends AbstractHtmlElementTag; // The <button> tag renders a form field label in an HTML 'button' tag.\npublic class CheckboxesTag extends AbstractMultiCheckedElementTag; // The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'.\npublic class CheckboxTag extends AbstractSingleCheckedElementTag; // The <checkbox> tag renders an HTML 'input' tag with type 'checkbox'.\npublic class ErrorsTag extends AbstractHtmlElementBodyTag implements BodyTag; // The <errors> tag renders field errors in an HTML 'span' tag.\npublic class FormTag extends AbstractHtmlElementTag; // The <form> tag renders an HTML 'form' tag and exposes a binding path to inner tags for binding.\n", "des": "Spring's form tag library for JSP views in Spring's Web MVC framework."}
{"index": 3027, "repo": "spring-web-6.0.11", "code": "Package: request\n\nSub Packages: \npackage request.async; // Support for asynchronous request processing.\n\nClasses and Interfaces: \npublic abstract class AbstractRequestAttributes extends Object implements RequestAttributes; // Abstract support class for RequestAttributes implementations, offering a request completion mechanism for request-specific destruction callbacks and for updating accessed session attributes.\npublic abstract class AbstractRequestAttributesScope extends Object implements org.springframework.beans.factory.config.Scope; // Abstract Scope implementation that reads from a particular scope in the current thread-bound RequestAttributes object.\npublic interface AsyncWebRequestInterceptor extends WebRequestInterceptor; // Extends WebRequestInterceptor with a callback method invoked during asynchronous request handling.\npublic class DestructionCallbackBindingListener extends Object implements HttpSessionBindingListener, Serializable; // Adapter that implements the Servlet HttpSessionBindingListener interface, wrapping a session destruction callback.\npublic class FacesRequestAttributes extends Object implements RequestAttributes; // RequestAttributes adapter for a JSF FacesContext.\npublic class FacesWebRequest extends FacesRequestAttributes implements NativeWebRequest; // WebRequest adapter for a JSF FacesContext.\npublic interface NativeWebRequest extends WebRequest; // Extension of the WebRequest interface, exposing the native request and response objects in a generic fashion.\npublic interface RequestAttributes; // Abstraction for accessing attribute objects associated with a request.\npublic abstract class RequestContextHolder extends Object; // Holder class to expose the web request in the form of a thread-bound RequestAttributes object.\npublic class RequestContextListener extends Object implements ServletRequestListener; // Servlet listener that exposes the request to the current thread, through both LocaleContextHolder and RequestContextHolder.\npublic class RequestScope extends AbstractRequestAttributesScope; // Request-backed Scope implementation.\npublic class ServletRequestAttributes extends AbstractRequestAttributes; // Servlet-based implementation of the RequestAttributes interface.\npublic class ServletWebRequest extends ServletRequestAttributes implements NativeWebRequest; // WebRequest adapter for an HttpServletRequest.\npublic class SessionScope extends AbstractRequestAttributesScope; // Session-backed Scope implementation.\npublic interface WebRequest extends RequestAttributes; // Generic interface for a web request.\npublic interface WebRequestInterceptor; // Interface for general web request interception.\n", "des": "Support for generic request context holding, in particular for scoping of application objects per HTTP request or HTTP session."}
{"index": 2018, "repo": "spring-boot-devtools-3.1.1", "code": "Package: settings\n\nClasses and Interfaces: \npublic class DevToolsSettings extends Object; // DevTools settings loaded from /META-INF/spring-devtools.properties files.\n", "des": "Classes for loading DevTools settings."}
{"index": 3323, "repo": "opencms-core-15.0", "code": "Package: cacheadmin\n\nClasses and Interfaces: \nInterface CmsFlushCache.I_CloseableDialog; // Interface for the dialogs.\nClass CmsCacheAdminApp; // Vaadin app for Cache Administration.\nClass CmsCacheAdminConfiguration; // Configuration for Cache Administration vaadin-tool.\nClass CmsCacheFolder; // Class for the Cache folder.\nClass CmsCacheViewApp; // Class for the app which shows the content of caches.\nClass CmsCacheViewFlexConfiguration; // Configuration class for the view flex cache app.\nClass CmsCacheViewImageConfiguration; // Configuration class for the image cache view app.\nClass CmsConfirmSimpleFlushDialog; // Dialog to confirm flush without any options.\nClass CmsFlexCacheCleanDialog; // Dialog for clean flex cache.\nClass CmsFlexCacheTable; // Table showong content of flex cache.\nClass CmsFlushButtonHolderDialog; // Dialog for the flush actions.\nClass CmsFlushCache; // Vaadin Layout with Buttons to clear the different types of cache.\nClass CmsImageCacheCleanDialog; // Dialog to clean Image Cache.\nClass CmsImageCacheHelper; // Image Cache helper.\nClass CmsImageCacheHolder; // Helper class for getting information about cached images.\nClass CmsImageCacheInput; // class for the input dialog to search for cached images.\nClass CmsImageCacheTable; // Table to show entries of image cache.\nClass CmsImageVariationsTable; // Table showing information about variations of images.\nClass CmsVariationBean; // Bean for Variations im image resources.\nClass CmsVariationsDialog; // Class for the dialog to show variations of flex cache and image cache.\nEnum CmsCacheViewApp.Mode; // Modes to run this app.\n", "des": "Contains classes of the cache admin app."}
{"index": 2339, "repo": "spring-boot-3.1.1", "code": "Package: util\n\nClasses and Interfaces: \npublic class Instantiator<T> extends Object; // Simple factory used to instantiate objects by injecting available parameters.\npublic static interface Instantiator.AvailableParameters; // Callback used to register available parameters.\npublic static interface Instantiator.FailureHandler; // Strategy for handling a failure that occurs when instantiating a type.\npublic final class LambdaSafe extends Object; // Utility that can be used to invoke lambdas in a safe way.\npublic static final class LambdaSafe.Callback<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callback<C,A>>; // Represents a single callback that can be invoked in a lambda safe way.\npublic static final class LambdaSafe.Callbacks<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callbacks<C,A>>; // Represents a collection of callbacks that can be invoked in a lambda safe way.\npublic static final class LambdaSafe.InvocationResult<R> extends Object; // The result of a callback which may be a value, null or absent entirely if the callback wasn't suitable.\nprotected abstract static class LambdaSafe.LambdaSafeCallback<C,A,SELF extends LambdaSafe.LambdaSafeCallback<C,A,SELF>> extends Object; // Abstract base class for lambda safe callbacks.\n", "des": "Contains miscellaneous utility classes."}
{"index": 1106, "repo": "fontbox-3.0.0-beta1", "code": "Package: gsub\n\nClasses and Interfaces: \nInterface GlyphArraySplitter; // This class splits an array of GlyphIds with a prospective match.\nInterface GsubWorker; // This class is responsible for replacing GlyphIDs with new ones according to the GSUB tables.\nClass CompoundCharacterTokenizer; // Takes in the given text having compound-glyphs to substitute, and splits it into chunks consisting of parts that should be substituted and the ones that can be processed normally.\nClass GlyphArraySplitterRegexImpl; // This is an in-efficient implementation based on regex, which helps split the array.\nClass GlyphSubstitutionDataExtractor; // This class has utility methods to extract meaningful GsubData from the highly obfuscated GSUB Tables.\nClass GsubWorkerFactory; // Gets a Language specific instance of a GsubWorker\nClass GsubWorkerForBengali; // Bengali-specific implementation of GSUB system\nClass GsubWorkerForLatin; // Latin-specific implementation of GSUB system\n", "des": "This package contains utility classes which extract meanigful data from the highly obfuscated GSUB table structures."}
{"index": 405, "repo": "hbase-common-3.0.0-alpha-4", "code": "Package: types\n\nClasses and Interfaces: \nInterface DataType<T>; // DataType is the base class for all HBase data types.\nClass CopyOnWriteArrayMap<K,V>; // A Map that keeps a sorted array in order to provide the concurrent map interface.\nClass FixedLengthWrapper<T>; // Wraps an existing DataType implementation as a fixed-length version of itself.\nClass OrderedBlob; // A byte[] of variable-length.\nClass OrderedBlobVar; // An alternative to OrderedBlob for use by Struct fields that do not terminate the fields list.\nClass OrderedBytesBase<T>; // Base class for data types backed by the OrderedBytes encoding implementations.\nClass OrderedFloat32; // A float of 32-bits using a fixed-length encoding.\nClass OrderedFloat64; // A double of 64-bits using a fixed-length encoding.\nClass OrderedInt16; // A short of 16-bits using a fixed-length encoding.\nClass OrderedInt32; // An int of 32-bits using a fixed-length encoding.\nClass OrderedInt64; // A long of 64-bits using a fixed-length encoding.\nClass OrderedInt8; // A byte of 8-bits using a fixed-length encoding.\nClass OrderedNumeric; // An Number of arbitrary precision and variable-length encoding.\nClass OrderedString; // A String of variable-length.\nClass RawByte; // An DataType for interacting with values encoded using Bytes.putByte(byte[], int, byte).\nClass RawBytes; // An DataType for interacting with variable-length values encoded using Bytes.putBytes(byte[], int, byte[], int, int).\nClass RawBytesFixedLength; // An DataType that encodes fixed-length values encoded using Bytes.putBytes( byte[], int, byte[], int, int).\nClass RawBytesTerminated; // An DataType that encodes variable-length values encoded using Bytes.putBytes(byte[], int, byte[], int, int).\nClass RawDouble; // An DataType for interacting with values encoded using Bytes.putDouble(byte[], int, double).\nClass RawFloat; // An DataType for interacting with values encoded using Bytes.putFloat(byte[], int, float).\nClass RawInteger; // An DataType for interacting with values encoded using Bytes.putInt(byte[], int, int).\n", "des": "This package provides the definition and implementation of HBase's extensible data type API."}
{"index": 3095, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic class EnumerationIterator<T> extends Object implements Iterator<T>; // Adapts an Enumeration to follow the interface of Iterator.\npublic abstract class TransportUtils extends Object; // Generic utility methods for working with Web service transports.\npublic abstract class WebServiceMessageReceiverObjectSupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenience base class for server-side transport objects.\n", "des": "Classes supporting the org.springframework.ws.transport package."}
{"index": 3196, "repo": "tomcat-api-10.1", "code": "Package: file\n\nClasses and Interfaces: \nInterface ConfigurationSource; // Abstracts configuration file storage.\nClass ConfigFileLoader; // This class is used to obtain InputStreams for configuration files from a given location String.\nClass ConfigurationSource.Resource; // Represents a resource: a stream to the resource associated with its URI.\nClass Matcher; // This is a utility class to match file globs.\n", "des": "This package contains utility classes for file handling."}
{"index": 2092, "repo": "spring-webflux-6.0.11", "code": "Package: config\n\nClasses and Interfaces: \npublic class CorsRegistration extends Object; // Assists with the creation of a CorsConfiguration instance for a given URL path pattern.\npublic class CorsRegistry extends Object; // Assists with the registration of global, URL pattern based CorsConfiguration mappings.\n@Configuration(proxyBeanMethods=false) public class DelegatingWebFluxConfiguration extends WebFluxConfigurationSupport; // A subclass of WebFluxConfigurationSupport that detects and delegates to all beans of type WebFluxConfigurer allowing them to customize the configuration provided by WebFluxConfigurationSupport.\n@Retention(RUNTIME) @Target(TYPE) @Documented @Import(DelegatingWebFluxConfiguration.class) public @interface EnableWebFlux; // Adding this annotation to an @Configuration class imports the Spring WebFlux configuration from WebFluxConfigurationSupport that enables use of annotated controllers and functional endpoints.\npublic class PathMatchConfigurer extends Object; // Assist with configuring HandlerMapping's with path matching options.\npublic class ResourceChainRegistration extends Object; // Assists with the registration of resource resolvers and transformers.\npublic class ResourceHandlerRegistration extends Object; // Assist with creating and configuring a static resources handler.\npublic class ResourceHandlerRegistry extends Object; // Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring WebFlux including setting cache headers optimized for efficient loading in a web browser.\npublic class UrlBasedViewResolverRegistration extends Object; // Assist with configuring properties of a UrlBasedViewResolver.\npublic class ViewResolverRegistry extends Object; // Assist with the configuration of a chain of ViewResolver's supporting different template mechanisms.\npublic class WebFluxConfigurationSupport extends Object implements org.springframework.context.ApplicationContextAware; // The main class for Spring WebFlux configuration.\npublic interface WebFluxConfigurer; // Defines callback methods to customize the configuration for WebFlux applications enabled via @EnableWebFlux.\npublic class WebFluxConfigurerComposite extends Object implements WebFluxConfigurer; // A WebFluxConfigurer that delegates to one or more others.\n", "des": "Spring WebFlux configuration infrastructure."}
{"index": 1588, "repo": "spring-websocket-6.0.11", "code": "Package: standard\n\nClasses and Interfaces: \npublic abstract class ConvertingEncoderDecoderSupport<T,M> extends Object; // Base class that can be used to implement a standard Encoder and/or Decoder.\npublic abstract static class ConvertingEncoderDecoderSupport.BinaryDecoder<T> extends ConvertingEncoderDecoderSupport<T,ByteBuffer> implements Decoder.Binary<T>; // A binary jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.BinaryEncoder<T> extends ConvertingEncoderDecoderSupport<T,ByteBuffer> implements Encoder.Binary<T>; // A binary jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.TextDecoder<T> extends ConvertingEncoderDecoderSupport<T,String> implements Decoder.Text<T>; // A Text jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic abstract static class ConvertingEncoderDecoderSupport.TextEncoder<T> extends ConvertingEncoderDecoderSupport<T,String> implements Encoder.Text<T>; // A text jakarta.websocket.Encoder that delegates to Spring's conversion service.\npublic class StandardToWebSocketExtensionAdapter extends WebSocketExtension; // A subclass of WebSocketExtension that can be constructed from a Extension.\npublic class StandardWebSocketHandlerAdapter extends Endpoint; // Adapts a WebSocketHandler to the standard WebSocket for Java API.\npublic class StandardWebSocketSession extends AbstractWebSocketSession<Session>; // A WebSocketSession for use with the standard WebSocket for Java API.\npublic class WebSocketToStandardExtensionAdapter extends Object implements Extension; // Adapt an instance of WebSocketExtension to the Extension interface.\n", "des": "Adapter classes for the standard Jakarta WebSocket API."}
{"index": 2504, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: zipkin\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration.class) @ConditionalOnClass(zipkin2.reporter.Sender.class) @Import({org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.SenderConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.ReporterConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.BraveConfiguration.class,org.springframework.boot.actuate.autoconfigure.tracing.zipkin.ZipkinConfigurations.OpenTelemetryConfiguration.class}) @ConditionalOnEnabledTracing @EnableConfigurationProperties(ZipkinProperties.class) public class ZipkinAutoConfiguration extends Object; // Auto-configuration for Zipkin.\npublic interface ZipkinConnectionDetails extends org.springframework.boot.autoconfigure.service.connection.ConnectionDetails; // Details required to establish a connection to a Zipkin server.\n@ConfigurationProperties(\"management.zipkin.tracing\") public class ZipkinProperties extends Object; // Configuration properties for ZipkinAutoConfiguration.\n@FunctionalInterface public interface ZipkinRestTemplateBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the RestTemplateBuilder used to send spans to Zipkin.\n@FunctionalInterface public interface ZipkinWebClientBuilderCustomizer; // Callback interface that can be implemented by beans wishing to customize the WebClient.Builder used to send spans to Zipkin.\n", "des": "Auto-configuration for tracing with Zipkin."}
{"index": 2996, "repo": "spring-web-6.0.11", "code": "Package: observation\n\nClasses and Interfaces: \npublic enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for HTTP client observations.\npublic static enum ClientHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ClientHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ClientHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ClientRequestObservationContext extends io.micrometer.observation.transport.RequestReplySenderContext<ClientHttpRequest,ClientHttpResponse>; // Context that holds information for metadata collection during the client HTTP exchanges observations.\npublic interface ClientRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ClientRequestObservationContext>; // Interface for an ObservationConvention for client HTTP exchanges.\npublic class DefaultClientRequestObservationConvention extends Object implements ClientRequestObservationConvention; // Default implementation for a ClientRequestObservationConvention, extracting information from the ClientRequestObservationContext.\n", "des": "This package provides support for client HTTP Observation."}
{"index": 211, "repo": "nutch-2.4", "code": "Package: net\n\nSub Packages: \npackage net.protocols; // Helper classes related to the Protocol interface, sea also org.apache.nutch.protocol.\n\nClasses and Interfaces: \nInterface URLFilter; // Interface used to limit which URLs enter Nutch.\nInterface URLNormalizer; // Interface used to convert URLs to normal form and optionally perform substitutions\nClass URLFilterChecker; // Checks one given filter or all filters.\nClass URLFilters; // Creates and caches URLFilter implementing plugins.\nClass URLNormalizerChecker; // Checks one given normalizer or all normalizers.\nClass URLNormalizers; // This class uses a \"chained filter\" pattern to run defined normalizers.\nClass URLFilterException;\n", "des": "Web-related interfaces: URL filters and normalizers."}
{"index": 2853, "repo": "spring-integration-core-6.1.2", "code": "Package: dispatcher\n\nClasses and Interfaces: \npublic abstract class AbstractDispatcher extends Object implements MessageDispatcher; // Base class for MessageDispatcher implementations.\npublic class AggregateMessageDeliveryException extends org.springframework.messaging.MessageDeliveryException; // An Exception that encapsulates an aggregated group of Exceptions for use by dispatchers that may try multiple handler invocations within a single dispatch operation.\npublic class BroadcastingDispatcher extends AbstractDispatcher implements org.springframework.beans.factory.BeanFactoryAware; // A broadcasting dispatcher implementation.\n@FunctionalInterface public interface LoadBalancingStrategy; // Strategy for determining the iteration order of a MessageHandler list.\npublic interface MessageDispatcher; // Strategy interface for dispatching messages to handlers.\n@FunctionalInterface public interface MessageHandlingTaskDecorator; // The strategy to decorate MessageHandlingRunnable tasks to be used with the Executor.\npublic class PartitionedDispatcher extends AbstractDispatcher; // An AbstractDispatcher implementation for distributing messages to dedicated threads according to the key determined by the provided function against the message to dispatch.\npublic class RoundRobinLoadBalancingStrategy extends Object implements LoadBalancingStrategy; // Round-robin implementation of LoadBalancingStrategy.\npublic class UnicastingDispatcher extends AbstractDispatcher; // Implementation of MessageDispatcher that will attempt to send a Message to at most one of its handlers.\n", "des": "Provides classes related to dispatching messages."}
{"index": 145, "repo": "ignite-core-2.15.0", "code": "Package: indexing\n\nClasses and Interfaces: \nClass GridIndexingManager; // Manages cache indexing.\nClass IndexesRebuildTask; // Task that rebuilds indexes.\n", "des": "Indexing manager classes."}
{"index": 154, "repo": "ignite-core-2.15.0", "code": "Package: pagemem\n\nClasses and Interfaces: \nInterface LoadedPagesMap; // Interface for storing correspondence of page ID in a cache group to long value (address in offheap segment).\nInterface LoadedPagesMap.KeyPredicate; // Interface describing a predicate for Key (cache group ID, page ID).\nInterface PageMemoryEx; // Page memory with some persistence related additions.\nInterface PageMetrics; // Container for different memory page-related metrics.\nInterface PageReadWriteManager;\nInterface PageReplacementPolicyFactory; // Page replacement policy factory.\nInterface PagesWriteThrottlePolicy; // Throttling policy, encapsulates logic of delaying write operations.\nClass CheckpointMetricsTracker; // Tracks various checkpoint phases and stats.\nClass ClockPageReplacementFlags; // Clock page replacement algorithm implementation.\nClass ClockPageReplacementPolicy; // CLOCK page replacement policy implementation.\nClass ClockPageReplacementPolicyFactory; // ClockPageReplacementPolicy factory.\nClass DelayedDirtyPageStoreWrite; // Not thread safe and stateful class for page replacement of one page with write() delay.\nClass DelayedPageReplacementTracker; // Delayed page writes tracker.\nClass FullPageIdTable;\nClass PageMemoryImpl; // Page header structure is described by the following diagram.\nClass PageMetricsImpl;\nClass PageMetricsImpl.Builder; // Builder for PageMetricsImpl instances.\nClass PagePool;\nClass PageReadWriteManagerImpl;\nClass PageReplacementPolicy; // Abstract page replacement policy.\nClass PagesWriteSpeedBasedThrottle; // Throttles threads that generate dirty pages during ongoing checkpoint.\nClass PagesWriteThrottle; // Throttles threads that generate dirty pages during ongoing checkpoint.\nClass RandomLruPageReplacementPolicy; // Random-LRU page replacement policy implementation.\nClass RandomLruPageReplacementPolicyFactory; // RandomLruPageReplacementPolicy factory.\nClass ReplaceCandidate; // Replacement removal candidate.\nClass RobinHoodBackwardShiftHashMap; // Loaded pages mapping to relative pointer based on Robin Hood hashing: backward shift deletion algorithm.\nClass SegmentedLruPageList; // Pages Segmented-LRU (SLRU) list implementation.\nClass SegmentedLruPageReplacementPolicy; // Segmented-LRU page replacement policy implementation.\nClass SegmentedLruPageReplacementPolicyFactory; // SegmentedLruPageReplacementPolicy factory.\n", "des": "This package contains page memory implementation for case persitence is enabled."}
{"index": 2811, "repo": "spring-integration-ip-6.1.2", "code": "Package: tcp\n\nSub Packages: \npackage tcp.connection; // All things related to tcp connections - client and server factories; listener and sender interfaces.\npackage tcp.serializer; // Byte array (de)serializers for putting some protocol on the wire so that incoming messages can be constructed from stream data.\n\nClasses and Interfaces: \npublic class TcpInboundGateway extends org.springframework.integration.gateway.MessagingGatewaySupport implements TcpListener, TcpSender, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable; // Inbound Gateway using a server connection factory - threading is controlled by the factory.\npublic class TcpOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler implements TcpSender, TcpListener, org.springframework.integration.support.management.ManageableLifecycle; // TCP outbound gateway that uses a client connection factory.\npublic class TcpReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements TcpListener, ClientModeCapable, org.springframework.integration.context.OrderlyShutdownCapable; // Tcp inbound channel adapter using a TcpConnection to receive data - if the connection factory is a server factory, this Listener owns the connections.\npublic class TcpSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements TcpSender, org.springframework.integration.support.management.ManageableLifecycle, ClientModeCapable; // Tcp outbound channel adapter using a TcpConnection to send data - if the connection factory is a server factory, the TcpListener owns the connections.\n", "des": "Base package for TCP Support."}
{"index": 3344, "repo": "opencms-core-15.0", "code": "Package: contextmenu\n\nClasses and Interfaces: \nInterface CmsContextMenu.ContextMenuClosedListener; // ContextMenuClosedListener is used to listen for the event that the context menu is closed, either when a item is clicked or when the popup is canceled.\nInterface CmsContextMenu.ContextMenuItemClickListener; // ContextMenuItemClickListener is listener for context menu items wanting to notify listeners about item click\nInterface CmsContextMenu.ContextMenuOpenedListener; // ContextMenuOpenedListener is used to modify the content of context menu based on what was clicked.\nInterface CmsContextMenu.ContextMenuOpenedListener.ComponentListener; // ComponentListener is used when context menu is extending a component and works in mode where auto opening is disabled.\nInterface CmsContextMenu.ContextMenuOpenedListener.TableListener; // ContextMenuOpenedListener.TableListener sub interface for table related context menus.\nInterface CmsContextMenu.ContextMenuOpenedListener.TreeListener; // Tree listener interface.\nInterface I_CmsContextMenuAction; // Action to perform when a context menu item is clicked.\nInterface I_CmsContextMenuBuilder; // Builds an explorer context menu based on the set of selected resources' IDs.\nInterface I_CmsContextMenuItem; // Interface for workplace context menu items.\nInterface I_CmsContextMenuItemProvider; // Interface for classes which provide context menu items.\nInterface I_CmsHasMenuItemVisibility; // Interface used to check menu item visibility for context menus.\nInterface I_CmsSimpleContextMenuEntry<T>; // Interface for generic context menu entris.\nInterface I_CmsSimpleContextMenuEntry.I_HasCssStyles; // This interface allows special styles for certain entries.\nClass A_CmsSimpleVisibilityCheck; // Abstract superclass for menu item visibility checks.\nClass CmsBlockingLockCheck; // A wrapper context menu action which first checks whether the resources for which the action is executed have any children locked by different users.\nClass CmsContextMenu; // ContextMenu is an extension which can be attached to any Vaadin component to display a popup context menu.\nClass CmsContextMenu.ContextMenuClosedEvent; // ContextMenuClosedEvent is an event fired by the context menu when it's closed.\nClass CmsContextMenu.ContextMenuItemClickEvent; // ContextMenuItemClickEvent is an event produced by the context menu item when it is clicked.\nClass CmsContextMenu.ContextMenuOpenedOnComponentEvent; // ContextMenuOpenedOnComponentEvent is an event fired by the context menu when it's opened from a component.\n", "des": "Contains code for workplace context menu."}
{"index": 1920, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: rest\n\nClasses and Interfaces: \n@AutoConfiguration(after={HttpMessageConvertersAutoConfiguration.class,JacksonAutoConfiguration.class}) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnMissingBean(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) @ConditionalOnClass(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) @EnableConfigurationProperties(RepositoryRestProperties.class) @Import(org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration.class) public class RepositoryRestMvcAutoConfiguration extends Object; // Auto-configuration for Spring Data Rest's MVC integration.\n@ConfigurationProperties(prefix=\"spring.data.rest\") public class RepositoryRestProperties extends Object; // Configuration properties for Spring Data REST.\n", "des": "Auto-configuration for Spring Data REST."}
{"index": 2502, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: prometheus\n\nClasses and Interfaces: \n@AutoConfiguration(before=PrometheusMetricsExportAutoConfiguration.class, after=MicrometerTracingAutoConfiguration.class) @ConditionalOnBean(io.micrometer.tracing.Tracer.class) @ConditionalOnClass({io.micrometer.tracing.Tracer.class,io.prometheus.client.exemplars.tracer.common.SpanContextSupplier.class}) @ConditionalOnEnabledTracing public class PrometheusExemplarsAutoConfiguration extends Object; // Auto-configuration for Prometheus Exemplars with Micrometer Tracing.\n", "des": "Auto-configuration for Prometheus Exemplars with Micrometer Tracing."}
{"index": 2155, "repo": "wicket-core-10.0.0-M1", "code": "Package: panel\n\nClasses and Interfaces: \npublic abstract class AbstractMarkupSourcingStrategy extends Object implements IMarkupSourcingStrategy; // Implements boilerplate as needed by many markup sourcing strategies.\npublic abstract class AssociatedMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // Boilerplate for a markup sourcing strategy which retrieves the markup from associated markup files.\npublic class BorderMarkupSourcingStrategy extends AssociatedMarkupSourcingStrategy; // The Border component's markup sourcing strategy\npublic class ComponentFeedbackPanel extends FeedbackPanel; // Convenience feedback panel that filters the feedback messages based on the component given in the constructor.\npublic final class DefaultMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // This is a no-op sourcing strategy implementing the default behavior for most components.\npublic final class EmptyPanel extends Panel; // Panel that does absolutely nothing and that can be used to display an empty block.\npublic class FeedbackPanel extends Panel implements IFeedback; // A panel that displays FeedbackMessages in a list view.\npublic class Fragment extends WebMarkupContainer implements IQueueRegion; // Usually you either have a markup file or a xml tag with wicket:id=\"myComponent\" to associate markup with a component.\npublic class FragmentMarkupSourcingStrategy extends AbstractMarkupSourcingStrategy; // A markup sourcing strategy suitable for Fragment components.\npublic class GenericPanel<T> extends Panel implements IGenericComponent<T,GenericPanel<T>>; // A Panel with typesafe getters and setters for the model and its underlying object\npublic interface IMarkupSourcingStrategy; // Markup sourcing strategies determine whether a Component behaves like a \"Panel\" pulling its Markup from an associated Markup file, or like a Fragment pulling it from a another components Markup.\npublic abstract class Panel extends WebMarkupContainer implements IQueueRegion; // A panel is a reusable component that holds markup and other components.\npublic class PanelMarkupSourcingStrategy extends AssociatedMarkupSourcingStrategy; // The Panel components markup sourcing strategy.\n", "des": "Panel components."}
{"index": 1614, "repo": "spring-data-neo4j-7.1.2", "code": "Package: transaction\n\nClasses and Interfaces: \n@API(status=STABLE, since=\"6.1.1\") public sealed interface Neo4jBookmarkManager; // Responsible for storing, updating and retrieving the bookmarks of Neo4j's transaction.\n@API(status=STABLE, since=\"6.1.1\") public final class Neo4jBookmarksUpdatedEvent extends ApplicationEvent; // This event will be published after a Neo4j transaction manager physically committed a transaction without errors and received a new set of bookmarks from the cluster.\n@API(status=STABLE, since=\"6.0\") public final class Neo4jTransactionManager extends AbstractPlatformTransactionManager implements ApplicationContextAware; // Dedicated PlatformTransactionManager for native Neo4j transactions.\n@API(status=STABLE, since=\"6.2\") public static final class Neo4jTransactionManager.Builder extends Object; // A builder for Neo4jTransactionManager.\npublic final class Neo4jTransactionUtils extends Object; // Internal use only.\n@API(status=STABLE, since=\"6.0\") public final class ReactiveNeo4jTransactionManager extends AbstractReactiveTransactionManager implements ApplicationContextAware;\n@API(status=STABLE, since=\"6.2\") public static final class ReactiveNeo4jTransactionManager.Builder extends Object; // A builder for ReactiveNeo4jTransactionManager.\n", "des": "Contains the core infrastructure for translating unmanaged Neo4j transaction into Spring managed transactions."}
{"index": 1440, "repo": "spring-boot-actuator-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \npublic class DispatcherHandlerMappingDescription extends Object; // A description of a mapping known to a DispatcherServlet.\npublic class DispatcherHandlerMappingDetails extends Object; // Details of a DispatcherHandler mapping.\n@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.reactive.DispatcherHandlersMappingDescriptionProvider.DispatcherHandlersMappingDescriptionProviderRuntimeHints.class) public class DispatcherHandlersMappingDescriptionProvider extends Object implements MappingDescriptionProvider; // A MappingDescriptionProvider that introspects the HandlerMappings that are known to a DispatcherHandler.\npublic class HandlerFunctionDescription extends Object; // Description of a HandlerFunction.\npublic class RequestMappingConditionsDescription extends Object; // Description of the conditions of a RequestMappingInfo.\npublic static class RequestMappingConditionsDescription.MediaTypeExpressionDescription extends Object; // A description of a MediaTypeExpression in a request mapping condition.\npublic static class RequestMappingConditionsDescription.NameValueExpressionDescription extends Object; // A description of a NameValueExpression in a request mapping condition.\n", "des": "Actuator reactive request mappings support."}
{"index": 3012, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter; // Extension of FormHttpMessageConverter, adding support for XML and JSON-based parts.\n", "des": "Provides a comprehensive HttpMessageConverter variant for form handling."}
{"index": 1976, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: rsocket\n\nClasses and Interfaces: \n@AutoConfiguration @EnableRSocketSecurity @ConditionalOnClass(org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor.class) public class RSocketSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security for an RSocket server.\n", "des": "Auto-configuration for RSocket support in Spring Security."}
{"index": 566, "repo": "hadoop-common-3.3.4", "code": "Package: sink\n\nClasses and Interfaces: \nClass FileSink; // A metrics sink that writes to a file\nClass GraphiteSink; // A metrics sink that writes to a Graphite server\nClass GraphiteSink.Graphite;\nClass PrometheusMetricsSink; // Metrics sink for prometheus exporter.\nClass RollingFileSystemSink; // This class is a metrics sink that uses FileSystem to write the metrics logs.\nClass StatsDSink; // A metrics sink that writes metrics to a StatsD daemon.\nClass StatsDSink.StatsD; // Class that sends UDP packets to StatsD daemon.\n", "des": "Builtin metrics sinks"}
{"index": 2617, "repo": "wicket-util-10.0.0-M1", "code": "Package: value\n\nClasses and Interfaces: \npublic final class AttributeMap extends ValueMap; // Map of values, extending ValueMap with methods for generating (HTML) markup attributes.\npublic class CopyOnWriteValueMap extends Object implements IValueMap, Serializable; // An implementation of IValueMap that makes a copy when a caller tries to change an immutable Map.\npublic class IntValue extends Object implements Comparable<IntValue>, Serializable; // A base class based on the Java int primitive for value classes that want to implement standard operations on that value without the pain of aggregating an Integer object.\npublic interface IValueMap extends Map<String,Object>; // A Map interface that holds values, parses Strings, and exposes a variety of convenience methods.\npublic class LongValue extends Object implements Comparable<LongValue>, Serializable; // A base class based on the Java long primitive for value classes that want to implement standard operations on that value without the pain of aggregating a Long object.\npublic class ValueMap extends LinkedHashMap<String,Object> implements IValueMap; // A IValueMap implementation that holds values, parses Strings, and exposes a variety of convenience methods.\n", "des": "This package provides casting utilities."}
{"index": 3317, "repo": "opencms-core-15.0", "code": "Package: xmlsitemap\n\nClasses and Interfaces: \nClass CmsDetailPageDuplicateEliminatingSitemapGenerator; // Sitemap generator class which tries to eliminate duplicate detail pages for the same content and locale.\nClass CmsPathIncludeExcludeSet; // A helper class used for calculating which paths need to be included or excluded from the XML sitemap generation.\nClass CmsUpdateXmlSitemapCacheJob; // Scheduled job for updating the XML sitemap cache.\nClass CmsXmlSeoConfiguration; // Configuration bean which represents the options which are configurable from a 'seo-file' resource.\nClass CmsXmlSitemapActionElement; // Action element class for displaying the XML sitemap from a JSP.\nClass CmsXmlSitemapCache; // Cache for XML sitemaps.\nClass CmsXmlSitemapGenerator; // Class for generating XML sitemaps for SEO purposes, as described in http://www.sitemaps.org/protocol.html.\nClass CmsXmlSitemapUrlBean; // A bean which represents an entry in an XML sitemap for SEO purposes.\n", "des": "Contains classes related to XML sitemap generation."}
{"index": 1870, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: shiro\n\nSub Packages: \npackage shiro.aop; // Components used to support the framework's AOP/interception support classes.\npackage shiro.authc; // Core interfaces and exceptions concerning Authentication (the act of logging-in).\npackage shiro.authz; // Core interfaces and exceptions supporting Authorization (access control).\npackage shiro.concurrent; // Executor, ExecutorService, and ScheduledExecutorService implementations for transparent Subject association with threads in an asynchronous execution environment.\npackage shiro.dao; // Package containing various components useful when building Data Access Objects (DAOs), including a generic Data Access Exception hierarchy.\npackage shiro.env; // Concepts used to represent Shiro's aggregate state in an application.\npackage shiro.jndi; // Enables accessing objects located in JNDI that might be useful when configuring a Shiro-enabled application.\npackage shiro.mgt; // Provides the master SecurityManager interface and a default implementation hierarchy for managing all aspects of Shiro's functionality in an application.\npackage shiro.realm; // Components and sub-packages used in supporting the core Realm interface.\npackage shiro.session; // Components related to managing sessions, the time-based data contexts in which a Subject interacts with an application.\npackage shiro.subject; // Components supporting the Subject interface, the most important concept in Shiro's API.\npackage shiro.util; // Your run-of-the-mill 'util' package for components and logic widely used across the framework that can't find their home into a proper OO hierarchy (or, most likely for things used across many hierarchies).\n\nClasses and Interfaces: \npublic abstract class SecurityUtils extends Object; // Accesses the currently accessible Subject for the calling code depending on runtime environment.\npublic class UnavailableSecurityManagerException extends org.apache.shiro.lang.ShiroException; // Exception thrown when attempting to acquire the application's SecurityManager instance, but Shiro's lookup heuristics cannot find one.\n", "des": "This package primarily exists as a root classpath distinction, but it does contain two core classes widely used by applications, SecurityUtils and ShiroException."}
{"index": 3005, "repo": "spring-web-6.0.11", "code": "Package: xml\n\nClasses and Interfaces: \npublic class Jaxb2XmlDecoder extends org.springframework.core.codec.AbstractDecoder<Object>; // Decode from a bytes stream containing XML elements to a stream of Objects (POJOs).\npublic class Jaxb2XmlEncoder extends org.springframework.core.codec.AbstractSingleValueEncoder<Object>; // Encode from single value to a byte stream containing XML elements.\npublic class XmlEventDecoder extends org.springframework.core.codec.AbstractDecoder<XMLEvent>; // Decodes a DataBuffer stream into a stream of XMLEvents.\n", "des": "XML encoder and decoder support."}
{"index": 1648, "repo": "jena-core-4.9.0", "code": "Package: mem\n\nClasses and Interfaces: \npublic class ArrayBunch extends Object implements TripleBunch; // An ArrayBunch implements TripleBunch with a linear search of a short-ish array of Triples.\npublic interface BunchMap; // A pruned (and slightly stewed) version of Map, containing just those operations required by NodeToTriplesMaps.\npublic class FieldFilter extends Object; // A class that encapsulates a filter on fields on a triple.\n@Deprecated public class GraphMem extends GraphMemBase;\npublic abstract class GraphMemBase extends GraphBase; // GraphMemBase - a common base class for GraphMem and SmallGraphMem.\npublic abstract class GraphTripleStoreBase extends Object implements TripleStore;\npublic class GraphTripleStoreMem extends GraphTripleStoreBase implements TripleStore;\npublic abstract class HashCommon<Key> extends Object; // Shared stuff for our hashing implementations: does the base work for hashing and growth sizes.\npublic static interface HashCommon.NotifyEmpty; // A hashed structure may become empty as a side-effect of a .remove on one of its iterators: a container can request notification of this by passing a NotifyEmpty object in when the iterator is constructed, and its emptied method is called when the bunch becomes empty.\npublic class HashedBunchMap extends HashCommon<Object> implements BunchMap; // An implementation of BunchMap that does open-addressed hashing.\npublic class HashedTripleBunch extends HashCommon<Triple> implements TripleBunch;\npublic abstract class NodeToTriplesMapBase extends Object; // A base class for in-memory graphs\npublic class NodeToTriplesMapMem extends NodeToTriplesMapBase;\npublic abstract class ObjectIterator extends NiceIterator<Node>; // Helper class for listObjects.\npublic class SparseArraySpliterator<E> extends Object implements Spliterator<E>; // A spliterator for sparse arrays.\npublic class SparseArraySubSpliterator<E> extends Object implements Spliterator<E>; // A spliterator for sparse arrays.\npublic class StoreTripleIterator extends TrackingTripleIterator; // An iterator wrapper for NodeToTriplesMap iterators which ensures that a .remove on the base iterator is copied to the other two maps of this GraphMem.\n", "des": "Various memory-based implementations of interfaces, specifically GraphMem for memory-based Graphs."}
{"index": 3394, "repo": "commons-imaging-1.0-alpha3", "code": "Package: jpeg\n\nSub Packages: \npackage jpeg.decoder; // JPEG image format decoder.\npackage jpeg.exif; // JPEG image format Exif utilities.\npackage jpeg.iptc; // JPEG image format IPTC metadata.\npackage jpeg.segments; // JPEG image format segments.\npackage jpeg.xmp; // JPEG image format XMP metadata.\n\nClasses and Interfaces: \nInterface JpegUtils.Visitor;\nClass JpegConstants;\nClass JpegImageMetadata;\nClass JpegImageParser;\nClass JpegImagingParameters; // Jpeg format parameters.\nClass JpegPhotoshopMetadata;\nClass JpegUtils;\n", "des": "The JPEG image format."}
{"index": 1228, "repo": "spring-hateoas-2.1.2", "code": "Package: hateoas\n\nSub Packages: \npackage hateoas.client; // Client side support.\npackage hateoas.config; // Spring container configuration support.\npackage hateoas.mediatype; // Spring container configuration support.\npackage hateoas.server; // Server-side components for hypermedia handling.\npackage hateoas.support; // Support utilities for hypermedia handling.\n\nClasses and Interfaces: \npublic final class Affordance extends Object implements Iterable<AffordanceModel>; // Hold the AffordanceModels for all supported media types.\npublic abstract class AffordanceModel extends Object; // Collection of attributes needed to render any form of hypermedia.\npublic static interface AffordanceModel.InputPayloadMetadata extends AffordanceModel.PayloadMetadata; // Payload metadata for incoming requests.\npublic static interface AffordanceModel.Named; // A named component.\npublic static interface AffordanceModel.PayloadMetadata; // Metadata about payloads.\npublic static interface AffordanceModel.PropertyMetadata extends AffordanceModel.Named; // Metadata about the property model of a representation.\npublic static interface AffordanceModel.PropertyMetadataConfigured<T>; // SPI for a type that can get AffordanceModel.PropertyMetadata applied.\npublic class CollectionModel<T> extends RepresentationModel<CollectionModel<T>> implements Iterable<T>, ResolvableTypeProvider; // General helper to easily create a wrapper for a collection of entities.\npublic class EntityModel<T> extends RepresentationModel<EntityModel<T>>; // A simple EntityModel wrapping a domain object and adding links to it.\npublic final class IanaLinkRelations extends Object; // Capture standard IANA-based link relations.\npublic class IanaUriSchemes extends Object; // A list of well-defined URI schemes governed by IANA.\n@Documented @Retention(RUNTIME) @Target({FIELD,METHOD,ANNOTATION_TYPE}) public @interface InputType; // Annotation to declare a dedicated input type for a property of an representation model.\npublic class Link extends Object implements Serializable; // Value object for links.\npublic interface LinkRelation; // Interface for defining link relations.\npublic class Links extends Object implements Iterable<Link>; // Value object to represent a list of Links.\n", "des": "Value objects to ease creating Links and link driven representations for REST webservices."}
{"index": 1328, "repo": "groovy-all-4.0.13", "code": "Package: expr\n\nClasses and Interfaces: \npublic class AnnotationConstantExpression extends ConstantExpression; // Represents an annotation \"constant\" that may appear in annotation attributes (mainly used as a marker).\npublic class ArgumentListExpression extends TupleExpression; // Represents one or more arguments being passed into a method\npublic class ArrayExpression extends Expression; // Represents an array object construction.\npublic class AttributeExpression extends PropertyExpression; // Represents an attribute access (accessing the field of a class) such as the expression \"foo.@bar\".\npublic class BinaryExpression extends Expression; // Represents two expressions and an operation\npublic class BitwiseNegationExpression extends Expression;\npublic class BooleanExpression extends Expression; // Represents a boolean expression\npublic class CastExpression extends Expression; // Represents a typecast expression.\npublic class ClassExpression extends Expression; // Represents access to a Java/Groovy class in an expression, such as when invoking a static method or accessing a static type\npublic class ClosureExpression extends Expression; // Represents a closure expression such as\npublic class ClosureListExpression extends ListExpression; // This class represents a list of expressions used to create closures.\npublic class ConstantExpression extends Expression; // Represents a constant expression such as null, true, false.\npublic class ConstructorCallExpression extends Expression implements MethodCall; // A constructor call.\npublic class DeclarationExpression extends BinaryExpression; // Represents one or more local variables.\npublic class ElvisOperatorExpression extends TernaryExpression; // Represents a short ternary expression x ?: y, which is equal to\npublic class EmptyExpression extends Expression; // Placeholder for an empty expression.\npublic abstract class Expression extends AnnotatedNode; // Represents a base class for expressions which evaluate as an object\npublic interface ExpressionTransformer; // Provides a way to transform expressions\npublic class FieldExpression extends Expression; // Represents a field access such as the expression \"this.foo\".\npublic class GStringExpression extends Expression; // Represents a String expression which contains embedded values inside it such as \"hello there ${user} how are you\" which is expanded lazily\npublic class LambdaExpression extends ClosureExpression; // Represents a lambda expression such as one of these:\npublic class ListExpression extends Expression; // Represents a list expression [1, 2, 3] which creates a mutable List\n", "des": "AST nodes for Groovy expressions"}
{"index": 1662, "repo": "jena-core-4.9.0", "code": "Package: shared\n\nSub Packages: \npackage shared.impl; // This package provides \"standard\" implementations for the interfaces defined by .shared, notably an implementation of PrefixMapping.\n\nClasses and Interfaces: \npublic class AccessDeniedException extends OperationDeniedException; // Superclass of exceptions thrown when permissions do not allow an operation on a graph.\npublic class AddDeniedException extends AccessDeniedException; // Exception to throw for a denied add operation\npublic class AlreadyExistsException extends JenaException; // Exception to throw when an attempt is made to create a named object (eg persistent model) when an object of that name already exists.\npublic class AlreadyReifiedException extends CannotReifyException; // The exception raised by reifyAs if a node is already bound to a single reified triple.\npublic class AssertionFailureException extends JenaException; // Exception to throw when an assertion fails.\npublic class AuthenticationRequiredException extends OperationDeniedException; // Exception to indicate that authentication is required for the operation to proceed.\npublic class BadBooleanException extends JenaException; // Exception to throw when a string cannot be converted to a Boolean value.\npublic class BadCharLiteralException extends JenaException; // Exception to throw when a literal required to be a single character isn't.\npublic class BadDescriptionException extends JenaException; // Exception to throw if a model (or graph) is a bad description\npublic class BadDescriptionMultipleRootsException extends BadDescriptionException; // Exception to throw if a Description contains multiple roots of a specified type.\npublic class BadDescriptionNoRootException extends BadDescriptionException; // Exception to throw if a Description has no root of a specified type\n@Deprecated public class BadURIException extends JenaException;\npublic class BrokenException extends JenaException; // An exception to throw if an internal error is detected.\npublic class CannotCreateException extends OperationDeniedException;\npublic class CannotEncodeCharacterException extends JenaException; // Exception to throw when a character cannot be encoded into some context for some reason.\npublic class CannotReifyException extends JenaException; // The exception thrown by reifyAs if a node is bound to bits and pieces of (an)other triple(s).\npublic class ClosedException extends JenaException; // Exception that may be thrown if an operation is attempted on a closed graph.\npublic class ConfigException extends JenaException; // An Exception indicating that Jena is not working because it is not correctly configured.\n", "des": "This package defines some classes common to the Jena API and SPI levels, in particular the JenaException class from which all Jena-specific exceptions hang, and the interface PrefixMapping for translation to and from QNames."}
{"index": 1601, "repo": "spring-websocket-6.0.11", "code": "Package: client\n\nClasses and Interfaces: \npublic abstract class AbstractClientSockJsSession extends Object implements WebSocketSession; // Base class for SockJS client implementations of WebSocketSession.\npublic abstract class AbstractXhrTransport extends Object implements XhrTransport; // Abstract base class for XHR transport implementations to extend.\npublic interface InfoReceiver; // A component that can execute the SockJS \"Info\" request that needs to be performed before the SockJS session starts in order to check server endpoint capabilities such as whether the endpoint permits use of WebSocket.\npublic class JettyXhrTransport extends AbstractXhrTransport implements org.springframework.context.Lifecycle; // An XHR transport based on Jetty's HttpClient.\npublic class RestTemplateXhrTransport extends AbstractXhrTransport; // An XhrTransport implementation that uses a RestTemplate.\npublic class SockJsClient extends Object implements WebSocketClient, org.springframework.context.Lifecycle; // A SockJS implementation of WebSocketClient with fallback alternatives that simulate a WebSocket interaction through plain HTTP streaming and long polling techniques.\npublic class SockJsUrlInfo extends Object; // Container for the base URL of a SockJS endpoint with additional helper methods to derive related SockJS URLs: specifically, the info and transport URLs.\npublic interface Transport; // A client-side implementation for a SockJS transport.\npublic interface TransportRequest; // Exposes information, typically to Transport and session implementations, about a request to connect to a SockJS server endpoint over a given transport.\npublic class UndertowXhrTransport extends AbstractXhrTransport; // An XHR transport based on Undertow's UndertowClient.\npublic class WebSocketClientSockJsSession extends AbstractClientSockJsSession implements NativeWebSocketSession; // An extension of AbstractClientSockJsSession wrapping and delegating to an actual WebSocket session.\npublic class WebSocketTransport extends Object implements Transport, org.springframework.context.Lifecycle; // A SockJS Transport that uses a WebSocketClient.\npublic class XhrClientSockJsSession extends AbstractClientSockJsSession; // An extension of AbstractClientSockJsSession for use with HTTP transports simulating a WebSocket session.\npublic interface XhrTransport extends Transport, InfoReceiver; // A SockJS Transport that uses HTTP requests to simulate a WebSocket interaction.\n", "des": "SockJS client implementation of WebSocketClient."}
{"index": 2871, "repo": "spring-integration-core-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic final class JsonHeaders extends Object; // Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g.\n", "des": "Support classes for mapping."}
{"index": 3026, "repo": "spring-web-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"application\") public @interface ApplicationScope; // @ApplicationScope is a specialization of @Scope for a component whose lifecycle is bound to the current web application.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"request\") public @interface RequestScope; // @RequestScope is a specialization of @Scope for a component whose lifecycle is bound to the current web request.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Scope(\"session\") public @interface SessionScope; // @SessionScope is a specialization of @Scope for a component whose lifecycle is bound to the current web session.\n", "des": "Provides convenience annotations for web scopes."}
{"index": 1816, "repo": "spring-integration-mail-6.1.2", "code": "Package: dsl\n\nClasses and Interfaces: \npublic class ImapIdleChannelAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<ImapIdleChannelAdapterSpec,ImapIdleChannelAdapter> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageProducerSpec for a ImapIdleChannelAdapter.\npublic class ImapMailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<ImapMailInboundChannelAdapterSpec,ImapMailReceiver>; // A MailInboundChannelAdapterSpec for IMAP.\npublic final class Mail extends Object; // The factory for Spring Integration Mail components.\npublic class MailHeadersBuilder extends org.springframework.integration.support.MapBuilder<MailHeadersBuilder,String,Object>; // The Mail specific MapBuilder implementation.\npublic abstract class MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends AbstractMailReceiver> extends org.springframework.integration.dsl.MessageSourceSpec<S,MailReceivingMessageSource> implements org.springframework.integration.dsl.ComponentsRegistration; // A MessageSourceSpec for a MailReceivingMessageSource.\npublic class MailSendingMessageHandlerSpec extends org.springframework.integration.dsl.MessageHandlerSpec<MailSendingMessageHandlerSpec,MailSendingMessageHandler>;\npublic class Pop3MailInboundChannelAdapterSpec extends MailInboundChannelAdapterSpec<Pop3MailInboundChannelAdapterSpec,Pop3MailReceiver>; // A MailInboundChannelAdapterSpec for POP3.\n", "des": "Provides Mail Components for the Java DSL."}
{"index": 3651, "repo": "solr-core-9.3.0", "code": "Package: filestore\n\nClasses and Interfaces: \nInterface PackageStore; // The interface to be implemented by any package store provider * @lucene.experimental\nInterface PackageStore.FileDetails;\nClass DistribPackageStore;\nClass PackageStore.FileEntry;\nClass PackageStoreAPI;\nClass PackageStoreAPI.MetaData;\nEnum PackageStore.FileType;\n", "des": "Implementation of Package Store."}
{"index": 911, "repo": "commons-compress-1.23.0", "code": "Package: sevenz\n\nClasses and Interfaces: \nClass CLI; // Usage: archive-name [list]\nClass SevenZArchiveEntry; // An entry in a 7z archive.\nClass SevenZFile; // Reads a 7z file, using SeekableByteChannel under the covers.\nClass SevenZFileOptions; // Collects options for reading 7z archives.\nClass SevenZFileOptions.Builder; // Mutable builder for the immutable SevenZFileOptions.\nClass SevenZMethodConfiguration; // Combines a SevenZMethod with configuration options for the method.\nClass SevenZOutputFile; // Writes a 7z file.\nEnum SevenZMethod; // The (partially) supported compression/encryption methods used in 7z archives.\n", "des": "Provides classes for reading and writing archives using the 7z format."}
{"index": 3581, "repo": "lucene-test-framework-9.7.0", "code": "Package: blockterms\n\nClasses and Interfaces: \nClass LuceneFixedGap; // Customized version of Lucene90PostingsFormat that uses FixedGapTermsIndexWriter.\nClass LuceneVarGapDocFreqInterval; // Customized version of Lucene90PostingsFormat that uses VariableGapTermsIndexWriter with a fixed interval, but forcing high docfreq terms to be indexed terms.\nClass LuceneVarGapFixedInterval; // Customized version of Lucene90PostingsFormat that uses VariableGapTermsIndexWriter with a fixed interval.\n", "des": "Codecs for testing that support org.apache.lucene.codecs.blockterms."}
{"index": 3451, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface JndiService; // Service providing simplified access to JNDI related features needed by Hibernate.\n", "des": "The SPI contracts for Hibernate JNDI support"}
{"index": 249, "repo": "nutch-2.4", "code": "Package: domain\n\nClasses and Interfaces: \nClass DomainURLFilter; // Filters URLs based on a file containing domain suffixes, domain names, and hostnames.\n", "des": "URL filter plugin to include only URLs which match an element in a given list of domain suffixes, domain names, and/or host names."}
{"index": 1340, "repo": "groovy-all-4.0.13", "code": "Package: wrappers\n\nClasses and Interfaces: \npublic class BooleanWrapper extends PojoWrapper;\npublic class ByteWrapper extends PojoWrapper;\npublic class CharWrapper extends PojoWrapper;\npublic class DoubleWrapper extends PojoWrapper;\npublic class FloatWrapper extends PojoWrapper;\npublic class GroovyObjectWrapper extends Wrapper;\npublic class IntWrapper extends PojoWrapper;\npublic class LongWrapper extends PojoWrapper;\npublic class PojoWrapper extends Wrapper;\npublic class ShortWrapper extends PojoWrapper;\npublic abstract class Wrapper extends Object implements GroovyObject;\n", "des": "Groovy wrapper classes for primitive types."}
{"index": 2243, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic class KeyValueEvent<T> extends ApplicationEvent; // KeyValueEvent gets published for operations executed by eg.\npublic static class KeyValueEvent.AfterDeleteEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after removing an object by with a given key.\npublic static class KeyValueEvent.AfterDropKeySpaceEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after removing all elements in a given keyspace.\npublic static class KeyValueEvent.AfterGetEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after loading an object by its key.\npublic static class KeyValueEvent.AfterInsertEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after inserting an object by with a given key.\npublic static class KeyValueEvent.AfterUpdateEvent<T> extends KeyValueEvent<T>; // KeyValueEvent after updating an object by with a given key.\npublic static class KeyValueEvent.BeforeDeleteEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before removing an object by with a given key.\npublic static class KeyValueEvent.BeforeDropKeySpaceEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before removing all elements in a given keyspace.\npublic static class KeyValueEvent.BeforeGetEvent<T> extends KeyValueEvent<T>; // KeyValueEvent raised before loading an object by its key.\npublic static class KeyValueEvent.BeforeInsertEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before inserting an object by with a given key.\npublic static class KeyValueEvent.BeforeUpdateEvent<T> extends KeyValueEvent<T>; // KeyValueEvent before updating an object by with a given key.\n", "des": "Support classes for key-value events, like standard persistence lifecycle events."}
{"index": 260, "repo": "nutch-2.4", "code": "Package: html\n\nClasses and Interfaces: \nClass DOMBuilder; // This class takes SAX events (in addition to some extra events that SAX doesn't handle yet) and adds the result to a document or document fragment.\nClass DOMContentUtils; // A collection of methods for extracting content from DOM trees.\nClass DOMContentUtils.LinkParams;\nClass HTMLMetaProcessor; // Class for parsing META Directives from DOM trees.\nClass HtmlParser;\nClass XMLCharacterRecognizer; // Class used to verify whether the specified ch conforms to the XML 1.0 definition of whitespace.\n", "des": "An HTML document parsing plugin."}
{"index": 1823, "repo": "pulsar-client-original-3.0.0", "code": "Package: schema\n\nSub Packages: \npackage schema.reader; // Pulsar Client schema reader.\n\nClasses and Interfaces: \npublic abstract class AbstractSchema<T> extends Object implements Schema<T>;\npublic abstract class AbstractStructSchema<T> extends AbstractSchema<T>; // minimal abstract StructSchema.\npublic class AutoConsumeSchema extends Object implements Schema<GenericRecord>; // Auto detect schema, returns only GenericRecord instances.\npublic class AutoProduceBytesSchema<T> extends Object implements Schema<byte[]>; // Auto detect schema.\npublic abstract class AvroBaseStructSchema<T> extends AbstractStructSchema<T>; // This is a base schema implementation for Avro Based `Struct` types.\npublic class AvroSchema<T> extends AvroBaseStructSchema<T>; // An AVRO schema implementation.\npublic static class AvroSchema.TimestampConversion extends org.apache.avro.Conversion<org.joda.time.DateTime>;\npublic class BooleanSchema extends AbstractSchema<Boolean>; // A schema for `Boolean`.\npublic class ByteBufferSchema extends AbstractSchema<ByteBuffer>; // A bytebuffer schema is effectively a `BYTES` schema.\npublic class ByteBufSchema extends AbstractSchema<io.netty.buffer.ByteBuf>; // A variant `Bytes` schema that takes ByteBuf.\npublic class ByteSchema extends AbstractSchema<Byte>; // A schema for 'Byte'.\npublic class BytesSchema extends AbstractSchema<byte[]>; // A schema for bytes array.\npublic class DateSchema extends AbstractSchema<Date>; // A schema for `java.util.Date` or `java.sql.Date`.\npublic class DoubleSchema extends AbstractSchema<Double>; // A schema for `Double`.\npublic class FloatSchema extends AbstractSchema<Float>; // A schema for `Float`.\npublic class InstantSchema extends AbstractSchema<Instant>; // A schema for `java.time.Instant`.\npublic class IntSchema extends AbstractSchema<Integer>; // A schema for `Integer`.\npublic class JSONSchema<T> extends AvroBaseStructSchema<T>; // A schema implementation to deal with json data.\npublic class KeyValueSchemaImpl<K,V> extends AbstractSchema<KeyValue<K,V>> implements KeyValueSchema<K,V>; // [Key, Value] pair schema definition.\n", "des": "Pulsar Client schema."}
{"index": 237, "repo": "nutch-2.4", "code": "Package: seed\n\nClasses and Interfaces: \nClass SeedListsPage; // This page is for seed lists management\nClass SeedPage; // This page is for seed urls management\n", "des": "Contains seed pages' classes for Web UI"}
{"index": 352, "repo": "lucene-analyzers-kuromoji-8.11.2", "code": "Package: util\n\nClasses and Interfaces: \nClass CSVUtil; // Utility class for parsing CSV text\nClass DictionaryBuilder; // Tool to build dictionaries.\nClass ToStringUtil; // Utility class for english translations of morphological data, used only for debugging.\nEnum DictionaryBuilder.DictionaryFormat; // Format of the dictionary.\n", "des": "Kuromoji utility classes."}
{"index": 1654, "repo": "jena-core-4.9.0", "code": "Package: xmlinput\n\nClasses and Interfaces: \npublic interface ALiteral extends ANode; // A string literal property value from an RDF/XML file.\npublic interface AResource; // A URI or blank node reported to a StatementHandler.\n@Deprecated public class ARP extends Object implements ARPConfig;\npublic interface ARPConfig; // Used to set event handlers and options on ARP, SAX2Model, and SAX2RDF instances.\npublic interface ARPErrorNumbers; // Error numbers used by ARP.\npublic interface ARPEventHandler extends StatementHandler, ExtendedHandler, NamespaceHandler; // Convenience generalization of all ARP handler interfaces.\npublic class ARPHandlers extends Object; // The interface to set the various handlers on ARP.\npublic class ARPOptions extends Object implements ARPErrorNumbers; // The interface to set the various options on ARP.\npublic class DOM2Model extends SAX2Model; // Transform DOM nodes of RDF.XML into Jena Models.\npublic interface ExtendedHandler; // Extended callbacks from a reader to an RDF application.\npublic class FatalParsingErrorException extends RuntimeException; // This exception should only be seen in user code when using SAX2RDF or SAX2Model.\npublic interface NamespaceHandler; // The interface for being notified about namespace use in an RDF/XML document.\npublic class NTriple extends Object implements ARPErrorNumbers; // A command line interface into ARP.\npublic class ParseException extends SAXParseException implements ARPErrorNumbers; // An exception during the RDF processing of ARP.\npublic class RDFXMLReader extends Object implements RDFReaderI, ARPErrorNumbers; // Interface between Jena and ARP.\npublic class SAX2Model extends SAX2RDF; // Use arbitrary SAX input to Jena.\npublic class SAX2RDF extends SAX2RDFImpl implements ARPConfig; // Allows connecting an arbitrary source of SAX events with ARP.\npublic interface StatementHandler; // The callback from a reader to an RDF application.\npublic class StAX2Model extends Object; // A collection of convenient functions to parse an XML stream using ARP.\npublic class StAX2SAX extends Object; // Bridge StAX and SAX parsing.\n", "des": "A parser for RDF/XML."}
{"index": 1115, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: collectormanager\n\nClasses and Interfaces: \nClass NMCollectorService; // Service that handles collector information.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.collectormanager contains classes for handling timeline collector information."}
{"index": 3228, "repo": "commons-configuration2-2.9.0", "code": "Package: web\n\nClasses and Interfaces: \nClass AppletConfiguration; // A configuration wrapper to read applet parameters.\nClass ServletConfiguration; // A configuration wrapper around a ServletConfig.\nClass ServletContextConfiguration; // A configuration wrapper to read the initialization parameters of a servlet context.\nClass ServletFilterConfiguration; // A configuration wrapper around a FilterConfig.\nClass ServletRequestConfiguration; // A configuration wrapper to read the parameters of a servlet request.\n", "des": "This package contains some implementations of the Configuration interface that are useful in web environments."}
{"index": 3352, "repo": "opencms-core-15.0", "code": "Package: login\n\nClasses and Interfaces: \nClass CmsChangePasswordDialog; // Dialog used to change the password.\nClass CmsForgotPasswordDialog; // Dialog to request a password reset link if you forgot your passsword.\nClass CmsInactiveUserMessages; // Helper class for getting localized messages for the 'lock inactive users' feature.\nClass CmsLockInactiveAccountsJob; // Scheduled job for locking user accounts which have not been logged into for longer than the configured time.\nClass CmsLoginController; // Controller class which actually handles the login dialog logic.\nClass CmsLoginController.CmsLoginTargetInfo; // Represents the login target information.\nClass CmsLoginController.LoginContext; // The login context.\nClass CmsLoginController.UserAgreementHelper; // Helper subclass of CmsLoginUserAgreement which can be used without a page context.\nClass CmsLoginForm; // Login form.\nClass CmsLoginHelper; // Utility to login users to the OpenCms workplace.\nClass CmsLoginHelper.LoginParameters; // Holds the current login parameters.\nClass CmsLoginOuSelector; // Widget used to allow the user to search and select an organizational unit.\nClass CmsLoginPasswordField; // Password field for the login dialog.\nClass CmsLoginTargetOpener; // Server side component used to open the login target for a logged in user.\nClass CmsLoginUI; // The UI class for the Vaadin-based login dialog.\nClass CmsLoginUI.Parameters; // Parameters which are initialized during the initial page load of the login dialog.\nClass CmsLoginUserField; // Widget for the user name field of the login dialog.\nClass CmsPasswordChangeNotification; // Notification used to send password change link to user.\nClass CmsPasswordForm; // The change password form.\nClass CmsSecondFactorDialog; // Dialog used to ask the user for a verification code generated from his second factor, using an authenticator app.\nClass CmsSecondFactorSetupDialog; // Dialog used to set up two-factor authentication for a user.\nClass CmsSetPasswordDialog; // Dialog used to change the password.\nClass CmsTokenValidator; // Helper class for dealing with authorization tokens for the 'forgot password' functionality.\n", "des": "Contains the user interface components for the Vaadin-based login dialog."}
{"index": 2741, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: stax\n\nClasses and Interfaces: \npublic class DefaultFragmentEventReader extends Object implements FragmentEventReader; // Default implementation of FragmentEventReader\npublic interface FragmentEventReader extends XMLEventReader; // Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events.\npublic class NoStartEndDocumentStreamWriter extends Object; // Delegating XMLEventWriter, which ignores start and end document events, but passes through everything else.\npublic class UnclosedElementCollectingEventWriter extends Object; // Delegating XMLEventWriter, which collects the QNames of elements that were opened but not closed.\npublic class UnopenedElementClosingEventWriter extends Object; // Delegating XMLEventWriter, which writes EndElement events that match a given collection of QNames directly to the underlying java.io.Writer instead of to the delegate XMLEventWriter.\n", "des": "Item reader and writer based on Stax."}
{"index": 3566, "repo": "lucene-codecs-9.7.0", "code": "Package: blocktreeords\n\nClasses and Interfaces: \nClass BlockTreeOrdsPostingsFormat; // Uses OrdsBlockTreeTermsWriter with Lucene90PostingsWriter.\nClass OrdsBlockTreeTermsReader; // See OrdsBlockTreeTermsWriter.\nClass OrdsBlockTreeTermsWriter; // This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version.\nClass OrdsSegmentTermsEnum; // Iterates through terms in this field.\n", "des": "Same postings format as Lucene50, except the terms dictionary also supports ords, i.e."}
{"index": 3049, "repo": "spring-web-6.0.11", "code": "Package: pattern\n\nClasses and Interfaces: \npublic class PathPattern extends Object implements Comparable<PathPattern>; // Representation of a parsed path pattern.\npublic static class PathPattern.PathMatchInfo extends Object; // Holder for URI variables and path parameters (matrix variables) extracted based on the pattern for a given matched path.\npublic static class PathPattern.PathRemainingMatchInfo extends Object; // Holder for the result of a match on the start of a pattern.\npublic class PathPatternParser extends Object; // Parser for URI path patterns producing PathPattern instances that can then be matched to requests.\npublic class PathPatternRouteMatcher extends Object implements org.springframework.util.RouteMatcher; // RouteMatcher built on PathPatternParser that uses PathContainer and PathPattern as parsed representations of routes and patterns.\npublic class PatternParseException extends IllegalArgumentException; // Exception that is thrown when there is a problem with the pattern being parsed.\npublic static enum PatternParseException.PatternMessage extends Enum<PatternParseException.PatternMessage>; // The messages that can be included in a PatternParseException when there is a parse failure.\n", "des": "Dedicated support for matching HTTP request paths."}
{"index": 2223, "repo": "spring-data-commons-3.1.2", "code": "Package: parser\n\nClasses and Interfaces: \npublic abstract class AbstractQueryCreator<T,S> extends Object; // Base class for query creators that create criteria based queries from a PartTree.\npublic class Part extends Object; // A single part of a method name that has to be transformed into a query part.\npublic static enum Part.IgnoreCaseType extends Enum<Part.IgnoreCaseType>; // The various types of ignore case that are supported.\npublic static enum Part.Type extends Enum<Part.Type>; // The type of a method name part.\npublic class PartTree extends Object implements Streamable<PartTree.OrPart>; // Class to parse a String into a tree or PartTree.OrParts consisting of simple Part instances in turn.\npublic static class PartTree.OrPart extends Object implements Streamable<Part>; // A part of the parsed source that results from splitting up the resource around Or keywords.\n", "des": "Support classes for parsing queries from method names."}
{"index": 1109, "repo": "fontbox-3.0.0-beta1", "code": "Package: gsub\n\nClasses and Interfaces: \nClass LigatureSetTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LigatureTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeLigatureSubstitutionSubstFormat1; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeMultipleSubstitutionFormat1;\nClass LookupTypeSingleSubstFormat1; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass LookupTypeSingleSubstFormat2; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\nClass SequenceTable; // This class is a part of the GSUB — Glyph Substitution Table system of tables in the Open Type Font specs.\n", "des": "This package contains the highly obfuscated GSUB, aka, Glyph Substitution Table system of tables from the Open Type Font specs."}
{"index": 31, "repo": "commons-collections4-4.4", "code": "Package: trie\n\nSub Packages: \npackage trie.analyzer; // This package contains various KeyAnalyzer implementations.\n\nClasses and Interfaces: \nClass AbstractBitwiseTrie<K,V>; // This class provides some basic Trie functionality and utility methods for actual bitwise Trie implementations.\nClass KeyAnalyzer<K>; // Defines the interface to analyze Trie keys on a bit level.\nClass PatriciaTrie<E>; // Implementation of a PATRICIA Trie (Practical Algorithm to Retrieve Information Coded in Alphanumeric).\nClass UnmodifiableTrie<K,V>; // An unmodifiable Trie.\n", "des": "This package contains implementations of the Trie interface."}
{"index": 2228, "repo": "spring-data-commons-3.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic class ExampleMatcherAccessor extends Object; // Accessor for the ExampleMatcher to use in modules that support query by example (QBE) querying.\npublic interface IsNewStrategy; // Strategy interface to determine whether a given entity is to be considered new.\npublic abstract class PageableExecutionUtils extends Object; // Support for query execution using Pageable.\npublic enum PersistableIsNewStrategy extends Enum<PersistableIsNewStrategy> implements IsNewStrategy; // IsNewStrategy that invokes Persistable.isNew() on the given object.\npublic class WindowIterator<T> extends Object implements Iterator<T>; // An Iterator over multiple Windows obtained via a window function, that keeps track of the current ScrollPosition allowing scrolling across all result elements.\npublic static class WindowIterator.WindowIteratorBuilder<T> extends Object; // Builder API to construct a WindowIterator.\n", "des": "Core support classes."}
{"index": 2901, "repo": "spring-integration-amqp-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic interface AmqpHeaderMapper extends org.springframework.integration.mapping.RequestReplyHeaderMapper<org.springframework.amqp.core.MessageProperties>; // A convenience interface that extends RequestReplyHeaderMapper, parameterized with MessageProperties.\npublic class AmqpMessageHeaderErrorMessageStrategy extends Object implements org.springframework.integration.support.ErrorMessageStrategy; // An ErrorMessageStrategy extension that adds the raw AMQP message as a header to the ErrorMessage.\npublic class BoundRabbitChannelAdvice extends Object implements org.springframework.integration.handler.advice.HandleMessageAdvice; // An advice that causes all downstream RabbitOperations operations to be executed on the same channel, as long as there are no thread handoffs, since the channel is bound to the thread.\npublic class DefaultAmqpHeaderMapper extends org.springframework.integration.mapping.AbstractHeaderMapper<org.springframework.amqp.core.MessageProperties> implements AmqpHeaderMapper; // Default implementation of AmqpHeaderMapper.\npublic final class EndpointUtils extends Object; // Utility methods for messaging endpoints.\npublic class ManualAckListenerExecutionFailedException extends org.springframework.amqp.rabbit.support.ListenerExecutionFailedException; // A ListenerExecutionFailedException enhanced with the channel and delivery tag.\npublic final class MappingUtils extends Object; // Utility methods used during message mapping.\npublic class NackedAmqpMessageException extends org.springframework.messaging.MessagingException; // An exception representing a negatively acknowledged message from a publisher confirm.\npublic class ReturnedAmqpMessageException extends org.springframework.messaging.MessagingException; // A MessagingException for a returned message.\n", "des": "Provides AMQP support classes."}
{"index": 165, "repo": "ignite-core-2.15.0", "code": "Package: message\n\nClasses and Interfaces: \nInterface GridClientMessage; // Interface for all client messages.\nClass GridClientAbstractMessage; // This class provides implementation for commit message fields and cannot be used directly.\nClass GridClientAuthenticationRequest; // Client authentication request.\nClass GridClientBinaryMetaData; // Binary meta data sent from client.\nClass GridClientCacheBean; // Cache bean.\nClass GridClientCacheRequest; // Generic cache request.\nClass GridClientClusterNameRequest;\nClass GridClientClusterStateRequest; // Use GridClientClusterStateRequestV2\nClass GridClientClusterStateRequestV2; // Enhanced version of GridClientClusterStateRequest.\nClass GridClientHandshakeRequest; // A client handshake request, containing version info and a marshaller ID.\nClass GridClientHandshakeResponse; // A client handshake response, containing result code.\nClass GridClientNodeBean; // Node bean.\nClass GridClientNodeMetricsBean; // Node metrics bean.\nClass GridClientNodeStateBeforeStartRequest; // Request to manage and obtain information about node before its start.\nClass GridClientPingPacket; // Fictive ping packet.\nClass GridClientResponse; // Bean representing client operation result.\nClass GridClientStateRequest; // Use GridClientClusterStateRequest instead.\nClass GridClientTaskRequest; // Task command request.\nClass GridClientTaskResultBean; // Task result.\nClass GridClientTopologyRequest; // Topology command request.\nClass GridClientWarmUpRequest;\nClass GridRouterRequest; // Container for routed message information.\nClass GridRouterResponse;\nEnum GridClientCacheRequest.GridCacheOperation; // Available cache operations.\n", "des": "Defines messages that are used in binary TCP communication between Ignite clients and nodes."}
{"index": 2193, "repo": "spring-security-web-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic class ConcurrentSessionFilter extends org.springframework.web.filter.GenericFilterBean; // Filter required by concurrent session handling package.\npublic class DisableEncodeUrlFilter extends org.springframework.web.filter.OncePerRequestFilter; // Disables encoding URLs using the HttpServletResponse to prevent including the session id in URLs which is not considered URL because the session id can be leaked in things like HTTP access logs.\npublic class ForceEagerSessionCreationFilter extends org.springframework.web.filter.OncePerRequestFilter; // Eagerly creates HttpSession if it does not already exist.\npublic class HttpSessionCreatedEvent extends org.springframework.security.core.session.SessionCreationEvent; // Published by the HttpSessionEventPublisher when an HttpSession is created by the container\npublic class HttpSessionDestroyedEvent extends org.springframework.security.core.session.SessionDestroyedEvent; // Published by the HttpSessionEventPublisher when a HttpSession is removed from the container\npublic class HttpSessionEventPublisher extends Object implements jakarta.servlet.http.HttpSessionListener, jakarta.servlet.http.HttpSessionIdListener; // Declared in web.xml as\npublic class HttpSessionIdChangedEvent extends org.springframework.security.core.session.SessionIdChangedEvent; // Published by the HttpSessionEventPublisher when an HttpSession ID is changed.\npublic final class InvalidSessionAccessDeniedHandler extends Object implements AccessDeniedHandler; // An adapter of InvalidSessionStrategy to AccessDeniedHandler\npublic interface InvalidSessionStrategy; // Determines the behaviour of the SessionManagementFilter when an invalid session Id is submitted and detected in the SessionManagementFilter.\npublic final class RequestedUrlRedirectInvalidSessionStrategy extends Object implements InvalidSessionStrategy; // Performs a redirect to the original request URL when an invalid requested session is detected by the SessionManagementFilter.\npublic final class SessionInformationExpiredEvent extends org.springframework.context.ApplicationEvent; // An event for when a SessionInformation is expired.\npublic interface SessionInformationExpiredStrategy; // Determines the behaviour of the ConcurrentSessionFilter when an expired session is detected in the ConcurrentSessionFilter.\n", "des": "Session management filters, HttpSession events and publisher classes."}
{"index": 463, "repo": "jackson-core-2.15.2", "code": "Package: core\n\nSub Packages: \npackage core.async; // Package that contains abstractions needed to support optional non-blocking decoding (parsing) functionality.\npackage core.base; // Base classes used by concrete Parser and Generator implementations; contain functionality that is not specific to JSON or input abstraction (byte vs char).\npackage core.exc; // Package for some of JsonProcessingException subtypes contained by streaming API.\npackage core.format; // Package that contains interfaces needed for dynamic, pluggable format (auto)detection; as well as basic utility classes for simple format detection functionality.\npackage core.json; // JSON-specific parser and generator implementation classes that Jackson defines and uses.\npackage core.sym; // Internal implementation classes for efficient handling of of symbols in JSON (field names in Objects)\npackage core.type; // Contains classes needed for type introspection, mostly used by data binding functionality.\npackage core.util; // Utility classes used by Jackson Core functionality.\n\nClasses and Interfaces: \nInterface FormatFeature; // Marker interface that is to be implemented by data format - specific features.\nInterface FormatSchema; // Simple tag interface used to mark schema objects that are used by some JsonParser and JsonGenerator implementations to further specify structure of expected format.\nInterface JsonTokenId; // Interface defined to contain ids accessible with JsonToken.id().\nInterface PrettyPrinter; // Interface for objects that implement pretty printer functionality, such as indentation.\nInterface SerializableString; // Interface that defines how Jackson package can interact with efficient pre-serialized or lazily-serialized and reused String representations.\nInterface TreeNode; // Marker interface used to denote JSON Tree nodes, as far as the core package knows them (which is very little): mostly needed to allow ObjectCodec to have some level of interoperability.\nInterface Versioned; // Interface that those Jackson components that are explicitly versioned will implement.\nClass Base64Variant; // Class used to define specific details of which variant of Base64 encoding/decoding is to be used.\nClass Base64Variants; // Container for commonly used Base64 variants: Base64Variants.MIME Base64Variants.MIME_NO_LINEFEEDS Base64Variants.PEM Base64Variants.MODIFIED_FOR_URL See entries for full description of differences.\n", "des": "Main public API classes of the core streaming JSON processor: most importantly JsonFactory used for constructing JSON parser (JsonParser) and generator (JsonGenerator) instances."}
{"index": 805, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: sinks\n\nClasses and Interfaces: \nClass TeeSinkTokenFilter; // This TokenFilter provides the ability to set aside attribute states that have already been analyzed.\nClass TeeSinkTokenFilter.SinkTokenStream; // TokenStream output from a tee.\n", "des": "TeeSinkTokenFilter."}
{"index": 984, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: annotation\n\nClasses and Interfaces: \nEnum FaultCode; // Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.\nAnnotation Type SoapAction; // Marks an endpoint method as the handler for an incoming request.\nAnnotation Type SoapActions; // Marks an endpoint method as containing multiple SoapActions.\nAnnotation Type SoapFault; // Marks an exception class with the fault elements that should be returned whenever this exception is thrown.\nAnnotation Type SoapHeader; // Marks an endpoint method parameter to be resolved as a single or a list of SoapHeaderElement.\n", "des": "JDK 1.5+ annotations for Spring-WS SOAP endpoints."}
{"index": 973, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: security\n\nSub Packages: \npackage security.callback; // Contains generic CallbackHandler implementations.\npackage security.support; // Contains support classes for handling WS-Security messages.\npackage security.wss4j2; // Contains classes for using the Apache WSS4J 2.0 WS-Security implementation within Spring-WS.\npackage security.xwss; // Contains classes for using the XML and WebServices Security WS-Security implementation within Spring-WS.\n\nClasses and Interfaces: \nClass AbstractWsSecurityInterceptor; // Interceptor base class for interceptors that handle WS-Security.\nClass WsSecurityException; // Exception indicating that something went wrong during WS-Security executions.\nClass WsSecurityFaultException; // Exception indicating that a WS-Security executions should result in a SOAP Fault.\nClass WsSecuritySecurementException; // Exception indicating that something went wrong during the securement of a message.\nClass WsSecurityValidationException; // Exception indicating that something went wrong during the validation of a message.\n", "des": "Provides WS-Security implementation classes."}
{"index": 2911, "repo": "spring-xml-4.0.5", "code": "Package: sax\n\nClasses and Interfaces: \npublic abstract class AbstractXmlReader extends Object implements XMLReader; // Abstract base class for SAX XMLReader implementations.\npublic abstract class SaxUtils extends Object; // Convenient utility methods for dealing with SAX.\n", "des": "Provides classes that help with SAX: the Simple API for XML."}
{"index": 3298, "repo": "opencms-core-15.0", "code": "Package: monitor\n\nClasses and Interfaces: \nInterface I_CmsMemoryMonitorable; // Describes an object that can be memory monitored.\nClass CmsGroupListCache; // Cache for users' groups and data derived from those groups, like role membership.\nClass CmsMemoryMonitor; // Monitors OpenCms memory consumption.\nClass CmsMemoryMonitorConfiguration; // Memory Monitor configuration class.\nClass CmsMemoryStatus; // Data structure for dealing with memory status information.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsMemoryMonitor.CacheType; // Cache types.\n", "des": "Contains functions to monitor the OpenCms system status."}
{"index": 3007, "repo": "spring-web-6.0.11", "code": "Package: cbor\n\nClasses and Interfaces: \npublic class KotlinSerializationCborHttpMessageConverter extends KotlinSerializationBinaryHttpMessageConverter<kotlinx.serialization.cbor.Cbor>; // Implementation of HttpMessageConverter that can read and write CBOR using kotlinx.serialization.\npublic class MappingJackson2CborHttpMessageConverter extends AbstractJackson2HttpMessageConverter; // Implementation of HttpMessageConverter that can read and write the CBOR data format using the dedicated Jackson 2.x extension.\n", "des": "Provides an HttpMessageConverter for the CBOR data format."}
{"index": 2530, "repo": "spring-security-core-6.1.2", "code": "Package: memory\n\nClasses and Interfaces: \npublic class InMemoryConfiguration extends Configuration; // An in memory representation of a JAAS configuration.\n", "des": "An in memory JAAS implementation."}
{"index": 412, "repo": "spring-social-core-1.1.6.RELEASE", "code": "Package: support\n\nClasses and Interfaces: \nClass BufferingClientHttpResponse;\nClass ClientHttpRequestFactorySelector; // Chooses a request factory.\nClass ClientHttpRequestFactorySelector.HttpComponentsClientRequestFactoryCreator;\nClass FormMapHttpMessageConverter; // Message converter that reads form-encoded data into a flat Map<String, String>.\nClass HttpRequestDecorator; // Extension of HttpRequestWrapper that supports adding new HttpHeaders to the wrapped HttpRequest.\nClass LoggingErrorHandler;\nClass ParameterMap; // Generally useful base class for creating MultiValueMaps that store HTTP query parameters.\nClass URIBuilder; // Builds up a URI from individual URI components.\nClass URIBuilderException; // Exception thrown when URIBuilder can't build the specified URI.\n", "des": "Internal utilities and helpers used by the Spring Social core module."}
{"index": 1564, "repo": "spring-restdocs-core-3.0.0", "code": "Package: headers\n\nClasses and Interfaces: \npublic abstract class AbstractHeadersSnippet extends TemplatedSnippet; // Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response headers.\npublic class HeaderDescriptor extends AbstractDescriptor<HeaderDescriptor>; // A description of a header found in a request or response.\npublic abstract class HeaderDocumentation extends Object; // Static factory methods for documenting a RESTful API's request and response headers.\npublic class RequestHeadersSnippet extends AbstractHeadersSnippet; // A Snippet that documents the headers in a request.\npublic class ResponseHeadersSnippet extends AbstractHeadersSnippet; // A Snippet that documents the headers in a response.\n", "des": "Documenting the headers of a RESTful API's requests and responses."}
{"index": 2994, "repo": "spring-web-6.0.11", "code": "Package: http\n\nSub Packages: \npackage http.client; // Contains an abstraction over client-side HTTP.\npackage http.codec; // Provides implementations of Encoder and Decoder for web use.\npackage http.converter; // Provides an HttpMessageConverter abstraction to convert between Java objects and HTTP input/output messages.\npackage http.server; // Contains an abstraction over server-side HTTP.\n\nClasses and Interfaces: \npublic class CacheControl extends Object; // A builder for creating \"Cache-Control\" HTTP response headers.\npublic final class ContentDisposition extends Object; // Representation of the Content-Disposition type and parameters as defined in RFC 6266.\npublic static interface ContentDisposition.Builder; // A mutable builder for ContentDisposition.\npublic class HttpCookie extends Object; // Represents an HTTP cookie as a name-value pair consistent with the content of the \"Cookie\" request header.\npublic class HttpEntity<T> extends Object; // Represents an HTTP request or response entity, consisting of headers and body.\npublic class HttpHeaders extends Object implements org.springframework.util.MultiValueMap<String,String>, Serializable; // A data structure representing HTTP request or response headers, mapping String header names to a list of String values, also offering accessors for common application-level data types.\npublic interface HttpInputMessage extends HttpMessage; // Represents an HTTP input message, consisting of headers and a readable body.\npublic abstract class HttpLogging extends Object; // Holds the shared logger named \"org.springframework.web.HttpLogging\" for HTTP related logging when \"org.springframework.http\" is not enabled but \"org.springframework.web\" is.\npublic interface HttpMessage; // Represents the base interface for HTTP request and response messages.\npublic final class HttpMethod extends Object implements Comparable<HttpMethod>, Serializable; // Represents an HTTP request method.\npublic interface HttpOutputMessage extends HttpMessage; // Represents an HTTP output message, consisting of headers and a writable body.\npublic abstract class HttpRange extends Object; // Represents an HTTP (byte) range for use with the HTTP \"Range\" header.\npublic interface HttpRequest extends HttpMessage; // Represents an HTTP request message, consisting of a method and a URI.\n", "des": "Contains a basic abstraction over client/server-side HTTP."}
{"index": 1418, "repo": "spring-boot-actuator-3.1.1", "code": "Package: jdbc\n\nClasses and Interfaces: \npublic class DataSourcePoolMetrics extends Object implements io.micrometer.core.instrument.binder.MeterBinder; // A MeterBinder for a DataSource.\n", "des": "Actuator support for JDBC metrics."}
{"index": 2924, "repo": "groovy-4.0.13", "code": "Package: groovy\n\nSub Packages: \npackage groovy.ast; // Groovy AST nodes for the syntax of the language\npackage groovy.classgen; // Generates Java classes for Groovy classes using ASM.\npackage groovy.control; // Compiler control classes.\npackage groovy.reflection; // Internal classes for assisting with reflection.\npackage groovy.runtime; // Runtime classes for Groovy - whether the dynamic interpreter is being used, the compiler or the bytecode generator.\npackage groovy.syntax; // Lexer, parser and trees.\npackage groovy.tools; // Compiler entry points and miscellaneous development tools.\npackage groovy.vmplugin; // JVM version specific classes.\n\nClasses and Interfaces: \npublic class GroovyBugError extends AssertionError; // This class represents an error that is thrown when a bug is recognized inside the runtime.\npublic class GroovyException extends Exception implements GroovyExceptionInterface;\npublic interface GroovyExceptionInterface; // An interface for use by all Groovy compiler exceptions.\n", "des": "Groovy Language for the JVM"}
{"index": 2545, "repo": "pulsar-common-3.0.0", "code": "Package: api\n\nSub Packages: \npackage api.url; // Classes to work with URLs.\n\nClasses and Interfaces: \npublic interface MessageIdAdv extends MessageId; // The MessageId interface provided for advanced users.\n", "des": "Additional helper classes to the pulsar-client-api module."}
{"index": 3126, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: jdbc\n\nSub Packages: \npackage jdbc.spi; // SPI contracts for supporting various aspects of JDBC interaction\n\nClasses and Interfaces: \nInterface BinaryStream; // Wraps a binary stream to also provide the length which is needed when binding.\nInterface BlobImplementer; // Marker interface for non-contextually created Blob instances..\nInterface CharacterStream; // Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.\nInterface ClobImplementer; // Marker interface for non-contextually created Clob instances..\nInterface LobCreationContext; // Provides callback access into the context in which the LOB is to be created.\nInterface LobCreationContext.Callback<T>; // The callback contract for making use of the JDBC Connection.\nInterface LobCreator; // Contract for creating various LOB references.\nInterface NClobImplementer; // Marker interface for non-contextually created java.sql.NClob instances..\nInterface WrappedBlob; // Contract for Blob wrappers.\nInterface WrappedClob; // Contract for Clob wrappers.\nInterface WrappedNClob; // Contract for NClob wrappers.\nClass AbstractLobCreator; // Convenient base class for proxy-based LobCreator for handling wrapping.\nClass BlobProxy; // Manages aspects of representing Blob objects.\nClass ClobProxy; // Manages aspects of proxying Clobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass ColumnNameCache;\nClass ContextualLobCreator; // LobCreator implementation using contextual creation against the JDBC Connection class's LOB creation methods.\nClass NClobProxy; // Manages aspects of proxying java.sql.NClobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass NonContextualLobCreator; // LobCreator implementation using non-contextual or local creation, meaning that we generate the LOB references ourselves as opposed to delegating to the JDBC Connection.\nClass ReaderInputStream; // Exposes a Reader as an InputStream.\nClass ResultSetWrapperProxy;\nClass SerializableBlobProxy; // Manages aspects of proxying Blobs to add serializability.\nClass SerializableClobProxy; // Manages aspects of proxying Clobs to add serializability.\n", "des": "Support for various aspects of JDBC interaction"}
{"index": 244, "repo": "nutch-2.4", "code": "Package: ftp\n\nClasses and Interfaces: \nClass Client; // Client.java encapsulates functionalities necessary for nutch to get dir list and retrieve file from an FTP server.\nClass Ftp; // This class is a protocol plugin used for ftp: scheme.\nClass FtpResponse; // FtpResponse.java mimics ftp replies as http response.\nClass FtpRobotRulesParser; // This class is used for parsing robots for urls belonging to FTP protocol.\nClass PrintCommandListener; // This is a support class for logging all ftp command/reply traffic.\nClass FtpError; // Thrown for Ftp error codes.\nClass FtpException; // Superclass for important exceptions thrown during FTP talk, that must be handled with care.\nClass FtpExceptionBadSystResponse; // Exception indicating bad reply of SYST command.\nClass FtpExceptionCanNotHaveDataConnection; // Exception indicating failure of opening data connection.\nClass FtpExceptionControlClosedByForcedDataClose; // Exception indicating control channel is closed by server end, due to forced closure of data channel at client (our) end.\nClass FtpExceptionUnknownForcedDataClose; // Exception indicating unrecognizable reply from server after forced closure of data channel by client (our) side.\n", "des": "Protocol plugin which supports retrieving documents via the ftp protocol."}
{"index": 1557, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class BindingAwareConcurrentModel extends ConcurrentModel; // Subclass of ConcurrentModel that automatically removes the BindingResult object when its corresponding target attribute is replaced through regular Map operations.\npublic class BindingAwareModelMap extends ExtendedModelMap; // Subclass of ExtendedModelMap that automatically removes a BindingResult object if the corresponding target attribute gets replaced through regular Map operations.\n", "des": "Support classes for handling validation results."}
{"index": 636, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: pb\n\nClasses and Interfaces: \nClass AppCollectorDataPBImpl;\nClass ContainerQueuingLimitPBImpl; // Implementation of ContainerQueuingLimit interface.\nClass MasterKeyPBImpl;\nClass NodeHealthStatusPBImpl;\nClass NodeStatusPBImpl;\nClass OpportunisticContainersStatusPBImpl; // Protocol Buffer implementation of OpportunisticContainersStatus.\n", "des": "Server records PB implementations."}
{"index": 609, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: wiring\n\nClasses and Interfaces: \nInterface BundleCapability; // A capability that has been declared from a bundle revision.\nInterface BundleRequirement; // A requirement that has been declared from a bundle revision.\nInterface BundleRevision; // Bundle Revision.\nInterface BundleRevisions; // The bundle revisions of a bundle.\nInterface BundleWire; // A wire connecting a BundleCapability to a BundleRequirement.\nInterface BundleWiring; // A wiring for a bundle.\nInterface FrameworkWiring; // Query and modify wiring information for the framework.\n", "des": "Framework Wiring Package Version 1.1."}
{"index": 2932, "repo": "groovy-4.0.13", "code": "Package: messages\n\nClasses and Interfaces: \npublic class ExceptionMessage extends Message; // A class for error messages produced by the parser system.\npublic class LocatedMessage extends SimpleMessage; // A base class for compilation messages.\npublic abstract class Message extends Object; // A base class for compilation messages.\npublic class SimpleMessage extends Message; // A base class for compilation messages.\npublic class SyntaxErrorMessage extends Message; // A class for error messages produced by the parser system.\npublic class WarningMessage extends LocatedMessage; // A class for warning messages.\n", "des": "Error message classes."}
{"index": 2367, "repo": "camel-base-4.0.0-RC1", "code": "Package: converter\n\nClasses and Interfaces: \npublic class AnnotationTypeConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader; // A class which will auto-discover Converter objects and methods to pre-load the TypeConverterRegistry of converters on startup.\npublic class ArrayTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A type converter which is used to convert to and from array types particularly for derived types of array component types and dealing with primitive array types.\npublic class AsyncProcessorTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A simple converter that can convert any Processor to an AsyncProcessor.\npublic abstract class BaseTypeConverterRegistry extends CoreTypeConverterRegistry; // Base implementation of a type converter registry used for type converters in Camel.\npublic class CoreTypeConverterRegistry extends org.apache.camel.support.service.ServiceSupport implements org.apache.camel.TypeConverter, org.apache.camel.spi.TypeConverterRegistry;\npublic static class CoreTypeConverterRegistry.FallbackTypeConverter extends Object; // Represents a fallback type converter\npublic class DefaultTypeConverter extends BaseTypeConverterRegistry implements org.apache.camel.spi.AnnotationScanTypeConverters; // Default implementation of a type converter registry used for type converters in Camel.\npublic class EnumTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A type converter which is used to convert from String to enum type\npublic final class FutureTypeConverter extends org.apache.camel.support.TypeConverterSupport; // Future type converter.\npublic class InstanceMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which instantiates an object so that an instance method can be used as a fallback type converter\npublic class InstanceMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which instantiates an object so that an instance method can be used as a type converter\npublic class StaticMethodFallbackTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which invokes a static method as a fallback type converter from a type to another type\npublic class StaticMethodTypeConverter extends org.apache.camel.support.TypeConverterSupport; // A TypeConverter implementation which invokes a static method to convert from a type to another type\n", "des": "Default implementation classes the Type Conversion Strategies"}
{"index": 557, "repo": "hadoop-common-3.3.4", "code": "Package: statistics\n\nClasses and Interfaces: \nInterface DurationTracker; // Interface to be implemented by objects which can track duration.\nInterface DurationTrackerFactory; // Interface for a source of duration tracking.\nInterface IOStatistics; // IO Statistics.\nInterface IOStatisticsAggregator; // Interface exported by classes which support aggregation of IOStatistics.\nInterface IOStatisticsSource; // A source of IO statistics.\nClass BufferedIOStatisticsInputStream; // An extension of BufferedInputStream which implements IOStatisticsSource and forwards requests for the IOStatistics to the wrapped stream.\nClass BufferedIOStatisticsOutputStream; // An extension of BufferedOutputStream which implements IOStatisticsSource and forwards requests for the IOStatistics to the wrapped stream.\nClass DurationStatisticSummary; // Summary of duration tracking statistics as extracted from an IOStatistics instance.\nClass IOStatisticsLogging; // Utility operations convert IO Statistics sources/instances to strings, especially for robustly logging.\nClass IOStatisticsSnapshot; // Snapshot of statistics from a different source.\nClass IOStatisticsSupport; // Support for working with IOStatistics.\nClass MeanStatistic; // A mean statistic represented as the sum and the sample count; the mean is calculated on demand.\nClass StoreStatisticNames; // Common statistic names for object store operations..\nClass StreamStatisticNames; // These are common statistic names.\n", "des": "This package contains support for statistic collection and reporting."}
{"index": 3087, "repo": "spring-ws-core-4.0.5", "code": "Package: mapping\n\nClasses and Interfaces: \npublic class DelegatingSoapEndpointMapping extends Object implements org.springframework.beans.factory.InitializingBean, SoapEndpointMapping; // EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.\npublic class SoapActionAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<String> implements SoapEndpointMapping; // Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.\npublic class SoapActionEndpointMapping extends AbstractMapBasedEndpointMapping implements SoapEndpointMapping; // Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.\n", "des": "Provides miscellaneous endpoints EndpointMapping implementations for SOAP purposes."}
{"index": 3636, "repo": "solr-core-9.3.0", "code": "Package: cli\n\nClasses and Interfaces: \nInterface CLIO;\nInterface Tool;\nClass ApiTool;\nClass AssertTool; // Asserts various conditions and exists with error code if fails, else continues with no output\nClass AuthTool;\nClass ConfigSetDownloadTool;\nClass ConfigSetUploadTool;\nClass ConfigTool; // Sends a POST to the Config API to perform a specified action.\nClass CreateCollectionTool; // Supports create_collection command in the bin/solr script.\nClass CreateCoreTool;\nClass CreateTool;\nClass DeleteTool;\nClass ExportTool;\nClass ExportTool.Info;\nClass HealthcheckTool;\nClass PackageTool;\nClass RunExampleTool; // Supports an interactive session with the user to launch (or relaunch the -e cloud example)\nClass SimplePostTool; // A simple utility class for posting raw updates to a Solr server.\nClass SimplePostTool.BAOS;\nClass SimplePostTool.PageFetcherResult; // Utility class to hold the result form a page fetch\nClass SolrCLI; // Command-line utility for working with Solr.\nClass SolrLogPostTool; // A command line tool for indexing Solr logs in the out-of-the-box log format.\nClass SolrLogPostTool.LogRecordReader;\nClass StatusTool;\nClass ToolBase;\nClass ZkCpTool;\nClass ZkLsTool;\nClass ZkMkrootTool;\nClass ZkMvTool;\nClass ZkRmTool;\nClass SolrCLI.AssertionFailureException;\n", "des": "Solr Command Line Interface classes"}
{"index": 346, "repo": "hadoop-hdfs-3.3.6", "code": "Package: connectors\n\nClasses and Interfaces: \nInterface ClusterConnector; // ClusterConnector interface hides all specifics about how we communicate to the HDFS cluster.\nClass ConnectorFactory; // Connector factory creates appropriate connector based on the URL.\nClass JsonNodeConnector; // A connector that understands JSON data cluster models.\n", "des": "Connectors package is a set of logical connectors that connect to various data sources to read the hadoop cluster information."}
{"index": 3396, "repo": "commons-imaging-1.0-alpha3", "code": "Package: exif\n\nClasses and Interfaces: \nClass ExifRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass ExifRewriter.ExifOverflowException;\n", "des": "JPEG image format Exif utilities."}
{"index": 2523, "repo": "spring-security-core-6.1.2", "code": "Package: prepost\n\nClasses and Interfaces: \n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostAuthorize; // Annotation for specifying a method access-control expression which will be evaluated after a method has been invoked.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PostFilter; // Annotation for specifying a method filtering expression which will be evaluated after a method has been invoked.\n@Deprecated public class PostInvocationAdviceProvider extends Object implements AfterInvocationProvider;\n@Deprecated public interface PostInvocationAttribute extends ConfigAttribute;\n@Deprecated public interface PostInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreAuthorize; // Annotation for specifying a method access-control expression which will be evaluated to decide whether a method invocation is allowed or not.\n@Target({METHOD,TYPE}) @Retention(RUNTIME) @Inherited @Documented public @interface PreFilter; // Annotation for specifying a method filtering expression which will be evaluated before a method has been invoked.\n@Deprecated public interface PreInvocationAttribute extends ConfigAttribute;\n@Deprecated public interface PreInvocationAuthorizationAdvice extends org.springframework.aop.framework.AopInfrastructureBean;\n@Deprecated public class PreInvocationAuthorizationAdviceVoter extends Object implements AccessDecisionVoter<org.aopalliance.intercept.MethodInvocation>;\n@Deprecated public class PrePostAdviceReactiveMethodInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor;\n@Deprecated public class PrePostAnnotationSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\npublic interface PrePostInvocationAttributeFactory extends org.springframework.aop.framework.AopInfrastructureBean;\n", "des": "Contains the infrastructure classes for handling the @PreAuthorize, @PreFilter, @PostAuthorize and @PostFilter annotations."}
{"index": 2505, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: wavefront\n\nClasses and Interfaces: \n@AutoConfiguration @ConditionalOnClass({com.wavefront.sdk.common.application.ApplicationTags.class,com.wavefront.sdk.common.WavefrontSender.class}) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontAutoConfiguration extends Object; // Auto-configuration for Wavefront common infrastructure.\n@ConfigurationProperties(prefix=\"management.wavefront\") public class WavefrontProperties extends Object; // Configuration properties to configure Wavefront.\npublic static class WavefrontProperties.Application extends Object;\npublic static class WavefrontProperties.Metrics extends Object;\npublic static class WavefrontProperties.Metrics.Export extends PushRegistryProperties;\npublic static class WavefrontProperties.Sender extends Object;\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(com.wavefront.sdk.common.WavefrontSender.class) @EnableConfigurationProperties(WavefrontProperties.class) public class WavefrontSenderConfiguration extends Object; // Configuration for WavefrontSender.\n", "des": "Classes shared between Wavefront tracing and metrics."}
{"index": 2376, "repo": "pulsar-client-api-3.0.0", "code": "Package: api\n\nClasses and Interfaces: \npublic final class AuthData extends Object; // Authentication data.\npublic class EncryptionContext extends Object; // Class representing an encryption context.\npublic static class EncryptionContext.EncryptionKey extends Object; // Encryption key with metadata.\n", "des": "Common data classes used in the Pulsar Client API."}
{"index": 3384, "repo": "commons-imaging-1.0-alpha3", "code": "Package: color\n\nClasses and Interfaces: \nClass ColorCieLab; // Represents a color in the CIELAB color space, also known as LAB color space.\nClass ColorCieLch; // Represents a color in the CIELCH color space.\nClass ColorCieLuv; // Represents a color in the CIELUV color space..\nClass ColorCmy; // Represents a color in the CMY color space.\nClass ColorCmyk; // Represents a color in the CMYK color space.\nClass ColorConversions;\nClass ColorDin99Lab; // Represents a color in the DIN99 color space, a derivation of the CIE LAB color space.\nClass ColorHsl; // Represents a color in the HSL color space.\nClass ColorHsv; // Represents a color in the HSV color space.\nClass ColorHunterLab; // Represents a color in the Hunter Lab color space.\nClass ColorXyz; // Represents a color in the CIE 1931 color space, also known as XYZ color space.\n", "des": "Color spaces and conversions between them."}
{"index": 3864, "repo": "lucene-spatial-extras-9.7.0", "code": "Package: composite\n\nClasses and Interfaces: \nClass CompositeSpatialStrategy; // A composite SpatialStrategy based on RecursivePrefixTreeStrategy (RPT) and SerializedDVStrategy (SDV).\nClass CompositeVerifyQuery; // A Query that considers an \"indexQuery\" to have approximate results, and a follow-on ShapeValuesSource is called to verify each hit from TwoPhaseIterator.matches().\nClass IntersectsRPTVerifyQuery; // A spatial Intersects predicate that distinguishes an approximated match from an exact match based on which cells are within the query shape.\n", "des": "Composite strategies."}
{"index": 2943, "repo": "spring-security-config-6.1.2", "code": "Package: authentication\n\nClasses and Interfaces: \npublic abstract class AbstractUserDetailsServiceBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic class AuthenticationManagerBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Registers the central ProviderManager used by the namespace configuration, and allows the configuration of an alias, allowing users to reference it in their beans and clearly see where the name is coming from.\npublic static final class AuthenticationManagerBeanDefinitionParser.NullAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider; // Provider which doesn't provide any service.\npublic class AuthenticationManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.security.authentication.AuthenticationManager>, org.springframework.beans.factory.BeanFactoryAware; // Factory bean for the namespace AuthenticationManager, which allows a more meaningful error message to be reported in the NoSuchBeanDefinitionException, if the user has forgotten to declare the <authentication-manager> element.\npublic class AuthenticationProviderBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser; // Wraps a UserDetailsService bean with a DaoAuthenticationProvider and registers the latter with the ProviderManager.\npublic class JdbcUserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\npublic class PasswordEncoderParser extends Object; // Stateful parser for the <password-encoder> element.\npublic class UserServiceBeanDefinitionParser extends AbstractUserDetailsServiceBeanDefinitionParser;\n", "des": "Parsing of <authentication-manager> and related elements."}
{"index": 1221, "repo": "commons-text-1.10.0", "code": "Package: matcher\n\nClasses and Interfaces: \nInterface StringMatcher; // Determines if a character array portion matches.\nClass StringMatcherFactory; // Provides access to matchers defined in this package.\n", "des": "Provides algorithms for matching up strings for use with a StringSubstitutor."}
{"index": 1054, "repo": "commons-io-2.13.0", "code": "Package: serialization\n\nClasses and Interfaces: \nInterface ClassNameMatcher; // An object that matches a Class name to a condition.\nClass ValidatingObjectInputStream; // An ObjectInputStream that's restricted to deserialize a limited set of classes.\n", "des": "Provides a framework for controlling the deserialization of classes."}
{"index": 1553, "repo": "spring-context-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \n@Deprecated(since=\"6.0\") public class DelegatingThemeSource extends Object implements HierarchicalThemeSource;\n@Deprecated(since=\"6.0\") public class ResourceBundleThemeSource extends Object implements HierarchicalThemeSource, org.springframework.beans.factory.BeanClassLoaderAware;\n@Deprecated(since=\"6.0\") public class SimpleTheme extends Object implements Theme;\n@Deprecated(since=\"6.0\") public abstract class UiApplicationContextUtils extends Object;\n", "des": "Classes supporting the org.springframework.ui.context package."}
{"index": 239, "repo": "nutch-2.4", "code": "Package: service\n\nSub Packages: \npackage service.impl; // Contains service implementation classes for Web UI\n\nClasses and Interfaces: \nInterface CrawlService;\nInterface NutchInstanceService;\nInterface NutchService;\nInterface SeedListService;\n", "des": "Provides service classes and interfaces for Web UI"}
{"index": 745, "repo": "spring-data-solr-4.3.15", "code": "Package: config\n\nClasses and Interfaces: \nClass EmbeddedSolrServerBeanDefinitionParser; // Implementation of BeanDefinitionParser that parses embedded-solr-server element.\nClass HttpSolrClientBeanDefinitionParser; // HttpSolrClientBeanDefinitionParser replaces HttpSolrServerBeanDefinitionParser from version 1.x.\n", "des": "Config support for SolrClient."}
{"index": 1122, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: records\n\nClasses and Interfaces: \nClass AuxServiceConfiguration; // Set of configuration properties that can be injected into the service components via envs, files and custom pluggable helper docker containers.\nClass AuxServiceFile; // A config file that needs to be created and made available as a volume in an service component container.\nClass AuxServiceRecord; // An Service resource has the following attributes.\nClass AuxServiceRecords; // A list of Services.\nEnum AuxServiceFile.TypeEnum; // Config Type.\n", "des": "Package used for auxiliary services manifest records."}
{"index": 1694, "repo": "spring-data-couchbase-5.1.2", "code": "Package: query\n\nClasses and Interfaces: \npublic class AnalyticsQuery extends Object;\npublic enum Consistency extends Enum<Consistency>; // Enumeration of different consistency configurations to be used by the queries generated by the framework.\n@Documented @Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) @Deprecated public @interface Dimensional;\npublic enum FetchType extends Enum<FetchType>; // Setting for specify when to fetch the associated entities\npublic enum HashSide extends Enum<HashSide>; // Hash side to specify hash join.\npublic class Meta extends Object; // Meta-data for Query instances.\npublic static enum Meta.MetaKey extends Enum<Meta.MetaKey>;\npublic class N1QLExpression extends Object; // A N1QL Query Expression\n@Target(FIELD) @Retention(RUNTIME) public @interface N1qlJoin; // This annotation is targeted for entity field which is a list of the associated entities fetched by ANSI Join across the entities available from Couchbase Server 5.5\n@Deprecated @Target(TYPE) @Retention(RUNTIME) public @interface N1qlPrimaryIndexed;\npublic class N1QLQuery extends Query;\n@Target(TYPE) @Retention(RUNTIME) @Deprecated public @interface N1qlSecondaryIndexed;\npublic class OptionsBuilder extends Object; // Methods for building Options objects for Couchbae APIs.\npublic class Query extends Object;\npublic class QueryCriteria extends Object implements QueryCriteriaDefinition;\npublic static enum QueryCriteria.ChainOperator extends Enum<QueryCriteria.ChainOperator>;\npublic interface QueryCriteriaDefinition;\npublic class StringQuery extends Query; // Query created from the string in @Query annotation in the repository interface.\n@Documented @Target(METHOD) @Retention(RUNTIME) @Deprecated public @interface View;\n@Target(TYPE) @Retention(RUNTIME) @Deprecated public @interface ViewIndexed;\n@Documented @Target(METHOD) @Retention(RUNTIME) public @interface WithConsistency; // Annotation to set the scan consistency of N1QL queries with Couchbase.\n", "des": "This package contains annotations and classes relative to querying with Couchbase (whether through views or N1QL) and the associated indexes."}
{"index": 2157, "repo": "wicket-core-10.0.0-M1", "code": "Package: filter\n\nClasses and Interfaces: \npublic final class EnclosureHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic class HeadForceTagIdHandler extends AbstractMarkupFilter; // Handler that sets unique tag id for every inline script and style element in <wicket:head>, unless the element already has one.\npublic final class HtmlHandler extends AbstractMarkupFilter; // This is a markup inline filter.\npublic final class HtmlHeaderSectionHandler extends AbstractMarkupFilter; // This is a markup inline filter.\npublic final class HtmlProblemFinder extends AbstractMarkupFilter; // This is a markup inline filter which by default is not added to the list of markup filter.\npublic final class InlineEnclosureHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic class OpenCloseTagExpander extends AbstractMarkupFilter; // MarkupFilter that expands certain open-close tag as separate open and close tags.\npublic final class RelativePathPrefixHandler extends AbstractMarkupFilter implements IComponentResolver; // The purpose of this filter is to make all \"href\", \"src\" and \"background\" attributes found in the markup which contain a relative URL like \"myDir/myPage.gif\" actually resolve in the output HTML, by prefixing them with with an appropriate path to make the link work properly, even if the current page is being displayed at a mounted URL or whatever.\npublic final class RootMarkupFilter extends AbstractMarkupFilter; // This is the root of all filters, which retrieves the next xml element from the xml parser.\npublic final class StyleAndScriptIdentifier extends AbstractMarkupFilter; // An IMarkupFilter that wraps the body of all <style> elements and <script> elements which are plain JavaScript in CDATA blocks.\npublic class WicketContainerTagHandler extends AbstractMarkupFilter; // This markup filter warns if a wicket:container tag has an attribute besides wicket:id.\npublic class WicketLinkTagHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter.\npublic final class WicketMessageTagHandler extends AbstractMarkupFilter implements IComponentResolver; // This is a markup inline filter and a component resolver.\npublic static class WicketMessageTagHandler.AttributeLocalizer extends Behavior; // Attribute localizing behavior.\npublic final class WicketNamespaceHandler extends AbstractMarkupFilter; // This is a markup inline filter.\n", "des": "Default parsing extensions."}
{"index": 3158, "repo": "tika-core-2.8.0", "code": "Package: metadata\n\nClasses and Interfaces: \nInterface AccessPermissions; // Until we can find a common standard, we'll use these options.\nInterface ClimateForcast; // Met keys from NCAR CCSM files in the Climate Forecast Convention.\nInterface CreativeCommons; // A collection of Creative Commons properties names.\nInterface Database;\nInterface DublinCore; // A collection of Dublin Core metadata names.\nInterface Epub; // EPub properties collection.\nInterface ExternalProcess;\nInterface FileSystem; // A collection of metadata elements for file system level metadata\nInterface Font;\nInterface Geographic; // Geographic schema.\nInterface HTML;\nInterface HttpHeaders; // A collection of HTTP header names.\nInterface IPTC; // IPTC photo metadata schema.\nInterface MachineMetadata; // Metadata for describing machines, such as their architecture, type and endian-ness\nInterface Message; // A collection of Message related property names.\nInterface Office; // Office Document properties collection.\nInterface OfficeOpenXMLCore; // Core properties as defined in the Office Open XML specification part Two that are not in the DublinCore namespace.\nInterface OfficeOpenXMLExtended; // Extended properties as defined in the Office Open XML specification part Four.\nInterface PagedText; // XMP Paged-text schema.\nInterface PDF; // PDF properties collection.\nInterface Photoshop; // XMP Photoshop metadata schema.\nInterface QuattroPro; // QuattroPro properties collection.\nInterface Rendering;\nInterface RTFMetadata;\nInterface TIFF; // XMP Exif TIFF schema.\nInterface TikaCoreProperties; // Contains a core set of basic Tika metadata properties, which all parsers will attempt to supply (where the file format permits).\nInterface TikaMimeKeys; // A collection of Tika metadata keys used in Mime Type resolution\nInterface TikaPagedText; // Metadata properties for paged text, metadata appropriate for an individual page (useful for embedded document handlers called on individual pages).\nInterface WARC;\nInterface WordPerfect; // WordPerfect properties collection.\nInterface XMP;\nInterface XMPDM; // XMP Dynamic Media schema.\nInterface XMPIdq;\nInterface XMPMM;\nInterface XMPRights; // XMP Rights management schema.\nClass MachineMetadata.Endian;\n", "des": "Multi-valued metadata container, and set of constant metadata fields."}
{"index": 2178, "repo": "spring-security-web-6.1.2", "code": "Package: logout\n\nClasses and Interfaces: \npublic final class CompositeLogoutHandler extends Object implements LogoutHandler; // Performs a logout through all the LogoutHandler implementations.\npublic final class CookieClearingLogoutHandler extends Object implements LogoutHandler; // A logout handler which clears either - A defined list of cookie names, using the context path as the cookie path OR - A given list of Cookies\npublic class DelegatingLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // Delegates to logout handlers based on matched request matchers\npublic class ForwardLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // LogoutSuccessHandler implementation that will perform a request dispatcher \"forward\" to the specified target URL.\npublic final class HeaderWriterLogoutHandler extends Object implements LogoutHandler;\npublic class HttpStatusReturningLogoutSuccessHandler extends Object implements LogoutSuccessHandler; // Implementation of the LogoutSuccessHandler.\npublic class LogoutFilter extends org.springframework.web.filter.GenericFilterBean; // Logs a principal out.\npublic interface LogoutHandler; // Indicates a class that is able to participate in logout handling.\npublic final class LogoutSuccessEventPublishingLogoutHandler extends Object implements LogoutHandler, org.springframework.context.ApplicationEventPublisherAware; // A logout handler which publishes LogoutSuccessEvent\npublic interface LogoutSuccessHandler; // Strategy that is called after a successful logout by the LogoutFilter, to handle redirection or forwarding to the appropriate destination.\npublic class SecurityContextLogoutHandler extends Object implements LogoutHandler; // Performs a logout by modifying the SecurityContextHolder.\npublic class SimpleUrlLogoutSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler implements LogoutSuccessHandler; // Handles the navigation on logout by delegating to the AbstractAuthenticationTargetUrlRequestHandler base class logic.\n", "des": "Logout functionality based around a filter which handles a specific logout URL."}
{"index": 360, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: proto\n\nClasses and Interfaces: \nClass DatePartitionedLogger<T extends com.google.protobuf.MessageLite>; // Class to create proto reader and writer for a date partitioned directory structure.\nClass ProtoMessageReader<T extends com.google.protobuf.MessageLite>;\nClass ProtoMessageWritable<T extends com.google.protobuf.MessageLite>;\nClass ProtoMessageWriter<T extends com.google.protobuf.MessageLite>;\n", "des": "Logger code copied from tez codebase, this should be removed when we swtich to 0.9.2 tez version and we should depend on the tez libraries for this."}
{"index": 198, "repo": "nutch-2.4", "code": "Package: api\n\nSub Packages: \npackage api.impl; // Implementations of REST API interfaces.\n\nClasses and Interfaces: \nInterface ConfManager;\nInterface JobManager;\nClass NutchServer;\nEnum JobManager.JobType;\n", "des": "REST API to run and control crawl jobs."}
{"index": 92, "repo": "ignite-core-2.15.0", "code": "Package: internal\n\nClasses and Interfaces: \nClass DiscoveryDataPacket; // Carries discovery data in marshalled form and allows convenient way of converting it to and from DiscoveryDataBag objects.\nClass FutureTask<T>;\nClass TcpDiscoveryNode; // Node for TcpDiscoverySpi.\nClass TcpDiscoveryNodesRing; // Convenient way to represent topology for TcpDiscoverySpi\nClass TcpDiscoveryStatistics; // Statistics for TcpDiscoverySpi.\nEnum TcpDiscoverySpiState; // State of local node TcpDiscoverySpi.\n", "des": "Contains internal implementation."}
{"index": 3764, "repo": "lucene-analysis-common-9.7.0", "code": "Package: br\n\nClasses and Interfaces: \nClass BrazilianAnalyzer; // Analyzer for Brazilian Portuguese language.\nClass BrazilianStemFilter; // A TokenFilter that applies BrazilianStemmer.\nClass BrazilianStemFilterFactory; // Factory for BrazilianStemFilter.\nClass BrazilianStemmer; // A stemmer for Brazilian Portuguese words.\n", "des": "Analyzer for Brazilian Portuguese."}
{"index": 2214, "repo": "spring-data-commons-3.1.2", "code": "Package: repository\n\nSub Packages: \npackage repository.cdi; // Base classes to implement CDI support for repositories.\npackage repository.config; // Support classes for repository namespace and JavaConfig integration.\npackage repository.core; // Core abstractions for repository implementation.\npackage repository.history; // API for repositories using historiography.\npackage repository.init; // Support for repository initialization using XML and JSON.\npackage repository.query; // Support classes to work with query methods.\npackage repository.reactive; // Support for reactive repositories.\npackage repository.support; // Support classes for integration of the repository programming model with 3rd party frameworks.\npackage repository.util; // Utility classes for repository implementations.\n\nClasses and Interfaces: \n@NoRepositoryBean public interface CrudRepository<T,ID> extends Repository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ListCrudRepository<T,ID> extends CrudRepository<T,ID>; // Interface for generic CRUD operations on a repository for a specific type.\n@NoRepositoryBean public interface ListPagingAndSortingRepository<T,ID> extends PagingAndSortingRepository<T,ID>; // Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.\n@Retention(RUNTIME) @Target(TYPE) @Documented public @interface NoRepositoryBean; // Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being created.\n@NoRepositoryBean public interface PagingAndSortingRepository<T,ID> extends Repository<T,ID>; // Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.\n@Indexed public interface Repository<T,ID>; // Central repository marker interface.\n@Indexed @Documented @Retention(RUNTIME) @Target(TYPE) @Inherited public @interface RepositoryDefinition; // Annotation to demarcate interfaces a repository proxy shall be created for.\n", "des": "Central interfaces for repository abstraction."}
{"index": 758, "repo": "lucene-analyzers-common-8.11.2", "code": "Package: boost\n\nClasses and Interfaces: \nClass DelimitedBoostTokenFilter; // Characters before the delimiter are the \"token\", those after are the boost.\nClass DelimitedBoostTokenFilterFactory; // Factory for DelimitedBoostTokenFilter.\n", "des": "Provides various convenience classes for creating boosts on Tokens."}
{"index": 3410, "repo": "commons-imaging-1.0-alpha3", "code": "Package: floatingpoint\n\nClasses and Interfaces: \nInterface PaletteEntry; // Defines an interface for specifying color assignments to floating point values.\nClass PaletteEntryForRange; // Provides a palette entry for colors associated with a range of values.\nClass PaletteEntryForValue; // Provides a palette entry for a color assignment to a single value.\nClass PhotometricInterpreterFloat; // Implements a custom photometric interpreter that can be supplied by applications in order to render Java images from real-valued TIFF data products.\n", "des": "Provides supplemental photometric interpreters for TIFF products based on floating-point data."}
{"index": 1911, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: couchbase\n\nClasses and Interfaces: \n@AutoConfiguration(after={CouchbaseAutoConfiguration.class,ValidationAutoConfiguration.class}) @ConditionalOnClass({com.couchbase.client.java.Bucket.class,org.springframework.data.couchbase.repository.CouchbaseRepository.class}) @EnableConfigurationProperties(CouchbaseDataProperties.class) @Import({org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataConfiguration.class,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseClientFactoryConfiguration.class,org.springframework.boot.autoconfigure.data.couchbase.CouchbaseClientFactoryDependentConfiguration.class}) public class CouchbaseDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Couchbase support.\n@Configuration(proxyBeanMethods=false) @ConditionalOnClass(jakarta.validation.Validator.class) public static class CouchbaseDataAutoConfiguration.ValidationConfiguration extends Object;\n@ConfigurationProperties(prefix=\"spring.data.couchbase\") public class CouchbaseDataProperties extends Object; // Configuration properties for Spring Data Couchbase.\n@AutoConfiguration(after=CouchbaseDataAutoConfiguration.class) @ConditionalOnClass({com.couchbase.client.java.Cluster.class,org.springframework.data.couchbase.repository.ReactiveCouchbaseRepository.class,reactor.core.publisher.Flux.class}) @Import(org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataConfiguration.class) public class CouchbaseReactiveDataAutoConfiguration extends Object; // Auto-configuration for Spring Data's Reactive Couchbase support.\n", "des": "Auto-configuration for Spring Data Couchbase."}
{"index": 3670, "repo": "solr-core-9.3.0", "code": "Package: log4j2\n\nClasses and Interfaces: \nClass Log4j2Watcher;\nClass Log4j2Watcher.Log4j2Appender;\nClass Log4j2Watcher.Log4j2Info;\n", "des": "LOG4J2 based implementation of LogWatcher"}
{"index": 2202, "repo": "spring-data-commons-3.1.2", "code": "Package: domain\n\nSub Packages: \npackage domain.jaxb; // Central domain abstractions especially to be used in combination with the Repository abstraction.\n\nClasses and Interfaces: \npublic class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> extends Object; // Convenience base class for aggregate roots that exposes a AbstractAggregateRoot.registerEvent(Object) to capture domain events and expose them via AbstractAggregateRoot.domainEvents().\npublic abstract class AbstractPageRequest extends Object implements Pageable, Serializable; // Abstract Java Bean implementation of Pageable.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface AfterDomainEventPublication; // Annotation to be used on a method of a Spring Data managed aggregate to get invoked after the events of an aggregate have been published.\npublic interface Auditable<U,ID,T extends TemporalAccessor> extends Persistable<ID>; // Interface for auditable entities.\npublic interface AuditorAware<T>; // Interface for components that are aware of the application's current auditor.\n@Retention(RUNTIME) @Target({METHOD,ANNOTATION_TYPE}) public @interface DomainEvents; // DomainEvents can be used on methods of aggregate roots managed by Spring Data repositories to publish the events returned by that method as Spring application events.\npublic interface Example<T>; // Support for query by example (QBE).\npublic interface ExampleMatcher; // Specification for property path matching to use in query by example (QBE).\npublic static class ExampleMatcher.GenericPropertyMatcher extends Object; // A generic property matcher that specifies string matching and case sensitivity.\npublic static class ExampleMatcher.GenericPropertyMatchers extends Object; // Predefined property matchers to create a ExampleMatcher.GenericPropertyMatcher.\npublic static interface ExampleMatcher.MatcherConfigurer<T>; // Callback to configure a matcher.\npublic static enum ExampleMatcher.MatchMode extends Enum<ExampleMatcher.MatchMode>; // The match modes to expose so that clients can find about how to concatenate the predicates.\npublic static enum ExampleMatcher.NoOpPropertyValueTransformer extends Enum<ExampleMatcher.NoOpPropertyValueTransformer> implements ExampleMatcher.PropertyValueTransformer;\npublic static enum ExampleMatcher.NullHandler extends Enum<ExampleMatcher.NullHandler>; // Null handling for creating criterion out of an Example.\n", "des": "Central domain abstractions especially to be used in combination with the Repository abstraction."}
{"index": 3632, "repo": "lucene-misc-9.7.0", "code": "Package: util\n\nSub Packages: \npackage util.fst; // Misc FST classes.\n\nClasses and Interfaces: \nInterface MemoryTracker; // Tracks dynamic allocations/deallocations of memory for transient objects\n", "des": "Memory Tracker interface which allows defining custom collector level memory trackers"}
{"index": 3555, "repo": "guava-32.1.1-jre", "code": "Package: graph\n\nClasses and Interfaces: \nInterface Graph<N>; // An interface for graph-structured data, whose edges are anonymous entities with no identity or information of their own.\nInterface MutableGraph<N>; // A subinterface of Graph which adds mutation methods.\nInterface MutableNetwork<N,​E>; // A subinterface of Network which adds mutation methods.\nInterface MutableValueGraph<N,​V>; // A subinterface of ValueGraph which adds mutation methods.\nInterface Network<N,​E>; // An interface for graph-structured data, whose edges are unique objects.\nInterface PredecessorsFunction<N>; // A functional interface for graph-structured data.\nInterface SuccessorsFunction<N>; // A functional interface for graph-structured data.\nInterface ValueGraph<N,​V>; // An interface for graph-structured data, whose edges have associated non-unique values.\nClass AbstractGraph<N>; // This class provides a skeletal implementation of Graph.\nClass AbstractNetwork<N,​E>; // This class provides a skeletal implementation of Network.\nClass AbstractValueGraph<N,​V>; // This class provides a skeletal implementation of ValueGraph.\nClass ElementOrder<T>; // Used to represent the order of elements in a data structure that supports different options for iteration order guarantees.\nClass EndpointPair<N>; // An immutable pair representing the two endpoints of an edge in a graph.\nClass GraphBuilder<N>; // A builder for constructing instances of MutableGraph or ImmutableGraph with user-defined properties.\nClass Graphs; // Static utility methods for Graph, ValueGraph, and Network instances.\nClass ImmutableGraph<N>; // A Graph whose elements and structural relationships will never change.\nClass ImmutableGraph.Builder<N>; // A builder for creating ImmutableGraph instances, especially static final graphs.\nClass ImmutableNetwork<N,​E>; // A Network whose elements and structural relationships will never change.\nClass ImmutableNetwork.Builder<N,​E>; // A builder for creating ImmutableNetwork instances, especially static final networks.\nClass ImmutableValueGraph<N,​V>; // A ValueGraph whose elements and structural relationships will never change.\n", "des": "An API for representing graph (node and edge) data."}
{"index": 1794, "repo": "spring-integration-file-6.1.2", "code": "Package: support\n\nClasses and Interfaces: \npublic enum FileExistsMode extends Enum<FileExistsMode>; // When writing file, this enumeration indicates what action shall be taken in case the destination file already exists.\npublic final class FileUtils extends Object; // Utilities for operations on Files.\n", "des": "Provides various support classes used across Spring Integration File Components."}
{"index": 2333, "repo": "spring-boot-3.1.1", "code": "Package: ssl\n\nSub Packages: \npackage ssl.jks; // SSL trust material provider for Java KeyStores.\npackage ssl.pem; // SSL trust material provider for PEM-encoded certificates.\n\nClasses and Interfaces: \npublic class DefaultSslBundleRegistry extends Object implements SslBundleRegistry, SslBundles; // Default SslBundleRegistry implementation.\npublic class NoSuchSslBundleException extends RuntimeException; // Exception indicating that an SslBundle was referenced with a name that does not match any registered bundle.\npublic interface SslBundle; // A bundle of trust material that can be used to establish an SSL connection.\npublic interface SslBundleKey; // A reference to a single key obtained via SslBundle.\npublic interface SslBundleRegistry; // Interface that can be used to register an SslBundle for a given name.\npublic interface SslBundles; // A managed set of SslBundle instances that can be retrieved by name.\npublic interface SslManagerBundle; // A bundle of key and trust managers that can be used to establish an SSL connection.\npublic interface SslOptions; // Configuration options that should be applied when establishing an SSL connection.\npublic interface SslStoreBundle; // A bundle of key and trust stores that can be used to establish an SSL connection.\n", "des": "Management of trust material that can be used to establish an SSL connection."}
{"index": 3327, "repo": "opencms-core-15.0", "code": "Package: linkvalidation\n\nClasses and Interfaces: \nInterface I_CmsUpdatableComponent; // Interface with method to update a vaadin table.\nClass A_CmsLinkValidator; // Validator for links.\nClass CmsExternalLinksValidatorThread; // Thread for extern link validation.\nClass CmsInternalResources; // Class for the layout for choosing the resources.\nClass CmsLinkInFolderValidationApp; // App to check relations of resources in folder to other folder.\nClass CmsLinkInFolderValidationConfiguration; // Configuration for Check relation to resources outside of folder - app.\nClass CmsLinkValidationApp; // Class for the Link validation app.\nClass CmsLinkValidationConfiguration; // Configuration for Link Validation app.\nClass CmsLinkValidationExternal; // Class for the external link validation.\nClass CmsLinkValidationExternalApp; // Class for the Link validation app.\nClass CmsLinkValidationExternalConfiguration; // Configuration for Link Validation app.\nClass CmsLinkValidationFolder; // Class for the folder for the link validation tools.\nClass CmsLinkValidationInternalTable; // Result table for broken internal relations.\nClass CmsResourceListDialog; // Dialog to show list of resources.\n", "des": "Contains classes of the link validation app."}
{"index": 648, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: metrics\n\nClasses and Interfaces: \nClass FederationStateStoreClientMetrics; // Performance metrics for FederationStateStore implementations.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3004, "repo": "spring-web-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class DefaultClientCodecConfigurer extends Object implements ClientCodecConfigurer; // Default implementation of ClientCodecConfigurer.\npublic class DefaultServerCodecConfigurer extends Object implements ServerCodecConfigurer; // Default implementation of ServerCodecConfigurer.\n", "des": "Provides implementations of ClientCodecConfigurer and ServerCodecConfigurer based on the converter implementations from org.springframework.http.codec.json and co."}
{"index": 3556, "repo": "guava-32.1.1-jre", "code": "Package: hash\n\nClasses and Interfaces: \nInterface Funnel<T extends @Nullable java.lang.Object>; // An object which can send data from an object of type T into a PrimitiveSink.\nInterface Hasher; // A PrimitiveSink that can compute a hash code after reading the input.\nInterface HashFunction; // A hash function is a collision-averse pure function that maps an arbitrary block of data to a number called a hash code.\nInterface PrimitiveSink; // An object which can receive a stream of primitive values.\nClass BloomFilter<T extends @Nullable java.lang.Object>; // A Bloom filter for instances of T.\nClass Funnels; // Funnels for common types.\nClass HashCode; // An immutable hash code of arbitrary bit length.\nClass Hashing; // Static methods to obtain HashFunction instances, and other static hashing-related utilities.\nClass HashingInputStream; // An InputStream that maintains a hash of the data read from it.\nClass HashingOutputStream; // An OutputStream that maintains a hash of the data written to it.\n", "des": "Hash functions and related structures."}
{"index": 335, "repo": "kafka-clients-3.5.0", "code": "Package: serialization\n\nClasses and Interfaces: \nInterface Deserializer<T>; // An interface for converting bytes to objects.\nInterface Serde<T>; // The interface for wrapping a serializer and deserializer for the given data type.\nInterface Serializer<T>; // An interface for converting objects to bytes.\nClass BooleanDeserializer;\nClass BooleanSerializer;\nClass ByteArrayDeserializer;\nClass ByteArraySerializer;\nClass ByteBufferDeserializer;\nClass ByteBufferSerializer; // Do not need to flip before call serialize(String, ByteBuffer).\nClass BytesDeserializer;\nClass BytesSerializer;\nClass DoubleDeserializer;\nClass DoubleSerializer;\nClass FloatDeserializer;\nClass FloatSerializer;\nClass IntegerDeserializer;\nClass IntegerSerializer;\nClass ListDeserializer<Inner>;\nClass ListSerializer<Inner>;\nClass LongDeserializer;\nClass LongSerializer;\nClass Serdes; // Factory for creating serializers / deserializers.\nClass Serdes.BooleanSerde;\nClass Serdes.ByteArraySerde;\nClass Serdes.ByteBufferSerde;\nClass Serdes.BytesSerde;\nClass Serdes.DoubleSerde;\nClass Serdes.FloatSerde;\nClass Serdes.IntegerSerde;\nClass Serdes.ListSerde<Inner>;\nClass Serdes.LongSerde;\nClass Serdes.ShortSerde;\nClass Serdes.StringSerde;\nClass Serdes.UUIDSerde;\nClass Serdes.VoidSerde;\nClass Serdes.WrapperSerde<T>;\nClass ShortDeserializer;\nClass ShortSerializer;\nClass StringDeserializer; // String encoding defaults to UTF8 and can be customized by setting the property key.deserializer.encoding, value.deserializer.encoding or deserializer.encoding.\nClass StringSerializer; // String encoding defaults to UTF8 and can be customized by setting the property key.serializer.encoding, value.serializer.encoding or serializer.encoding.\nClass UUIDDeserializer; // We are converting the byte array to String before deserializing to UUID.\nClass UUIDSerializer; // We are converting UUID to String before serializing.\nClass VoidDeserializer;\nClass VoidSerializer;\n", "des": "Provides interface and some implementations of serialization/deserialization routines for various objects."}
{"index": 494, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: state\n\nClasses and Interfaces: \nInterface BagState<T>; // A ReadableState cell containing a bag of values.\nInterface CombiningState<InputT,AccumT,OutputT>; // A ReadableState cell defined by a Combine.CombineFn, accepting multiple input values, combining them as specified into accumulators, and producing a single output value.\nInterface GroupingState<InputT,OutputT>; // A ReadableState cell that combines multiple input values and outputs a single value of a different type.\nInterface MapState<K,V>; // A ReadableState cell mapping keys to values.\nInterface MultimapState<K,V>; // A ReadableState cell mapping keys to bags of values.\nInterface OrderedListState<T>; // A ReadableState cell containing a list of values sorted by timestamp.\nInterface ReadableState<T>; // A State that can be read via ReadableState.read().\nInterface SetState<T>; // A ReadableState cell containing a set of elements.\nInterface State; // A state cell, supporting a State.clear() operation.\nInterface StateBinder; // For internal use only; no backwards-compatibility guarantees.\nInterface StateContext<W extends BoundedWindow>; // For internal use only; no backwards-compatibility guarantees.\nInterface StateSpec<StateT extends State>; // A specification of a persistent state cell.\nInterface StateSpec.Cases<ResultT>; // Cases for doing a \"switch\" on the type of StateSpec.\nInterface Timer; // A timer for a specified time domain that can be set to register the desire for further processing at particular time in its specified time domain.\nInterface TimerMap;\nInterface Timers; // Interface for interacting with time.\nInterface TimerSpec; // A specification for a Timer.\nInterface ValueState<T>; // A ReadableState cell containing a single value.\nInterface WatermarkHoldState; // For internal use only; no backwards-compatibility guarantees.\nClass ReadableStates; // For internal use only; no backwards-compatibility guarantees.\nClass StateContexts; // For internal use only; no backwards-compatibility guarantees.\nClass StateKeySpec;\nClass StateSpec.Cases.WithDefault<ResultT>; // A base class for a visitor with a default method for cases it is not interested in.\n", "des": "Classes and interfaces for interacting with state."}
{"index": 3785, "repo": "lucene-analysis-common-9.7.0", "code": "Package: fi\n\nClasses and Interfaces: \nClass FinnishAnalyzer; // Analyzer for Finnish.\nClass FinnishLightStemFilter; // A TokenFilter that applies FinnishLightStemmer to stem Finnish words.\nClass FinnishLightStemFilterFactory; // Factory for FinnishLightStemFilter.\nClass FinnishLightStemmer; // Light Stemmer for Finnish.\n", "des": "Analyzer for Finnish."}
{"index": 2314, "repo": "spring-boot-3.1.1", "code": "Package: json\n\nClasses and Interfaces: \npublic abstract class AbstractJsonParser extends Object implements JsonParser; // Base class for parsers wrapped or implemented in this package.\npublic class BasicJsonParser extends AbstractJsonParser; // Really basic JSON parser for when you have nothing else available.\npublic class GsonJsonParser extends AbstractJsonParser; // Thin wrapper to adapt Gson to a JsonParser.\npublic class JacksonJsonParser extends AbstractJsonParser; // Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser.\npublic class JsonParseException extends IllegalArgumentException; // IllegalArgumentException thrown when source JSON is invalid.\npublic interface JsonParser; // Parser that can read JSON formatted strings into Maps or Lists.\npublic abstract class JsonParserFactory extends Object; // Factory to create a JsonParser.\n", "des": "Support for parsing JSON."}
{"index": 3266, "repo": "opencms-core-15.0", "code": "Package: timing\n\nClasses and Interfaces: \nInterface I_CmsProfilingHandler; // Profiling handler interface which gets informed of method call durations.\nClass CmsDefaultProfilingHandler; // Default profiling handler which only has a single instance and delegates method calls to its registered child handlers.\nClass CmsProfilingInvocationHandler; // Invocation handler used to measure method calls durations.\nClass CmsThreadStatsTreeProfilingHandler; // Builds up a tree whose nodes correspond to stack trace lines of the threads calling this profiling handler.\nClass CmsThreadStatsTreeProfilingHandler.Node; // The tree node.\n", "des": "Utility classes for profiling driver calls."}
{"index": 1231, "repo": "spring-hateoas-2.1.2", "code": "Package: mediatype\n\nSub Packages: \npackage mediatype.alps; // Value objects to build ALPS metadata.\npackage mediatype.collectionjson; // Value objects to build Collection+JSON representations.\npackage mediatype.hal; // HAL-specific extensions, SPIs and Jackson customizations.\npackage mediatype.html; // Support for HTML media type.\npackage mediatype.problem; // Value objects to build Problem representations.\npackage mediatype.uber; // UBER media type objects.\npackage mediatype.vnderrors; // Vnd.Error media type.\n\nClasses and Interfaces: \npublic interface AffordanceModelFactory; // SPI for media type implementations to create a specific AffordanceModel for a ConfiguredAffordance.\npublic interface AffordanceOperations; // Operations commons to all builder APIs.\npublic class Affordances extends Object implements AffordanceOperations; // Primary API to construct Affordance instances.\npublic interface ConfigurableAffordance extends AffordanceOperations; // An affordance in creation.\npublic class ConfigurableHandlerInstantiator extends com.fasterxml.jackson.databind.cfg.HandlerInstantiator; // A HandlerInstantiator that will use instances explicitly registered with it but fall back to lookup or even create a fresh instance via the AutowireCapableBeanFactory provided on construction.\npublic interface ConfiguredAffordance; // A configure affordance for inspection by media type implementations to create AffordanceModel instances.\npublic interface InputTypeFactory; // SPI interface for components that can derive an input type from a ResolvableType.\npublic final class JacksonHelper extends Object; // Jackson utility methods.\npublic interface MessageResolver; // A simplified variant of MessageSourceAccessor to allow more direct replacement with a no-op implementation in case the target MessageSource is unavailable to avoid resolution overhead.\npublic class MessageSourceResolvableSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<MessageSourceResolvable>; // A Jackson serializer triggering message resolution via a MessageResolver for MessageSourceResolvable instances about to be serialized.\npublic class PropertyUtils extends Object;\n", "des": "Spring container configuration support."}
{"index": 3714, "repo": "solr-core-9.3.0", "code": "Package: update\n\nSub Packages: \npackage update.processor; // UpdateRequestProcessorFactory APIs and implementations for use in UpdateRequestProcessorChains\n\nClasses and Interfaces: \nInterface SolrCoreState.IndexWriterCloser;\nInterface VersionBucket.CheckedFunction<T,​R>;\nClass AddUpdateCommand; // An UpdateCommand for adding or updating one document.\nClass CommitTracker; // Helper class for tracking autoCommit state.\nClass CommitUpdateCommand; // A commit index command encapsulated in an object.\nClass DefaultSolrCoreState;\nClass DeleteUpdateCommand;\nClass DirectUpdateHandler2; // DirectUpdateHandler2 implements an UpdateHandler where documents are added directly to the main Lucene index as opposed to adding to a separate smaller index.\nClass DocumentBuilder; // Builds a Lucene Document from a SolrInputDocument.\nClass IndexFingerprint;\nClass LoggingInfoStream; // An InfoStream implementation which passes messages on to Solr's logging.\nClass MemOutputStream;\nClass MergeIndexesCommand; // A merge indexes command encapsulated in an object.\nClass PeerSync; // This class is useful for performing peer to peer synchronization of recently indexed update commands during recovery process.\nClass PeerSync.MissedUpdatesFinder; // Helper class for doing comparison ourUpdates and other replicas's updates to find the updates that we missed\nClass PeerSync.MissedUpdatesRequest; // Result of PeerSync.MissedUpdatesFinder\nClass PeerSync.PeerSyncResult;\nClass PeerSyncWithLeader;\nClass PeerSyncWithLeader.MissedUpdatesFinder; // Helper class for doing comparison ourUpdates and other replicas's updates to find the updates that we missed\nClass RollbackUpdateCommand;\nClass SolrCmdDistributor; // Used for distributing commands from a shard leader to its replicas.\nClass SolrCmdDistributor.ForwardNode;\nClass SolrCmdDistributor.Node;\nClass SolrCmdDistributor.Req;\nClass SolrCmdDistributor.Response;\nClass SolrCmdDistributor.SolrError;\nClass SolrCmdDistributor.StdNode;\nClass SolrCoreState; // The state in this class can be easily shared between SolrCores across SolrCore reloads.\nClass SolrIndexConfig; // This config object encapsulates IndexWriter config params, defined in the <indexConfig> section of solrconfig.xml\nClass SolrIndexSplitter;\n", "des": "APIs and classes for managing index updates"}
{"index": 2070, "repo": "spring-webmvc-6.0.11", "code": "Package: mvc\n\nSub Packages: \npackage mvc.annotation; // Support package for annotation-based Servlet MVC controllers.\npackage mvc.condition; // Common MVC logic for matching incoming requests based on conditions.\npackage mvc.method; // Servlet-based infrastructure for handler method processing, building on the org.springframework.web.method package.\npackage mvc.support; // Support package for MVC controllers.\n\nClasses and Interfaces: \npublic abstract class AbstractController extends WebContentGenerator implements Controller; // Convenient superclass for controller implementations, using the Template Method design pattern.\npublic abstract class AbstractUrlViewController extends AbstractController; // Abstract base class for Controllers that return a view name based on the request URL.\n@FunctionalInterface public interface Controller; // Base Controller interface, representing a component that receives HttpServletRequest and HttpServletResponse instances just like a HttpServlet but is able to participate in an MVC workflow.\npublic class HttpRequestHandlerAdapter extends Object implements HandlerAdapter; // Adapter to use the plain HttpRequestHandler interface with the generic DispatcherServlet.\n@Deprecated public interface LastModified;\npublic class ParameterizableViewController extends AbstractController; // Trivial controller that always returns a pre-configured view and optionally sets the response status code.\npublic class ServletForwardingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware; // Spring Controller implementation that forwards to a named servlet, i.e.\npublic class ServletWrappingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean; // Spring Controller implementation that wraps a servlet instance which it manages internally.\npublic class SimpleControllerHandlerAdapter extends Object implements HandlerAdapter; // Adapter to use the plain Controller workflow interface with the generic DispatcherServlet.\npublic class UrlFilenameViewController extends AbstractUrlViewController; // Simple Controller implementation that transforms the virtual path of a URL into a view name and returns that view.\npublic class WebContentInterceptor extends WebContentGenerator implements HandlerInterceptor; // Handler interceptor that checks the request for supported methods and a required session and prepares the response by applying the configured cache settings.\n", "des": "Standard controller implementations for the Servlet MVC framework that comes with Spring."}
{"index": 1522, "repo": "spring-context-6.0.11", "code": "Package: number\n\nSub Packages: \npackage number.money; // Integration with the JSR-354 javax.money package.\n\nClasses and Interfaces: \npublic abstract class AbstractNumberFormatter extends Object implements Formatter<Number>; // Abstract formatter for Numbers, providing a AbstractNumberFormatter.getNumberFormat(java.util.Locale) template method.\npublic class CurrencyStyleFormatter extends AbstractNumberFormatter; // A BigDecimal formatter for number values in currency style.\npublic class NumberFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<NumberFormat>; // Formats fields annotated with the NumberFormat annotation.\npublic class NumberStyleFormatter extends AbstractNumberFormatter; // A general-purpose number formatter using NumberFormat's number style.\npublic class PercentStyleFormatter extends AbstractNumberFormatter; // A formatter for number values in percent style.\n", "des": "Formatters for java.lang.Number properties."}
{"index": 2072, "repo": "spring-webmvc-6.0.11", "code": "Package: condition\n\nClasses and Interfaces: \npublic abstract class AbstractRequestCondition<T extends AbstractRequestCondition<T>> extends Object implements RequestCondition<T>; // A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().\npublic class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition>; // Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.\npublic final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.\npublic final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().\npublic interface MediaTypeExpression; // A contract for media type expressions (e.g.\npublic interface NameValueExpression<T>; // A contract for \"name!=value\" style expression used to specify request parameters and request header conditions in @RequestMapping.\npublic final class ParamsRequestCondition extends AbstractRequestCondition<ParamsRequestCondition>; // A logical conjunction (' && ') request condition that matches a request against a set parameter expressions with syntax defined in RequestMapping.params().\npublic final class PathPatternsRequestCondition extends AbstractRequestCondition<PathPatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition>; // A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.\npublic final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition>; // A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.\npublic interface RequestCondition<T>; // Contract for request mapping conditions.\npublic final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder>; // A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.\n", "des": "Common MVC logic for matching incoming requests based on conditions."}
{"index": 2371, "repo": "pulsar-client-api-3.0.0", "code": "Package: api\n\nSub Packages: \npackage api.interceptor; // Pulsar interceptors.\npackage api.schema; // Schema definitions for Pulsar Client API.\npackage api.transaction; // Pulsar transaction related API.\n\nClasses and Interfaces: \n@LimitedPrivate @Stable public interface Authentication extends Closeable, Serializable; // Interface of authentication providers.\n@LimitedPrivate @Stable public interface AuthenticationDataProvider extends Serializable; // Interface for accessing data which are used in variety of authentication schemes on client side.\n@LimitedPrivate @Stable public final class AuthenticationFactory extends Object; // Factory class that allows to create Authentication instances for all the supported authentication methods.\n@Public @Evolving public interface AutoClusterFailoverBuilder; // AutoClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider.\npublic static enum AutoClusterFailoverBuilder.FailoverPolicy extends Enum<AutoClusterFailoverBuilder.FailoverPolicy>;\n@Public @Stable public interface BatcherBuilder extends Serializable; // Batcher builder.\n@Public @Stable public interface BatchMessageContainer; // Batch message container for individual messages being published until they are batched and sent to broker.\n@Public @Stable public class BatchReceivePolicy extends Object implements Serializable; // Configuration for message batch receive Consumer.batchReceive() Consumer.batchReceiveAsync().\npublic static class BatchReceivePolicy.Builder extends Object; // Builder of BatchReceivePolicy.\n@Public @Stable public interface ClientBuilder extends Serializable, Cloneable; // Builder interface that is used to configure and construct a PulsarClient instance.\n@Public @Stable public enum CompressionType extends Enum<CompressionType>; // The compression type that can be specified on a Producer.\n@Public @Stable public interface Consumer<T> extends Closeable, MessageAcknowledger; // An interface that abstracts behavior of Pulsar's consumer.\n@Public @Stable public interface ConsumerBuilder<T> extends Cloneable; // ConsumerBuilder is used to configure and create instances of Consumer.\n@Public @Stable public enum ConsumerCryptoFailureAction extends Enum<ConsumerCryptoFailureAction>; // The action a consumer should take when a consumer receives a message that it cannot decrypt.\n@Public @Stable public interface ConsumerEventListener extends Serializable; // Listener on the consumer state changes.\n", "des": "Pulsar Client API."}
{"index": 1984, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: task\n\nClasses and Interfaces: \n@ConditionalOnClass(org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor.class) @AutoConfiguration @EnableConfigurationProperties(TaskExecutionProperties.class) public class TaskExecutionAutoConfiguration extends Object; // Auto-configuration for TaskExecutor.\n@ConfigurationProperties(\"spring.task.execution\") public class TaskExecutionProperties extends Object; // Configuration properties for task execution.\npublic static class TaskExecutionProperties.Pool extends Object;\npublic static class TaskExecutionProperties.Shutdown extends Object;\n@ConditionalOnClass(org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler.class) @AutoConfiguration(after=TaskExecutionAutoConfiguration.class) @EnableConfigurationProperties(TaskSchedulingProperties.class) public class TaskSchedulingAutoConfiguration extends Object; // Auto-configuration for TaskScheduler.\n@ConfigurationProperties(\"spring.task.scheduling\") public class TaskSchedulingProperties extends Object; // Configuration properties for task scheduling.\npublic static class TaskSchedulingProperties.Pool extends Object;\npublic static class TaskSchedulingProperties.Shutdown extends Object;\n", "des": "Auto-configuration for task execution and scheduling."}
{"index": 1733, "repo": "spring-jdbc-6.0.11", "code": "Package: object\n\nClasses and Interfaces: \npublic class BatchSqlUpdate extends SqlUpdate; // SqlUpdate subclass that performs batch update operations.\npublic class GenericSqlQuery<T> extends SqlQuery<T>; // A concrete variant of SqlQuery which can be configured with a RowMapper.\npublic class GenericStoredProcedure extends StoredProcedure; // Concrete implementation making it possible to define the RDBMS stored procedures in an application context without writing a custom Java implementation class.\npublic abstract class MappingSqlQuery<T> extends MappingSqlQueryWithParameters<T>; // Reusable query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to convert each row of the JDBC ResultSet into an object.\npublic abstract class MappingSqlQueryWithParameters<T> extends SqlQuery<T>; // Reusable RDBMS query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to map each row of the JDBC ResultSet into an object.\npublic abstract class RdbmsOperation extends Object implements org.springframework.beans.factory.InitializingBean; // An \"RDBMS operation\" is a multithreaded, reusable object representing a query, update, or stored procedure call.\npublic abstract class SqlCall extends RdbmsOperation; // RdbmsOperation using a JdbcTemplate and representing an SQL-based call such as a stored procedure or a stored function.\npublic class SqlFunction<T> extends MappingSqlQuery<T>; // SQL \"function\" wrapper for a query that returns a single row of results.\npublic abstract class SqlOperation extends RdbmsOperation; // Operation object representing an SQL-based operation such as a query or update, as opposed to a stored procedure.\npublic abstract class SqlQuery<T> extends SqlOperation; // Reusable operation object representing an SQL query.\npublic class SqlUpdate extends SqlOperation; // Reusable operation object representing an SQL update.\npublic abstract class StoredProcedure extends SqlCall; // Superclass for object abstractions of RDBMS stored procedures.\npublic abstract class UpdatableSqlQuery<T> extends SqlQuery<T>; // Reusable RDBMS query in which concrete subclasses must implement the abstract updateRow(ResultSet, int, context) method to update each row of the JDBC ResultSet and optionally map contents into an object.\n", "des": "The classes in this package represent RDBMS queries, updates, and stored procedures as threadsafe, reusable objects."}
{"index": 1947, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: activemq\n\nClasses and Interfaces: \n@AutoConfiguration(before=JmsAutoConfiguration.class, after=JndiConnectionFactoryAutoConfiguration.class) @ConditionalOnClass({jakarta.jms.ConnectionFactory.class,org.apache.activemq.ActiveMQConnectionFactory.class}) @ConditionalOnMissingBean(jakarta.jms.ConnectionFactory.class) @EnableConfigurationProperties({ActiveMQProperties.class,JmsProperties.class}) @Import({org.springframework.boot.autoconfigure.jms.activemq.ActiveMQXAConnectionFactoryConfiguration.class,org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration.class}) public class ActiveMQAutoConfiguration extends Object; // Auto-configuration to integrate with an ActiveMQ broker.\n@FunctionalInterface public interface ActiveMQConnectionFactoryCustomizer; // Callback interface that can be implemented by beans wishing to customize the ActiveMQConnectionFactory whilst retaining default auto-configuration.\n@ConfigurationProperties(prefix=\"spring.activemq\") public class ActiveMQProperties extends Object; // Configuration properties for ActiveMQ.\npublic static class ActiveMQProperties.Packages extends Object;\n", "des": "Auto-configuration for ActiveMQ."}
{"index": 843, "repo": "calcite-core-1.34.0", "code": "Package: hint\n\nClasses and Interfaces: \nInterface Hintable; // Hintable is a kind of RelNode that can attach RelHints.\nInterface HintOptionChecker; // A HintOptionChecker validates the options of a RelHint.\nInterface HintPredicate; // A HintPredicate indicates whether a RelNode can apply the specified hint.\nClass CompositeHintPredicate; // A HintPredicate to combine multiple hint predicates into one.\nClass HintPredicates; // A collection of hint predicates.\nClass HintStrategy; // Represents a hint strategy entry of HintStrategyTable.\nClass HintStrategy.Builder; // Builder for HintStrategy.\nClass HintStrategyTable; // A collection of HintStrategys.\nClass HintStrategyTable.Builder; // Builder for HintStrategyTable.\nClass HintStrategyTable.HintErrorLogger; // Implementation of Litmus that returns a status code, it logs warnings for fail check and does not throw.\nClass NodeTypeHintPredicate; // A hint predicate that specifies which kind of relational expression the hint can be applied to.\nClass RelHint; // Hint attached to a relation expression.\nClass RelHint.Builder; // Builder for RelHint.\nEnum CompositeHintPredicate.Composition; // How hint predicates are composed.\n", "des": "Defines hints interfaces and utilities for relational expressions."}
{"index": 3850, "repo": "lucene-core-9.7.0", "code": "Package: similarities\n\nClasses and Interfaces: \nInterface LMSimilarity.CollectionModel; // A strategy for computing the collection language model.\nClass AfterEffect; // This class acts as the base class for the implementations of the first normalization of the informative content in the DFR framework.\nClass AfterEffectB; // Model of the information gain based on the ratio of two Bernoulli processes.\nClass AfterEffectL; // Model of the information gain based on Laplace's law of succession.\nClass Axiomatic; // Axiomatic approaches for IR.\nClass AxiomaticF1EXP; // F1EXP is defined as Sum(tf(term_doc_freq)*ln(docLen)*IDF(term)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq\nClass AxiomaticF1LOG; // F1LOG is defined as Sum(tf(term_doc_freq)*ln(docLen)*IDF(term)) where IDF(t) = ln((N+1)/df(t)) N=total num of docs, df=doc freq\nClass AxiomaticF2EXP; // F2EXP is defined as Sum(tfln(term_doc_freq, docLen)*IDF(term)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq\nClass AxiomaticF2LOG; // F2EXP is defined as Sum(tfln(term_doc_freq, docLen)*IDF(term)) where IDF(t) = ln((N+1)/df(t)) N=total num of docs, df=doc freq\nClass AxiomaticF3EXP; // F3EXP is defined as Sum(tf(term_doc_freq)*IDF(term)-gamma(docLen, queryLen)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq gamma(docLen, queryLen) = (docLen-queryLen)*queryLen*s/avdl NOTE: the gamma function of this similarity creates negative scores\n", "des": "This package contains the various ranking models that can be used in Lucene."}
{"index": 1257, "repo": "spring-core-6.0.11", "code": "Package: nativex\n\nClasses and Interfaces: \npublic class FileNativeConfigurationWriter extends NativeConfigurationWriter; // A NativeConfigurationWriter implementation that writes the configuration to disk.\npublic abstract class NativeConfigurationWriter extends Object; // Write RuntimeHints as GraalVM native configuration.\n", "des": "Support for generating GraalVM native configuration from runtime hints."}
{"index": 2196, "repo": "spring-data-commons-3.1.2", "code": "Package: aot\n\nClasses and Interfaces: \npublic interface AotContext; // The context in which the AOT processing happens.\npublic static interface AotContext.IntrospectedBeanDefinition; // Interface defining introspection methods for bean definitions.\npublic static interface AotContext.TypeIntrospector; // Type-based introspector to resolve Class from a type name and to introspect the bean factory for presence of beans.\npublic class ManagedTypesBeanFactoryInitializationAotProcessor extends Object implements BeanFactoryInitializationAotProcessor; // BeanFactoryInitializationAotProcessor implementation used to encapsulate common data infrastructure concerns and preprocess the ConfigurableListableBeanFactory ahead of the AOT compilation in order to prepare the Spring Data BeanDefinitions for AOT processing.\npublic class ManagedTypesBeanRegistrationAotProcessor extends Object implements BeanRegistrationAotProcessor; // BeanRegistrationAotProcessor handling module ManagedTypes instances.\npublic class PublicMethodReflectiveProcessor extends SimpleReflectiveProcessor;\npublic interface RegisteredBeanAotContribution extends BeanRegistrationAotContribution; // Extension to BeanRegistrationAotContribution that bases its contribution on a RegisteredBean.\n", "des": "Support for registering the need for reflection, resources, java serialization and proxies at runtime for Ahead of Time compilation."}
{"index": 357, "repo": "hive-exec-4.0.0-alpha-2", "code": "Package: protobuf\n\nClasses and Interfaces: \nClass ProtobufBytesWritableSerDe; // Class to convert bytes writable containing a protobuf message to hive formats.\nClass ProtobufMessageInputFormat<K,V extends com.google.protobuf.MessageLite>; // InputFormat to support reading ProtoWritable stored in a sequence file.\nClass ProtobufMessageSerDe; // Class to convert ProtoMessageWritable to hive formats.\nClass ProtobufSerDe; // SerDe to convert ProtoWritable messages to Hive formats.\n", "des": "This package contains contributed input format."}
{"index": 1205, "repo": "commons-math3-3.6.1", "code": "Package: clustering\n\nClasses and Interfaces: \nInterface Clusterable<T>; // As of 3.2 (to be removed in 4.0), use Clusterable instead\nClass Cluster<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use Cluster instead\nClass DBSCANClusterer<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use DBSCANClusterer instead\nClass EuclideanDoublePoint; // As of 3.2 (to be removed in 4.0), use DoublePoint instead\nClass EuclideanIntegerPoint; // As of 3.2 (to be removed in 4.0), use DoublePoint instead\nClass KMeansPlusPlusClusterer<T extends Clusterable<T>>; // As of 3.2 (to be removed in 4.0), use KMeansPlusPlusClusterer instead\nEnum KMeansPlusPlusClusterer.EmptyClusterStrategy; // Strategies to use for replacing an empty cluster.\n", "des": "All classes and sub-packages of this package are deprecated."}
{"index": 1550, "repo": "spring-context-6.0.11", "code": "Package: stereotype\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Indexed public @interface Component; // Indicates that an annotated class is a \"component\".\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Controller; // Indicates that an annotated class is a \"Controller\" (e.g.\n@Target(TYPE) @Retention(RUNTIME) @Documented public @interface Indexed; // Indicate that the annotated element represents a stereotype for the index.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Repository; // Indicates that an annotated class is a \"Repository\", originally defined by Domain-Driven Design (Evans, 2003) as \"a mechanism for encapsulating storage, retrieval, and search behavior which emulates a collection of objects\".\n@Target(TYPE) @Retention(RUNTIME) @Documented @Component public @interface Service; // Indicates that an annotated class is a \"Service\", originally defined by Domain-Driven Design (Evans, 2003) as \"an operation offered as an interface that stands alone in the model, with no encapsulated state.\"\n", "des": "Annotations denoting the roles of types or methods in the overall architecture (at a conceptual, rather than implementation, level)."}
{"index": 73, "repo": "ignite-core-2.15.0", "code": "Package: fifoqueue\n\nClasses and Interfaces: \nInterface FifoQueueCollisionSpiMBean; // Management bean that provides access to the FIFO queue collision SPI configuration.\nClass FifoQueueCollisionSpi; // This class provides implementation for Collision SPI based on FIFO queue.\n", "des": "Contains FIFO based collision SPI implementation."}
{"index": 2793, "repo": "shiro-spring-2.0.0-alpha-2", "code": "Package: web\n\nClasses and Interfaces: \npublic class ShiroFilterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.config.BeanPostProcessor; // FactoryBean to be used in Spring-based web applications for defining the master Shiro Filter.\npublic class ShiroUrlPathHelper extends org.springframework.web.util.UrlPathHelper; // A Spring UrlPathHelper that uses Shiro's path resolution logic.\n", "des": "Spring-specific components for use in Spring-based web applications."}
{"index": 2613, "repo": "wicket-util-10.0.0-M1", "code": "Package: string\n\nSub Packages: \npackage string.interpolator; // Support for String-variable interpolation.\n\nClasses and Interfaces: \npublic abstract class AbstractStringList extends Object implements IStringSequence, Serializable; // An abstract base class for string list implementations.\npublic final class AppendingStringBuffer extends Object implements Serializable, CharSequence; // This is a copy or combination of java.lang.StringBuffer and java.lang.String It has a special method getValue() which returns the internal char array.\npublic interface IStringIterator; // Typesafe string iterator interface\npublic interface IStringSequence; // Typesafe interface to an ordered sequence of strings.\npublic class PrependingStringBuffer extends Object; // This is a prepending stringbuffer optimized for constantly prepending strings to the front of the buffer.\npublic final class StringList extends AbstractStringList; // A typesafe, mutable list of strings supporting a variety of convenient operations as well as expected operations from List such as add(), size(), remove(), iterator(), get(int index) and toArray().\npublic final class Strings extends Object; // A variety of static String utility methods.\npublic class StringValue extends Object implements IClusterable; // Holds an immutable String value and optionally a Locale, with methods to convert to various types.\npublic final class StringValueConversionException extends ConversionException; // Thrown when a string value cannot be converted to some type.\n", "des": "String utilities."}
{"index": 861, "repo": "calcite-core-1.34.0", "code": "Package: dialect\n\nClasses and Interfaces: \nInterface JethroDataSqlDialect.JethroInfoCache; // Stores information about capabilities of Jethro databases.\nClass AccessSqlDialect; // A SqlDialect implementation for the Access database.\nClass AnsiSqlDialect; // A SqlDialect implementation for an unknown ANSI compatible database.\nClass BigQuerySqlDialect; // A SqlDialect implementation for Google BigQuery's \"Standard SQL\" dialect.\nClass CalciteSqlDialect; // A SqlDialect implementation that produces SQL that can be parsed by Apache Calcite.\nClass ClickHouseSqlDialect; // A SqlDialect implementation for the ClickHouse database.\nClass Db2SqlDialect; // A SqlDialect implementation for the IBM DB2 database.\nClass DerbySqlDialect; // A SqlDialect implementation for the Apache Derby database.\nClass ExasolSqlDialect; // A SqlDialect implementation for the Exasol database.\nClass FirebirdSqlDialect; // A SqlDialect implementation for the Firebird database.\nClass FireboltSqlDialect; // A SqlDialect implementation for the Firebolt database.\nClass H2SqlDialect; // A SqlDialect implementation for the H2 database.\nClass HiveSqlDialect; // A SqlDialect implementation for the Apache Hive database.\nClass HsqldbSqlDialect; // A SqlDialect implementation for the Hsqldb database.\nClass InfobrightSqlDialect; // A SqlDialect implementation for the Infobright database.\nClass InformixSqlDialect; // A SqlDialect implementation for the Informix database.\nClass IngresSqlDialect; // A SqlDialect implementation for the Ingres database.\nClass InterbaseSqlDialect; // A SqlDialect implementation for the Interbase database.\nClass JethroDataSqlDialect; // A SqlDialect implementation for the JethroData database.\nClass JethroDataSqlDialect.JethroInfo; // Information about the capabilities of a Jethro database.\nClass LucidDbSqlDialect; // A SqlDialect implementation for the LucidDB database.\nClass MssqlSqlDialect; // A SqlDialect implementation for the Microsoft SQL Server database.\nClass MysqlSqlDialect; // A SqlDialect implementation for the MySQL database.\nClass NeoviewSqlDialect; // A SqlDialect implementation for the Neoview database.\nClass NetezzaSqlDialect; // A SqlDialect implementation for the Netezza database.\n", "des": "SQL unparsers for JDBC dialects."}
{"index": 504, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: common\n\nClasses and Interfaces: \nInterface Reiterable<T>; // An Iterable that returns Reiterator iterators.\nInterface Reiterator<T>; // An Iterator with the ability to copy its iteration state.\nClass ElementByteSizeObservableIterable<V,InputT extends ElementByteSizeObservableIterator<V>>; // An abstract class used for iterables that notify observers about size in bytes of their elements, as they are being iterated over.\nClass ElementByteSizeObservableIterator<V>; // An abstract class used for iterators that notify observers about size in bytes of their elements, as they are being iterated over.\nClass ElementByteSizeObserver; // An observer that gets notified when additional bytes are read and/or used.\nClass ReflectHelpers; // Utilities for working with with Classes and Methods.\nClass ReflectHelpers.ObjectsClassComparator; // A Comparator that uses the object's class' canonical name to compare them.\n", "des": "Defines utilities shared by multiple PipelineRunner implementations."}
{"index": 3891, "repo": "solr-solrj-9.3.0", "code": "Package: response\n\nSub Packages: \npackage response.json; // Allows parsing of JSON query/faceting API responses\npackage response.schema; // Convenience classes for dealing with Schema API responses.\n\nClasses and Interfaces: \nClass AnalysisResponseBase; // A base class for all analysis responses.\nClass AnalysisResponseBase.AnalysisPhase; // A phase in the analysis process.\nClass AnalysisResponseBase.TokenInfo; // Holds all information of a token as part of an analysis phase.\nClass Cluster; // This class represents a cluster of Solr Docs .\nClass ClusteringResponse; // Encapsulates responses from ClusteringComponent\nClass CollectionAdminResponse;\nClass ConfigSetAdminResponse; // No special handling at this time.\nClass ConfigSetAdminResponse.List;\nClass CoreAdminResponse;\nClass DelegationTokenResponse; // Delegation Token responses\nClass DelegationTokenResponse.Cancel;\nClass DelegationTokenResponse.Get;\nClass DelegationTokenResponse.Renew;\nClass DocumentAnalysisResponse; // A response that is returned by processing the DocumentAnalysisRequest.\nClass DocumentAnalysisResponse.DocumentAnalysis; // An analysis process breakdown of a document.\nClass DocumentAnalysisResponse.FieldAnalysis; // An analysis process breakdown for a specific field.\nClass FacetField; // A utility class to hold the facet response.\nClass FacetField.Count;\nClass FieldAnalysisResponse; // A response that is returned by processing the FieldAnalysisRequest.\nClass FieldAnalysisResponse.Analysis; // The analysis of a field.\nClass FieldStatsInfo; // Holds stats info\nClass Group; // Represents a group.\nClass GroupCommand; // This class represents the result of a group command.\nClass GroupResponse; // Overall grouping result.\nClass HealthCheckResponse;\nClass IntervalFacet; // Objects of this class will contain the result of all the intervals defined for a specific field.\nClass IntervalFacet.Count; // Holds counts for facet intervals defined in a field\nClass LukeResponse; // This is an incomplete representation of the data returned from Luke\nClass LukeResponse.FieldInfo;\nClass LukeResponse.FieldTypeInfo;\nClass PivotField;\nClass QueryResponse;\nClass RangeFacet<B,​G>; // Represents a range facet result\nClass RangeFacet.Count;\nClass RangeFacet.Currency;\n", "des": "Convenience classes for dealing with various types of Solr responses."}
{"index": 1575, "repo": "spring-cloud-task-core-3.0.3", "code": "Package: dao\n\nClasses and Interfaces: \npublic class JdbcTaskExecutionDao extends Object implements TaskExecutionDao; // Stores Task Execution Information to a JDBC DataSource.\npublic class MapTaskExecutionDao extends Object implements TaskExecutionDao; // Stores Task Execution Information to a in-memory map.\npublic interface TaskExecutionDao; // Data Access Object for task executions.\n", "des": "Interface DAO and default implementations for storing and retrieving data for tasks from a repository."}
{"index": 1324, "repo": "groovy-all-4.0.13", "code": "Package: util\n\nClasses and Interfaces: \npublic final class YamlConverter extends Object; // A converter for converting YAML to JSON, vice versa\n", "des": "Utility classes for YAML processing."}
{"index": 2634, "repo": "shiro-web-2.0.0-alpha-2", "code": "Package: tags\n\nClasses and Interfaces: \npublic class AuthenticatedTag extends SecureTag; // JSP tag that renders the tag body only if the current user has executed a successful authentication attempt during their current session.\npublic class GuestTag extends SecureTag; // JSP tag that renders the tag body if the current user is not known to the system, either because they haven't logged in yet, or because they have no 'RememberMe' identity.\npublic class HasAnyRolesTag extends RoleTag; // Displays body content if the current user has any of the roles specified.\npublic class HasPermissionTag extends PermissionTag;\npublic class HasRoleTag extends RoleTag;\npublic class LacksPermissionTag extends PermissionTag;\npublic class LacksRoleTag extends RoleTag;\npublic class NotAuthenticatedTag extends SecureTag; // JSP tag that renders the tag body only if the current user has not executed a successful authentication attempt during their current session.\npublic abstract class PermissionTag extends SecureTag;\npublic class PrincipalTag extends SecureTag; // Tag used to print out the String value of a user's default principal, or a specific principal as specified by the tag's attributes.\npublic abstract class RoleTag extends SecureTag;\npublic abstract class SecureTag extends javax.servlet.jsp.tagext.TagSupport;\npublic class UserTag extends SecureTag; // JSP tag that renders the tag body if the current user known to the system, either from a successful login attempt (not necessarily during the current session) or from 'RememberMe' services.\n", "des": "Provides the Shiro JSP Tag Library implementations."}
{"index": 2252, "repo": "spring-data-keyvalue-3.1.2", "code": "Package: config\n\nClasses and Interfaces: \n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(MapRepositoriesRegistrar.class) @QueryCreatorType(value=SpelQueryCreator.class, repositoryQueryType=CachingKeyValuePartTreeQuery.class) public @interface EnableMapRepositories; // Annotation to activate Map repositories.\npublic class MapRepositoriesRegistrar extends RepositoryBeanDefinitionRegistrarSupport; // Map specific RepositoryBeanDefinitionRegistrarSupport implementation.\npublic class MapRepositoryConfigurationExtension extends KeyValueRepositoryConfigurationExtension;\n", "des": "Support infrastructure for the configuration of Map repositories."}
{"index": 3134, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: profile\n\nClasses and Interfaces: \nClass Association; // Models the association of a given fetch.\nClass Fetch; // Models an individual fetch within a profile.\nClass FetchProfile; // A 'fetch profile' allows a user to dynamically modify the fetching strategy used for particular associations at runtime, whereas that information was historically only statically defined in the metadata.\nEnum Fetch.Style; // The type or style of fetch.\n", "des": "Models the fetch profiles defined by the application"}
{"index": 2522, "repo": "spring-security-core-6.1.2", "code": "Package: method\n\nClasses and Interfaces: \n@Deprecated public abstract class AbstractFallbackMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n@Deprecated public abstract class AbstractMethodSecurityMetadataSource extends Object implements MethodSecurityMetadataSource;\n@Deprecated public final class DelegatingMethodSecurityMetadataSource extends AbstractMethodSecurityMetadataSource;\n@Deprecated public class MapBasedMethodSecurityMetadataSource extends AbstractFallbackMethodSecurityMetadataSource implements org.springframework.beans.factory.BeanClassLoaderAware;\npublic interface MethodSecurityMetadataSource extends SecurityMetadataSource;\n@Target(PARAMETER) @Retention(RUNTIME) @Documented @Deprecated public @interface P;\n", "des": "Provides SecurityMetadataSource implementations for securing Java method invocations via different AOP libraries."}
{"index": 2298, "repo": "spring-boot-3.1.1", "code": "Package: buffering\n\nClasses and Interfaces: \npublic class BufferingApplicationStartup extends Object implements org.springframework.core.metrics.ApplicationStartup; // ApplicationStartup implementation that buffers steps and records their timestamp as well as their processing time.\npublic class StartupTimeline extends Object; // Represent the timeline of steps recorded by BufferingApplicationStartup.\npublic static class StartupTimeline.TimelineEvent extends Object; // Event on the current StartupTimeline.\n", "des": "ApplicationStartup implementation for buffering steps and measuring their processing time."}
{"index": 2008, "repo": "spring-boot-devtools-3.1.1", "code": "Package: classpath\n\nClasses and Interfaces: \npublic class ClassPathChangedEvent extends org.springframework.context.ApplicationEvent; // ApplicationEvent containing details of a classpath change.\npublic class ClassPathDirectories extends Object implements Iterable<File>; // Provides access to entries on the classpath that refer to directories.\npublic class ClassPathFileSystemWatcher extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean, org.springframework.context.ApplicationContextAware; // Encapsulates a FileSystemWatcher to watch the local classpath directories for changes.\n@FunctionalInterface public interface ClassPathRestartStrategy; // Strategy interface used to determine when a changed classpath file should trigger a full application restart.\npublic class PatternClassPathRestartStrategy extends Object implements ClassPathRestartStrategy; // Ant style pattern based ClassPathRestartStrategy.\n", "des": "Support for classpath monitoring."}
{"index": 3590, "repo": "lucene-test-framework-9.7.0", "code": "Package: sharedterms\n\nClasses and Interfaces: \nClass STUniformSplitRot13PostingsFormat; // STUniformSplitPostingsFormat with block encoding using ROT13 cypher.\n", "des": "Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit.sharedterms with block encryption using basic ROT13."}
{"index": 604, "repo": "org.apache.karaf.main-2.4.4", "code": "Package: service\n\nClasses and Interfaces: \nInterface EventHook; // As of 1.1.\nInterface EventListenerHook; // OSGi Framework Service Event Listener Hook Service.\nInterface FindHook; // OSGi Framework Service Find Hook Service.\nInterface ListenerHook; // OSGi Framework Service Listener Hook Service.\nInterface ListenerHook.ListenerInfo; // Information about a Service Listener.\n", "des": "Framework Service Hooks Package Version 1.1."}
{"index": 3757, "repo": "lucene-facet-9.7.0", "code": "Package: taxonomy\n\nSub Packages: \npackage taxonomy.directory; // Taxonomy index implementation using on top of a Directory.\npackage taxonomy.writercache; // Improves indexing time by caching a map of CategoryPath to their Ordinal.\n\nClasses and Interfaces: \nInterface TaxonomyWriter; // TaxonomyWriter is the interface which the faceted-search library uses to dynamically build the taxonomy at indexing time.\nClass AssociationAggregationFunction; // Specify aggregation logic used in TaxonomyFacetIntAssociations and TaxonomyFacetFloatAssociations.\nClass AssociationFacetField; // Add an instance of this to your Document to add a facet label associated with an arbitrary byte[].\nClass BackCompatSortedNumericDocValues;\nClass CachedOrdinalsReader;\nClass CachedOrdinalsReader.CachedOrds; // Holds the cached ordinals in two parallel int[] arrays.\nClass DocValuesOrdinalsReader;\nClass FacetLabel; // Holds a sequence of string components, specifying the hierarchical name of a category.\nClass FastTaxonomyFacetCounts; // Computes facets counts, assuming the default encoding into DocValues was used.\nClass FloatAssociationFacetField; // Add an instance of this to your Document to add a facet label associated with a float.\nClass FloatTaxonomyFacets;\nClass IntAssociationFacetField; // Add an instance of this to your Document to add a facet label associated with an int.\nClass IntTaxonomyFacets;\nClass LRUHashMap<K,​V>; // LRUHashMap is an extension of Java's HashMap, which has a bounded size(); When it reaches that size, each time a new element is added, the least recently used (LRU) entry is removed.\nClass OrdinalMappingLeafReader; // A FilterLeafReader for updating facets ordinal references, based on an ordinal map.\nClass OrdinalsReader;\nClass OrdinalsReader.OrdinalsSegmentReader; // Returns ordinals for documents in one segment.\nClass ParallelTaxonomyArrays; // Returns 3 arrays for traversing the taxonomy: parents: parents[i] denotes the parent of category ordinal i.\nClass PrintTaxonomyStats; // Prints how many ords are under each dimension.\nClass SearcherTaxonomyManager; // Manages near-real-time reopen of both an IndexSearcher and a TaxonomyReader.\n", "des": "Taxonomy of Categories."}
{"index": 2987, "repo": "spring-security-oauth2-resource-server-6.1.2", "code": "Package: access\n\nClasses and Interfaces: \npublic final class BearerTokenAccessDeniedHandler extends Object implements org.springframework.security.web.access.AccessDeniedHandler; // Translates any AccessDeniedException into an HTTP response in accordance with RFC 6750 Section 3: The WWW-Authenticate.\n", "des": "OAuth 2.0 Resource Server access denial classes and interfaces."}
{"index": 2004, "repo": "spring-integration-ws-6.1.2", "code": "Package: config\n\nClasses and Interfaces: \npublic class WebServiceHeaderEnricherParser extends org.springframework.integration.config.xml.HeaderEnricherParserSupport;\npublic class WebServiceInboundGatewayParser extends org.springframework.integration.config.xml.AbstractInboundGatewayParser;\npublic class WebServiceOutboundGatewayParser extends org.springframework.integration.config.xml.AbstractOutboundGatewayParser; // Parser for the <outbound-gateway/> element in the 'ws' namespace.\npublic class WsIntegrationConfigurationInitializer extends Object implements org.springframework.integration.config.IntegrationConfigurationInitializer; // The IntegrationConfigurationInitializer implementation for the WebService module.\npublic class WsNamespaceHandler extends org.springframework.integration.config.xml.AbstractIntegrationNamespaceHandler;\n", "des": "Contains parser classes for the Web Services namespace support."}
{"index": 2184, "repo": "spring-security-web-6.1.2", "code": "Package: session\n\nClasses and Interfaces: \npublic abstract class AbstractSessionFixationProtectionStrategy extends Object implements SessionAuthenticationStrategy, org.springframework.context.ApplicationEventPublisherAware; // A base class for performing session fixation protection.\nprotected static final class AbstractSessionFixationProtectionStrategy.NullEventPublisher extends Object implements org.springframework.context.ApplicationEventPublisher;\npublic final class ChangeSessionIdAuthenticationStrategy extends AbstractSessionFixationProtectionStrategy; // Uses HttpServletRequest.changeSessionId() to protect against session fixation attacks.\npublic class CompositeSessionAuthenticationStrategy extends Object implements SessionAuthenticationStrategy; // A SessionAuthenticationStrategy that accepts multiple SessionAuthenticationStrategy implementations to delegate to.\npublic class ConcurrentSessionControlAuthenticationStrategy extends Object implements org.springframework.context.MessageSourceAware, SessionAuthenticationStrategy; // Strategy which handles concurrent session-control.\npublic final class NullAuthenticatedSessionStrategy extends Object implements SessionAuthenticationStrategy;\npublic class RegisterSessionAuthenticationStrategy extends Object implements SessionAuthenticationStrategy; // Strategy used to register a user with the SessionRegistry after successful Authentication.\npublic class SessionAuthenticationException extends org.springframework.security.core.AuthenticationException; // Thrown by an SessionAuthenticationStrategy to indicate that an authentication object is not valid for the current session, typically because the same user has exceeded the number of sessions they are allowed to have concurrently.\npublic interface SessionAuthenticationStrategy; // Allows pluggable support for HttpSession-related behaviour when an authentication occurs.\npublic class SessionFixationProtectionEvent extends org.springframework.security.authentication.event.AbstractAuthenticationEvent; // Indicates a session ID was changed for the purposes of session fixation protection.\npublic class SessionFixationProtectionStrategy extends AbstractSessionFixationProtectionStrategy; // Uses HttpServletRequest.invalidate() to protect against session fixation attacks.\n", "des": "Strategy interface and implementations for handling session-related behaviour for a newly authenticated user."}
{"index": 1921, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: web\n\nClasses and Interfaces: \n@AutoConfiguration(after=RepositoryRestMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({org.springframework.data.web.PageableHandlerMethodArgumentResolver.class,org.springframework.web.servlet.config.annotation.WebMvcConfigurer.class}) @ConditionalOnMissingBean(org.springframework.data.web.PageableHandlerMethodArgumentResolver.class) @EnableConfigurationProperties(SpringDataWebProperties.class) public class SpringDataWebAutoConfiguration extends Object; // Auto-configuration for Spring Data's web support.\n@ConfigurationProperties(\"spring.data.web\") public class SpringDataWebProperties extends Object; // Configuration properties for Spring Data Web.\npublic static class SpringDataWebProperties.Pageable extends Object; // Pageable properties.\npublic static class SpringDataWebProperties.Sort extends Object; // Sort properties.\n", "des": "Auto-configuration for Spring Data's Web Support."}
{"index": 1944, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: metadata\n\nClasses and Interfaces: \n@Configuration(proxyBeanMethods=false) public class DataSourcePoolMetadataProvidersConfiguration extends Object; // Register the DataSourcePoolMetadataProvider instances for the supported data sources.\n", "des": "Auto-configuration for JDBC Metadata."}
{"index": 2612, "repo": "wicket-util-10.0.0-M1", "code": "Package: resource\n\nClasses and Interfaces: \npublic abstract class AbstractResourceStream extends Object implements IResourceStream;\npublic abstract class AbstractResourceStreamWriter extends Object implements IResourceStreamWriter; // Base implementation of an IResourceStreamWriter so that you only have to override the IResourceStreamWriter.write(java.io.OutputStream).\npublic abstract class AbstractStringResourceStream extends AbstractResourceStream implements IStringResourceStream; // Base class for string resources.\npublic class FileResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream; // A FileResourceStream is an IResource implementation for files.\npublic class FileSystemResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream; // A FileSystemResourceStream is an IResourceStream implementation for Java NIO paths.\npublic interface IFixedLocationResourceStream; // Non-dynamic resource streams point to fixed locations, like a file or a url.\npublic interface IResourceStream extends IModifiable, IClusterable, Closeable; // Interface to a streamed resource.\npublic interface IResourceStreamWriter extends IResourceStream; // Special IResourceStream implementation that a Resource can return when it directly wants to write to an output stream instead of return the IResourceStream.getInputStream().\npublic interface IStringResourceStream extends IResourceStream; // A resource that can be converted to a String representation, possibly using an explicit Charset.\npublic final class ResourceStreamNotFoundException extends Exception; // Thrown if a required resource cannot be found.\npublic class ResourceStreamWrapper extends Object implements IResourceStream; // A IResourceStream that wraps another resource stream\npublic class ResourceUtils extends Object;\npublic static class ResourceUtils.PathLocale extends Object;\npublic class StringBufferResourceStream extends AbstractStringResourceStream; // A string resource that can be appended to.\npublic final class StringResourceStream extends AbstractStringResourceStream; // A StringResourceStream is an IResource implementation for strings.\npublic class XSLTResourceStream extends AbstractResourceStream; // IResourceStream that applies XSLT on an input IResourceStream.\npublic class ZipResourceStream extends AbstractResourceStream; // An IResourceStream that ZIPs a directory's contents on the fly\n", "des": "Base support for resources."}
{"index": 3279, "repo": "opencms-core-15.0", "code": "Package: json\n\nClasses and Interfaces: \nInterface I_CmsJsonifable; // To convert objects to json.\nInterface I_JSONString; // The I_JSONString interface allows a toJSONString() method so that a class can change the behavior of JSONObject.toString(), JSONArray.toString(), and JSONWriter.value(Object).\nClass CDL; // This provides static methods to convert comma delimited text into a JSONArray, and to covert a JSONArray into comma delimited text.\nClass JSONArray; // A JSONArray is an ordered sequence of values.\nClass JSONML; // This provides static methods to convert an XML text into a JSONObject, and to convert a JSONObject into an XML text using the JsonML transform.\nClass JSONObject; // A JSONObject is an unordered collection of name/value pairs.\nClass JSONObject.Null; // JSONObject.NULL is equivalent to the value that JavaScript calls null, whilst Java's null is equivalent to the value that JavaScript calls undefined.\nClass JSONStringer; // JSONStringer provides a quick and convenient way of producing JSON text.\nClass JSONTokener; // A JSONTokener takes a source string and extracts characters and tokens from it.\nClass JSONWriter; // JSONWriter provides a quick and convenient way of producing JSON text.\nClass XML; // This provides static methods to convert an XML text into a JSONObject, and to covert a JSONObject into an XML text.\nClass XMLTokener; // The XMLTokener extends the JSONTokener to provide additional methods for the parsing of XML texts.\nClass JSONException; // The JSONException is thrown by the JSON.org classes when things are amiss.\n", "des": "Classes to create JSON objects and arrays for JavaScript in OpenCms."}
{"index": 1282, "repo": "spring-core-6.0.11", "code": "Package: support\n\nClasses and Interfaces: \npublic class DeserializingConverter extends Object implements Converter<byte[],Object>; // A Converter that delegates to a Deserializer to convert data in a byte array to an object.\npublic class SerializationDelegate extends Object implements Serializer<Object>, Deserializer<Object>; // A convenient delegate with pre-arranged configuration state for common serialization needs.\npublic class SerializationFailedException extends NestedRuntimeException; // Wrapper for the native IOException (or similar) when a Serializer or Deserializer failed.\npublic class SerializingConverter extends Object implements Converter<Object,byte[]>; // A Converter that delegates to a Serializer to convert an object to a byte array.\n", "des": "Support classes for Spring's serializer abstraction."}
{"index": 1891, "repo": "shiro-core-2.0.0-alpha-2", "code": "Package: mgt\n\nSub Packages: \npackage mgt.eis; // EIS (Enterprise Information System)-tier components that can perform CRUD operations for sessions using any EIS API.\n\nClasses and Interfaces: \npublic abstract class AbstractNativeSessionManager extends AbstractSessionManager implements NativeSessionManager, org.apache.shiro.event.EventBusAware; // Abstract implementation supporting the NativeSessionManager interface, supporting SessionListeners and application of the globalSessionTimeout.\npublic abstract class AbstractSessionManager extends Object implements SessionManager; // Base abstract class of the SessionManager interface, enabling configuration of an application-wide globalSessionTimeout.\npublic abstract class AbstractValidatingSessionManager extends AbstractNativeSessionManager implements ValidatingSessionManager, org.apache.shiro.lang.util.Destroyable; // Default business-tier implementation of the ValidatingSessionManager interface.\npublic class DefaultSessionContext extends MapContext implements SessionContext; // Default implementation of the SessionContext interface which provides getters and setters that wrap interaction with the underlying backing context map.\npublic class DefaultSessionKey extends Object implements SessionKey, Serializable; // Default implementation of the SessionKey interface, which allows setting and retrieval of a concrete sessionId that the SessionManager implementation can use to look up a Session instance.\npublic class DefaultSessionManager extends AbstractValidatingSessionManager implements org.apache.shiro.cache.CacheManagerAware; // Default business-tier implementation of a ValidatingSessionManager.\npublic class DelegatingSession extends Object implements Session, Serializable; // A DelegatingSession is a client-tier representation of a server side Session.\npublic class ExecutorServiceSessionValidationScheduler extends Object implements SessionValidationScheduler, Runnable; // SessionValidationScheduler implementation that uses a ScheduledExecutorService to call ValidatingSessionManager.validateSessions() every sessionValidationInterval milliseconds.\npublic class ImmutableProxiedSession extends ProxiedSession; // Implementation of the Session interface that proxies another Session, but does not allow any 'write' operations to the underlying session.\npublic interface NativeSessionManager extends SessionManager; // A Native session manager is one that manages sessions natively - that is, it is directly responsible for the creation, persistence and removal of Session instances and their lifecycles.\npublic interface SessionContext extends Map<String,Object>; // A SessionContext is a 'bucket' of data presented to a SessionFactory which interprets this data to construct Session instances.\n", "des": "SessionManager components supporting enterprise session management."}
{"index": 3186, "repo": "tomcat-api-10.1", "code": "Package: managed\n\nClasses and Interfaces: \nInterface TransactionContextListener; // A listener for transaction completion events.\nInterface XAConnectionFactory; // XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.\nClass BasicManagedDataSource; // BasicManagedDataSource is an extension of BasicDataSource which creates ManagedConnections.\nClass DataSourceXAConnectionFactory; // An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\nClass LocalXAConnectionFactory; // An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.\nClass LocalXAConnectionFactory.LocalXAResource; // LocalXAResource is a fake XAResource for non-XA connections.\nClass ManagedConnection<C extends Connection>; // ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").\nClass ManagedDataSource<C extends Connection>; // The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\nClass PoolableManagedConnection; // PoolableConnection that unregisters from TransactionRegistry on Connection real destroy.\nClass PoolableManagedConnectionFactory; // A PoolableConnectionFactory that creates PoolableManagedConnections.\nClass TransactionContext; // TransactionContext represents the association between a single XAConnectionFactory and a Transaction.\nClass TransactionRegistry; // TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.\n", "des": "This package provides support for pooling of ManagedConnections."}
{"index": 3630, "repo": "lucene-misc-9.7.0", "code": "Package: search\n\nClasses and Interfaces: \nClass DiversifiedTopDocsCollector; // A TopDocsCollector that controls diversity in results by ensuring no more than maxHitsPerKey results from a common source are collected in the final results.\nClass DiversifiedTopDocsCollector.ScoreDocKey; // An extension to ScoreDoc that includes a key used for grouping purposes\nClass DocValuesStats<T>; // Holds statistics for a DocValues field.\nClass DocValuesStats.DoubleDocValuesStats; // Holds DocValues statistics for a numeric field storing double values.\nClass DocValuesStats.LongDocValuesStats; // Holds DocValues statistics for a numeric field storing long values.\nClass DocValuesStats.NumericDocValuesStats<T extends Number>; // Holds statistics for a numeric DocValues field.\nClass DocValuesStats.SortedDocValuesStats; // Holds statistics for a sorted DocValues field.\nClass DocValuesStats.SortedDoubleDocValuesStats; // Holds DocValues statistics for a sorted-numeric field storing double values.\nClass DocValuesStats.SortedLongDocValuesStats; // Holds DocValues statistics for a sorted-numeric field storing long values.\nClass DocValuesStats.SortedNumericDocValuesStats<T extends Number>; // Holds statistics for a sorted-numeric DocValues field.\nClass DocValuesStats.SortedSetDocValuesStats; // Holds statistics for a sorted-set DocValues field.\nClass DocValuesStatsCollector; // A Collector which computes statistics for a DocValues field.\nClass MemoryAccountingBitsetCollector; // Bitset collector which supports memory tracking\n", "des": "Misc search implementations."}
{"index": 1631, "repo": "spring-kafka-3.0.9", "code": "Package: retrytopic\n\nClasses and Interfaces: \npublic class BackOffValuesGenerator extends Object; // Generates the backoff values from the provided maxAttempts value and BackOffPolicy.\npublic class DeadLetterPublishingRecovererFactory extends Object; // Creates and configures the DeadLetterPublishingRecoverer that will be used to forward the messages using the DestinationTopicResolver.\n@FunctionalInterface public static interface DeadLetterPublishingRecovererFactory.DeadLetterPublisherCreator; // Implement this interface to create each DeadLetterPublishingRecoverer.\npublic class DefaultDestinationTopicProcessor extends Object implements DestinationTopicProcessor; // Default implementation of the DestinationTopicProcessor interface.\npublic class DefaultDestinationTopicResolver extends ExceptionClassifier implements DestinationTopicResolver, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.context.ApplicationContextAware; // Default implementation of the DestinationTopicResolver interface.\npublic static class DefaultDestinationTopicResolver.DestinationTopicHolder extends Object;\npublic class DestinationTopic extends Object; // Representation of a Destination Topic to which messages can be forwarded, such as retry topics and dlt.\npublic static class DestinationTopic.Properties extends Object;\npublic interface DestinationTopicContainer; // Provides methods to store and retrieve DestinationTopic instances.\npublic interface DestinationTopicProcessor; // The DestinationTopicProcessor creates and registers the DestinationTopic instances in the provided DestinationTopicProcessor.Context, also providing callback interfaces to be called upon the context properties.\npublic static class DestinationTopicProcessor.Context extends Object;\npublic class DestinationTopicPropertiesFactory extends Object; // Creates a list of DestinationTopic.Properties based on the provided configurations.\npublic static class DestinationTopicPropertiesFactory.DestinationTopicSuffixes extends Object;\npublic interface DestinationTopicResolver extends DestinationTopicContainer; // Provides methods for resolving the destination to which a message that failed to be processed should be forwarded to.\npublic enum DltStrategy extends Enum<DltStrategy>; // Strategies for handling DLT processing.\n@FunctionalInterface public interface EndpointCustomizer; // Customizes main, retry and DLT endpoints in the Retry Topic functionality and returns the resulting topic names.\npublic static class EndpointCustomizer.TopicNamesHolder extends Object;\npublic class EndpointCustomizerFactory extends Object; // Creates the EndpointCustomizer that will be used by the RetryTopicConfigurer to customize the main, retry and DLT endpoints.\n", "des": "Package for retryable topic handling."}
{"index": 1254, "repo": "spring-core-6.0.11", "code": "Package: annotation\n\nClasses and Interfaces: \n@Target({ANNOTATION_TYPE,TYPE,CONSTRUCTOR,FIELD,METHOD}) @Retention(RUNTIME) @Documented public @interface Reflective; // Indicate that the annotated element requires reflection.\npublic interface ReflectiveProcessor; // Process an AnnotatedElement and register the necessary reflection hints for it.\npublic class ReflectiveRuntimeHintsRegistrar extends Object; // Process @Reflective annotated elements.\n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @Reflective(RegisterReflectionForBindingProcessor.class) public @interface RegisterReflectionForBinding; // Indicates that the classes specified in the annotation attributes require some reflection hints for binding or reflection-based serialization purposes.\npublic class RegisterReflectionForBindingProcessor extends Object implements ReflectiveProcessor; // A ReflectiveProcessor implementation that registers reflection hints for data binding purpose (class, constructors, fields, properties, record components, including types transitively used on properties and record components).\npublic class SimpleReflectiveProcessor extends Object implements ReflectiveProcessor; // A simple ReflectiveProcessor implementation that registers only a reflection hint for the annotated type.\n", "des": "Annotation support for runtime hints."}
{"index": 222, "repo": "nutch-2.4", "code": "Package: util\n\nSub Packages: \npackage util.domain; // Classes for domain name analysis.\n\nClasses and Interfaces: \nClass Bytes; // Utility class that handles byte arrays, conversions to/from other types, comparisons, hash code generation, manufacturing keys for HashMaps or HashSets, etc.\nClass Bytes.ByteArrayComparator; // Byte array comparator class.\nClass CommandRunner;\nClass DeflateUtils; // A collection of utility methods for working on deflated data.\nClass DomUtil;\nClass EncodingDetector; // A simple class for detecting character encodings.\nClass FSUtils; // Utility methods for common filesystem operations.\nClass GenericWritableConfigurable; // A generic Writable wrapper that can inject Configuration to Configurables\nClass GZIPUtils; // A collection of utility methods for working on GZIPed data.\nClass HadoopFSUtil;\nClass Histogram<E>;\nClass IdentityPageReducer;\nClass LockUtil; // Utility methods for handling application-level locking.\nClass MimeUtil;\nClass NodeWalker; // A utility class that allows the walking of any DOM tree using a stack instead of recursion.\nClass NutchConfiguration; // Utility to create Hadoop Configurations that include Nutch-specific resources.\nClass NutchJob; // A Job for Nutch jobs.\nClass NutchJobConf; // A JobConf for Nutch jobs.\nClass NutchTool;\nClass ObjectCache;\nClass Pair<F,S>;\nClass PrefixStringMatcher; // A class for efficiently matching Strings against a set of prefixes.\nClass StringUtil; // A collection of String processing utility methods.\nClass SuffixStringMatcher; // A class for efficiently matching Strings against a set of suffixes.\nClass TableUtil;\nClass TimingUtil;\nClass ToolUtil;\nClass TrieStringMatcher; // TrieStringMatcher is a base class for simple tree-based string matching.\nClass URLUtil; // Utility class for URL analysis\nClass WebPageWritable;\n", "des": "Miscellaneous utility classes."}
{"index": 2601, "repo": "wicket-util-10.0.0-M1", "code": "Package: collections\n\nClasses and Interfaces: \npublic class ClassMetaCache<T> extends Object; // This class wraps a WeakHashMap that holds one ConcurrentHashMap per ClassLoader.\npublic class IntHashMap<V> extends Object implements Cloneable, Serializable; // This is an integer hashmap that has the exact same features and interface as a normal Map except that the key is directly an integer.\npublic static class IntHashMap.Entry<V> extends Object;\npublic class MiniMap<K,V> extends Object implements Map<K,V>, Serializable; // A fixed size map implementation.\npublic class MostRecentlyUsedMap<K,V> extends LinkedHashMap<K,V>; // Holds a map of most recently used items of a given maximum size.\npublic class MultiMap<K,V> extends HashMap<K,List<V>>; // A simple multimap\npublic abstract class ReadOnlyIterator<T> extends Object implements Iterator<T>; // Base class for read-only iterators.\npublic class ReverseListIterator<E> extends Object implements Iterator<E>, Iterable<E>; // An iterator over List which goes from the end to the start\npublic class UrlExternalFormComparator extends Object implements Comparator<URL>, Serializable; // A comparator of URL instances.\n", "des": "Useful collections."}
{"index": 1119, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: numa\n\nClasses and Interfaces: \nClass NumaNodeResource; // NumaNodeResource class holds the NUMA node topology with the total and used resources.\nClass NumaResourceAllocation; // NumaResourceAllocation contains Memory nodes and CPU nodes assigned to a container.\nClass NumaResourceAllocator; // NUMA Resources Allocator reads the NUMA topology and assigns NUMA nodes to the containers.\nClass NumaResourceHandlerImpl; // ResourceHandler implementation for allocating NUMA Resources to each container.\n", "des": "Package org.apache.hadoop.yarn.server.nodemanager.containermanager.linux."}
{"index": 3874, "repo": "solr-ltr-9.3.0", "code": "Package: interleaving\n\nSub Packages: \npackage interleaving.algorithms; // Contains Various Interleaving Algorithms\n\nClasses and Interfaces: \nInterface Interleaving; // Interleaving considers two ranking models: modelA and modelB. For a given query, each model returns its ranked list of documents La = (a1,a2,...) and Lb = (b1, b2, ...). An Interleaving algorithm creates a unique ranked list I = (i1, i2, ...). This list is created by interleaving elements from the two lists la and lb as described by the implementation algorithm. Each element Ij is labelled TeamA if it is selected from La and TeamB if it is selected from Lb.\nClass InterleavingResult;\nClass LTRInterleavingQuery; // A learning to rank Query with Interleaving, will incapsulate two models, and delegate to it the rescoring of the documents.\nClass LTRInterleavingRescorer; // Implements the rescoring logic.\nClass LTRInterleavingScoringQuery;\nClass OriginalRankingLTRScoringQuery;\n", "des": "Contains Various Interleaving auxiliary classes"}
{"index": 3275, "repo": "opencms-core-15.0", "code": "Package: rpc\n\nClasses and Interfaces: \nInterface I_CmsCoreService; // Provides general core services.\nInterface I_CmsCoreServiceAsync; // Provides general core services.\nInterface I_CmsLogService; // Handles client side logging.\nInterface I_CmsLogServiceAsync; // Handles client side logging.\nInterface I_CmsUploadService; // Handles all RPC services related to the upload dialog.\nInterface I_CmsUploadServiceAsync; // Handles all RPC services related to the upload dialog.\nInterface I_CmsVfsService; // A service interface for retrieving information about the VFS tree.\nInterface I_CmsVfsServiceAsync; // An asynchronous service interface for retrieving information about the VFS tree.\n", "des": "Shared RPC interfaces."}
{"index": 2762, "repo": "spring-beans-6.0.11", "code": "Package: wiring\n\nClasses and Interfaces: \npublic class BeanConfigurerSupport extends Object implements BeanFactoryAware, InitializingBean, DisposableBean; // Convenient base class for bean configurers that can perform Dependency Injection on objects (however they may be created).\npublic class BeanWiringInfo extends Object; // Holder for bean wiring metadata information about a particular class.\npublic interface BeanWiringInfoResolver; // Strategy interface to be implemented by objects than can resolve bean name information, given a newly instantiated bean object.\npublic class ClassNameBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver; // Simple default implementation of the BeanWiringInfoResolver interface, looking for a bean with the same name as the fully-qualified class name.\n", "des": "Mechanism to determine bean wiring metadata from a bean instance."}
{"index": 444, "repo": "lucene-analyzers-icu-8.11.2", "code": "Package: segmentation\n\nClasses and Interfaces: \nClass DefaultICUTokenizerConfig; // Default ICUTokenizerConfig that is generally applicable to many languages.\nClass ICUTokenizer; // Breaks text into words according to UAX #29: Unicode Text Segmentation (http://www.unicode.org/reports/tr29/)\nClass ICUTokenizerConfig; // Class that allows for tailored Unicode Text Segmentation on a per-writing system basis.\nClass ICUTokenizerFactory; // Factory for ICUTokenizer.\n", "des": "Tokenizer that breaks text into words with the Unicode Text Segmentation algorithm."}
{"index": 847, "repo": "calcite-core-1.34.0", "code": "Package: mutable\n\nClasses and Interfaces: \nClass Holder; // Implementation of MutableRel whose only purpose is to have a child.\nClass MutableAggregate; // Mutable equivalent of Aggregate.\nClass MutableCalc; // Mutable equivalent of Calc.\nClass MutableCollect; // Mutable equivalent of Collect.\nClass MutableCorrelate; // Mutable equivalent of Correlate.\nClass MutableExchange; // Mutable equivalent of Exchange.\nClass MutableFilter; // Mutable equivalent of Filter.\nClass MutableIntersect; // Mutable equivalent of Intersect.\nClass MutableJoin; // Mutable equivalent of Join.\nClass MutableMatch; // Mutable equivalent of Match.\nClass MutableMinus; // Mutable equivalent of Minus.\nClass MutableProject; // Mutable equivalent of Project.\nClass MutableRel; // Mutable equivalent of RelNode.\nClass MutableRels; // Utilities for dealing with MutableRels.\nClass MutableRelVisitor; // Visitor over MutableRel.\nClass MutableSample; // Mutable equivalent of Sample.\nClass MutableScan; // Mutable equivalent of TableScan.\nClass MutableSetOp; // Mutable equivalent of SetOp.\nClass MutableSort; // Mutable equivalent of Sort.\nClass MutableTableFunctionScan; // Mutable equivalent of TableFunctionScan.\nClass MutableTableModify; // Mutable equivalent of TableModify.\nClass MutableUncollect; // Mutable equivalent of Uncollect.\nClass MutableUnion; // Mutable equivalent of Union.\nClass MutableValues; // Mutable equivalent of Values.\nClass MutableWindow; // Mutable equivalent of Window.\n", "des": "Defines mutable relational expressions."}
{"index": 3671, "repo": "solr-core-9.3.0", "code": "Package: metrics\n\nSub Packages: \npackage metrics.reporters; // This package houses 'pluggable' metric reporters that inherit from the SolrMetricReporter class.\n\nClasses and Interfaces: \nInterface MetricSuppliers.NoOpMetric; // Marker interface for all no-op metrics.\nInterface SolrMetricProducer; // Used by objects that expose metrics through SolrMetricManager.\nClass AggregateMetric; // This class is used for keeping several partial named values and providing useful statistics over them.\nClass AggregateMetric.Update; // Simple class to represent current value and how many times it was set.\nClass AltBufferPoolMetricSet; // This is an alternative implementation of BufferPoolMetricSet that doesn't need an MBean server.\nClass DelegateRegistryCounter; // A counter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryHistogram; // A meter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryMeter; // A meter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryTimer; // A timer implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass FilteringSolrMetricReporter; // A SolrMetricReporter that supports (prefix) filters.\nClass MetricsMap; // Dynamically constructed map of metrics, intentionally different from MetricSet where each metric had to be known in advance and registered separately in MetricRegistry.\nClass MetricSuppliers; // Helper class for constructing instances of MetricRegistry.MetricSupplier based on plugin configuration.\nClass MetricSuppliers.DefaultCounterSupplier; // Default Counter supplier.\nClass MetricSuppliers.DefaultHistogramSupplier; // Default supplier of Histogram instances, with configurable reservoir.\nClass MetricSuppliers.DefaultMeterSupplier; // Default Meter supplier.\nClass MetricSuppliers.DefaultTimerSupplier; // Default supplier of Timer instances, with configurable clock and reservoir.\nClass MetricSuppliers.NoOpCounterSupplier; // No-op implementation of Counter supplier.\nClass MetricSuppliers.NoOpGauge; // No-op implementation of Gauge.\n", "des": "The SolrCoreMetricManager is responsible for collecting metrics from SolrMetricProducer's and exposing metrics to SolrMetricReporter's."}
{"index": 220, "repo": "nutch-2.4", "code": "Package: arc\n\nClasses and Interfaces: \nClass ArcInputFormat; // A input format the reads arc files.\nClass ArcRecordReader; // The ArchRecordReader class provides a record reader which reads records from arc files.\n", "des": "Tools to read the Arc file format."}
{"index": 3080, "repo": "spring-ws-core-4.0.5", "code": "Package: core\n\nClasses and Interfaces: \npublic class SoapActionCallback extends Object implements WebServiceMessageCallback; // WebServiceMessageCallback implementation that sets the SOAP Action header on the message.\npublic class SoapFaultMessageResolver extends Object implements FaultMessageResolver; // Simple fault resolver that simply throws a SoapFaultClientException when a fault occurs.\n", "des": "Contains core classes for SOAP-specific client-side Spring-WS support."}
{"index": 3465, "repo": "hibernate-core-5.6.15.Final", "code": "Package: transaction\n\nSub Packages: \npackage transaction.spi; // Extended SPI contracts for the resource-level transaction capabilities of Hibernate.\n\nClasses and Interfaces: \nClass LocalSynchronizationException; // Wraps an exception thrown from a \"local synchronization\" (one registered in the SynchronizationRegistry).\nClass NullSynchronizationException; // Indicates an attempt to register a null synchronization.\nClass TransactionRequiredForJoinException; // Indicates a call to TransactionCoordinator.explicitJoin() that requires an active transaction where there currently is none.\n", "des": "Defines the resource-level transaction capabilities of Hibernate, which revolves around the TransactionCoordinator contract."}
{"index": 876, "repo": "calcite-core-1.34.0", "code": "Package: mapping\n\nClasses and Interfaces: \nInterface Mapping; // A Mapping is a relationship between a source domain to target domain of integers.\nInterface Mappings.CoreMapping; // Core interface of all mappings.\nInterface Mappings.FunctionMapping; // Mapping where every source has a target.\nInterface Mappings.SourceMapping; // Mapping suitable for sourcing columns.\nInterface Mappings.TargetMapping; // Mapping suitable for mapping columns to a target.\nClass AbstractSourceMapping; // Simple implementation of Mappings.TargetMapping where the number of sources and targets are specified as constructor parameters, and you just need to implement one method.\nClass AbstractTargetMapping; // Simple implementation of Mappings.TargetMapping where the number of sources and targets are specified as constructor parameters, and you just need to implement one method.\nClass IntPair; // An immutable pair of integers.\nClass Mappings; // Utility functions related to mappings.\nClass Mappings.AbstractMapping; // Abstract implementation of Mapping.\nClass Mappings.FiniteAbstractMapping; // Abstract implementation of mapping where both source and target domains are finite.\nClass Mappings.IdentityMapping; // The identity mapping, of a given size, or infinite.\nClass Mappings.OverridingSourceMapping; // Source mapping that returns the same result as a parent Mappings.SourceMapping except for specific overriding elements.\nClass Mappings.OverridingTargetMapping; // Target mapping that returns the same result as a parent Mappings.TargetMapping except for specific overriding elements.\nClass Mappings.PartialMapping; // A mapping where a source has at most one target, and every target has at most one source.\nEnum MappingType; // Describes the type of a mapping, from the most general MappingType.MULTI_FUNCTION (every element in the source and target domain can participate in many mappings) to the most restricted MappingType.BIJECTION (every element in the source and target domain must be paired with precisely one element in the other domain).\nClass Mappings.NoElementException; // Thrown when a mapping is expected to return one element but returns none.\nClass Mappings.TooManyElementsException; // Thrown when a mapping is expected to return one element but returns several.\n", "des": "Support for algebraic maps."}
{"index": 3780, "repo": "lucene-analysis-common-9.7.0", "code": "Package: en\n\nClasses and Interfaces: \nClass AbstractWordsFileFilterFactory; // Abstract parent class for analysis factories that accept a stopwords file as input.\nClass EnglishAnalyzer; // Analyzer for English.\nClass EnglishMinimalStemFilter; // A TokenFilter that applies EnglishMinimalStemmer to stem English words.\nClass EnglishMinimalStemFilterFactory; // Factory for EnglishMinimalStemFilter.\nClass EnglishMinimalStemmer; // Minimal plural stemmer for English.\nClass EnglishPossessiveFilter; // TokenFilter that removes possessives (trailing 's) from words.\nClass EnglishPossessiveFilterFactory; // Factory for EnglishPossessiveFilter.\nClass KStemFilter; // A high-performance kstem filter for english.\nClass KStemFilterFactory; // Factory for KStemFilter.\nClass KStemmer; // This class implements the Kstem algorithm\nClass PorterStemFilter; // Transforms the token stream as per the Porter stemming algorithm.\nClass PorterStemFilterFactory; // Factory for PorterStemFilter.\n", "des": "Analyzer for English."}
{"index": 212, "repo": "nutch-2.4", "code": "Package: protocols\n\nClasses and Interfaces: \nInterface Response; // A response interface.\nClass HttpDateFormat; // class to handle HTTP dates.\nClass ProtocolException; // Use ProtocolException instead.\n", "des": "Helper classes related to the Protocol interface, sea also org.apache.nutch.protocol."}
{"index": 2315, "repo": "spring-boot-3.1.1", "code": "Package: logging\n\nSub Packages: \npackage logging.java; // Support for 'Java Util Logging'.\npackage logging.log4j2; // Support for the Log4j 2 logging library.\npackage logging.logback; // Support for the Logback logging library.\n\nClasses and Interfaces: \npublic abstract class AbstractLoggingSystem extends LoggingSystem; // Abstract base class for LoggingSystem implementations.\nprotected static class AbstractLoggingSystem.LogLevels<T> extends Object; // Maintains a mapping between native levels and LogLevel.\npublic class DeferredLog extends Object implements org.apache.commons.logging.Log; // Deferred Log that can be used to store messages that shouldn't be written until the logging system is fully initialized.\n@FunctionalInterface public interface DeferredLogFactory; // Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate.\npublic class DeferredLogs extends Object implements DeferredLogFactory; // A DeferredLogFactory implementation that manages a collection DeferredLog instances.\npublic class LogFile extends Object; // A reference to a log output file.\npublic final class LoggerConfiguration extends Object; // Immutable class that represents the configuration of a LoggingSystem's logger.\npublic static enum LoggerConfiguration.ConfigurationScope extends Enum<LoggerConfiguration.ConfigurationScope>; // Supported logger configurations scopes.\npublic static final class LoggerConfiguration.LevelConfiguration extends Object; // Logger level configuration.\npublic final class LoggerGroup extends Object; // A single logger group.\npublic final class LoggerGroups extends Object implements Iterable<LoggerGroup>; // Logger groups configured through the Spring Environment.\npublic class LoggingInitializationContext extends Object; // Context passed to the LoggingSystem during initialization.\npublic abstract class LoggingSystem extends Object; // Common abstraction over logging systems.\npublic interface LoggingSystemFactory; // Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation.\npublic class LoggingSystemProperties extends Object; // Utility to set system properties that can later be used by log configuration files.\npublic enum LogLevel extends Enum<LogLevel>; // Logging levels supported by a LoggingSystem.\n", "des": "Support and abstractions across several logging libraries."}
{"index": 3741, "repo": "lucene-queryparser-9.7.0", "code": "Package: builders\n\nClasses and Interfaces: \nInterface StandardQueryBuilder; // This interface should be implemented by every class that wants to build Query objects from QueryNode objects.\nClass AnyQueryNodeBuilder; // Builds a BooleanQuery of SHOULD clauses, possibly with some minimum number to match.\nClass BooleanQueryNodeBuilder; // Builds a BooleanQuery object from a BooleanQueryNode object.\nClass BoostQueryNodeBuilder; // This builder basically reads the Query object set on the BoostQueryNode child using QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID and applies the boost value defined in the BoostQueryNode.\nClass DummyQueryNodeBuilder; // This builder does nothing.\nClass FieldQueryNodeBuilder; // Builds a TermQuery object from a FieldQueryNode object.\nClass FuzzyQueryNodeBuilder; // Builds a FuzzyQuery object from a FuzzyQueryNode object.\nClass GroupQueryNodeBuilder; // Builds no object, it only returns the Query object set on the GroupQueryNode object using a QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID tag.\nClass IntervalQueryNodeBuilder; // Builds a Query from an IntervalQueryNode.\nClass MatchAllDocsQueryNodeBuilder; // Builds a MatchAllDocsQuery object from a MatchAllDocsQueryNode object.\nClass MatchNoDocsQueryNodeBuilder; // Builds a MatchNoDocsQuery object from a MatchNoDocsQueryNode object.\nClass MinShouldMatchNodeBuilder; // Builds a BooleanQuery from a MinShouldMatchNode.\nClass ModifierQueryNodeBuilder; // Builds no object, it only returns the Query object set on the ModifierQueryNode object using a QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID tag.\nClass MultiPhraseQueryNodeBuilder; // Builds a MultiPhraseQuery object from a MultiPhraseQueryNode object.\nClass PhraseQueryNodeBuilder; // Builds a PhraseQuery object from a TokenizedPhraseQueryNode object.\nClass PointRangeQueryNodeBuilder; // Builds PointValues range queries out of PointRangeQueryNodes.\nClass PrefixWildcardQueryNodeBuilder; // Builds a PrefixQuery object from a PrefixWildcardQueryNode object.\nClass RegexpQueryNodeBuilder; // Builds a RegexpQuery object from a RegexpQueryNode object.\n", "des": "Standard Lucene Query Node Builders."}
{"index": 3497, "repo": "poi-5.2.3", "code": "Package: common\n\nClasses and Interfaces: \nInterface POIFSConstants; // A repository for constants shared by POI classes.\nClass POIFSBigBlockSize; // A class describing attributes of the Big Block Size\n", "des": "common package contains constants and other classes shared across all POIFS subpackages"}
{"index": 3367, "repo": "opencms-core-15.0", "code": "Package: editors\n\nSub Packages: \npackage editors.directedit; // Used to control the generation of the HTML for the \"direct edit\" buttons.\n\nClasses and Interfaces: \nInterface I_CmsEditorActionHandler; // Provides a method for performing an individual action if the user pressed a special button in the editor.\nInterface I_CmsEditorCssHandler; // Provides methods to determine the CSS style sheet URI for the editors based on the edited resource path.\nInterface I_CmsEditorHandler; // Provides a method for selecting an individual file editor.\nInterface I_CmsEditorTypeMatcher; // Provides a method for assigning additional resource types to editors.\nInterface I_CmsPreEditorActionDefinition; // Defines an action to be performed before the workplace editor is opened for the first time.\nClass A_CmsPreEditorActionDefinition; // Defines an action to be performed before the workplace editor is opened for the first time.\nClass CmsDefaultPageEditor; // Provides methods for building editors for the CmsDefaultPage page type.\nClass CmsDialogCopyLanguage; // Provides methods for the editor copy language dialog.\nClass CmsDialogElement; // Contains the setup information about a single dialog element.\nClass CmsDialogElements; // Provides methods for the editor elements dialog.\nClass CmsEditor; // Provides basic methods for building the file editors of OpenCms.\nClass CmsEditorActionDefault; // Provides a method to perform a user defined action when editing a page.\nClass CmsEditorBase; // Base class for all editors that turns of time warp deletion inherited from CmsWorkplace.\nClass CmsEditorCssHandlerDefault; // A default editor CSS handler to obtain the CSS style sheet path from the template property value of the template itself.\nClass CmsEditorDisplayOptions; // Provides methods to determine the display options of a workplace editor for the current user.\nClass CmsEditorFrameset; // Helper class to create the editor frameset.\nClass CmsEditorHandler; // This editor handler class returns the editor URI depending on various factors.\nClass CmsEditorSelector; // Selects the dialog which should be displayed by OpenCms depending on the configuration value.\nClass CmsEditorSessionInfo; // Stores editor session data.\nClass CmsPreEditorAction; // Handles the actions that should be performed before opening the editor frameset.\n", "des": "Base classes for the editors (WYSIWYG, plain text, XML content) used in the OpenCms Workplace."}
{"index": 2143, "repo": "wicket-core-10.0.0-M1", "code": "Package: html\n\nSub Packages: \npackage html.basic; // Basic HTML components.\npackage html.border; // Border components.\npackage html.form; // HTML Forms and form components.\npackage html.image; // Image components.\npackage html.include; // Components for including content from non-Wicket sources.\npackage html.link; // Link components.\npackage html.list; // List components for tabular data and such.\npackage html.pages; // Default special purpose pages for error and feedback support.\npackage html.panel; // Panel components.\n\nClasses and Interfaces: \npublic enum CrossOrigin extends Enum<CrossOrigin>; // To be used for the crossOrigin attribute\npublic abstract class DecoratingHeaderResponse extends Object implements IHeaderResponse; // This is simply a helper implementation of IHeaderResponse that really delegates all of its method calls to the IHeaderResponse that is passed into the constructor.\npublic class GenericWebMarkupContainer<T> extends WebMarkupContainer implements IGenericComponent<T,GenericWebMarkupContainer<T>>; // A WebMarkupContainer with typesafe getters and setters for the model and its underlying object\npublic class GenericWebPage<T> extends WebPage implements IGenericComponent<T,GenericWebPage<T>>; // A WebPage with typesafe getters and setters for the model and its underlying object\npublic final class HeaderPartContainer extends WebMarkupContainer implements IComponentResolver; // For each wicket:head tag a HeaderPartContainer is created and added to the HtmlHeaderContainer which has been added to the Page.\npublic class HeaderResponseDecoratorCollection extends Object implements IHeaderResponseDecorator; // A collection of IHeaderResponseDecorators.\npublic class HTML5Attributes extends Behavior; // Behavior which renders HTML5 attributes.\npublic static class HTML5Attributes.InstantiationListener extends Object implements IComponentInstantiationListener; // A listener to instantiations of FormComponents to add HTML5 attributes.\npublic interface IComponentAwareHeaderContributor extends org.apache.wicket.util.io.IClusterable; // An interface to be implemented by Behaviors, IAjaxCallListeners.\npublic interface IHeaderContributor extends org.apache.wicket.util.io.IClusterable; // An interface to be implemented by application level listeners or other entities that wish to contribute to the header section of the page.\n", "des": "Base package of HTML markup."}
{"index": 1414, "repo": "spring-boot-actuator-3.1.1", "code": "Package: cache\n\nClasses and Interfaces: \npublic class Cache2kCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.cache2k.extra.spring.SpringCache2kCache>; // CacheMeterBinderProvider implementation for cache2k.\n@FunctionalInterface public interface CacheMeterBinderProvider<C extends org.springframework.cache.Cache>; // Provide a MeterBinder based on a Cache.\npublic class CacheMetricsRegistrar extends Object; // Register supported Cache to a MeterRegistry.\npublic class CaffeineCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.cache.caffeine.CaffeineCache>; // CacheMeterBinderProvider implementation for Caffeine.\n@ImportRuntimeHints(org.springframework.boot.actuate.metrics.cache.HazelcastCacheMeterBinderProvider.HazelcastCacheMeterBinderProviderRuntimeHints.class) public class HazelcastCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<com.hazelcast.spring.cache.HazelcastCache>; // CacheMeterBinderProvider implementation for Hazelcast.\npublic class JCacheCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.cache.jcache.JCacheCache>; // CacheMeterBinderProvider implementation for JCache.\npublic class RedisCacheMeterBinderProvider extends Object implements CacheMeterBinderProvider<org.springframework.data.redis.cache.RedisCache>; // CacheMeterBinderProvider implementation for Redis.\npublic class RedisCacheMetrics extends io.micrometer.core.instrument.binder.cache.CacheMeterBinder<org.springframework.data.redis.cache.RedisCache>; // CacheMeterBinder for RedisCache.\n", "des": "Actuator support for cache metrics."}
{"index": 2568, "repo": "pulsar-common-3.0.0", "code": "Package: util\n\nSub Packages: \npackage util.collections; // Set of different collections working in the concurrent environment.\npackage util.keystoretls; // Helpers to work with events from the non-blocking I/O client-server framework.\npackage util.netty; // Helpers to work with events from the non-blocking I/O client-server framework.\n\nClasses and Interfaces: \npublic abstract class BaseGenerateDocumentation extends Object;\nprotected static class BaseGenerateDocumentation.CategoryComparator extends Object implements Comparator<org.apache.commons.lang3.tuple.Pair<Field,org.apache.pulsar.common.util.BaseGenerateDocumentation.FieldContextWrapper>>, Serializable;\npublic interface BCLoader; // This interface declares a Bouncy Castle provider Loader.\npublic class ClassLoaderUtils extends Object; // Helper methods wrt Classloading.\npublic class CmdGenerateDocs extends Object;\npublic class Codec extends Object;\npublic class CompletableFutureCancellationHandler extends Object; // Implements cancellation and timeout support for CompletableFutures.\npublic class DateFormatter extends Object; // Date-time String formatter utility class.\npublic class DefaultSslContextBuilder extends SslContextAutoRefreshBuilder<SSLContext>;\npublic class DirectMemoryUtils extends Object;\npublic class ExceptionHandler extends Object; // Util class to place some special handling of exceptions.\npublic final class FieldParser extends Object; // Generic value converter.\npublic class FileModifiedTimeUpdater extends Object; // Class working with file's modified time.\npublic class FutureUtil extends Object; // This class is aimed at simplifying work with CompletableFuture.\n@ThreadSafe public static class FutureUtil.Sequencer<T> extends Object;\npublic class GracefulExecutorServicesShutdown extends Object; // This a builder like class for providing a fluent API for graceful shutdown Executors are added with the GracefulExecutorServicesShutdown.shutdown(ExecutorService...) method.\npublic interface Hash; // This interface declares a hash function.\npublic class KeyManagerProxy extends X509ExtendedKeyManager; // This class wraps X509ExtendedKeyManager and gives opportunity to refresh key-manager with refreshed certs without changing SslContext.\npublic class KeyStoreHolder extends Object; // Holder for the secure key store.\npublic class Murmur3_32Hash extends Object implements Hash; // Implementation of the MurmurHash3 non-cryptographic hash function.\n", "des": "Common utils."}
{"index": 741, "repo": "spring-data-solr-4.3.15", "code": "Package: config\n\nClasses and Interfaces: \nClass AbstractSolrConfiguration; // Spring Data for Apache Solr base configuration using JavaConfig.\nClass SolrRepositoryConfigExtension; // RepositoryConfigurationExtension implementation to configure Solr repository configuration support, evaluating the EnableSolrRepositories annotation or the equivalent XML element.\nAnnotation Type EnableSolrRepositories; // Annotation to enable Solr repositories.\n", "des": "Repository configuration and extension support."}
{"index": 519, "repo": "commons-vfs2-2.9.0", "code": "Package: ftps\n\nClasses and Interfaces: \nClass FtpsClientFactory; // Create FTPSClient instances.\nClass FtpsFileProvider; // A provider for FTP file systems.\nClass FtpsFileSystem; // A FTPS file system.\nClass FtpsFileSystemConfigBuilder; // The configuration builder for various FTPS configuration options.\nEnum FtpsDataChannelProtectionLevel; // Protection level of the data channel in a FTPS communication.\nEnum FtpsMode; // Mode of the FTPS connection.\n", "des": "The FTPS File Provider."}
{"index": 3397, "repo": "commons-imaging-1.0-alpha3", "code": "Package: iptc\n\nClasses and Interfaces: \nInterface IptcType;\nClass IptcBlock; // Represents an IPTC block, a set of key-value pairs of Photoshop IPTC data.\nClass IptcConstants;\nClass IptcParser;\nClass IptcRecord;\nClass IptcTypeLookup;\nClass JpegIptcRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass PhotoshopApp13Data;\nEnum IptcTypes;\n", "des": "JPEG image format IPTC metadata."}
{"index": 688, "repo": "jackson-databind-2.15.2", "code": "Package: jsonFormatVisitors\n\nClasses and Interfaces: \nInterface JsonAnyFormatVisitor;\nInterface JsonArrayFormatVisitor;\nInterface JsonBooleanFormatVisitor;\nInterface JsonFormatVisitable; // Interface JsonSerializer implements to allow for visiting type hierarchy.\nInterface JsonFormatVisitorWithSerializerProvider;\nInterface JsonFormatVisitorWrapper; // Interface for visitor callbacks, when type in question can be any of legal JSON types.\nInterface JsonIntegerFormatVisitor;\nInterface JsonMapFormatVisitor;\nInterface JsonNullFormatVisitor;\nInterface JsonNumberFormatVisitor;\nInterface JsonObjectFormatVisitor; // Visitor called when properties of a type that maps to JSON Object are being visited: this usually means POJOs, but sometimes other types use it too (like EnumMap).\nInterface JsonStringFormatVisitor;\nInterface JsonValueFormatVisitor;\nClass JsonAnyFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonArrayFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonBooleanFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonFormatVisitorWrapper.Base; // Empty \"no-op\" implementation of JsonFormatVisitorWrapper, suitable for sub-classing.\nClass JsonIntegerFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonMapFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\nClass JsonNullFormatVisitor.Base; // Default \"empty\" implementation, useful as the base to start on; especially as it is guaranteed to implement all the method of the interface, even if new methods are getting added.\n", "des": "Classes used for exposing logical structure of POJOs as Jackson sees it, and exposed via ObjectMapper.acceptJsonFormatVisitor(Class, JsonFormatVisitorWrapper) and ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, JsonFormatVisitorWrapper) methods."}
{"index": 2645, "repo": "spring-data-cassandra-4.1.2", "code": "Package: core\n\nSub Packages: \npackage core.convert; // Spring Data Cassandra specific converter infrastructure.\npackage core.cql; // CQL core support.\npackage core.legacy; // Apache Cassandra legacy asynchronous support for easier migration.\npackage core.mapping; // Infrastructure for the Apache Cassandra row-to-object mapping subsystem.\npackage core.query; // Apache Cassandra specific query and update support.\n\nClasses and Interfaces: \npublic interface AsyncCassandraOperations; // Interface specifying a basic set of asynchronous Cassandra operations.\npublic class AsyncCassandraTemplate extends Object implements AsyncCassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware; // Primary implementation of AsyncCassandraOperations.\npublic static interface AsyncCassandraTemplate.AsyncPreparedStatementHandler extends AsyncPreparedStatementCreator, PreparedStatementBinder, CqlProvider; // General callback interface used to create and bind prepared CQL statements.\npublic interface CassandraAdminOperations extends CassandraOperations; // Operations for managing a Cassandra keyspace.\npublic class CassandraAdminTemplate extends CassandraTemplate implements CassandraAdminOperations; // Default implementation of CassandraAdminOperations.\npublic interface CassandraBatchOperations; // Batch operations for insert/update/delete actions on a table.\npublic interface CassandraOperations extends FluentCassandraOperations; // Interface specifying a basic set of Cassandra operations.\npublic class CassandraPersistentEntitySchemaCreator extends Object; // Schema creation support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraPersistentEntitySchemaDropper extends Object; // Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.\npublic class CassandraTemplate extends Object implements CassandraOperations, ApplicationEventPublisherAware, ApplicationContextAware; // Primary implementation of CassandraOperations.\npublic static class CassandraTemplate.PreparedStatementHandler extends Object implements PreparedStatementCreator, PreparedStatementBinder, CqlProvider; // Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.\npublic class DeleteOptions extends WriteOptions; // Extension to WriteOptions for use with DELETE operations.\npublic static class DeleteOptions.DeleteOptionsBuilder extends WriteOptions.WriteOptionsBuilder; // Builder for DeleteOptions.\npublic class EntityWriteResult<T> extends WriteResult; // The result of a write operation for an entity.\npublic interface ExecutableDeleteOperation; // ExecutableDeleteOperation allows creation and execution of Cassandra DELETE operations in a fluent API style.\npublic static interface ExecutableDeleteOperation.DeleteWithQuery; // Filtering (optional).\n", "des": "Apache Cassandra core support."}
{"index": 2014, "repo": "spring-boot-devtools-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \n@FunctionalInterface public interface AccessManager; // Provides access control for a Dispatcher.\npublic class Dispatcher extends Object; // Dispatcher used to route incoming remote server requests to a Handler.\npublic class DispatcherFilter extends Object implements jakarta.servlet.Filter; // Servlet filter providing integration with the remote server Dispatcher.\n@FunctionalInterface public interface Handler; // A single handler that is able to process an incoming remote server request.\n@FunctionalInterface public interface HandlerMapper; // Interface to provide a mapping between a ServerHttpRequest and a Handler.\npublic class HttpHeaderAccessManager extends Object implements AccessManager; // AccessManager that checks for the presence of an HTTP header secret.\npublic class HttpStatusHandler extends Object implements Handler; // Handler that responds with a specific HttpStatus.\npublic class UrlHandlerMapper extends Object implements HandlerMapper; // HandlerMapper implementation that maps incoming URLs.\n", "des": "Server support for a remotely running Spring Boot application."}
{"index": 3838, "repo": "lucene-core-9.7.0", "code": "Package: lucene90\n\nSub Packages: \npackage lucene90.blocktree; // BlockTree terms dictionary.\npackage lucene90.compressing; // Lucene 9.0 compressing format.\n\nClasses and Interfaces: \nClass DeflateWithPresetDictCompressionMode; // A compression mode that trades speed for compression ratio.\nClass IndexedDISI; // Disk-based implementation of a DocIdSetIterator which can return the index of the current document, i.e.\nClass Lucene90CompoundFormat; // Lucene 9.0 compound file format\nClass Lucene90DocValuesFormat; // Lucene 9.0 DocValues format.\nClass Lucene90LiveDocsFormat; // Lucene 9.0 live docs format\nClass Lucene90NormsFormat; // Lucene 9.0 Score normalization format.\nClass Lucene90PointsFormat; // Lucene 9.0 point format, which encodes dimensional values in a block KD-tree structure for fast 1D range and N dimensional shape intersection filtering.\nClass Lucene90PointsReader; // Reads point values previously written with Lucene90PointsWriter\nClass Lucene90PointsWriter; // Writes dimensional values\nClass Lucene90PostingsFormat; // Lucene 5.0 postings format, which encodes postings in packed integer blocks for fast decode.\nClass Lucene90PostingsFormat.IntBlockTermState; // Holds all state required for Lucene90PostingsReader to produce a PostingsEnum without re-seeking the terms dict.\nClass Lucene90PostingsReader; // Concrete class that reads docId(maybe frq,pos,offset,payloads) list with postings format.\nClass Lucene90PostingsWriter; // Concrete class that writes docId(maybe frq,pos,offset,payloads) list with postings format.\nClass Lucene90SegmentInfoFormat; // Lucene 9.0 Segment info format.\nClass Lucene90StoredFieldsFormat; // Lucene 9.0 stored fields format.\nClass Lucene90TermVectorsFormat; // Lucene 9.0 term vectors format.\nClass LZ4WithPresetDictCompressionMode; // A compression mode that compromises on the compression ratio to provide fast compression and decompression.\nEnum Lucene90StoredFieldsFormat.Mode; // Configuration option for stored fields.\n", "des": "Lucene 9.0 file format."}
{"index": 3301, "repo": "opencms-core-15.0", "code": "Package: publish\n\nClasses and Interfaces: \nInterface I_CmsPublishEventListener; // This interface listens to events for a specific publish job.\nClass CmsPublishEngine; // This class is responsible for the publish process.\nClass CmsPublishEngineState; // Class defining the publish engine states.\nClass CmsPublishEventAdapter; // Default implementation for the I_CmsPublishEventListener.\nClass CmsPublishHistory; // List of already finished publish jobs.\nClass CmsPublishJobBase; // Defines a read-only publish job.\nClass CmsPublishJobEnqueued; // Defines a read-only publish job that is still waiting for publishing.\nClass CmsPublishJobFinished; // Defines a read-only publish job that has been already published.\nClass CmsPublishJobInfoBean; // Publish job information bean.\nClass CmsPublishJobRunning; // Defines a read-only publish job that is being published.\nClass CmsPublishListenerCollection; // Publish job information bean.\nClass CmsPublishListVerifier; // Performs some additional checks on publish lists to prevent inconsistent VFS states.\nClass CmsPublishManager; // This manager provide access to the publish engine runtime information.\nClass CmsPublishQueue; // This queue contains all not jet started publish jobs.\nClass CmsPublishReport; // Report class used for the publish operations.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsPublishManager.PublishListRemoveMode; // Enum for the different publish list remove modes.\nClass CmsPublishException; // Used to signal publish issues.\n", "des": "Classes to handle the OpenCms publish process."}
{"index": 170, "repo": "ignite-core-2.15.0", "code": "Package: top\n\nClasses and Interfaces: \nClass GridTopologyCommandHandler; // Command handler for API requests.\n", "des": "REST topology commands."}
{"index": 1428, "repo": "spring-boot-actuator-3.1.1", "code": "Package: neo4j\n\nClasses and Interfaces: \npublic class Neo4jHealthIndicator extends AbstractHealthIndicator; // HealthIndicator that tests the status of a Neo4j by executing a Cypher statement and extracting server and database information.\npublic final class Neo4jReactiveHealthIndicator extends AbstractReactiveHealthIndicator; // ReactiveHealthIndicator that tests the status of a Neo4j by executing a Cypher statement and extracting server and database information.\n", "des": "Actuator support for Neo4j."}
{"index": 3149, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: converter\n\nClasses and Interfaces: \nClass AttributeConverterMutabilityPlanImpl<T>; // The standard approach for defining a MutabilityPlan for converted (AttributeConverter) values is to always assume that they are immutable to make sure that dirty checking, deep copying and second-level caching all work properly no matter what.\nClass AttributeConverterSqlTypeDescriptorAdapter; // Adapter for incorporating JPA AttributeConverter handling into the SqlTypeDescriptor contract.\nClass AttributeConverterTypeAdapter<T>; // Adapts the Hibernate Type contract to incorporate JPA AttributeConverter calls.\n", "des": "Support for handling JPA AttributeConverter instances as part of the Hibernate Type system."}
{"index": 1749, "repo": "spring-data-mongodb-4.1.2", "code": "Package: aggregation\n\nClasses and Interfaces: \npublic class AccumulatorOperators extends Object; // Gateway to accumulator aggregation operations.\npublic static class AccumulatorOperators.AccumulatorOperatorFactory extends Object;\npublic static class AccumulatorOperators.Avg extends Object; // AggregationExpression for $avg.\npublic static class AccumulatorOperators.CovariancePop extends Object; // AggregationExpression for $covariancePop.\npublic static class AccumulatorOperators.CovarianceSamp extends Object; // AggregationExpression for $covarianceSamp.\npublic static class AccumulatorOperators.ExpMovingAvg extends Object; // AccumulatorOperators.ExpMovingAvg calculates the exponential moving average of numeric values.\npublic static interface AccumulatorOperators.ExpMovingAvgBuilder; // Builder for AccumulatorOperators.ExpMovingAvg.\npublic static class AccumulatorOperators.Max extends Object; // AggregationExpression for $max.\npublic static class AccumulatorOperators.Min extends Object; // AggregationExpression for $min.\npublic static class AccumulatorOperators.StdDevPop extends Object; // AggregationExpression for $stdDevPop.\npublic static class AccumulatorOperators.StdDevSamp extends Object; // AggregationExpression for $stdDevSamp.\npublic static class AccumulatorOperators.Sum extends Object; // AggregationExpression for $sum.\npublic class AddFieldsOperation extends Object; // Adds new fields to documents.\npublic static class AddFieldsOperation.AddFieldsOperationBuilder extends Object;\npublic static interface AddFieldsOperation.AddFieldsOperationBuilder.ValueAppender;\npublic class Aggregation extends Object; // An Aggregation is a representation of a list of aggregation steps to be performed by the MongoDB Aggregation Framework.\npublic interface AggregationExpression extends MongoExpression; // An AggregationExpression can be used with field expressions in aggregation pipeline stages like project and group.\npublic class AggregationExpressionCriteria extends Object implements CriteriaDefinition; // A criteria to use $expr within a Query.\npublic interface AggregationOperation; // Represents one single operation in an aggregation pipeline.\npublic interface AggregationOperationContext extends CodecRegistryProvider; // The context for an AggregationOperation.\npublic class AggregationOptions extends Object implements ReadConcernAware, ReadPreferenceAware; // Holds a set of configurable aggregation options that can be used within an aggregation pipeline.\npublic static class AggregationOptions.Builder extends Object; // A Builder for AggregationOptions.\n", "des": "Support for the MongoDB aggregation framework."}
{"index": 3264, "repo": "opencms-core-15.0", "code": "Package: oracle\n\nClasses and Interfaces: \nClass CmsHistoryDriver; // Oracle implementation of the history driver methods.\nClass CmsProjectDriver; // Oracle/OCI implementation of the project driver methods.\nClass CmsSqlManager; // Oracle implementation of the SQL manager.\nClass CmsSubscriptionDriver; // Oracle implementation of the subscription driver.\nClass CmsUserDriver; // Oracle implementation of the user driver methods.\nClass CmsVfsDriver; // Oracle implementation of the VFS driver methods.\n", "des": "Oracle9+ implementation of the OpenCms database connector."}
{"index": 3747, "repo": "lucene-queryparser-9.7.0", "code": "Package: simple\n\nClasses and Interfaces: \nClass SimpleQueryParser; // SimpleQueryParser is used to parse human readable query syntax.\n", "des": "A simple query parser for human-entered queries."}
{"index": 3836, "repo": "lucene-core-9.7.0", "code": "Package: codecs\n\nSub Packages: \npackage codecs.compressing; // Compressing helper classes.\npackage codecs.lucene90; // Lucene 9.0 file format.\npackage codecs.lucene94; // Lucene 9.4 file format.\npackage codecs.lucene95; // Lucene 9.5 file format.\npackage codecs.perfield; // Postings format that can delegate to different formats per-field.\n\nClasses and Interfaces: \nClass BlockTermState; // Holds all state required for PostingsReaderBase to produce a PostingsEnum without re-seeking the terms dict.\nClass BufferingKnnVectorsWriter; // Buffers up pending vector value(s) per doc, then flushes when segment flushes.\nClass Codec; // Encodes/decodes an inverted index segment.\nClass CodecUtil; // Utility class for reading and writing versioned headers.\nClass CompetitiveImpactAccumulator; // This class accumulates the (freq, norm) pairs that may produce competitive scores.\nClass CompoundDirectory; // A read-only Directory that consists of a view over a compound file.\nClass CompoundFormat; // Encodes/decodes compound files\nClass DocValuesConsumer; // Abstract API that consumes numeric, binary and sorted docvalues.\nClass DocValuesFormat; // Encodes/decodes per-document values.\nClass DocValuesProducer; // Abstract API that produces numeric, binary, sorted, sortedset, and sortednumeric docvalues.\nClass FieldInfosFormat; // Encodes/decodes FieldInfos\nClass FieldsConsumer; // Abstract API that consumes terms, doc, freq, prox, offset and payloads postings.\nClass FieldsProducer; // Abstract API that produces terms, doc, freq, prox, offset and payloads postings.\nClass FilterCodec; // A codec that forwards all its method calls to another codec.\nClass KnnFieldVectorsWriter<T>; // Vectors' writer for a field\nClass KnnVectorsFormat; // Encodes/decodes per-document vector and any associated indexing structures required to support nearest-neighbor search\nClass KnnVectorsReader; // Reads vectors from an index.\nClass KnnVectorsWriter; // Writes vectors to an index.\nClass KnnVectorsWriter.MergedVectorValues; // View over multiple vector values supporting iterator-style access via DocIdMerger.\n", "des": "Codecs API: API for customization of the encoding and structure of the index."}
{"index": 1935, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: hateoas\n\nClasses and Interfaces: \n@ConfigurationProperties(prefix=\"spring.hateoas\") public class HateoasProperties extends Object; // properties for Spring HATEOAS.\n@AutoConfiguration(after={WebMvcAutoConfiguration.class,JacksonAutoConfiguration.class,HttpMessageConvertersAutoConfiguration.class,RepositoryRestMvcAutoConfiguration.class}) @ConditionalOnClass({org.springframework.hateoas.EntityModel.class,org.springframework.web.bind.annotation.RequestMapping.class,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.class,org.springframework.plugin.core.Plugin.class}) @ConditionalOnWebApplication @EnableConfigurationProperties(HateoasProperties.class) public class HypermediaAutoConfiguration extends Object; // Auto-configuration for Spring HATEOAS's @EnableHypermediaSupport.\n@Configuration(proxyBeanMethods=false) @ConditionalOnMissingBean(org.springframework.hateoas.client.LinkDiscoverers.class) @ConditionalOnClass(com.fasterxml.jackson.databind.ObjectMapper.class) @EnableHypermediaSupport(type=HAL) protected static class HypermediaAutoConfiguration.HypermediaConfiguration extends Object;\n", "des": "Auto-configuration for Spring HATEOAS."}
{"index": 674, "repo": "commons-lang3-3.12.0", "code": "Package: stream\n\nClasses and Interfaces: \nClass Streams; // Provides utility functions, and classes for working with the java.util.stream package, or more generally, with Java 8 lambdas.\nClass Streams.ArrayCollector<O>; // A Collector type for arrays.\nClass Streams.FailableStream<O>; // A reduced, and simplified version of a Stream with failable method signatures.\n", "des": "Provides utility classes to complement those in java.util.stream."}
{"index": 2942, "repo": "spring-security-config-6.1.2", "code": "Package: config\n\nSub Packages: \npackage config.authentication; // Parsing of <authentication-manager> and related elements.\npackage config.http; // Parsing of the <http> namespace element.\npackage config.ldap; // Security namespace support for LDAP authentication.\npackage config.method; // Support for parsing of the <global-method-security> and <intercept-methods> elements.\n\nClasses and Interfaces: \npublic abstract class BeanIds extends Object; // Contains globally used default Bean IDs for beans created by the namespace support in Spring Security 2.\n@FunctionalInterface public interface Customizer<T>; // Callback interface that accepts a single input argument and returns no result.\npublic class DebugBeanDefinitionParser extends Object implements org.springframework.beans.factory.xml.BeanDefinitionParser;\npublic abstract class Elements extends Object; // Contains all the element names used by Spring Security 3 namespace support.\npublic final class SecurityNamespaceHandler extends Object implements org.springframework.beans.factory.xml.NamespaceHandler; // Parses elements from the \"security\" namespace (http://www.springframework.org/schema/security).\n", "des": "Support classes for the Spring Security namespace."}
{"index": 3784, "repo": "lucene-analysis-common-9.7.0", "code": "Package: fa\n\nClasses and Interfaces: \nClass PersianAnalyzer; // Analyzer for Persian.\nClass PersianCharFilter; // CharFilter that replaces instances of Zero-width non-joiner with an ordinary space.\nClass PersianCharFilterFactory; // Factory for PersianCharFilter.\nClass PersianNormalizationFilter; // A TokenFilter that applies PersianNormalizer to normalize the orthography.\nClass PersianNormalizationFilterFactory; // Factory for PersianNormalizationFilter.\nClass PersianNormalizer; // Normalizer for Persian.\nClass PersianStemFilter; // A TokenFilter that applies PersianStemmer to stem Persian words.\nClass PersianStemFilterFactory; // Factory for PersianStemFilter.\nClass PersianStemmer; // Stemmer for Persian.\n", "des": "Analyzer for Persian."}
{"index": 2204, "repo": "spring-data-commons-3.1.2", "code": "Package: geo\n\nSub Packages: \npackage geo.format; // Formatters for geo-spatial types.\n\nClasses and Interfaces: \npublic class Box extends Object implements Shape; // Represents a geospatial box value\npublic class Circle extends Object implements Shape; // Represents a geospatial circle value\npublic class CustomMetric extends Object implements Metric; // Value object to create custom Metrics on the fly.\npublic final class Distance extends Object implements Serializable, Comparable<Distance>; // Value object to represent distances in a given metric.\npublic class GeoModule extends com.fasterxml.jackson.databind.module.SimpleModule; // Custom module to deserialize the geo-spatial value objects using Jackson 2.\npublic class GeoPage<T> extends PageImpl<GeoResult<T>>; // Custom Page to carry the average distance retrieved from the GeoResults the GeoPage is set up from.\npublic final class GeoResult<T> extends Object implements Serializable; // Value object capturing some arbitrary object plus a distance.\npublic class GeoResults<T> extends Object implements Iterable<GeoResult<T>>, Serializable; // Value object to capture GeoResults as well as the average distance they have.\npublic interface Metric extends Serializable; // Interface for Metrics that can be applied to a base scale.\npublic enum Metrics extends Enum<Metrics> implements Metric; // Commonly used Metrics.\npublic class Point extends Object implements Serializable; // Represents a geospatial point value.\npublic class Polygon extends Object implements Iterable<Point>, Shape; // Simple value object to represent a Polygon.\npublic interface Shape extends Serializable; // Common interface for all shapes.\n", "des": "Value types representing geo-spatial concepts."}
{"index": 1595, "repo": "spring-websocket-6.0.11", "code": "Package: messaging\n\nClasses and Interfaces: \npublic abstract class AbstractSubProtocolEvent extends org.springframework.context.ApplicationEvent; // A base class for events for a message received from a WebSocket client and parsed into a higher-level sub-protocol (e.g.\npublic class DefaultSimpUserRegistry extends Object implements org.springframework.messaging.simp.user.SimpUserRegistry, org.springframework.context.event.SmartApplicationListener; // A default implementation of SimpUserRegistry that relies on AbstractSubProtocolEvent application context events to keep track of connected users and their subscriptions.\npublic class SessionConnectedEvent extends AbstractSubProtocolEvent; // A connected event represents the server response to a client's connect request.\npublic class SessionConnectEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionDisconnectEvent extends AbstractSubProtocolEvent; // Event raised when the session of a WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionSubscribeEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class SessionUnsubscribeEvent extends AbstractSubProtocolEvent; // Event raised when a new WebSocket client using a Simple Messaging Protocol (e.g.\npublic class StompSubProtocolErrorHandler extends Object implements SubProtocolErrorHandler<byte[]>; // A SubProtocolErrorHandler for use with STOMP.\npublic class StompSubProtocolHandler extends Object implements SubProtocolHandler, org.springframework.context.ApplicationEventPublisherAware; // A SubProtocolHandler for STOMP that supports versions 1.0, 1.1, and 1.2 of the STOMP specification.\npublic static interface StompSubProtocolHandler.Stats; // Contract for access to session counters.\npublic interface SubProtocolErrorHandler<P>; // A contract for handling sub-protocol errors sent to clients.\npublic interface SubProtocolHandler; // A contract for handling WebSocket messages as part of a higher level protocol, referred to as \"sub-protocol\" in the WebSocket RFC specification.\n", "des": "WebSocket integration for Spring's messaging module."}
{"index": 565, "repo": "hadoop-common-3.3.4", "code": "Package: lib\n\nClasses and Interfaces: \nClass Interns; // Helpers to create interned metrics info.\nClass MetricsRegistry; // An optional metrics registry class for creating and maintaining a collection of MetricsMutables, making writing metrics source easier.\nClass MutableCounter; // The mutable counter (monotonically increasing) metric interface\nClass MutableCounterInt; // A mutable int counter for implementing metrics sources\nClass MutableCounterLong; // A mutable long counter\nClass MutableGauge; // The mutable gauge metric interface\nClass MutableGaugeFloat; // A mutable float gauge.\nClass MutableGaugeInt; // A mutable int gauge\nClass MutableGaugeLong; // A mutable long gauge\nClass MutableMetric; // The mutable metric interface\nClass MutableQuantiles; // Watches a stream of long values, maintaining online estimates of specific quantiles with provably low error bounds.\nClass MutableRate; // A convenient mutable metric for throughput measurement\nClass MutableRates; // Helper class to manage a group of mutable rate metrics This class synchronizes all accesses to the metrics it contains, so it should not be used in situations where there is high contention on the metrics.\nClass MutableRatesWithAggregation; // Helper class to manage a group of mutable rate metrics.\nClass MutableRollingAverages; // This class maintains a group of rolling average metrics.\nClass MutableStat; // A mutable metric with stats.\nEnum DefaultMetricsSystem; // The default metrics system singleton.\n", "des": "A collection of library classes for implementing metrics sources"}
{"index": 2361, "repo": "spring-boot-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \npublic abstract class AbstractServletWebServerFactory extends AbstractConfigurableWebServerFactory implements ConfigurableServletWebServerFactory; // Abstract base class for ConfigurableServletWebServerFactory implementations.\npublic interface ConfigurableServletWebServerFactory extends ConfigurableWebServerFactory, ServletWebServerFactory, WebListenerRegistry; // A configurable ServletWebServerFactory.\n@FunctionalInterface public interface CookieSameSiteSupplier; // Strategy interface that can be used with ConfigurableServletWebServerFactory implementations in order to supply custom Cookie.SameSite values for specific cookies.\npublic class Encoding extends Object; // Configuration properties for server HTTP encoding.\npublic static enum Encoding.Type extends Enum<Encoding.Type>; // Type of HTTP message to consider for encoding configuration.\npublic class Jsp extends Object; // Configuration for the server's JSP servlet.\n@FunctionalInterface public interface ServletWebServerFactory extends WebServerFactory; // Factory interface that can be used to create a WebServer.\npublic class Session extends Object; // Session properties.\npublic static class Session.Cookie extends Cookie; // Session cookie properties.\npublic static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode>; // Available session tracking modes (mirrors SessionTrackingMode.\n", "des": "Servlet web server abstractions."}
{"index": 3135, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface NativeQueryInterpreter; // Service contract for dealing with native queries.\nInterface ParameterParser.Recognizer; // Maybe better named a Journaler.\nInterface QueryPlanCache.QueryPlanCreator;\nClass AbstractParameterDescriptor; // NOTE: Consider this contract (and its sub-contracts) as incubating as we transition to 6.0 and SQM\nClass EntityGraphQueryHint; // Encapsulates a JPA EntityGraph provided through a JPQL query hint.\nClass FilterQueryPlan; // Extends an HQLQueryPlan to maintain a reference to the collection-role name being filtered.\nClass HQLQueryPlan; // Defines a query execution plan for an HQL query (or filter).\nClass NamedParameterDescriptor; // Descriptor regarding a named parameter.\nClass NativeQueryInterpreterInitiator;\nClass NativeSQLQueryPlan; // Defines a query execution plan for a native-SQL query.\nClass OrdinalParameterDescriptor; // Descriptor regarding an ordinal parameter.\nClass ParameterParser; // The single available method ParameterParser.parse(java.lang.String, org.hibernate.engine.query.spi.ParameterParser.Recognizer) is responsible for parsing a query string and recognizing tokens in relation to parameters (either named, JPA-style, or ordinal) and providing callbacks about such recognitions.\nClass ParamLocationRecognizer; // Implements a parameter parser recognizer specifically for the purpose of journaling parameter locations.\nClass ParamLocationRecognizer.InFlightJpaOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightNamedParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass QueryPlanCache; // Acts as a cache for compiled query plans, as well as query-parameter metadata.\nClass ReturnMetadata; // Metadata about the query return(s).\n", "des": "Defines support for query plans and stored metadata about queries"}
{"index": 3718, "repo": "solr-core-9.3.0", "code": "Package: configuration\n\nSub Packages: \npackage configuration.providers; // TODO\n\nClasses and Interfaces: \nInterface SSLCredentialProvider; // Interface for different source of SSL configurations.\nClass SSLConfigurations; // Dedicated object to handle Solr configurations\nClass SSLConfigurations.SysProps;\nClass SSLConfigurationsFactory;\nClass SSLCredentialProviderFactory; // Class responsible to build SSL credential providers\nEnum SSLCredentialProvider.CredentialType;\n", "des": "Common Util APIs related to Solr configuration."}
{"index": 880, "repo": "mahout-math-0.13.0", "code": "Package: math\n\nClasses and Interfaces: \nClass Arithmetic; // Arithmetic functions.\nClass Constants; // Defines some useful constants.\nClass Polynomial; // Polynomial functions.\n", "des": "Tools for basic and advanced mathematics: Arithmetics and Algebra, Polynomials and Chebyshev series, Bessel and Airy functions, Function Objects for generic function evaluation, etc."}
{"index": 298, "repo": "pdfbox-3.0.0-beta1", "code": "Package: pattern\n\nClasses and Interfaces: \nClass PDAbstractPattern; // This class wraps a pattern dictionary.\nClass PDShadingPattern; // A shading pattern dictionary.\nClass PDTilingPattern; // A tiling pattern dictionary.\n", "des": "This package deals with patterns which are used instead of colors."}
{"index": 1783, "repo": "spring-integration-file-6.1.2", "code": "Package: event\n\nClasses and Interfaces: \npublic abstract class FileIntegrationEvent extends org.springframework.integration.events.IntegrationEvent;\n", "des": "ApplicationEvents generated by the file module."}
{"index": 2359, "repo": "spring-boot-3.1.1", "code": "Package: error\n\nClasses and Interfaces: \n@Order(-2147483648) public class DefaultErrorAttributes extends Object implements ErrorAttributes, org.springframework.web.servlet.HandlerExceptionResolver, org.springframework.core.Ordered; // Default implementation of ErrorAttributes.\npublic interface ErrorAttributes; // Provides access to error attributes which can be logged or presented to the user.\npublic interface ErrorController; // Marker interface used to identify a @Controller that should be used to render errors.\n", "des": "Spring MVC error handling infrastructure."}
{"index": 3283, "repo": "opencms-core-15.0", "code": "Package: config\n\nSub Packages: \npackage config.parser; // API classes for the configuration parsers of the search form support provided for server-side Solr search.\n\nClasses and Interfaces: \nInterface I_CmsSearchConfiguration; // Interface the main search configuration must implement.\nInterface I_CmsSearchConfigurationCommon; // Interface the common search configuration must implement.\nInterface I_CmsSearchConfigurationDidYouMean; // Interface of the \"Did you mean ...?\" configuration for the JSP search form.\nInterface I_CmsSearchConfigurationFacet; // Configuration common to all facets.\nInterface I_CmsSearchConfigurationFacetField; // The interface a field facet configuration must implement.\nInterface I_CmsSearchConfigurationFacetQuery; // Interface for the query facet configuration.\nInterface I_CmsSearchConfigurationFacetQuery.I_CmsFacetQueryItem; // The interface of a single query facet item.\nInterface I_CmsSearchConfigurationFacetRange; // The interface a field facet configuration must implement.\nInterface I_CmsSearchConfigurationGeoFilter; // The interface a Geo filter configuration must implement.\nInterface I_CmsSearchConfigurationHighlighting; // The interface each highlighting configuration must implement.\nInterface I_CmsSearchConfigurationPagination; // The interface a pagination configuration must implement.\nInterface I_CmsSearchConfigurationSorting; // The interface a sort configuration must implement.\nInterface I_CmsSearchConfigurationSortOption; // The interface a sort option configuration must implement.\nClass CmsSearchConfiguration; // The main search configuration.\nClass CmsSearchConfigurationCommon; // Search configuration for common parameters as the query parameter etc.\nClass CmsSearchConfigurationDidYouMean; // Class keeping the configuration of the \"Did you mean ...?\" feature of the search form.\nClass CmsSearchConfigurationFacet; // Configuration that is common for all facets.\nClass CmsSearchConfigurationFacetField; // Search configuration special for field facets.\nClass CmsSearchConfigurationFacetQuery; // Configuration for the query facet.\nClass CmsSearchConfigurationFacetQuery.CmsFacetQueryItem; // Representation of one query facet item.\nClass CmsSearchConfigurationFacetRange; // Search configuration special for field facets.\nClass CmsSearchConfigurationGeoFilter; // Search configuration for the Geo filter.\nClass CmsSearchConfigurationHighlighting; // Search configuration for highlighting options.\nClass CmsSearchConfigurationPagination; // Search configuration for pagination.\nClass CmsSearchConfigurationSorting; // Configuration for sorting in general.\n", "des": "API classes for the configuration of the search form support provided for server-side Solr search."}
{"index": 2463, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: influx\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.influx.InfluxMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"influx\") @EnableConfigurationProperties(InfluxProperties.class) public class InfluxMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to Influx.\n@ConfigurationProperties(prefix=\"management.influx.metrics.export\") public class InfluxProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring Influx metrics export.\n", "des": "Support for exporting actuator metrics to InfluxDB."}
{"index": 2646, "repo": "spring-data-cassandra-4.1.2", "code": "Package: convert\n\nClasses and Interfaces: \npublic abstract class AbstractCassandraConverter extends Object implements CassandraConverter, InitializingBean; // Base class for CassandraConverter implementations.\n@Deprecated public class BasicCassandraRowValueProvider extends RowValueProvider;\npublic interface CassandraColumnType extends ColumnType; // Descriptor for a Cassandra column type exposing a DataType.\npublic interface CassandraConverter extends EntityConverter<CassandraPersistentEntity<?>,CassandraPersistentProperty,Object,Object>; // Central Cassandra specific converter interface from Object to Row.\npublic class CassandraCustomConversions extends CustomConversions; // Value object to capture custom conversion.\npublic abstract class CassandraJsr310Converters extends Object; // Helper class to register JodaTime specific Converter implementations in case the library is present on the classpath.\n@WritingConverter public static enum CassandraJsr310Converters.DateToInstantConverter extends Enum<CassandraJsr310Converters.DateToInstantConverter> implements Converter<Date,Instant>; // Simple singleton to convert Dates to their Cassandra Instant representation for the CQL Timestamp type.\n@ReadingConverter public static enum CassandraJsr310Converters.InstantToDateConverter extends Enum<CassandraJsr310Converters.InstantToDateConverter> implements Converter<Instant,Date>;\n@ReadingConverter public static enum CassandraJsr310Converters.LocalTimeToMillisOfDayConverter extends Enum<CassandraJsr310Converters.LocalTimeToMillisOfDayConverter> implements Converter<LocalTime,Long>; // Simple singleton to convert LocalTimes to their Long representation.\n@ReadingConverter public static enum CassandraJsr310Converters.MillisOfDayToLocalTimeConverter extends Enum<CassandraJsr310Converters.MillisOfDayToLocalTimeConverter> implements Converter<Long,LocalTime>; // Simple singleton to convert Longs to their LocalTime representation.\npublic interface CassandraRowValueProvider extends CassandraValueProvider; // CassandraValueProvider providing values based on a Row.\n@Deprecated public class CassandraTupleValueProvider extends TupleValueProvider;\n@Deprecated public class CassandraUDTValueProvider extends UdtValueProvider;\npublic interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty>; // PropertyValueProvider for CassandraPersistentProperty.\npublic interface ColumnType; // Interface to access column type information.\npublic interface ColumnTypeResolver; // Resolves ColumnType for properties, TypeInformation, and values.\n@Deprecated public class CustomConversions extends CassandraCustomConversions;\n", "des": "Spring Data Cassandra specific converter infrastructure."}
{"index": 2255, "repo": "spring-vault-core-3.0.4", "code": "Package: vault\n\nSub Packages: \npackage vault.annotation; // Annotation support for the Spring Vault.\npackage vault.authentication; // Support for authentication and session management.\npackage vault.client; // Spring Vault Client abstraction.\npackage vault.config; // Spring configuration for Vault.\npackage vault.core; // Vault core support.\npackage vault.security; // Integration with Spring Security.\npackage vault.support; // Classes supporting the Vault packages, such as value objects.\n\nClasses and Interfaces: \npublic class VaultException extends NestedRuntimeException; // The Spring Vault specific NestedRuntimeException implementation.\n", "des": "Spring support for Hashicorp Vault."}
{"index": 1120, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "code": "Package: docker\n\nClasses and Interfaces: \nClass DockerClient;\nClass DockerCommand;\nClass DockerCommandExecutor; // Utility class for executing common docker operations.\nClass DockerExecCommand; // Encapsulates the docker exec command and its command line arguments.\nClass DockerImagesCommand; // Encapsulates the docker images command and its command line arguments.\nClass DockerInspectCommand; // Encapsulates the docker inspect command and its command line arguments.\nClass DockerKillCommand; // Encapsulates the docker kill command and its command line arguments.\nClass DockerLoadCommand;\nClass DockerPullCommand; // Encapsulates the docker pull command and its command line arguments.\nClass DockerRmCommand; // Encapsulates the docker rm command and its command line arguments.\nClass DockerRunCommand;\nClass DockerStartCommand; // Encapsulates the docker start command and its command line arguments.\nClass DockerStopCommand; // Encapsulates the docker stop command and its command line arguments.\nClass DockerVolumeCommand; // Docker Volume Command, run \"docker volume --help\" for more details.\nEnum DockerCommandExecutor.DockerContainerStatus; // Potential states that the docker status can return.\n", "des": "Package containing classes related to Docker commands and common operations used within the @{link DockerLinuxContainerRuntime}."}
{"index": 2284, "repo": "spring-data-elasticsearch-5.1.2", "code": "Package: repository\n\nClasses and Interfaces: \n@NoRepositoryBean public interface ElasticsearchRepository<T,ID> extends PagingAndSortingRepository<T,ID>, CrudRepository<T,ID>;\n@NoRepositoryBean public interface ReactiveElasticsearchRepository<T,ID> extends ReactiveSortingRepository<T,ID>, ReactiveCrudRepository<T,ID>; // Elasticsearch specific Repository interface with reactive support.\n", "des": "infrastructure to define the Elasticsearch mapping for an index."}
{"index": 3792, "repo": "lucene-analysis-common-9.7.0", "code": "Package: hy\n\nClasses and Interfaces: \nClass ArmenianAnalyzer; // Analyzer for Armenian.\n", "des": "Analyzer for Armenian."}
{"index": 2133, "repo": "spring-context-support-6.0.11", "code": "Package: javamail\n\nClasses and Interfaces: \npublic class ConfigurableMimeFileTypeMap extends FileTypeMap implements org.springframework.beans.factory.InitializingBean; // Spring-configurable FileTypeMap implementation that will read MIME type to file extension mappings from a standard JavaMail MIME type mapping file, using a standard MimetypesFileTypeMap underneath.\npublic class InternetAddressEditor extends PropertyEditorSupport; // Editor for java.mail.internet.InternetAddress, to directly populate an InternetAddress property.\npublic interface JavaMailSender extends MailSender; // Extended MailSender interface for JavaMail, supporting MIME messages both as direct arguments and through preparation callbacks.\npublic class JavaMailSenderImpl extends Object implements JavaMailSender; // Production implementation of the JavaMailSender interface, supporting both JavaMail MimeMessages and Spring SimpleMailMessages.\npublic class MimeMailMessage extends Object implements MailMessage; // Implementation of the MailMessage interface for a JavaMail MIME message, to let message population code interact with a simple message or a MIME message through a common interface.\npublic class MimeMessageHelper extends Object; // Helper class for populating a MimeMessage.\n@FunctionalInterface public interface MimeMessagePreparator; // Callback interface for the preparation of JavaMail MIME messages.\n", "des": "JavaMail support for Spring's mail infrastructure."}
{"index": 1071, "repo": "hadoop-yarn-common-3.3.6", "code": "Package: impl\n\nClasses and Interfaces: \nClass DirectTimelineWriter; // A simple writer class for storing Timeline data into Leveldb store.\nClass FileSystemTimelineWriter; // A simple writer class for storing Timeline data in any storage that implements a basic FileSystem interface.\nClass TimelineClientImpl;\nClass TimelineConnector; // Utility Connector class which is used by timeline clients to securely get connected to the timeline server.\nClass TimelineConnector.TimelineClientRetryOp; // Abstract class for an operation that should be retried by timeline client.\nClass TimelineConnector.TimelineClientRetryOpForOperateDelegationToken;\nClass TimelineReaderClientImpl; // Implementation of TimelineReaderClient interface.\nClass TimelineV2ClientImpl; // Implementation of timeline v2 client interface.\nClass TimelineWriter; // Base writer class to write the Timeline data.\n", "des": "Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements."}
{"index": 3760, "repo": "lucene-analysis-common-9.7.0", "code": "Package: ar\n\nClasses and Interfaces: \nClass ArabicAnalyzer; // Analyzer for Arabic.\nClass ArabicNormalizationFilter; // A TokenFilter that applies ArabicNormalizer to normalize the orthography.\nClass ArabicNormalizationFilterFactory; // Factory for ArabicNormalizationFilter.\nClass ArabicNormalizer; // Normalizer for Arabic.\nClass ArabicStemFilter; // A TokenFilter that applies ArabicStemmer to stem Arabic words..\nClass ArabicStemFilterFactory; // Factory for ArabicStemFilter.\nClass ArabicStemmer; // Stemmer for Arabic.\n", "des": "Analyzer for Arabic."}
{"index": 1146, "repo": "commons-math3-3.6.1", "code": "Package: integration\n\nSub Packages: \npackage integration.gauss; // Gauss family of quadrature schemes.\n\nClasses and Interfaces: \nInterface UnivariateIntegrator; // Interface for univariate real integration algorithms.\nClass BaseAbstractUnivariateIntegrator; // Provide a default implementation for several generic functions.\nClass IterativeLegendreGaussIntegrator; // This algorithm divides the integration interval into equally-sized sub-interval and on each of them performs a Legendre-Gauss quadrature.\nClass LegendreGaussIntegrator; // As of 3.1 (to be removed in 4.0).\nClass MidPointIntegrator; // Implements the Midpoint Rule for integration of real univariate functions.\nClass RombergIntegrator; // Implements the Romberg Algorithm for integration of real univariate functions.\nClass SimpsonIntegrator; // Implements Simpson's Rule for integration of real univariate functions.\nClass TrapezoidIntegrator; // Implements the Trapezoid Rule for integration of real univariate functions.\n", "des": "Numerical integration (quadrature) algorithms for univariate real functions."}
{"index": 3125, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface ConfigurationService; // Provides access to the initial user-provided configuration values.\nInterface ConfigurationService.Converter<T>; // Simple conversion contract for converting an untyped object to a specified type.\nClass StandardConverters; // Standard set of setting converters\n", "des": "SPI Package for the configuration service."}
{"index": 3851, "repo": "lucene-core-9.7.0", "code": "Package: store\n\nClasses and Interfaces: \nInterface RandomAccessInput; // Random Access Index API.\nClass BaseDirectory; // Base implementation for a concrete Directory that uses a LockFactory for locking.\nClass BufferedChecksum; // Wraps another Checksum with an internal buffer to speed up checksum calculations.\nClass BufferedChecksumIndexInput; // Simple implementation of ChecksumIndexInput that wraps another input and delegates calls.\nClass BufferedIndexInput; // Base implementation class for buffered IndexInput.\nClass ByteArrayDataInput; // DataInput backed by a byte array.\nClass ByteArrayDataOutput; // DataOutput backed by a byte array.\nClass ByteBufferIndexInput; // Base IndexInput implementation that uses an array of ByteBuffers to represent a file.\nClass ByteBuffersDataInput; // A DataInput implementing RandomAccessInput and reading data from a list of ByteBuffers.\nClass ByteBuffersDataOutput; // A DataOutput storing data in a list of ByteBuffers.\nClass ByteBuffersDataOutput.ByteBufferRecycler; // An implementation of a ByteBuffer allocation and recycling policy.\nClass ByteBuffersDirectory; // A ByteBuffer-based Directory implementation that can be used to store index files on the heap.\nClass ByteBuffersIndexInput; // An IndexInput implementing RandomAccessInput and backed by a ByteBuffersDataInput.\nClass ByteBuffersIndexOutput; // An IndexOutput writing to a ByteBuffersDataOutput.\nClass ChecksumIndexInput; // Extension of IndexInput, computing checksum as it goes.\nClass DataInput; // Abstract base class for performing read operations of Lucene's low-level data types.\nClass DataOutput; // Abstract base class for performing write operations of Lucene's low-level data types.\nClass Directory; // A Directory provides an abstraction layer for storing a list of files.\nClass FileSwitchDirectory; // Expert: A Directory instance that switches files between two other Directory instances.\nClass FilterDirectory; // Directory implementation that delegates calls to another directory.\nClass FilterIndexInput; // IndexInput implementation that delegates calls to another directory.\nClass FilterIndexOutput; // IndexOutput implementation that delegates calls to another directory.\nClass FlushInfo; // A FlushInfo provides information required for a FLUSH context.\nClass FSDirectory; // Base class for Directory implementations that store index files in the file system.\nClass FSLockFactory; // Base class for file system based locking implementation.\n", "des": "Binary i/o API, used for all index data."}
{"index": 2597, "repo": "spring-rabbit-3.0.6", "code": "Package: retry\n\nClasses and Interfaces: \npublic class ImmediateRequeueMessageRecoverer extends Object implements MessageRecoverer; // The MessageRecoverer implementation to throw an ImmediateRequeueAmqpException for subsequent requeuing in the listener container.\n@FunctionalInterface public interface MessageBatchRecoverer extends MessageRecoverer; // A retry recoverer for use with a batch listener.\n@FunctionalInterface public interface MessageKeyGenerator;\n@FunctionalInterface public interface MessageRecoverer; // Implementations of this interface can handle failed messages after retries are exhausted.\n@FunctionalInterface public interface NewMessageIdentifier; // An optimization for stateful retry of message processing.\npublic class RejectAndDontRequeueRecoverer extends Object implements MessageRecoverer; // MessageRecover that causes the listener container to reject the message without requeuing.\npublic class RepublishMessageRecoverer extends Object implements MessageRecoverer; // MessageRecoverer implementation that republishes recovered messages to a specified exchange with the exception stack trace stored in the message header x-exception.\npublic class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer; // A RepublishMessageRecoverer supporting publisher confirms and returns.\n", "des": "Provides classes supporting retries."}
{"index": 3309, "repo": "opencms-core-15.0", "code": "Package: documents\n\nClasses and Interfaces: \nInterface I_CmsDocumentFactory; // Used to create index Lucene Documents for OpenCms resources, controls the text extraction algorithm used for a specific OpenCms resource type / MIME type combination.\nInterface I_CmsSearchExtractor; // Defines a text extractor for the integrated search engine.\nInterface I_CmsTermHighlighter; // Highlights arbitrary terms, used for generation of search excerpts.\nClass A_CmsVfsDocument; // Base document factory class for a VFS CmsResource, just requires a specialized implementation of I_CmsSearchExtractor.extractContent(CmsObject, CmsResource, I_CmsSearchIndex) for text extraction from the binary document content.\nClass CmsDocumentContainerPage; // Lucene document factory class to extract index data from a resource of type CmsResourceTypeContainerPage.\nClass CmsDocumentDependency; // Provides the dependency information about one search result document, used to generate the list of document search results.\nClass CmsDocumentGeneric; // Lucene document factory class for indexing data from a generic CmsResource.\nClass CmsDocumentHtml; // Lucene document factory class to extract index data from a cms resource containing plain html data.\nClass CmsDocumentMsOfficeOLE2; // Lucene document factory class to extract text data from a VFS resource that is an OLE 2 MS Office document.\nClass CmsDocumentMsOfficeOOXML; // Lucene document factory class to extract text data from a VFS resource that is an OOXML MS Office document.\nClass CmsDocumentOpenOffice; // Lucene document factory class to extract index data from a cms resource containing Open Document Format data.\nClass CmsDocumentPdf; // Lucene document factory class to extract index data from a cms resource containing Adobe pdf data.\nClass CmsDocumentPlainText; // Lucene document factory class to extract index data from a cms resource containing plain text data.\nClass CmsDocumentRtf; // Lucene document factory class to extract index data from a cms resource containing RTF data.\nClass CmsDocumentXmlContent; // Lucene document factory class to extract index data from an OpenCms VFS resource of type CmsResourceTypeXmlContent.\nClass CmsDocumentXmlPage; // Lucene document factory class to extract index data from a cms resource of type CmsResourceTypeXmlPage.\nClass CmsExtractionResultCache; // Implements a disk cache that stores text extraction results in the RFS.\n", "des": "Handles indexing different sorts of document and resource type from the OpenCms VFS for the full text search."}
{"index": 1574, "repo": "spring-cloud-task-core-3.0.3", "code": "Package: configuration\n\nClasses and Interfaces: \npublic class DefaultTaskConfigurer extends Object implements TaskConfigurer; // Default implementation of the TaskConfigurer interface.\n@Target(TYPE) @Retention(RUNTIME) @Documented @Inherited @Import(TaskLifecycleConfiguration.class) public @interface EnableTask; // Enables the TaskLifecycleListener so that the features of Spring Cloud Task will be applied.\n@AutoConfiguration @EnableTransactionManagement @EnableConfigurationProperties(TaskProperties.class) @ConditionalOnProperty(prefix=\"spring.cloud.task.autoconfiguration\", name=\"enabled\", havingValue=\"true\", matchIfMissing=true) @Import(org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer.class) public class SimpleTaskAutoConfiguration extends Object; // Base Configuration class providing common structure for enabling and using Spring Task.\npublic class SingleInstanceTaskListener extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.ApplicationEvent>; // When spring.cloud.task.single-instance-enabled is set to true this listener will create a lock for the task based on the spring.cloud.task.name.\n@Order(-2147483648) @AutoConfiguration @ConditionalOnProperty(prefix=\"spring.cloud.task\", name=\"single-instance-enabled\", havingValue=\"true\") public class SingleTaskConfiguration extends Object; // Autoconfiguration of SingleInstanceTaskListener.\npublic interface TaskConfigurer; // Provides a strategy interface for providing configuration customization to the task system.\n@Configuration(proxyBeanMethods=false) public class TaskLifecycleConfiguration extends Object; // Configuration for a TaskLifecycleListener.\npublic class TaskObservationCloudKeyValues extends Object; // Provides values for the KeyValues for the task Observation when the cloud profile is active.\n@ConfigurationProperties(prefix=\"spring.cloud.task\") public class TaskProperties extends Object; // Properties available to configure the task.\npublic class TaskRuntimeHints extends Object implements org.springframework.aot.hint.RuntimeHintsRegistrar; // Native Hints for Spring Cloud Task.\n", "des": "Interfaces for configuring Spring Cloud Task and a default implementations."}
{"index": 3108, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "Package: registry\n\nSub Packages: \npackage registry.selector; // Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\n\nClasses and Interfaces: \nInterface BootstrapServiceRegistry; // Provides the most basic services needed.\nInterface StandardServiceInitiator<R extends Service>; // Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceRegistry; // Specialization of the ServiceRegistry contract mainly for type safety.\nClass BootstrapServiceRegistryBuilder; // Builder for BootstrapServiceRegistry instances.\nClass StandardServiceRegistryBuilder; // Builder for standard ServiceRegistry instances.\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 39, "repo": "ignite-core-2.15.0", "code": "Package: resources\n\nClasses and Interfaces: \nClass SpringResource.DEFAULT; // Dummy class to compensate for impossibility of having default null value for annotation method.\nAnnotation Type CacheNameResource; // Annotates a field or a setter method for injection of grid cache name.\nAnnotation Type CacheStoreSessionResource; // Annotates a field or a setter method for injection of current CacheStoreSession instance.\nAnnotation Type IgniteInstanceResource; // Annotates a field or a setter method for injection of current Ignite instance.\nAnnotation Type JobContextResource; // Annotates a field or a setter method for injection of ComputeJobContext instance.\nAnnotation Type LoadBalancerResource; // Annotates a field or a setter method for injection of ComputeLoadBalancer.\nAnnotation Type LoggerResource; // Annotates a field or a setter method for injection of IgniteLogger.\nAnnotation Type ServiceContextResource; // Annotates a field or a setter method for injecting a service context into a service instance.\nAnnotation Type ServiceResource; // Annotates a field or a setter method for injection of Ignite service(s) by specified service name.\nAnnotation Type SpringApplicationContextResource; // Annotates a field or a setter method for injection of Spring ApplicationContext resource.\nAnnotation Type SpringResource; // Annotates a field or a setter method for injection of resource from Spring ApplicationContext.\nAnnotation Type TaskContinuousMapperResource; // Annotates a field or a setter method for injection of ComputeTaskContinuousMapper resource.\nAnnotation Type TaskSessionResource; // Annotates a field or a setter method for injection of ComputeTaskSession resource.\n", "des": "Contains resource injection annotations."}
{"index": 2402, "repo": "spring-batch-core-5.0.2", "code": "Package: scope\n\nSub Packages: \npackage scope.context; // Implementation of the contexts for each of the custom bean scopes in Spring Batch (Job and Step).\n\nClasses and Interfaces: \npublic abstract class BatchScopeSupport extends Object implements org.springframework.beans.factory.config.Scope, org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.core.Ordered; // ScopeSupport.\nprotected static class BatchScopeSupport.Scopifier extends org.springframework.beans.factory.config.BeanDefinitionVisitor; // Helper class to scan a bean definition hierarchy and force the use of auto-proxy for step scoped beans.\npublic class JobScope extends BatchScopeSupport; // Scope for job context.\npublic class StepScope extends BatchScopeSupport; // Scope for step context.\n", "des": "Implementation of Spring Batch specific bean scopes (Job and Step)."}
{"index": 2722, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: transform\n\nClasses and Interfaces: \npublic abstract class AbstractLineTokenizer extends Object implements LineTokenizer; // Abstract class handling common concerns of various LineTokenizer implementations such as dealing with names and actual construction of FieldSet\npublic class BeanWrapperFieldExtractor<T> extends Object implements FieldExtractor<T>, org.springframework.beans.factory.InitializingBean; // This is a field extractor for a java bean.\npublic class ConversionException extends RuntimeException;\npublic class DefaultFieldSet extends Object implements FieldSet; // Default implementation of FieldSet using Java using Java primitive and standard types and utilities.\npublic class DefaultFieldSetFactory extends Object implements FieldSetFactory; // Default implementation of FieldSetFactory with no special knowledge of the FieldSet required.\npublic class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T>; // A LineAggregator implementation that converts an object into a delimited list of strings.\npublic class DelimitedLineTokenizer extends AbstractLineTokenizer implements org.springframework.beans.factory.InitializingBean; // A LineTokenizer implementation that splits the input String on a configurable delimiter.\npublic abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T>; // An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts.\npublic interface FieldExtractor<T>; // This class will convert an object to an array of its parts.\npublic interface FieldSet; // Interface used by flat file input sources to encapsulate concerns of converting an array of Strings to Java native types.\npublic interface FieldSetFactory; // Factory interface for creating FieldSet instances.\npublic class FixedLengthTokenizer extends AbstractLineTokenizer; // Tokenizer used to process data obtained from files with fixed-length format.\npublic class FlatFileFormatException extends RuntimeException; // Exception indicating that some type of error has occurred while attempting to parse a line of input into tokens.\npublic class FormatterLineAggregator<T> extends ExtractorLineAggregator<T>; // A LineAggregator implementation which produces a String by aggregating the provided item via the Formatter syntax.\npublic class IncorrectLineLengthException extends FlatFileFormatException; // Exception indicating that the line size expected is different from what is expected.\npublic class IncorrectTokenCountException extends FlatFileFormatException; // Exception indicating that an incorrect number of tokens have been found while parsing a file.\n", "des": "Infrastructure implementations of io file support transform concerns."}
{"index": 826, "repo": "calcite-core-1.34.0", "code": "Package: java\n\nClasses and Interfaces: \nInterface JavaTypeFactory; // Type factory that can register Java classes as record types.\nClass AbstractQueryableTable; // Abstract base class for implementing Table.\nClass ReflectiveSchema; // Implementation of Schema that exposes the public fields and methods in a Java object.\nClass ReflectiveSchema.Factory; // Factory that creates a schema by instantiating an object and looking at its public fields.\nAnnotation Type Array; // Annotation that indicates that a field is an array type.\nAnnotation Type Map; // Annotation that indicates that a field is a map type.\n", "des": "Query provider based on Java in-memory data structures."}
{"index": 2663, "repo": "spring-data-cassandra-4.1.2", "code": "Package: cdi\n\nClasses and Interfaces: \npublic class CassandraRepositoryBean<T> extends CdiRepositoryBean<T>; // A bean which represents a Cassandra repository.\npublic class CassandraRepositoryExtension extends CdiRepositoryExtensionSupport; // A portable CDI extension which registers beans for Spring Data Cassandra repositories.\n", "des": "CDI support for Apache Cassandra specific repository implementation."}
{"index": 3047, "repo": "spring-web-6.0.11", "code": "Package: invoker\n\nClasses and Interfaces: \npublic abstract class AbstractNamedValueArgumentResolver extends Object implements HttpServiceArgumentResolver; // Base class for arguments that resolve to a named request value such as a request header, path variable, cookie, and others.\nprotected static class AbstractNamedValueArgumentResolver.NamedValueInfo extends Object; // Info about a request value, typically extracted from a method parameter annotation.\npublic class CookieValueArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @CookieValue annotated arguments.\npublic interface HttpClientAdapter; // Contract to abstract the underlying HTTP client and decouple it from the HTTP service proxy.\npublic class HttpMethodArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver that resolves the target request's HTTP method from an HttpMethod argument.\npublic final class HttpRequestValues extends Object; // Container for HTTP request values extracted from an @HttpExchange-annotated method and argument values passed to it.\npublic static final class HttpRequestValues.Builder extends Object; // Builder for HttpRequestValues.\npublic interface HttpServiceArgumentResolver; // Resolve an argument from an @HttpExchange-annotated method to one or more HTTP request values.\npublic final class HttpServiceProxyFactory extends Object; // Factory to create a client proxy from an HTTP service interface with @HttpExchange methods.\npublic static final class HttpServiceProxyFactory.Builder extends Object; // Builder to create an HttpServiceProxyFactory.\npublic class PathVariableArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @PathVariable annotated arguments.\npublic class RequestAttributeArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestAttribute annotated arguments.\npublic class RequestBodyArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver for @RequestBody annotated arguments.\npublic class RequestHeaderArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestHeader annotated arguments.\npublic class RequestParamArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestParam annotated arguments.\npublic class RequestPartArgumentResolver extends AbstractNamedValueArgumentResolver; // HttpServiceArgumentResolver for @RequestPart annotated arguments.\npublic class UrlArgumentResolver extends Object implements HttpServiceArgumentResolver; // HttpServiceArgumentResolver that resolves the URL for the request from a URI argument.\n", "des": "Support for creating a client proxy for an HTTP service annotated with HttpExchange methods."}
{"index": 667, "repo": "commons-lang3-3.12.0", "code": "Package: locks\n\nClasses and Interfaces: \nClass LockingVisitors; // Combines the monitor and visitor pattern to work with locked objects.\nClass LockingVisitors.LockVisitor<O,L>; // Wraps a domain object and a lock for access by lambdas.\nClass LockingVisitors.ReadWriteLockVisitor<O>; // This class implements a wrapper for a locked (hidden) object, and provides the means to access it.\nClass LockingVisitors.StampedLockVisitor<O>; // This class implements a wrapper for a locked (hidden) object, and provides the means to access it.\n", "des": "Provides support classes for multi-threaded programming."}
{"index": 1674, "repo": "spring-boot-cli-3.1.1", "code": "Package: status\n\nClasses and Interfaces: \npublic final class ExitStatus extends Object; // Encapsulation of the outcome of a command.\n", "des": "CLI command status."}
{"index": 2122, "repo": "spring-boot-gradle-plugin-3.1.1", "code": "Package: aot\n\nClasses and Interfaces: \n@DisableCachingByDefault(because=\"Cacheability can only be determined by a concrete implementation\") public abstract class AbstractAot extends JavaExec; // Specialization of JavaExec to be used as a base class for tasks that perform ahead-of-time processing.\n@CacheableTask public abstract class ProcessAot extends AbstractAot; // Custom JavaExec task for ahead-of-time processing of a Spring Boot application.\n@CacheableTask public class ProcessTestAot extends AbstractAot; // Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests.\n", "des": "Support for ahead-of-time processing of an application built with Gradle."}
{"index": 208, "repo": "nutch-2.4", "code": "Package: elastic\n\nClasses and Interfaces: \nInterface ElasticConstants;\nClass ElasticIndexWriter;\n", "des": "Index writer plugin for Elasticsearch."}
{"index": 2611, "repo": "wicket-util-10.0.0-M1", "code": "Package: parsers\n\nClasses and Interfaces: \npublic final class CommaSeparatedVariableParser extends ListParser; // Parses out strings separated by commas.\npublic final class IntegerVariableAssignmentParser extends MetaPatternParser; // Parses integer variable assignments, such as \"x = 9\" or \"x=9\".\npublic class ListParser extends MetaPatternParser; // Parses an arbitrary list format with a pattern for list entries and a pattern for list separators.\npublic abstract class MetaPatternParser extends Object; // Base class for various MetaPattern based parsers.\npublic final class TagNameParser extends MetaPatternParser; // Parses XML tag names and attribute names which may include optional namespaces like \"namespace:name\" or \"name\".\npublic final class VariableAssignmentParser extends MetaPatternParser; // Parses key value assignment statements like \"foo=bar\" but also supporting namespaces like \"wicket:foo=bar\".\npublic final class WordParser extends MetaPatternParser; // Matches a 'word' surrounded by whitespace.\n", "des": "Regular Expressions meta pattern parsers."}
{"index": 54, "repo": "ignite-core-2.15.0", "code": "Package: annotations\n\nClasses and Interfaces: \nAnnotation Type QueryGroupIndex; // Describes group index.\nAnnotation Type QueryGroupIndex.List; // List of group indexes for type.\nAnnotation Type QuerySqlField; // Annotates fields for SQL queries.\nAnnotation Type QuerySqlField.Group; // Describes group of index and position of field in this group.\nAnnotation Type QuerySqlFunction; // Annotates public static methods in classes to be used in SQL queries as custom functions.\nAnnotation Type QueryTextField; // Annotation for fields to be indexed for full text search using Lucene.\n", "des": "Contains query-related annotations."}
{"index": 218, "repo": "nutch-2.4", "code": "Package: storage\n\nClasses and Interfaces: \nClass Host; // Host represents a store of webpages or other data which resides on a server or other computer so that it can be accessed over the Internet\nClass Host.Builder; // RecordBuilder for Host instances.\nClass Host.Tombstone;\nClass ParseStatus; // A nested container representing parse status data captured from invocation of parsers on fetch of a WebPage\nClass ParseStatus.Builder; // RecordBuilder for ParseStatus instances.\nClass ParseStatus.Tombstone;\nClass ProtocolStatus; // A nested container representing data captured from web server responses.\nClass ProtocolStatus.Builder; // RecordBuilder for ProtocolStatus instances.\nClass ProtocolStatus.Tombstone;\nClass StorageUtils; // Entry point to Gora store/mapreduce functionality.\nClass WebPage; // WebPage is the primary data structure in Nutch representing crawl data for a given WebPage at some point in time\nClass WebPage.Builder; // RecordBuilder for WebPage instances.\nClass WebPage.Tombstone;\nClass WebTableCreator;\nEnum Host.Field; // Enum containing all data bean's fields.\nEnum Mark;\nEnum ParseStatus.Field; // Enum containing all data bean's fields.\nEnum ProtocolStatus.Field; // Enum containing all data bean's fields.\nEnum WebPage.Field; // Enum containing all data bean's fields.\n", "des": "Representation (web pages, host metadata) of data in abstracted storage."}
{"index": 3698, "repo": "solr-core-9.3.0", "code": "Package: shardresultserializer\n\nClasses and Interfaces: \nInterface ShardResultTransformer<T,​R>; // A ShardResultTransformer is responsible for transforming a grouped shard result into group related structures (such as TopGroups and SearchGroup) and visa versa.\nClass SearchGroupsResultTransformer; // Implementation for transforming SearchGroup into a NamedList structure and visa versa.\nClass TopGroupsResultTransformer; // Implementation for transforming TopGroups and TopDocs into a NamedList structure and vice versa.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 1001, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: mail\n\nSub Packages: \npackage mail.monitor; // Provides the MonitoringStrategy interface and implementations.\npackage mail.support; // Classes supporting the org.springframework.ws.transport.mail package.\n\nClasses and Interfaces: \nInterface MailTransportConstants; // Declares Mail-specific transport constants.\nClass MailMessageReceiver; // Server-side component for receiving email messages using JavaMail.\nClass MailMessageSender; // WebServiceMessageSender implementation that uses Mail MimeMessages.\nClass MailReceiverConnection; // Implementation of WebServiceConnection that is used for server-side Mail access.\nClass MailSenderConnection; // Implementation of WebServiceConnection that is used for client-side Mail access.\nClass MailTransportException; // Exception that is thrown when an error occurs in the Mail transport.\n", "des": "Package providing support for handling messages via email."}
{"index": 2863, "repo": "spring-integration-core-6.1.2", "code": "Package: handler\n\nSub Packages: \npackage handler.advice; // Provides classes that are used to advise MessageHandlers with cross-cutting concerns.\npackage handler.support; // Provides classes for message handlers support.\n\nClasses and Interfaces: \npublic abstract class AbstractMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.MessageHandler, reactor.core.CoreSubscriber<org.springframework.messaging.Message<?>>; // Base class for MessageHandler implementations.\npublic abstract class AbstractMessageProcessor<T> extends AbstractExpressionEvaluator implements MessageProcessor<T>;\npublic abstract class AbstractMessageProducingHandler extends AbstractMessageHandler implements MessageProducer, HeaderPropagationAware; // The base AbstractMessageHandler implementation for the MessageProducer.\npublic abstract class AbstractReactiveMessageHandler extends MessageHandlerSupport implements org.springframework.messaging.ReactiveMessageHandler; // Base class for ReactiveMessageHandler implementations.\npublic abstract class AbstractReplyProducingMessageHandler extends AbstractMessageProducingHandler implements org.springframework.beans.factory.BeanClassLoaderAware; // Base class for MessageHandlers that are capable of producing replies.\npublic static interface AbstractReplyProducingMessageHandler.RequestHandler; // An implementation of this interface is used to wrap the AbstractReplyProducingMessageHandler.handleRequestMessage(Message) method.\npublic abstract class AbstractReplyProducingPostProcessingMessageHandler extends AbstractReplyProducingMessageHandler implements PostProcessingMessageHandler;\npublic class BeanNameMessageProcessor<T> extends Object implements MessageProcessor<T>, org.springframework.beans.factory.BeanFactoryAware; // An \"artificial\" MessageProcessor for lazy-load of target bean by its name.\npublic class BridgeHandler extends AbstractReplyProducingMessageHandler; // A simple MessageHandler implementation that passes the request Message directly to the output channel without modifying it.\npublic interface CompositeMessageHandler extends org.springframework.messaging.MessageHandler; // Classes implementing this interface delegate to a list of handlers.\n", "des": "Provides classes implementing various types of message handler."}
{"index": 3223, "repo": "commons-configuration2-2.9.0", "code": "Package: resolver\n\nClasses and Interfaces: \nInterface EntityRegistry; // Interface used for registering and retrieving PUBLICID to URL mappings.\nInterface EntityResolverSupport; // Interface that identifies the class as using an EntityResolver\nClass CatalogResolver; // Thin wrapper around xml commons CatalogResolver to allow list of catalogs to be provided.\nClass CatalogResolver.Catalog; // Overrides the Catalog implementation to use the underlying FileSystem.\nClass CatalogResolver.CatalogManager; // Extends the CatalogManager to make the FileSystem and base directory accessible.\nClass DefaultEntityResolver; // The DefaultEntityResolver used by XML Configurations.\n", "des": "A package containing EntityResolvers."}
{"index": 3053, "repo": "spring-ws-core-4.0.5", "code": "Package: support\n\nClasses and Interfaces: \npublic abstract class WebServiceGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean; // Convenient super class for application classes that need Web service access.\n", "des": "Convenient super class for application classes that need Web service access."}
{"index": 265, "repo": "nutch-2.4", "code": "Package: basic\n\nClasses and Interfaces: \nClass BasicIndexingFilter; // Adds basic searchable fields to a document.\n", "des": "A basic indexing plugin, adds basic fields: url, host, title, content, etc."}
{"index": 2887, "repo": "spring-integration-core-6.1.2", "code": "Package: management\n\nSub Packages: \npackage management.metrics; // Provides interfaces related to 5.0 metrics.\npackage management.micrometer; // Provides classes to support the use of Micrometer for metrics.\npackage management.observation; // Provides classes to support of Micrometer Observation API.\n\nClasses and Interfaces: \npublic interface IntegrationInboundManagement extends IntegrationManagement; // Marker interface indicating that this IntegrationManagement component initiates message flow.\n@Target(TYPE) @Retention(RUNTIME) @Inherited @Documented public @interface IntegrationManagedResource; // Clone of ManagedResource limiting beans thus annotated so that they will only be exported by the IntegrationMBeanExporter and prevented from being exported by other MBeanExporters (if present).\npublic interface IntegrationManagement extends NamedComponent, org.springframework.beans.factory.DisposableBean; // Base interface for Integration managed components.\npublic static class IntegrationManagement.ManagementOverrides extends Object; // Toggles to inform the management configurer to not set these properties since the user has manually configured them in a bean definition.\npublic interface ManageableLifecycle extends org.springframework.context.Lifecycle; // Makes Lifecycle methods manageable.\npublic interface ManageableSmartLifecycle extends org.springframework.context.SmartLifecycle, ManageableLifecycle; // Extend ManageableLifecycle to make those methods manageable.\npublic interface MappingMessageRouterManagement; // Exposes channel mapping operations when the router is proxied.\n@IntegrationManagedResource public interface MessageSourceManagement; // Message sources implementing this interface have additional properties that can be set or examined using JMX.\npublic interface SubscribableChannelManagement; // Metrics for subscribable channels.\n@IntegrationManagedResource public interface TrackableComponent extends NamedComponent;\n", "des": "Provides classes related to management support."}
{"index": 528, "repo": "commons-vfs2-2.9.0", "code": "Package: jar\n\nClasses and Interfaces: \nClass JarFileObject; // A file in a Jar file system.\nClass JarFileProvider; // A file system provider for Jar files.\nClass JarFileSystem; // A read-only file system for Jar files.\nClass JarURLConnectionImpl; // A default URL connection that will work for most file systems.\n", "des": "The Jar File Provider."}
{"index": 734, "repo": "spring-data-solr-4.3.15", "code": "Package: geo\n\nClasses and Interfaces: \nClass GeoConverters;\nClass Point;\nEnum GeoConverters.DistanceToStringConverter; // Converts a Distance to a solrReadable request parameter.\nEnum GeoConverters.Point2DToStringConverter; // Converts a Point to a solrReadable request parameter.\nEnum GeoConverters.Point3DToStringConverter; // Converts a Point to a solrReadable request parameter.\nEnum GeoConverters.StringToPointConverter; // Converts comma separated string to Point.\n", "des": "Apache Solr geo specifics."}
{"index": 453, "repo": "camel-core-3.0.0-RC1", "code": "Package: dataformat\n\nClasses and Interfaces: \nClass Any23DataFormat; // Any23 data format is used for parsing data to RDF.\nClass ASN1DataFormat; // The ASN.1 data format is used for file transfer with telecommunications protocols.\nClass AvroDataFormat; // The Avro data format is used for serialization and deserialization of messages using Apache Avro binary dataformat.\nClass BarcodeDataFormat; // The Barcode data format is used for creating barccode images (such as QR-Code)\nClass Base64DataFormat; // The Base64 data format is used for base64 encoding and decoding.\nClass BeanioDataFormat; // The BeanIO data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).\nClass BindyDataFormat; // The Bindy data format is used for working with flat payloads (such as CSV, delimited, fixed length formats, or FIX messages).\nClass CBORDataFormat; // CBOR data format is used for unmarshal a CBOR payload to POJO or to marshal POJO back to CBOR payload.\nClass CryptoDataFormat; // Crypto data format is used for encrypting and decrypting of messages using Java Cryptographic Extension.\nClass CsvDataFormat; // The CSV data format is used for handling CSV payloads.\nClass CustomDataFormat; // To use a custom data format implementation that does not come out of the box from Apache Camel.\nClass DataFormatsDefinition; // To configure data formats\nClass FhirDataformat;\nClass FhirJsonDataFormat; // The FHIR JSon data format is used to marshall/unmarshall to/from FHIR objects to/from JSON.\nClass FhirXmlDataFormat; // The FHIR XML data format is used to marshall/unmarshall from/to FHIR objects to/from XML.\nClass FlatpackDataFormat; // The Flatpack data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).\nClass GrokDataFormat; // The Grok data format is used for unmarshalling unstructured data to objects using Logstash based Grok patterns.\nClass GzipDataFormat; // The GZip data format is a message compression and de-compression format (which works with the popular gzip/gunzip tools).\n", "des": "The JAXB POJOs for the Data Formats used to marshal and unmarshal objects to and from streams inside components"}
{"index": 3042, "repo": "spring-web-6.0.11", "code": "Package: adapter\n\nClasses and Interfaces: \npublic abstract class AbstractReactiveWebInitializer extends Object implements WebApplicationInitializer; // Base class for a WebApplicationInitializer that installs a Spring Reactive Web Application on a Servlet container.\npublic class DefaultServerWebExchange extends Object implements ServerWebExchange; // Default implementation of ServerWebExchange.\npublic class ForwardedHeaderTransformer extends Object implements Function<ServerHttpRequest,ServerHttpRequest>; // Extract values from \"Forwarded\" and \"X-Forwarded-*\" headers to override the request URI (i.e.\npublic class HttpWebHandlerAdapter extends WebHandlerDecorator implements HttpHandler; // Default adapter of WebHandler to the HttpHandler contract.\npublic final class WebHttpHandlerBuilder extends Object; // This builder has two purposes:\npublic static class WebHttpHandlerBuilder.SpringWebBlockHoundIntegration extends Object implements reactor.blockhound.integration.BlockHoundIntegration; // BlockHoundIntegration for spring-web classes.\n", "des": "Implementations to adapt to the underlying org.springframework.http.client.reactive reactive HTTP adapter and HttpHandler."}
{"index": 3017, "repo": "spring-web-6.0.11", "code": "Package: observation\n\nClasses and Interfaces: \npublic class DefaultServerRequestObservationConvention extends Object implements ServerRequestObservationConvention; // Default ServerRequestObservationConvention.\npublic enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation; // Documented KeyValues for the HTTP server observations for reactive web applications.\npublic static enum ServerHttpObservationDocumentation.HighCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.HighCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic static enum ServerHttpObservationDocumentation.LowCardinalityKeyNames extends Enum<ServerHttpObservationDocumentation.LowCardinalityKeyNames> implements io.micrometer.common.docs.KeyName;\npublic class ServerRequestObservationContext extends io.micrometer.observation.transport.RequestReplyReceiverContext<ServerHttpRequest,ServerHttpResponse>; // Context that holds information for metadata collection regarding reactive HTTP requests observations.\npublic interface ServerRequestObservationConvention extends io.micrometer.observation.ObservationConvention<ServerRequestObservationContext>; // Interface for an ObservationConvention for reactive HTTP requests.\n", "des": "Instrumentation for observing reactive HTTP server applications."}
{"index": 3488, "repo": "poi-5.2.3", "code": "Package: hpsf\n\nSub Packages: \npackage hpsf.wellknown; // Specific support for DocumentSummaryInformation, SummaryInformation types.\n\nClasses and Interfaces: \nClass Array;\nClass Blob;\nClass ClassID; // Represents a class ID (16 bytes).\nClass ClipboardData;\nClass CodePageString;\nClass Currency;\nClass CustomProperties; // Maintains the instances of CustomProperty that belong to a DocumentSummaryInformation.\nClass CustomProperty; // This class represents custom properties in the document summary information stream.\nClass Date;\nClass Decimal;\nClass DocumentSummaryInformation; // Convenience class representing a DocumentSummary Information stream in a Microsoft Office document.\nClass Filetime; // The Windows FILETIME structure holds a date and time associated with a file.\nClass GUID;\nClass HPSFPropertiesOnlyDocument; // A version of POIDocument which allows access to the HPSF Properties, but no other document contents.\nClass IndirectPropertyName;\nClass Property; // A property in a Section of a PropertySet.\nClass PropertySet; // Represents a property set in the Horrible Property Set Format (HPSF).\nClass PropertySetFactory; // Factory class to create instances of SummaryInformation, DocumentSummaryInformation and PropertySet.\nClass Section; // Represents a section in a PropertySet.\nClass SummaryInformation; // Convenience class representing a Summary Information stream in a Microsoft Office document.\nClass Thumbnail; // Class to manipulate data in the Clipboard Variant (VT_CF) format.\nClass TypedPropertyValue;\nClass UnicodeString;\nClass Variant; // The Variant types as defined by Microsoft's COM.\nClass VariantBool;\nClass VariantSupport; // Supports reading and writing of variant data.\nClass Vector; // Holder for vector-type properties\nClass VersionedStream;\nEnum ClassIDPredefined;\nClass HPSFException; // This exception is the superclass of all other checked exceptions thrown in this package.\nClass HPSFRuntimeException; // This exception is the superclass of all other unchecked exceptions thrown in this package.\nClass IllegalPropertySetDataException; // This exception is thrown when there is an illegal value set in a PropertySet.\nClass IllegalVariantTypeException; // This exception is thrown if HPSF encounters a variant type that is illegal in the current context.\n", "des": "Processes streams in the Horrible Property Set Format (HPSF) in POI filesystems."}
{"index": 3421, "repo": "hibernate-core-5.6.15.Final", "code": "Package: spi\n\nClasses and Interfaces: \nInterface AfterTransactionCompletionProcess; // Contract representing some process that needs to occur during after transaction completion.\nInterface BeforeTransactionCompletionProcess; // Contract representing some process that needs to occur during before transaction completion.\nInterface Executable; // An operation which may be scheduled for later execution.\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 1632, "repo": "spring-kafka-3.0.9", "code": "Package: jaas\n\nClasses and Interfaces: \npublic class KafkaJaasLoginModuleInitializer extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.beans.factory.DisposableBean; // Contains properties for setting up an AppConfigurationEntry that can be used for the Kafka client.\npublic static enum KafkaJaasLoginModuleInitializer.ControlFlag extends Enum<KafkaJaasLoginModuleInitializer.ControlFlag>; // Control flag values for login configuration.\n", "des": "Provides classes related to jaas."}
{"index": 3673, "repo": "solr-core-9.3.0", "code": "Package: jmx\n\nClasses and Interfaces: \nInterface JmxMetricsReporter.JmxCounterMBean;\nInterface JmxMetricsReporter.JmxGaugeMBean;\nInterface JmxMetricsReporter.JmxHistogramMBean;\nInterface JmxMetricsReporter.JmxMeterMBean;\nInterface JmxMetricsReporter.JmxTimerMBean;\nInterface JmxMetricsReporter.MetricMBean;\nClass JmxMetricsReporter; // This is a modified copy of Dropwizard's JmxReporter and classes that it internally uses, with a few important differences: this class knows that it can directly use MetricsMap as a dynamic MBean.\nClass JmxMetricsReporter.Builder; // Builder for the JmxMetricsReporter class.\nClass JmxObjectNameFactory; // Factory to create MBean names for a given metric.\n", "des": "This package contains components that support SolrJmxReporter."}
{"index": 3357, "repo": "opencms-core-15.0", "code": "Package: sitemap\n\nClasses and Interfaces: \nInterface I_CmsLocaleCompareContext; // Provides information about the current state of the locale comparison editor.\nClass CmsCopyPageDialog; // Dialog used to copy container pages including their elements.\nClass CmsLocaleComparePanel; // View used to compare sitemaps across locales.\nClass CmsLocaleLinkTargetSelectionDialog; // Dialog used to select a resource which should be linked to a locale group.\nClass CmsSitemapExtension; // Extension used for the Vaadin dialogs in the sitemap editor.\nClass CmsSitemapTreeController; // Manages the sitemap tree in the 'locale comparison' view in the sitemap editor.\nClass CmsSitemapTreeDataProvider; // Loads node data for the sitemap tree.\nClass CmsSitemapTreeNode; // Widget displaying a sitemap tree node, with an openable area for its children.\nClass CmsSitemapTreeNodeData; // Represents the data of a sitemap tree node.\nClass CmsSitemapTreeNodeOpener; // Button used for opening / closing tree levels.\nClass CmsSitemapUI; // UI class for Vaadin dialogs in the sitemap editor.\nClass CmsUnlinkDialog; // Dialog to confirm detaching a resource from a locale group.\n", "des": "Vaadin GUI components and utilities for use in the sitemap editor."}
{"index": 501, "repo": "beam-sdks-java-core-2.49.0", "code": "Package: splittabledofn\n\nClasses and Interfaces: \nInterface GrowableOffsetRangeTracker.RangeEndEstimator; // Provides the estimated end offset of the range.\nInterface HasDefaultTracker<RestrictionT extends HasDefaultTracker<RestrictionT,TrackerT>,TrackerT extends RestrictionTracker<RestrictionT,?>>; // Interface for restrictions for which a default implementation of DoFn.NewTracker is available, depending only on the restriction itself.\nInterface HasDefaultWatermarkEstimator<WatermarkEstimatorStateT,WatermarkEstimatorT extends WatermarkEstimator<WatermarkEstimatorStateT>>; // Interface for watermark estimator state for which a default implementation of DoFn.NewWatermarkEstimator is available, depending only on the watermark estimator state itself.\nInterface ManualWatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator which is controlled manually from within a DoFn.\nInterface RestrictionTracker.HasProgress; // All RestrictionTrackers SHOULD implement this interface to improve auto-scaling and splitting performance.\nInterface TimestampObservingWatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator that observes the timestamps of all records output from a DoFn.\nInterface WatermarkEstimator<WatermarkEstimatorStateT>; // A WatermarkEstimator which is used for estimating output watermarks of a splittable DoFn.\nClass ByteKeyRangeTracker; // A RestrictionTracker for claiming ByteKeys in a ByteKeyRange in a monotonically increasing fashion.\nClass GrowableOffsetRangeTracker; // An OffsetRangeTracker for tracking a growable offset range.\nClass OffsetRangeTracker; // A RestrictionTracker for claiming offsets in an OffsetRange in a monotonically increasing fashion.\nClass RestrictionTracker<RestrictionT,PositionT>; // Manages access to the restriction and keeps track of its claimed part for a splittable DoFn.\nClass RestrictionTracker.Progress; // A representation for the amount of known completed and remaining work.\nClass RestrictionTracker.TruncateResult<RestrictionT>; // A representation of the truncate result.\nClass SplitResult<RestrictionT>; // A representation of a split result.\nClass WatermarkEstimators; // A set of WatermarkEstimators that users can use to advance the output watermark for their associated splittable DoFns.\nClass WatermarkEstimators.Manual; // Concrete implementation of a ManualWatermarkEstimator.\n", "des": "Defines utilities related to splittable DoFn."}
{"index": 1152, "repo": "commons-math3-3.6.1", "code": "Package: dfp\n\nClasses and Interfaces: \nInterface UnivariateDfpFunction; // as of 3.6, replaced with RealFieldUnivariateFunction\nClass BracketingNthOrderBrentSolverDFP; // as of 3.6 replaced with FieldBracketingNthOrderBrentSolver\nClass Dfp; // Decimal floating point library for Java\nClass DfpDec; // Subclass of Dfp which hides the radix-10000 artifacts of the superclass.\nClass DfpField; // Field for Decimal floating point instances.\nClass DfpMath; // Mathematical routines for use with Dfp.\nEnum DfpField.RoundingMode; // Enumerate for rounding modes.\n", "des": "Decimal floating point library for Java"}
{"index": 1204, "repo": "commons-math3-3.6.1", "code": "Package: stat\n\nSub Packages: \npackage stat.clustering; // All classes and sub-packages of this package are deprecated.\npackage stat.correlation; // Correlations/Covariance computations.\npackage stat.descriptive; // Generic univariate summary statistic objects.\npackage stat.inference; // Classes providing hypothesis testing.\npackage stat.interval; // Classes providing binomial proportion confidence interval construction.\npackage stat.ranking; // Classes providing rank transformations.\npackage stat.regression; // Statistical routines involving multivariate data.\n\nClasses and Interfaces: \nClass Frequency; // Maintains a frequency distribution.\nClass StatUtils; // StatUtils provides static methods for computing statistics based on data stored in double[] arrays.\n", "des": "Data storage, manipulation and summary routines."}
{"index": 2963, "repo": "spring-integration-redis-6.1.2", "code": "Package: store\n\nClasses and Interfaces: \npublic class RedisChannelMessageStore extends Object implements org.springframework.integration.store.ChannelMessageStore, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanClassLoaderAware; // Specialized Redis ChannelMessageStore that uses a list to back a QueueChannel.\npublic class RedisChannelPriorityMessageStore extends RedisChannelMessageStore implements org.springframework.integration.store.PriorityCapableChannelMessageStore; // Specialized Redis PriorityCapableChannelMessageStore that uses lists to back a QueueChannel.\npublic class RedisMessageStore extends org.springframework.integration.store.AbstractKeyValueMessageStore implements org.springframework.beans.factory.BeanClassLoaderAware; // Redis implementation of the key/value style MessageStore and MessageGroupStore\n", "des": "Provides classes related to the Redis message store."}
{"index": 3099, "repo": "jena-querybuilder-4.9.0", "code": "Package: querybuilder\n\nSub Packages: \npackage querybuilder.clauses; // Interfaces that describe various SPARQL clauses as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321.\npackage querybuilder.handlers; // Classes that implement SPARQL clauses but do not return instances of the builder.\npackage querybuilder.rewriters; // Classes to rewrite Query algebra, expressions and other objects to handle variable replacement for the prepared statement functionality.\n\nClasses and Interfaces: \npublic abstract class AbstractQueryBuilder<T extends AbstractQueryBuilder<T>> extends Object implements Cloneable, PrologClause<T>, ValuesClause<T>; // Base class for all QueryBuilders.\npublic class AskBuilder extends AbstractQueryBuilder<AskBuilder> implements DatasetClause<AskBuilder>, WhereClause<AskBuilder>, SolutionModifierClause<AskBuilder>; // Builder for SPARQL Ask Queries.\npublic class ConstructBuilder extends AbstractQueryBuilder<ConstructBuilder> implements DatasetClause<ConstructBuilder>, WhereClause<ConstructBuilder>, SolutionModifierClause<ConstructBuilder>, ConstructClause<ConstructBuilder>; // Builder for SPARQL Construct Queries.\npublic class Converters extends Object; // A collection of static methods to convert from Objects to various types used in Query and Update construction.\npublic class DescribeBuilder extends AbstractQueryBuilder<DescribeBuilder> implements DatasetClause<DescribeBuilder>, WhereClause<DescribeBuilder>, SolutionModifierClause<DescribeBuilder>, SelectClause<DescribeBuilder>; // Builder for SPARQL Describe Queries.\npublic class ExprFactory extends Object; // Create expressions.\npublic enum Order extends Enum<Order>; // The order for the ORDER BY modifiers.\npublic class SelectBuilder extends AbstractQueryBuilder<SelectBuilder> implements DatasetClause<SelectBuilder>, WhereClause<SelectBuilder>, SolutionModifierClause<SelectBuilder>, SelectClause<SelectBuilder>; // Builder for SPARQL Select Queries.\npublic class UpdateBuilder extends Object; // Class to build update requests.\npublic class WhereBuilder extends AbstractQueryBuilder<WhereBuilder> implements WhereClause<WhereBuilder>; // A simple implementation of WhereClause for use in building complex sub queries where a SelectBuilder or similar implementation is more than is needed.\n", "des": "A utility package to simplify the building of ARQ queries in code."}
{"index": 332, "repo": "kafka-clients-3.5.0", "code": "Package: plain\n\nClasses and Interfaces: \nClass PlainAuthenticateCallback;\nClass PlainLoginModule;\n", "des": "Provides implementation to use plaintext credentials authentication for securing Kafka clusters."}
{"index": 1493, "repo": "wicket-extensions-10.0.0-M1", "code": "Package: panel\n\nClasses and Interfaces: \npublic abstract class BreadCrumbPanel extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbParticipant; // A panel that participates with a bread crumb model.\npublic final class BreadCrumbPanelFactory extends Object implements IBreadCrumbPanelFactory; // Simple factory that creates instances of a bread crumb panel based on the class it is constructed with.\npublic class BreadCrumbPanelLink extends BreadCrumbLink; // Bread crumb link specifically for bread crumb panels.\npublic abstract class BreadCrumbParticipantDelegate extends Object implements IBreadCrumbParticipant; // Base implementation for Panel/ Component based IBreadCrumbParticipant that decouples the implementation from the actual panel class.\n@FunctionalInterface public interface IBreadCrumbPanelFactory extends org.apache.wicket.util.io.IClusterable; // Factory interface to enabled deferred creation of a bread crumb panel while getting the proper id for creation.\n", "des": "This package contains a panel based implementation of bread crumb participants."}
{"index": 2744, "repo": "spring-batch-infrastructure-5.0.2", "code": "Package: callback\n\nClasses and Interfaces: \npublic class NestedRepeatCallback extends Object implements RepeatCallback; // Callback that delegates to another callback, via a RepeatOperations instance.\n", "des": "Infrastructure implementations of repeat callback concerns."}
{"index": 55, "repo": "ignite-core-2.15.0", "code": "Package: store\n\nSub Packages: \npackage store.jdbc; // Contains reference JDBC-based cache store implementation.\n\nClasses and Interfaces: \nInterface CacheStore<K,V>; // API for cache persistent storage for read-through and write-through behavior.\nInterface CacheStoreSession; // Session for the cache store operations.\nInterface CacheStoreSessionListener; // Cache store session listener that allows to implement callbacks for session lifecycle.\nClass CacheLoadOnlyStoreAdapter<K,V,I>; // This adapter designed to support stores with bulk loading from stream-like source.\nClass CacheStoreAdapter<K,V>; // Cache storage convenience adapter.\n", "des": "Contains cache store interfaces."}
{"index": 2655, "repo": "spring-data-cassandra-4.1.2", "code": "Package: support\n\nClasses and Interfaces: \n@Deprecated public class CachedPreparedStatementCreator extends Object implements PreparedStatementCreator;\n@Deprecated public class MapPreparedStatementCache extends Object implements PreparedStatementCache;\nprotected static class MapPreparedStatementCache.CacheKey extends Object; // MapPreparedStatementCache.CacheKey for PreparedStatement caching.\n@Deprecated public interface PreparedStatementCache;\n", "des": "Support classes for the CQL framework."}
{"index": 1046, "repo": "commons-io-2.13.0", "code": "Package: attribute\n\nClasses and Interfaces: \nClass FileTimes; // Helps use FileTime and interoperate Date and NTFS times.\n", "des": "Provides help using java.nio.file.attribute types."}
{"index": 2484, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: tomcat\n\nClasses and Interfaces: \n@AutoConfiguration(after=CompositeMeterRegistryAutoConfiguration.class) @ConditionalOnWebApplication @ConditionalOnClass({io.micrometer.core.instrument.binder.tomcat.TomcatMetrics.class,org.apache.catalina.Manager.class}) public class TomcatMetricsAutoConfiguration extends Object; // Auto-configuration for TomcatMetrics.\n", "des": "Auto-configuration for Tomcat actuator metrics."}
{"index": 1866, "repo": "spring-security-cas-6.1.2", "code": "Package: cas\n\nSub Packages: \npackage cas.authentication; // An AuthenticationProvider that can process CAS service tickets and proxy tickets.\npackage cas.web; // Authenticates standard web browser users via CAS.\n\nClasses and Interfaces: \npublic final class SamlServiceProperties extends ServiceProperties; // Sets the appropriate parameters for CAS's implementation of SAML (which is not guaranteed to be actually SAML compliant).\npublic class ServiceProperties extends Object implements org.springframework.beans.factory.InitializingBean; // Stores properties related to this CAS service.\n", "des": "Spring Security support for Apereo's Central Authentication Service (CAS)."}
{"index": 1676, "repo": "spring-oxm-6.0.11", "code": "Package: oxm\n\nSub Packages: \npackage oxm.config; // Provides an namespace handler for the Spring Object/XML namespace.\npackage oxm.jaxb; // Package providing integration of JAXB with Spring's O/X Mapping support.\npackage oxm.mime; // Contains (un)marshallers optimized to store binary data in MIME attachments.\npackage oxm.support; // Provides generic support classes for using Spring's O/X Mapping integration within various scenario's.\npackage oxm.xstream; // Package providing integration of XStream with Spring's O/X Mapping support.\n\nClasses and Interfaces: \npublic interface GenericMarshaller extends Marshaller; // Subinterface of Marshaller that has support for generics.\npublic interface GenericUnmarshaller extends Unmarshaller; // Subinterface of Unmarshaller that has support for generics.\npublic interface Marshaller; // Defines the contract for Object XML Mapping Marshallers.\npublic abstract class MarshallingException extends XmlMappingException; // Base class for exception thrown when a marshalling or unmarshalling error occurs.\npublic class MarshallingFailureException extends MarshallingException; // Exception thrown on marshalling failure.\npublic class UncategorizedMappingException extends XmlMappingException; // Exception that indicates that the cause cannot be distinguished further.\npublic interface Unmarshaller; // Defines the contract for Object XML Mapping unmarshallers.\npublic class UnmarshallingFailureException extends MarshallingException; // Exception thrown on unmarshalling failure.\npublic class ValidationFailureException extends XmlMappingException; // Exception thrown on marshalling validation failure.\npublic abstract class XmlMappingException extends org.springframework.core.NestedRuntimeException; // Root of the hierarchy of Object XML Mapping exceptions.\n", "des": "Root package for Spring's O/X Mapping integration classes."}
{"index": 1754, "repo": "spring-data-mongodb-4.1.2", "code": "Package: geo\n\nClasses and Interfaces: \npublic interface GeoJson<T extends Iterable<?>>; // Interface definition for structures defined in GeoJSON format.\npublic class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>>; // Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects.\npublic class GeoJsonLineString extends GeoJsonMultiPoint; // GeoJsonLineString is defined as list of at least 2 Points.\npublic class GeoJsonModule extends com.fasterxml.jackson.databind.module.SimpleModule; // A Jackson Module to register custom JsonDeserializers for GeoJSON types.\npublic class GeoJsonMultiLineString extends Object implements GeoJson<Iterable<GeoJsonLineString>>; // GeoJsonMultiLineString is defined as list of GeoJsonLineStrings.\npublic class GeoJsonMultiPoint extends Object implements GeoJson<Iterable<Point>>; // GeoJsonMultiPoint is defined as list of Points.\npublic class GeoJsonMultiPolygon extends Object implements GeoJson<Iterable<GeoJsonPolygon>>; // GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons.\npublic class GeoJsonPoint extends Point implements GeoJson<List<Double>>; // GeoJson representation of Point.\npublic class GeoJsonPolygon extends Polygon implements GeoJson<List<GeoJsonLineString>>; // GeoJson representation of Polygon.\npublic class Sphere extends Object implements Shape; // Represents a geospatial sphere value.\n", "des": "Support for MongoDB geo-spatial queries."}
{"index": 1216, "repo": "commons-math3-3.6.1", "code": "Package: util\n\nClasses and Interfaces: \nInterface DoubleArray; // Provides a standard interface for double arrays.\nInterface Incrementor.MaxCountExceededCallback; // Defines a method to be called at counter exhaustion.\nInterface IntegerSequence.Incrementor.MaxCountExceededCallback; // Defines a method to be called at counter exhaustion.\nInterface IterationListener; // The listener interface for receiving events occurring in an iterative algorithm.\nInterface MathArrays.Function; // Real-valued function that operate on an array or a part of it.\nInterface NumberTransformer; // Subclasses implementing this interface can transform Objects to doubles.\nInterface PivotingStrategyInterface; // A strategy to pick a pivoting index of an array for doing partitioning.\nClass ArithmeticUtils; // Some useful, arithmetics related, additions to the built-in functions in Math.\nClass BigReal; // Arbitrary precision decimal number.\nClass BigRealField; // Representation of real numbers with arbitrary precision field.\nClass CentralPivotingStrategy; // A mid point strategy based on the average of begin and end indices.\nClass Combinations; // Utility to create combinations (n, k) of k elements in a set of n elements.\nClass CombinatoricsUtils; // Combinatorial utilities.\nClass CompositeFormat; // Base class for formatters of composite objects (complex numbers, vectors ...).\nClass ContinuedFraction; // Provides a generic means to evaluate continued fractions.\nClass Decimal64; // This class wraps a double value in an object.\nClass Decimal64Field; // The field of double precision floating-point numbers.\nClass DefaultTransformer; // A Default NumberTransformer for java.lang.Numbers and Numeric Strings.\nClass FastMath; // Faster, more accurate, portable alternative to Math and StrictMath for large scale computation.\nClass Incrementor; // Use IntegerSequence.Incrementor instead.\nClass IntegerSequence; // Provides a sequence of integers.\nClass IntegerSequence.Incrementor; // Utility that increments a counter until a maximum is reached, at which point, the instance will by default throw a MaxCountExceededException.\nClass IntegerSequence.Range; // Generates a sequence of integers.\nClass IterationEvent; // The root class from which all events occurring while running an IterationManager should be derived.\n", "des": "Convenience routines and common data structures used throughout the commons-math library."}
{"index": 1923, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: elasticsearch\n\nClasses and Interfaces: \n@AutoConfiguration(after={JacksonAutoConfiguration.class,JsonbAutoConfiguration.class,ElasticsearchRestClientAutoConfiguration.class}) @ConditionalOnClass(co.elastic.clients.elasticsearch.ElasticsearchClient.class) @Import({org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientConfigurations.ElasticsearchTransportConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientConfigurations.ElasticsearchClientConfiguration.class}) public class ElasticsearchClientAutoConfiguration extends Object; // Auto-configuration for Elasticsearch's Java client.\npublic interface ElasticsearchConnectionDetails extends ConnectionDetails; // Details required to establish a connection to an Elasticsearch service.\npublic static record ElasticsearchConnectionDetails.Node(String hostname, int port, ElasticsearchConnectionDetails.Node.Protocol protocol, String username, String password) extends Record; // An Elasticsearch node.\npublic static enum ElasticsearchConnectionDetails.Node.Protocol extends Enum<ElasticsearchConnectionDetails.Node.Protocol>; // Connection protocol.\n@ConfigurationProperties(\"spring.elasticsearch\") public class ElasticsearchProperties extends Object; // Configuration properties for Elasticsearch.\npublic static class ElasticsearchProperties.Restclient extends Object;\npublic static class ElasticsearchProperties.Restclient.Sniffer extends Object;\npublic static class ElasticsearchProperties.Restclient.Ssl extends Object;\n@AutoConfiguration(after=SslAutoConfiguration.class) @ConditionalOnClass(org.elasticsearch.client.RestClientBuilder.class) @EnableConfigurationProperties(ElasticsearchProperties.class) @Import({org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientBuilderConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientConfiguration.class,org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientConfigurations.RestClientSnifferConfiguration.class}) public class ElasticsearchRestClientAutoConfiguration extends Object; // Auto-configuration for Elasticsearch REST clients.\n", "des": "Auto-configuration for Elasticsearch client."}
{"index": 1606, "repo": "spring-websocket-6.0.11", "code": "Package: session\n\nClasses and Interfaces: \npublic abstract class AbstractHttpSockJsSession extends AbstractSockJsSession; // An abstract base class for use with HTTP transport SockJS sessions.\npublic abstract class AbstractSockJsSession extends Object implements SockJsSession; // An abstract base class for SockJS sessions implementing SockJsSession.\npublic class PollingSockJsSession extends AbstractHttpSockJsSession; // A SockJS session for use with polling HTTP transports.\npublic abstract class StreamingSockJsSession extends AbstractHttpSockJsSession; // A SockJS session for use with streaming HTTP transports.\npublic class WebSocketServerSockJsSession extends AbstractSockJsSession implements NativeWebSocketSession; // A SockJS session for use with the WebSocket transport.\n", "des": "SockJS specific implementations of WebSocketSession."}
{"index": 2499, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: system\n\nClasses and Interfaces: \n@AutoConfiguration(before=HealthContributorAutoConfiguration.class) @ConditionalOnEnabledHealthIndicator(\"diskspace\") @EnableConfigurationProperties(DiskSpaceHealthIndicatorProperties.class) public class DiskSpaceHealthContributorAutoConfiguration extends Object; // Auto-configuration for DiskSpaceHealthIndicator.\n@ConfigurationProperties(prefix=\"management.health.diskspace\") public class DiskSpaceHealthIndicatorProperties extends Object; // External configuration properties for DiskSpaceHealthIndicator.\n", "des": "Auto-configuration for actuator system concerns."}
{"index": 1280, "repo": "spring-core-6.0.11", "code": "Package: jfr\n\nClasses and Interfaces: \npublic class FlightRecorderApplicationStartup extends Object implements ApplicationStartup; // ApplicationStartup implementation for the Java Flight Recorder.\n", "des": "Support package for recording startup metrics using Java Flight Recorder."}
{"index": 3664, "repo": "solr-core-9.3.0", "code": "Package: csv\n\nClasses and Interfaces: \nClass CharBuffer; // A simple StringBuffer replacement that aims to reduce copying as much as possible.\nClass CSVParser; // Parses CSV files according to the specified configuration.\nClass CSVPrinter; // Print values as a comma separated list.\nClass CSVStrategy; // CSVStrategy\nClass CSVUtils; // Utility methods for dealing with CSV files\n", "des": "Internal classes used for reading/writing CSV"}
{"index": 2671, "repo": "spring-r2dbc-6.0.11", "code": "Package: r2dbc\n\nSub Packages: \npackage r2dbc.connection; // Provides a utility class for easy ConnectionFactory access, a ReactiveTransactionManager for a single ConnectionFactory, and various simple ConnectionFactory implementations.\npackage r2dbc.core; // Core domain types around DatabaseClient.\n\nClasses and Interfaces: \npublic class BadSqlGrammarException extends org.springframework.dao.InvalidDataAccessResourceUsageException; // Exception thrown when SQL specified is invalid.\npublic class UncategorizedR2dbcException extends org.springframework.dao.UncategorizedDataAccessException; // Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions.\n", "des": "The classes in this package make R2DBC easier to use and reduce the likelihood of common errors."}
{"index": 2992, "repo": "spring-ldap-core-3.1.0", "code": "Package: impl\n\nSub Packages: \npackage impl.converters; // Provides some basic implementations of the Converter interface.\n\nClasses and Interfaces: \npublic class ConversionServiceConverterManager extends Object implements ConverterManager;\npublic static final class ConversionServiceConverterManager.NameToStringConverter extends Object implements org.springframework.core.convert.converter.Converter<Name,String>;\npublic static final class ConversionServiceConverterManager.StringToNameConverter extends Object implements org.springframework.core.convert.converter.Converter<String,Name>;\npublic interface Converter; // Interface specifying the conversion between two classes\npublic final class ConverterManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean; // A utility class to allow ConverterManagerImpl instances to be easily configured via spring.xml.\npublic static final class ConverterManagerFactoryBean.ConverterConfig extends Object; // Configuration information for a single Converter instance.\npublic final class ConverterManagerImpl extends Object implements ConverterManager; // An implementation of ConverterManager.\npublic class StringConverter extends Object;\n", "des": "Provides an implementation of the ConverterManager interface."}
{"index": 2022, "repo": "spring-boot-devtools-3.1.1", "code": "Package: server\n\nClasses and Interfaces: \npublic class HttpTunnelServer extends Object; // A server that can be used to tunnel TCP traffic over HTTP.\nprotected static class HttpTunnelServer.HttpConnection extends Object; // Encapsulates an HTTP request/response pair.\npublic class HttpTunnelServerHandler extends Object implements Handler; // Adapts a HttpTunnelServer to a Handler.\n@FunctionalInterface public interface PortProvider; // Strategy interface to provide access to a port (which may change if an existing connection is closed).\npublic class SocketTargetServerConnection extends Object implements TargetServerConnection; // Socket based TargetServerConnection.\npublic class StaticPortProvider extends Object implements PortProvider; // PortProvider for a static port that won't change.\n@FunctionalInterface public interface TargetServerConnection; // Manages the connection to the ultimate tunnel target server.\n", "des": "Server side TCP tunnel support."}
{"index": 2093, "repo": "spring-webflux-6.0.11", "code": "Package: function\n\nSub Packages: \npackage function.client; // Provides a reactive WebClient that builds on top of the org.springframework.http.client.reactive reactive HTTP adapter layer.\npackage function.server; // Provides the types that make up Spring's functional web framework for Reactive environments.\n\nClasses and Interfaces: \n@FunctionalInterface public interface BodyExtractor<T,M extends org.springframework.http.ReactiveHttpInputMessage>; // A function that can extract data from a ReactiveHttpInputMessage body.\npublic static interface BodyExtractor.Context; // Defines the context used during the extraction.\npublic abstract class BodyExtractors extends Object; // Static factory methods for BodyExtractor implementations.\n@FunctionalInterface public interface BodyInserter<T,M extends org.springframework.http.ReactiveHttpOutputMessage>; // A combination of functions that can populate a ReactiveHttpOutputMessage body.\npublic static interface BodyInserter.Context; // Defines the context used during the insertion.\npublic abstract class BodyInserters extends Object; // Static factory methods for BodyInserter implementations.\npublic static interface BodyInserters.FormInserter<T> extends BodyInserter<org.springframework.util.MultiValueMap<String,T>,org.springframework.http.client.reactive.ClientHttpRequest>; // Extension of BodyInserter that allows for adding form data or multipart form data.\npublic static interface BodyInserters.MultipartInserter extends BodyInserters.FormInserter<Object>; // Extension of BodyInserters.FormInserter that allows for adding asynchronous parts.\npublic class UnsupportedMediaTypeException extends org.springframework.core.NestedRuntimeException; // Exception thrown to indicate that a Content-Type is not supported.\n", "des": "Provides a foundation for both the reactive client and server subpackages."}
{"index": 1858, "repo": "spring-test-6.0.11", "code": "Package: server\n\nClasses and Interfaces: \npublic class CookieAssertions extends Object; // Assertions on cookies of the response.\npublic class EntityExchangeResult<T> extends ExchangeResult; // ExchangeResult sub-class that exposes the response body fully extracted to a representation of type <T>.\npublic class ExchangeResult extends Object; // Container for request and response details for exchanges performed through WebTestClient.\npublic class FluxExchangeResult<T> extends ExchangeResult; // ExchangeResult variant with the response body decoded as Flux<T> but not yet consumed.\npublic class HeaderAssertions extends Object; // Assertions on headers of the response.\npublic class HttpHandlerConnector extends Object implements org.springframework.http.client.reactive.ClientHttpConnector; // Connector that handles requests by invoking an HttpHandler rather than making actual requests to a network socket.\npublic static final class HttpHandlerConnector.FailureAfterResponseCompletedException extends RuntimeException; // Indicates that an error occurred after the server response was completed, via ReactiveHttpOutputMessage.writeWith(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>) or ReactiveHttpOutputMessage.setComplete(), and can no longer be changed.\npublic class JsonPathAssertions extends Object; // JsonPath assertions.\npublic interface MockServerClientHttpResponse extends org.springframework.http.client.reactive.ClientHttpResponse; // Simple ClientHttpResponse extension that also exposes a result object from the underlying mock server exchange for further assertions on the state of the server response after the request is performed.\npublic interface MockServerConfigurer; // Contract that frameworks or applications can use to pre-package a set of customizations to a WebTestClient.MockServerSpec and expose that as a shortcut.\npublic class StatusAssertions extends Object; // Assertions on the response status.\npublic interface WebTestClient; // Client for testing web servers that uses WebClient internally to perform requests while also providing a fluent API to verify responses.\npublic static interface WebTestClient.BodyContentSpec; // Spec for expectations on the response body content.\npublic static interface WebTestClient.BodySpec<B,S extends WebTestClient.BodySpec<B,S>>; // Spec for expectations on the response body decoded to a single Object.\n", "des": "Support for testing Spring WebFlux server endpoints via WebTestClient."}
{"index": 3860, "repo": "lucene-core-9.7.0", "code": "Package: mutable\n\nClasses and Interfaces: \nClass MutableValue; // Base class for all mutable values.\nClass MutableValueBool; // MutableValue implementation of type boolean.\nClass MutableValueDate; // MutableValue implementation of type Date.\nClass MutableValueDouble; // MutableValue implementation of type double.\nClass MutableValueFloat; // MutableValue implementation of type float.\nClass MutableValueInt; // MutableValue implementation of type int.\nClass MutableValueLong; // MutableValue implementation of type long.\nClass MutableValueStr; // MutableValue implementation of type String.\n", "des": "Comparable object wrappers"}
{"index": 1045, "repo": "commons-io-2.13.0", "code": "Package: file\n\nSub Packages: \npackage file.attribute; // Provides help using java.nio.file.attribute types.\npackage file.spi; // Provides extensions in the realm of java.nio.file.spi.\n\nClasses and Interfaces: \nInterface Counters.Counter; // Counts using a number.\nInterface Counters.PathCounters; // Counts files, directories, and sizes, as a visit proceeds.\nInterface DeleteOption; // An object that configures how to delete a file.\nInterface PathFilter; // A filter for Paths.\nInterface PathVisitor; // A FileVisitor typed to a Path.\nClass AccumulatorPathVisitor; // Accumulates normalized paths during visitation.\nClass CleaningPathVisitor; // Deletes files but not directories as a visit proceeds.\nClass CopyDirectoryVisitor; // Copies a source directory to a target directory.\nClass Counters; // Provides counters for files, directories, and sizes, as a visit proceeds.\nClass CountingPathVisitor; // Counts files, directories, and sizes, as a visit proceeds.\nClass DeletingPathVisitor; // Deletes files and directories as a visit proceeds.\nClass DirectoryStreamFilter; // A DirectoryStream.Filter that delegates to a PathFilter.\nClass FilesUncheck; // Delegates to Files to uncheck calls by throwing UncheckedIOException instead of IOException.\nClass NoopPathVisitor; // A noop path visitor.\nClass PathUtils; // NIO Path utilities.\nClass SimplePathVisitor; // A SimpleFileVisitor typed to a Path.\nEnum StandardDeleteOption; // Defines the standard delete options.\n", "des": "Provides extensions in the realm of java.nio.file."}
{"index": 1646, "repo": "jena-core-4.9.0", "code": "Package: impl\n\nClasses and Interfaces: \npublic class AdhocDatatype extends BaseDatatype;\npublic class AllCapabilities extends Object implements Capabilities; // A default implementation of capabilities, in which everything is allowed, size is accurate, and graphs may be completely empty.\npublic abstract class BaseGraphMaker extends Object implements GraphMaker; // This base class provides convenience functions for the three \"usual\" graph makers and a place to hold the reification style for the graphs it constructs.\npublic class CollectionGraph extends GraphBase; // A simple graph implementation that wraps a collection of triples.\npublic abstract class GraphBase extends Object implements GraphWithPerform; // GraphBase is an implementation of Graph that provides some convenient base functionality for Graph implementations.\npublic class GraphMatcher extends Object; // An implementation of graph isomorphism for Graph equality.\npublic class GraphPlain extends WrappedGraph; // A version of Graph that enforces term equality even if the base graph uses value-indexing.\npublic interface GraphWithPerform extends Graph; // GraphWithPerform is an implementation interface that extends Graph with the performAdd and performDelete methods used by GraphBase to invoke non-notifying versions of add and delete.\npublic interface LiteralLabel;\npublic class LiteralLabelFactory extends Object;\npublic class SimpleEventManager extends Object implements GraphEventManager; // Simple implementation of GraphEventManager for GraphBase to use.\npublic class SimpleGraphMaker extends BaseGraphMaker; // A SimpleGraphFactory produces memory-based graphs and records them in a local map.\npublic class SimpleTransactionHandler extends TransactionHandlerBase;\npublic abstract class TransactionHandlerBase extends Object implements TransactionHandler; // A base for transaction handlers; provide implementations of execute* operations using the fundamental begin-commit-abort.\npublic interface TripleStore; // TripleStore - interface for bulk storage of triples used in composed graphs.\npublic class WrappedCapabilities extends Object implements Capabilities;\npublic class WrappedGraph extends Object implements GraphWithPerform; // A wrapper class which simply defers all operations to its base.\n", "des": "This package provides basic implementations of Graph interfaces such as EventManager and Capabilities."}
{"index": 3413, "repo": "commons-imaging-1.0-alpha3", "code": "Package: wbmp\n\nClasses and Interfaces: \nClass WbmpImageParser;\nClass WbmpImagingParameters; // Wbmp format parameters.\n", "des": "The Wireless Application Protocol Bitmap Format image format."}
{"index": 299, "repo": "pdfbox-3.0.0-beta1", "code": "Package: shading\n\nClasses and Interfaces: \nClass AxialShadingContext; // AWT PaintContext for axial shading.\nClass AxialShadingPaint; // AWT Paint for axial shading.\nClass PDShading; // A Shading Resource.\nClass PDShadingType1; // Resources for a function based shading.\nClass PDShadingType2; // Resources for an axial shading.\nClass PDShadingType3; // Resources for a radial shading.\nClass PDShadingType4; // Resources for a shading type 4 (Free-Form Gouraud-Shaded Triangle Mesh).\nClass PDShadingType5; // Resources for a shading type 5 (Lattice-Form Gouraud-Shade Triangle Mesh).\nClass PDShadingType6; // Resources for a shading type 6 (Coons Patch Mesh).\nClass PDShadingType7; // Resources for a shading type 7 (Tensor-Product Patch Mesh).\nClass RadialShadingContext; // AWT PaintContext for radial shading.\nClass RadialShadingPaint; // AWT Paint for radial shading.\nClass ShadingContext; // A base class to handle what is common to all shading types.\nClass ShadingPaint<T extends PDShading>; // This is base class for all PDShading-Paints to allow other low level libraries access to the shading source data.\n", "des": "This package deals with shadings which are used for filling instead of a color."}
{"index": 724, "repo": "commons-codec-1.16.0", "code": "Package: net\n\nClasses and Interfaces: \nClass BCodec; // Identical to the Base64 encoding defined by RFC 1521 and allows a character set to be specified.\nClass PercentCodec; // Implements the Percent-Encoding scheme, as described in HTTP 1.1 specification.\nClass QCodec; // Similar to the Quoted-Printable content-transfer-encoding defined in RFC 1521 and designed to allow text containing mostly ASCII characters to be decipherable on an ASCII terminal without decoding.\nClass QuotedPrintableCodec; // Codec for the Quoted-Printable section of RFC 1521.\nClass URLCodec; // Implements the 'www-form-urlencoded' encoding scheme, also misleadingly known as URL encoding.\n", "des": "Network related encoding and decoding."}
{"index": 1005, "repo": "spring-ws-3.0.10.RELEASE", "code": "Package: xmpp\n\nClasses and Interfaces: \nInterface XmppTransportConstants; // Declares XMPP-specific transport constants.\nClass XmppMessageReceiver; // Server-side component for receiving XMPP (Jabber) messages.\nClass XmppMessageSender; // WebServiceMessageSender implementation that uses XMPP Messages.\nClass XmppReceiverConnection; // Implementation of WebServiceConnection that is used for server-side XMPP access.\nClass XmppSenderConnection; // Implementation of WebServiceConnection that is used for client-side XMPP access.\n", "des": "Package providing support for handling messages via xmpp."}
{"index": 2059, "repo": "slf4j-ext-2.0.7", "code": "Package: cal10n\n\nClasses and Interfaces: \npublic class LocLogger extends LoggerWrapper implements Logger; // A logger specialized in localized logging.\npublic class LocLoggerFactory extends Object; // This class is essentially a wrapper around an LoggerFactory producing LocLogger instances.\n", "des": "SLF4J API extensions"}
{"index": 1998, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: error\n\nClasses and Interfaces: \npublic abstract class AbstractErrorController extends Object implements org.springframework.boot.web.servlet.error.ErrorController; // Abstract base class for error @Controller implementations.\n@Controller @RequestMapping(\"${server.error.path:${error.path:/error}}\") public class BasicErrorController extends AbstractErrorController; // Basic global error @Controller, rendering ErrorAttributes.\npublic class DefaultErrorViewResolver extends Object implements ErrorViewResolver, org.springframework.core.Ordered; // Default ErrorViewResolver implementation that attempts to resolve error views using well known conventions.\n@AutoConfiguration(before=WebMvcAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass({jakarta.servlet.Servlet.class,org.springframework.web.servlet.DispatcherServlet.class}) @EnableConfigurationProperties({ServerProperties.class,WebMvcProperties.class}) public class ErrorMvcAutoConfiguration extends Object; // Auto-configuration to render errors through an MVC error controller.\n@Configuration(proxyBeanMethods=false) @ConditionalOnProperty(prefix=\"server.error.whitelabel\", name=\"enabled\", matchIfMissing=true) @Conditional(org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition.class) protected static class ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration extends Object;\n@FunctionalInterface public interface ErrorViewResolver; // Interface that can be implemented by beans that resolve error views.\n", "des": "Auto-configuration for Spring MVC error handling."}
{"index": 2438, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: hazelcast\n\nClasses and Interfaces: \n@AutoConfiguration(after=org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration.class) @ConditionalOnClass(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnBean(com.hazelcast.core.HazelcastInstance.class) @ConditionalOnEnabledHealthIndicator(\"hazelcast\") public class HazelcastHealthContributorAutoConfiguration extends CompositeHealthContributorConfiguration<org.springframework.boot.actuate.hazelcast.HazelcastHealthIndicator,com.hazelcast.core.HazelcastInstance>; // Auto-configuration for HazelcastHealthIndicator.\n", "des": "Auto-configuration for actuator Hazelcast concerns."}
{"index": 1997, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: servlet\n\nSub Packages: \npackage servlet.error; // Auto-configuration for Spring MVC error handling.\n\nClasses and Interfaces: \n@Target({TYPE,METHOD}) @Retention(RUNTIME) @Documented @ConditionalOnMissingBean(parameterizedContainer=org.springframework.boot.web.servlet.FilterRegistrationBean.class) public @interface ConditionalOnMissingFilterBean; // @Conditional that only matches when no Filter beans of the specified type are contained in the BeanFactory.\npublic class DefaultJerseyApplicationPath extends Object implements JerseyApplicationPath; // Default implementation of JerseyApplicationPath that derives the path from JerseyProperties or the @ApplicationPath annotation.\n@AutoConfigureOrder(-2147483648) @AutoConfiguration(after=ServletWebServerFactoryAutoConfiguration.class) @ConditionalOnWebApplication(type=SERVLET) @ConditionalOnClass(org.springframework.web.servlet.DispatcherServlet.class) public class DispatcherServletAutoConfiguration extends Object; // Auto-configuration for the Spring DispatcherServlet.\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition.class) @ConditionalOnClass(jakarta.servlet.ServletRegistration.class) @EnableConfigurationProperties(WebMvcProperties.class) protected static class DispatcherServletAutoConfiguration.DispatcherServletConfiguration extends Object;\n@Configuration(proxyBeanMethods=false) @Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition.class) @ConditionalOnClass(jakarta.servlet.ServletRegistration.class) @EnableConfigurationProperties(WebMvcProperties.class) @Import(DispatcherServletConfiguration.class) protected static class DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration extends Object;\n@FunctionalInterface public interface DispatcherServletPath; // Interface that can be used by auto-configurations that need path details for the default DispatcherServlet.\npublic class DispatcherServletRegistrationBean extends org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.web.servlet.DispatcherServlet> implements DispatcherServletPath; // ServletRegistrationBean for the auto-configured DispatcherServlet.\n", "des": "Auto-configuration for servlet web servers and Spring MVC."}
{"index": 318, "repo": "kafka-clients-3.5.0", "code": "Package: common\n\nSub Packages: \npackage common.acl; // Provides classes representing Access Control Lists for authorization of clients\npackage common.annotation; // Provides annotations used on Kafka APIs.\npackage common.config; // Provides common mechanisms for defining, parsing, validating, and documenting user-configurable parameters.\npackage common.errors; // Provides common exception classes.\npackage common.header; // Provides API for application-defined metadata attached to Kafka records.\npackage common.metrics; // Provides the API used by Kafka clients to emit metrics which are then exposed using the * MetricsReporter interface.\npackage common.quota; // Provides mechanisms for enforcing resource quotas.\npackage common.resource; // Provides client handles representing logical resources in a Kafka cluster.\npackage common.serialization; // Provides interface and some implementations of serialization/deserialization routines for various objects.\n\nClasses and Interfaces: \nInterface ClusterResourceListener; // A callback interface that users can implement when they wish to get notified about changes in the Cluster metadata.\nInterface Configurable; // A Mix-in style interface for classes that are instantiated by reflection and need to take configuration parameters\nInterface KafkaFuture.BaseFunction<A,B>; // A function which takes objects of type A and returns objects of type B.\nInterface KafkaFuture.BiConsumer<A,B>; // A consumer of two different types of object.\nInterface MessageFormatter; // This interface allows to define Formatters that can be used to parse and format records read by a Consumer instance for display.\nInterface Metric; // A metric tracked for monitoring purposes.\nInterface Reconfigurable; // Interface for reconfigurable classes that support dynamic configuration.\nClass Cluster; // An immutable representation of a subset of the nodes, topics, and partitions in the Kafka cluster.\nClass ClusterResource; // The ClusterResource class encapsulates metadata for a Kafka cluster.\nClass Endpoint; // Represents a broker endpoint.\nClass KafkaFuture<T>; // A flexible future which supports call chaining and other asynchronous programming patterns.\nClass KafkaFuture.Function<A,B>; // Since Kafka 3.0.\nClass MetricName; // The MetricName class encapsulates a metric's name, logical group and its related attributes.\nClass MetricNameTemplate; // A template for a MetricName.\nClass Node; // Information about a Kafka node\n", "des": "Provides shared functionality for Kafka clients and servers."}
{"index": 2962, "repo": "spring-integration-redis-6.1.2", "code": "Package: outbound\n\nClasses and Interfaces: \n@FunctionalInterface public interface ArgumentsStrategy;\npublic class ExpressionArgumentsStrategy extends Object implements ArgumentsStrategy, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean;\npublic class ReactiveRedisStreamMessageHandler extends org.springframework.integration.handler.AbstractReactiveMessageHandler; // Implementation of ReactiveMessageHandler which writes Message payload or Message itself (see ReactiveRedisStreamMessageHandler.extractPayload) into a Redis stream using Reactive Stream operations.\npublic class RedisOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler; // The Gateway component implementation to perform Redis commands with provided arguments and to return command result.\npublic class RedisPublishingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler;\npublic class RedisQueueOutboundChannelAdapter extends org.springframework.integration.handler.AbstractMessageHandler;\npublic class RedisQueueOutboundGateway extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler;\npublic class RedisStoreWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler; // Implementation of MessageHandler which writes Message data into a Redis store identified by a key String.\n", "des": "Provides classes supporting outbound endpoints."}
{"index": 2030, "repo": "spring-messaging-6.0.11", "code": "Package: invocation\n\nSub Packages: \npackage invocation.reactive; // Common infrastructure for invoking message handler methods with non-blocking, and reactive contracts.\n\nClasses and Interfaces: \npublic abstract class AbstractAsyncReturnValueHandler extends Object implements AsyncHandlerMethodReturnValueHandler; // Convenient base class for AsyncHandlerMethodReturnValueHandler implementations that support only asynchronous (Future-like) return values and merely serve as adapters of such types to Spring's ListenableFuture.\npublic abstract class AbstractExceptionHandlerMethodResolver extends Object; // Cache exception handling method mappings and provide options to look up a method that should handle an exception.\npublic abstract class AbstractMethodMessageHandler<T> extends Object implements MessageHandler, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean; // Abstract base class for HandlerMethod-based message handling.\npublic interface AsyncHandlerMethodReturnValueHandler extends HandlerMethodReturnValueHandler; // An extension of HandlerMethodReturnValueHandler for handling async, Future-like return value types that support success and error callbacks.\npublic class CompletableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler; // Support for CompletableFuture (and as of 4.3.7 also CompletionStage) as a return value type.\npublic interface HandlerMethodArgumentResolver; // Strategy interface for resolving method parameters into argument values in the context of a given Message.\npublic class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver; // Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.\npublic interface HandlerMethodReturnValueHandler; // Strategy interface to handle the value returned from the invocation of a method handling a Message.\npublic class HandlerMethodReturnValueHandlerComposite extends Object implements AsyncHandlerMethodReturnValueHandler; // A HandlerMethodReturnValueHandler that wraps and delegates to others.\npublic class InvocableHandlerMethod extends HandlerMethod; // Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.\n@Deprecated(since=\"6.0\") public class ListenableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler;\npublic class MethodArgumentResolutionException extends MessagingException; // Common exception resulting from the invocation of HandlerMethodArgumentResolver.\npublic class ReactiveReturnValueHandler extends AbstractAsyncReturnValueHandler; // Support for single-value reactive types (like Mono or Single) as a return value type.\n", "des": "Common infrastructure for invoking message handler methods."}
{"index": 48, "repo": "ignite-core-2.15.0", "code": "Package: rendezvous\n\nClasses and Interfaces: \nClass ClusterNodeAttributeAffinityBackupFilter; // Attribute-based affinity backup filter that forces each partition's primary and backup nodes to different hardware which is not expected to fail simultaneously, e.g., in AWS, to different \"availability zones\".\nClass ClusterNodeAttributeColocatedBackupFilter; // This class can be used as a RendezvousAffinityFunction.affinityBackupFilter to create cache templates in Spring that force each partition's primary and backup to be co-located on nodes with the same attribute value.\nClass RendezvousAffinityFunction; // Affinity function for partitioned cache based on Highest Random Weight algorithm.\n", "des": "Contains HRW-based cache affinity for partitioned cache."}
{"index": 1208, "repo": "commons-math3-3.6.1", "code": "Package: moment\n\nClasses and Interfaces: \nClass GeometricMean; // Returns the geometric mean of the available values.\nClass Kurtosis; // Computes the Kurtosis of the available values.\nClass Mean; // Computes the arithmetic mean of a set of values.\nClass SecondMoment; // Computes a statistic related to the Second Central Moment.\nClass SemiVariance; // Computes the semivariance of a set of values with respect to a given cutoff value.\nClass Skewness; // Computes the skewness of the available values.\nClass StandardDeviation; // Computes the sample standard deviation.\nClass Variance; // Computes the variance of the available values.\nClass VectorialCovariance; // Returns the covariance matrix of the available vectors.\nClass VectorialMean; // Returns the arithmetic mean of the available vectors.\nEnum SemiVariance.Direction; // The direction of the semivariance - either upside or downside.\n", "des": "Summary statistics based on moments."}
{"index": 448, "repo": "zookeeper-3.8.2", "code": "Package: server\n\nClasses and Interfaces: \nInterface ConnectionMXBean; // This MBean represents a client connection.\nInterface DataTreeMXBean; // Zookeeper data tree MBean.\nInterface NodeHashMap; // The interface defined to manage the hash based on the entries in the nodes map.\nInterface RequestProcessor; // RequestProcessors are chained together to process transactions.\nInterface ServerStats.Provider;\nInterface SessionTracker; // This is the basic interface that ZooKeeperServer uses to track sessions.\nInterface SessionTracker.Session;\nInterface SessionTracker.SessionExpirer;\nInterface ZooKeeperServerListener; // Listener for the critical resource events.\nInterface ZooKeeperServerMXBean; // ZooKeeper server MBean.\nClass AuthenticationHelper; // Contains helper methods to enforce authentication\nClass BlueThrottle; // Implements a token-bucket based rate limiting mechanism with optional probabilistic dropping inspired by the BLUE queue management algorithm [1].\nClass ByteBufferInputStream;\nClass ByteBufferOutputStream;\nClass ConnectionBean; // Implementation of connection MBean interface.\nClass ContainerManager; // Manages cleanup of container ZNodes.\nClass DatadirCleanupManager; // This class manages the cleanup of snapshots and corresponding transaction logs by scheduling the auto purge task with the specified 'autopurge.purgeInterval'.\nClass DataNode; // This class contains the data for a node in the data tree.\nClass DataTree; // This class maintains the tree data structure.\nClass DataTree.ProcessTxnResult;\nClass DataTreeBean; // This class implements the data tree MBean.\nClass DigestCalculator; // Defines how to calculate the digest for a given node.\nClass DumbWatcher; // A empty watcher implementation used in bench and unit test.\nClass ExpiryQueue<E>; // ExpiryQueue tracks elements in time sorted fixed duration buckets.\nClass FinalRequestProcessor; // This Request processor actually applies any transaction associated with a request and services any queries.\nClass NettyServerCnxn;\nClass NettyServerCnxnFactory;\nClass NIOServerCnxn; // This class handles communication with clients using NIO.\nClass NIOServerCnxnFactory; // NIOServerCnxnFactory implements a multi-threaded ServerCnxnFactory using NIO non-blocking socket calls.\nClass NodeHashMapImpl; // a simple wrapper to ConcurrentHashMap that recalculates a digest after each mutation.\n", "des": "ZooKeeper server theory of operation"}
{"index": 3092, "repo": "spring-ws-core-4.0.5", "code": "Package: transport\n\nSub Packages: \npackage transport.context; // Abstraction for determining the current TransportInputStream and TransportOutputStream.\npackage transport.http; // Package providing support for handling messages via HTTP.\npackage transport.support; // Classes supporting the org.springframework.ws.transport package.\n\nClasses and Interfaces: \npublic abstract class AbstractReceiverConnection extends AbstractWebServiceConnection implements HeadersAwareReceiverWebServiceConnection; // Abstract base class for WebServiceConnection implementations used for receiving requests.\npublic abstract class AbstractSenderConnection extends AbstractWebServiceConnection implements HeadersAwareSenderWebServiceConnection; // Abstract base class for WebServiceConnection implementations used for sending requests.\npublic abstract class AbstractWebServiceConnection extends Object implements WebServiceConnection; // Abstract base class for WebServiceConnection implementations.\npublic interface EndpointAwareWebServiceConnection extends WebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any server-side situations where an endpoint is not found.\npublic interface FaultAwareWebServiceConnection extends WebServiceConnection; // Sub-interface of WebServiceConnection that is aware of any Fault messages received.\npublic interface HeadersAwareReceiverWebServiceConnection; // Interface to define access to header information for certain WebServiceConnection implementations.\npublic interface HeadersAwareSenderWebServiceConnection;\npublic interface TransportConstants; // Declares useful transport constants.\npublic abstract class TransportException extends IOException; // Abstract base class for exceptions related to the transport layer.\npublic abstract class TransportInputStream extends InputStream; // A TransportInputStream is an input stream with MIME input headers.\npublic abstract class TransportOutputStream extends OutputStream; // A TransportOutputStream is an output stream with MIME input headers.\npublic interface WebServiceConnection extends AutoCloseable; // Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.\npublic interface WebServiceMessageReceiver; // Defines the methods for classes capable of receiving WebServiceMessage instances coming in on a transport.\npublic interface WebServiceMessageSender; // Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.\n", "des": "Contains the TransportRequest and TransportResponse interfaces."}
{"index": 3316, "repo": "opencms-core-15.0", "code": "Package: site\n\nSub Packages: \npackage site.xmlsitemap; // Contains classes related to XML sitemap generation.\n\nClasses and Interfaces: \nClass CmsAlternativeSiteRootMapping; // Describes a mapping rule that selects a different site root based on whether the requested path matches a set of prefixes or not.\nClass CmsSite; // Describes a configured site in OpenCms.\nClass CmsSiteManagerImpl; // Manages all configured sites in OpenCms.\nClass CmsSiteMatcher; // A matcher object to compare request data against the configured sites.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsSite.LocalizationMode; // The site localization modes.\nEnum CmsSiteMatcher.RedirectMode; // Represents the different redirect modes for a site alias.\nEnum CmsSSLMode; // Enumeration for different SSL Modes of sites.\n", "des": "Provides access to the multi-site configuration of OpenCms."}
{"index": 257, "repo": "nutch-2.4", "code": "Package: link\n\nClasses and Interfaces: \nClass LinkAnalysisScoringFilter;\n", "des": "Scoring filter"}
{"index": 1975, "repo": "spring-boot-autoconfigure-3.1.1", "code": "Package: reactive\n\nClasses and Interfaces: \npublic final class PathRequest extends Object; // Factory that can be used to create a ServerWebExchangeMatcher for commonly used paths.\n@AutoConfiguration @EnableConfigurationProperties(SecurityProperties.class) @ConditionalOnClass({reactor.core.publisher.Flux.class,org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity.class,org.springframework.security.web.server.WebFilterChainProxy.class,org.springframework.web.reactive.config.WebFluxConfigurer.class}) public class ReactiveSecurityAutoConfiguration extends Object; // Auto-configuration for Spring Security in a reactive application.\n@AutoConfiguration(after=RSocketMessagingAutoConfiguration.class) @ConditionalOnClass(org.springframework.security.authentication.ReactiveAuthenticationManager.class) @ConditionalOnMissingBean(value={org.springframework.security.authentication.ReactiveAuthenticationManager.class,org.springframework.security.core.userdetails.ReactiveUserDetailsService.class,org.springframework.security.authentication.ReactiveAuthenticationManagerResolver.class}, type={\"org.springframework.security.oauth2.jwt.ReactiveJwtDecoder\",\"org.springframework.security.oauth2.server.resource.introspection.ReactiveOpaqueTokenIntrospector\"}) @Conditional(org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration.ReactiveUserDetailsServiceCondition.class) @EnableConfigurationProperties(SecurityProperties.class) public class ReactiveUserDetailsServiceAutoConfiguration extends Object; // Default user @Configuration for a reactive web application.\npublic final class StaticResourceRequest extends Object; // Used to create a ServerWebExchangeMatcher for static resources in commonly used locations.\npublic static final class StaticResourceRequest.StaticResourceServerWebExchange extends Object implements org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher; // The server web exchange matcher used to match against resource locations.\n", "des": "Auto-configuration for reactive Spring Security."}
{"index": 2467, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "code": "Package: otlp\n\nClasses and Interfaces: \n@AutoConfiguration(before={CompositeMeterRegistryAutoConfiguration.class,SimpleMetricsExportAutoConfiguration.class}, after=MetricsAutoConfiguration.class) @ConditionalOnBean(io.micrometer.core.instrument.Clock.class) @ConditionalOnClass(io.micrometer.registry.otlp.OtlpMeterRegistry.class) @ConditionalOnEnabledMetricsExport(\"otlp\") @EnableConfigurationProperties(OtlpProperties.class) public class OtlpMetricsExportAutoConfiguration extends Object; // Auto-configuration for exporting metrics to OTLP.\n@ConfigurationProperties(prefix=\"management.otlp.metrics.export\") public class OtlpProperties extends StepRegistryProperties; // @ConfigurationProperties for configuring OTLP metrics export.\n", "des": "Support for exporting actuator metrics to OTLP."}
{"index": 1472, "repo": "spring-boot-configuration-processor-3.1.1", "code": "Package: javac\n\nClasses and Interfaces: \npublic class JavaCompilerFieldValuesParser extends Object implements FieldValuesParser; // FieldValuesParser implementation for the standard Java compiler.\n", "des": "Field value parsing for the standard Java compiler."}
{"index": 2200, "repo": "spring-data-commons-3.1.2", "code": "Package: convert\n\nClasses and Interfaces: \npublic class ConfigurableTypeInformationMapper extends Object implements TypeInformationMapper; // TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.\npublic interface ConverterBuilder; // API to easily set up GenericConverter instances using Java 8 lambdas, mostly in bidirectional fashion for easy registration as custom type converters of the Spring Data mapping subsystem.\npublic static interface ConverterBuilder.ConverterAware extends ConverterBuilder, ConverterBuilder.ReadingConverterAware, ConverterBuilder.WritingConverterAware; // A ConverterBuilder aware of both a reading and writing converter.\npublic static interface ConverterBuilder.ReadingConverterAware; // Exposes a reading converter.\npublic static interface ConverterBuilder.ReadingConverterBuilder<T,S> extends ConverterBuilder, ConverterBuilder.ReadingConverterAware; // Interface to represent an intermediate setup step of ConverterBuilder.ConverterAware defining a reading converter first.\npublic static interface ConverterBuilder.WritingConverterAware; // Exposes a writing converter.\npublic static interface ConverterBuilder.WritingConverterBuilder<S,T> extends ConverterBuilder, ConverterBuilder.WritingConverterAware; // Interface to represent an intermediate setup step of ConverterBuilder.ConverterAware defining a writing converter first.\npublic class CustomConversions extends Object; // Value object to capture custom conversion.\nprotected static class CustomConversions.ConverterConfiguration extends Object; // Value object holding the actual CustomConversions.StoreConversions and custom converters configured for registration.\nprotected static class CustomConversions.ConverterRegistrationIntent extends Object; // Value class tying together a CustomConversions.ConverterRegistration and its origin to allow fine grained registration based on store supported types.\nprotected static enum CustomConversions.ConverterRegistrationIntent.ConverterOrigin extends Enum<CustomConversions.ConverterRegistrationIntent.ConverterOrigin>;\npublic static class CustomConversions.StoreConversions extends Object; // Value type to capture store-specific extensions to the CustomConversions.\npublic class DefaultTypeMapper<S> extends Object implements TypeMapper<S>, BeanClassLoaderAware; // Default implementation of TypeMapper.\npublic class DtoInstantiatingConverter extends Object implements Converter<Object,Object>; // Spring Converter to create instances of the given DTO type from the source value handed into the conversion.\n", "des": "General purpose conversion framework to read objects from a data store abstraction and write it back."}
{"index": 3155, "repo": "tika-core-2.8.0", "code": "Package: extractor\n\nClasses and Interfaces: \nInterface ContainerExtractor; // Tika container extractor interface.\nInterface DocumentSelector; // Interface for different document selection strategies for purposes like embedded document extraction by a ContainerExtractor instance.\nInterface EmbeddedDocumentExtractor;\nInterface EmbeddedDocumentExtractorFactory;\nInterface EmbeddedResourceHandler; // Tika container extractor callback interface.\nInterface EmbeddedStreamTranslator; // Interface for different filtering of embedded streams.\nClass DefaultEmbeddedStreamTranslator; // Loads EmbeddedStreamTranslators via service loading.\nClass EmbeddedDocumentUtil; // Utility class to handle common issues with embedded documents.\nClass ParserContainerExtractor; // An implementation of ContainerExtractor powered by the regular Parser API.\nClass ParsingEmbeddedDocumentExtractor; // Helper class for parsers of package archives or other compound document formats that support embedded or attached component documents.\nClass ParsingEmbeddedDocumentExtractorFactory;\n", "des": "Extraction of component documents."}
{"index": 632, "repo": "freemarker-2.3.32", "code": "Package: template\n\nSub Packages: \npackage template.utility; // Various classes used by core FreeMarker code but might be useful outside of it too.\n\nClasses and Interfaces: \nInterface AdapterTemplateModel; // A TemplateModel that can be unwrapped and then it considers a provided desired (hint) class.\nInterface AttemptExceptionReporter; // Used for the attempt_exception_reported configuration setting.\nInterface ObjectWrapper; // Maps Java objects to the type-system of FreeMarker Template Language (see the TemplateModel interfaces).\nInterface ObjectWrapperAndUnwrapper; // Experimental - subject to change: Adds functionality to ObjectWrapper that creates a plain Java object from a TemplateModel.\nInterface TemplateBooleanModel; // \"boolean\" template language data type; same as in Java; either true or false.\nInterface TemplateCollectionModel; // \"collection\" template language data type: a collection of values that can be enumerated, but can't be or not meant to be accessed by index or key, nor the number of elements in it is known.\nInterface TemplateCollectionModelEx; // \"collection\" template language data type: Adds size/emptiness querybility to TemplateCollectionModel.\nInterface TemplateDateModel; // \"date\", \"time\" and \"date-time\" template language data types: corresponds to Date.\nInterface TemplateDirectiveBody; // Represents the nested content of a directive (TemplateDirectiveModel) invocation.\nInterface TemplateDirectiveModel; // \"directive\" template language data type: used as user-defined directives (much like macros) in templates.\nInterface TemplateExceptionHandler; // Used for the template_exception_handler configuration setting.\nInterface TemplateHashModel; // \"hash\" template language data type: an object that contains other objects accessible through string keys (sub-variable names).\nInterface TemplateHashModelEx; // \"extended hash\" template language data type; extends TemplateHashModel by allowing iterating through its keys and values.\nInterface TemplateHashModelEx2; // Adds key-value pair listing capability to TemplateHashModelEx.\nInterface TemplateHashModelEx2.KeyValuePair; // A key-value pair in a hash; used for TemplateHashModelEx2.KeyValuePairIterator.\nInterface TemplateHashModelEx2.KeyValuePairIterator; // Iterates over the key-value pairs in a hash.\nInterface TemplateMethodModel; // Use TemplateMethodModelEx instead.\n", "des": "The fundamental, most commonly used API-s of FreeMarker; start with Configuration (see also the Getting Started in the Manual.)"}
{"index": 916, "repo": "commons-compress-1.23.0", "code": "Package: brotli\n\nClasses and Interfaces: \nClass BrotliCompressorInputStream; // CompressorInputStream implementation to decode Brotli encoded stream.\nClass BrotliUtils; // Utility code for the Brotli compression format.\n", "des": "Provides stream class for decompressing streams using the Brotli algorithm based on Google's Brotli decoder."}
{"index": 3475, "repo": "hilt-android-2.47", "code": "Package: flags\n\nClasses and Interfaces: \nInterface FragmentGetContextFix.FragmentGetContextFixEntryPoint; // Entry point for getting the flag.\nClass FragmentGetContextFix; // Runtime flag for the Fragment.getContext() fix.\nAnnotation Type FragmentGetContextFix.DisableFragmentGetContextFix; // Qualifier annotation to bind disable the Fragment.getContext() fix at runtime.\n", "des": "Runtime flags to control Hilt behavior for rollout of changes."}
{"index": 635, "repo": "hadoop-yarn-server-common-3.3.6", "code": "Package: records\n\nClasses and Interfaces: \nInterface MasterKey;\nClass AppCollectorData;\nClass ContainerQueuingLimit; // Used to hold max wait time / queue length information to be passed back to the NodeManager.\nClass NodeHealthStatus; // NodeHealthStatus is a summary of the health status of the node.\nClass NodeStatus; // NodeStatus is a summary of the status of the node.\nClass OpportunisticContainersStatus; // OpportunisticContainersStatus captures information pertaining to the state of execution of the opportunistic containers within a node.\nEnum NodeAction; // The NodeManager is instructed to perform the given action.\n", "des": "Server records."}
{"index": 3171, "repo": "tomcat-api-10.1", "code": "Package: authenticator\n\nClasses and Interfaces: \nClass AuthenticatorBase; // Basic implementation of the Valve interface that enforces the <security-constraint> elements in the web application deployment descriptor.\nClass BasicAuthenticator; // An Authenticator and Valve implementation of HTTP BASIC Authentication, as outlined in RFC 7617: \"The 'Basic' HTTP Authentication Scheme\"\nClass BasicAuthenticator.BasicCredentials; // Parser for an HTTP Authorization header for BASIC authentication as per RFC 2617 section 2, and the Base64 encoded credentials as per RFC 2045 section 6.8.\nClass Constants;\nClass DigestAuthenticator; // An Authenticator and Valve implementation of HTTP DIGEST Authentication, as outlined in RFC 7616: \"HTTP Digest Authentication\"\nClass DigestAuthenticator.DigestInfo;\nClass DigestAuthenticator.NonceInfo;\nClass FormAuthenticator; // An Authenticator and Valve implementation of FORM BASED Authentication, as described in the Servlet API Specification.\nClass NonLoginAuthenticator; // An Authenticator and Valve implementation that checks only security constraints not involving user authentication.\nClass SavedRequest; // Object that saves the critical information from a request so that form-based authentication can reproduce it once the user has been authenticated.\nClass SingleSignOn; // A Valve that supports a \"single sign on\" user experience, where the security identity of a user who successfully authenticates to one web application is propagated to other web applications in the same security domain.\nClass SingleSignOnEntry; // A class that represents entries in the cache of authenticated users.\nClass SingleSignOnListener;\nClass SingleSignOnSessionKey; // Key used by SSO to identify a session.\nClass SpnegoAuthenticator; // A SPNEGO authenticator that uses the SPNEGO/Kerberos support built in to Java 6.\nClass SpnegoAuthenticator.AcceptAction; // This class gets a gss credential via a privileged action.\nClass SpnegoAuthenticator.AuthenticateAction;\nClass SpnegoAuthenticator.SpnegoTokenFixer; // This class implements a hack around an incompatibility between the SPNEGO implementation in Windows and the SPNEGO implementation in Java 8 update 40 onwards.\nClass SSLAuthenticator; // An Authenticator and Valve implementation of authentication that utilizes SSL certificates to identify client users.\nEnum AuthenticatorBase.AllowCorsPreflight;\n", "des": "This package contains Authenticator implementations for the various supported authentication methods (BASIC, DIGEST, and FORM)."}
