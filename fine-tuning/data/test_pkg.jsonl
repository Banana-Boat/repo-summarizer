{"index": 3122, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface CurrentSessionContext; // Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentTenantIdentifierResolver; // A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nClass AbstractCurrentSessionContext; // Base support for CurrentSessionContext implementors.\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 3123, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package lock;\n\nInterface LockingStrategy; // A strategy abstraction for how locks are obtained in the underlying database.\nClass AbstractSelectLockingStrategy; // Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass OptimisticForceIncrementLockingStrategy; // An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticLockingStrategy; // An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass PessimisticForceIncrementLockingStrategy; // A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticReadSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass SelectLockingStrategy; // A locking strategy where the locks are obtained through select statements.\nClass UpdateLockingStrategy; // A locking strategy where the locks are obtained through update statements.\nClass LockingStrategyException; // Represents an error trying to apply a LockingStrategy to an entity\nClass OptimisticEntityLockException; // Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass PessimisticEntityLockException; // Represents an error trying to apply a pessimistic LockingStrategy to an entity\n", "des": "Support for Dialect-specific locking strategies"}
{"index": 3124, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package pagination;\n\nInterface LimitHandler; // Contract defining dialect-specific LIMIT clause handling.\nClass AbstractLimitHandler; // Default implementation of LimitHandler interface.\nClass CUBRIDLimitHandler; // Limit handler for CUBRID\nClass FirstLimitHandler;\nClass Informix10LimitHandler;\nClass LegacyFirstLimitHandler;\nClass LegacyLimitHandler; // Limit handler that delegates all operations to the underlying dialect.\nClass LimitHelper; // A helper for dealing with LimitHandler implementations\nClass NoopLimitHandler; // Handler not supporting query LIMIT clause.\nClass Oracle12LimitHandler; // A LimitHandler for databases which support the ANSI SQL standard syntax FETCH FIRST m ROWS ONLY and OFFSET n ROWS FETCH NEXT m ROWS ONLY.\nClass SQL2008StandardLimitHandler; // LIMIT clause handler compatible with ISO and ANSI SQL:2008 standard.\nClass SQLServer2005LimitHandler; // LIMIT clause handler compatible with SQL Server 2005 and later.\nClass SQLServer2012LimitHandler; // LIMIT clause handler compatible with SQL Server 2012 and later.\nClass SybaseASE157LimitHandler; // This limit handler is very conservative and is only triggered in simple cases involving a select or select distinct.\nClass TopLimitHandler;\n", "des": "Support for Dialect-specific pagination strategies"}
{"index": 3125, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package unique;\n\nInterface UniqueDelegate; // Dialect-level delegate in charge of applying \"uniqueness\" to a column.\nClass DB2UniqueDelegate; // DB2 does not allow unique constraints on nullable columns.\nClass DefaultUniqueDelegate; // The default UniqueDelegate implementation for most dialects.\nClass InformixUniqueDelegate; // Informix requires the constraint name to come last on the alter table.\nClass MySQLUniqueDelegate;\n", "des": "Support for Dialect-specific unique constraint definition"}
{"index": 3126, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ConfigurationService; // Provides access to the initial user-provided configuration values.\nInterface ConfigurationService.Converter<T>; // Simple conversion contract for converting an untyped object to a specified type.\nClass StandardConverters; // Standard set of setting converters\n", "des": "SPI Package for the configuration service."}
{"index": 3127, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package jdbc;\n\npackage jdbc.spi; // SPI contracts for supporting various aspects of JDBC interaction\nInterface BinaryStream; // Wraps a binary stream to also provide the length which is needed when binding.\nInterface BlobImplementer; // Marker interface for non-contextually created Blob instances..\nInterface CharacterStream; // Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.\nInterface ClobImplementer; // Marker interface for non-contextually created Clob instances..\nInterface LobCreationContext; // Provides callback access into the context in which the LOB is to be created.\nInterface LobCreationContext.Callback<T>; // The callback contract for making use of the JDBC Connection.\nInterface LobCreator; // Contract for creating various LOB references.\nInterface NClobImplementer; // Marker interface for non-contextually created java.sql.NClob instances..\nInterface WrappedBlob; // Contract for Blob wrappers.\nInterface WrappedClob; // Contract for Clob wrappers.\nInterface WrappedNClob; // Contract for NClob wrappers.\nClass AbstractLobCreator; // Convenient base class for proxy-based LobCreator for handling wrapping.\nClass BlobProxy; // Manages aspects of representing Blob objects.\nClass ClobProxy; // Manages aspects of proxying Clobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass ColumnNameCache;\nClass ContextualLobCreator; // LobCreator implementation using contextual creation against the JDBC Connection class's LOB creation methods.\nClass NClobProxy; // Manages aspects of proxying java.sql.NClobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass NonContextualLobCreator; // LobCreator implementation using non-contextual or local creation, meaning that we generate the LOB references ourselves as opposed to delegating to the JDBC Connection.\nClass ReaderInputStream; // Exposes a Reader as an InputStream.\nClass ResultSetWrapperProxy;\nClass SerializableBlobProxy; // Manages aspects of proxying Blobs to add serializability.\nClass SerializableClobProxy; // Manages aspects of proxying Clobs to add serializability.\n", "des": "Support for various aspects of JDBC interaction"}
{"index": 3128, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface Batch; // Conceptually models a batch.\nInterface BatchBuilder; // A builder for Batch instances\nInterface BatchKey; // Unique key for batch identification.\nInterface BatchObserver; // An observer contract for batch events.\n", "des": "Defines contracts for JDBC batching support."}
{"index": 3129, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionProvider; // A contract for obtaining JDBC connections.\nInterface JdbcConnectionAccess; // Provides centralized access to JDBC connections.\nInterface MultiTenantConnectionProvider; // A specialized Connection provider contract used when the application is using multi-tenancy support requiring tenant aware connections.\nClass AbstractDataSourceBasedMultiTenantConnectionProviderImpl; // Basic support for implementations of MultiTenantConnectionProvider based on DataSources.\nClass AbstractMultiTenantConnectionProvider; // Basic support for MultiTenantConnectionProvider implementations using individual ConnectionProvider instances per tenant behind the scenes.\nClass DataSourceBasedMultiTenantConnectionProviderImpl; // A concrete implementation of the MultiTenantConnectionProvider contract bases on a number of reasonable assumptions.\n", "des": "Defines contracts for accessing JDBC Connections"}
{"index": 3130, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface RefCursorSupport; // Contract for JDBC REF_CURSOR support.\n", "des": "Defines contracts for JDBC REF_CURSOR support."}
{"index": 3131, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface DialectFactory; // A factory for generating Dialect instances.\nInterface DialectResolutionInfo; // Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.\nInterface DialectResolutionInfoSource; // Contract for the source of DialectResolutionInfo.\nInterface DialectResolver; // Contract for determining the Dialect to use based on information about the database / driver.\nClass BasicDialectResolver; // Intended as support for custom resolvers which match a single db name (with optional version info).\nClass BasicSQLExceptionConverter; // A helper to centralize conversion of SQLExceptions to JDBCExceptions.\nClass DatabaseMetaDataDialectResolutionInfoAdapter; // An implementation of DialectResolutionInfo that delegates calls to a wrapped DatabaseMetaData.\n", "des": "Contracts supporting Dialect resolution (from JDBC metadata) and Dialect building."}
{"index": 3132, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionObserver; // An observer of logical connection events.\nInterface InvalidatableWrapper<T>; // Specialized JdbcWrapper contract for wrapped objects that can additioanlly be invalidated\nInterface JdbcCoordinator; // Coordinates JDBC-related activities.\nInterface JdbcServices; // Contract for services around JDBC operations.\nInterface JdbcWrapper<T>; // Generic contract for wrapped JDBC objects.\nInterface NonDurableConnectionObserver; // Additional optional contract for connection observers to indicate that they should be released when the physical connection is released.\nInterface ResultSetReturn; // Contract for extracting ResultSets from Statements, executing Statements, managing Statement/ResultSet resources, and logging statement calls.\nInterface ResultSetWrapper;\nInterface SchemaNameResolver; // Contract for resolving the schema of a Connection.\nInterface SqlExceptionHelper.WarningHandler; // Contract for handling warnings\nInterface StatementPreparer; // Contracting for preparing SQL statements\nClass ConnectionObserverAdapter; // A no-op adapter for ConnectionObserver.\nClass SqlExceptionHelper; // Helper for handling SQLExceptions in various manners.\nClass SqlExceptionHelper.StandardWarningHandler; // Standard SQLWarning handler for logging warnings\nClass SqlExceptionHelper.WarningHandlerLoggingSupport; // Basic support for SqlExceptionHelper.WarningHandler implementations which handle warnings\nClass SqlStatementLogger; // Centralize logging for SQL statements.\nClass TypeInfo; // Models type info extracted from DatabaseMetaData.getTypeInfo()\nEnum TypeNullability; // Describes the instrinsic nullability of a data type as reported by the JDBC driver.\nEnum TypeSearchability; // Describes the searchability of a data type as reported by the JDBC driver.\n", "des": "SPI contracts for supporting various aspects of JDBC interaction"}
{"index": 3133, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package jndi;\n\npackage jndi.spi; // The SPI contracts for Hibernate JNDI support\nClass JndiException; // An exception indicating trouble accessing JNDI\nClass JndiNameException; // Indicates a problem with a given JNDI name being deemed as not valid.\n", "des": "Support for JNDI within Hibernate"}
{"index": 3134, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface JndiService; // Service providing simplified access to JNDI related features needed by Hibernate.\n", "des": "The SPI contracts for Hibernate JNDI support"}
{"index": 3135, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package profile;\n\nClass Association; // Models the association of a given fetch.\nClass Fetch; // Models an individual fetch within a profile.\nClass FetchProfile; // A 'fetch profile' allows a user to dynamically modify the fetching strategy used for particular associations at runtime, whereas that information was historically only statically defined in the metadata.\nEnum Fetch.Style; // The type or style of fetch.\n", "des": "Models the fetch profiles defined by the application"}
{"index": 3136, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface NativeQueryInterpreter; // Service contract for dealing with native queries.\nInterface ParameterParser.Recognizer; // Maybe better named a Journaler.\nInterface QueryPlanCache.QueryPlanCreator;\nClass AbstractParameterDescriptor; // NOTE: Consider this contract (and its sub-contracts) as incubating as we transition to 6.0 and SQM\nClass EntityGraphQueryHint; // Encapsulates a JPA EntityGraph provided through a JPQL query hint.\nClass FilterQueryPlan; // Extends an HQLQueryPlan to maintain a reference to the collection-role name being filtered.\nClass HQLQueryPlan; // Defines a query execution plan for an HQL query (or filter).\nClass NamedParameterDescriptor; // Descriptor regarding a named parameter.\nClass NativeQueryInterpreterInitiator;\nClass NativeSQLQueryPlan; // Defines a query execution plan for a native-SQL query.\nClass OrdinalParameterDescriptor; // Descriptor regarding an ordinal parameter.\nClass ParameterParser; // The single available method ParameterParser.parse(java.lang.String, org.hibernate.engine.query.spi.ParameterParser.Recognizer) is responsible for parsing a query string and recognizing tokens in relation to parameters (either named, JPA-style, or ordinal) and providing callbacks about such recognitions.\nClass ParamLocationRecognizer; // Implements a parameter parser recognizer specifically for the purpose of journaling parameter locations.\nClass ParamLocationRecognizer.InFlightJpaOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightNamedParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass QueryPlanCache; // Acts as a cache for compiled query plans, as well as query-parameter metadata.\nClass ReturnMetadata; // Metadata about the query return(s).\n", "des": "Defines support for query plans and stored metadata about queries"}
{"index": 3137, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package graph;\n\nInterface AttributeNode<J>; // Hibernate extension to the JPA entity-graph AttributeNode contract.\nInterface Graph<J>; // A container for AttributeNodes.\nInterface GraphNode<J>; // Commonality between AttributeNode and Graph.\nInterface RootGraph<J>; // Hibernate extension to the JPA EntityGraph contract.\nInterface SubGraph<J>; // Hibernate extension to the JPA entity-graph Subgraph contract.\nClass EntityGraphs; // A collection of EntityGraph utilities.\nClass GraphParser; // Parser for string representations of JPA EntityGraph (RootGraph) and Subgraph (SubGraph), using a simple syntax defined by the `graph.g` Antlr grammar.\nEnum GraphSemantic; // JPA defines 2 distinct semantics for applying an EntityGraph.\nClass CannotBecomeEntityGraphException; // Indicates an illegal attempt to make a Graph become an EntityGraph via Graph.makeRootGraph(String, boolean).\nClass CannotContainSubGraphException; // Indicates an attempt was made to add a (key)? sub-graph to an attribute type that does not support (key)? sub-graphs.\nClass InvalidGraphException; // Thrown by GraphParser to indicate textual entity graph representation parsing errors.\n", "des": "Hibernate's (extended) support for JPA's entity graphs"}
{"index": 3138, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package id;\n\npackage id.persistent; // Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values.\nInterface AbstractMultiTableBulkIdStrategyImpl.PreparationContext;\nInterface IdTableInfo;\nInterface IdTableSupport;\nInterface MultiTableBulkIdStrategy; // Generalized strategy contract for handling multi-table bulk HQL operations.\nInterface MultiTableBulkIdStrategy.DeleteHandler; // Handler for dealing with multi-table HQL bulk delete statements.\nInterface MultiTableBulkIdStrategy.UpdateHandler; // Handler for dealing with multi-table HQL bulk update statements.\nClass AbstractIdsBulkIdHandler; // Base class for all strategies that select the ids to be updated/deleted prior to executing the update/delete operation.\nClass AbstractMultiTableBulkIdStrategyImpl<TT extends IdTableInfo,​CT extends AbstractMultiTableBulkIdStrategyImpl.PreparationContext>; // Convenience base class for MultiTableBulkIdStrategy implementations.\nClass AbstractTableBasedBulkIdHandler; // Convenience base class for MultiTableBulkIdStrategy.UpdateHandler and MultiTableBulkIdStrategy.DeleteHandler implementations through TableBasedUpdateHandlerImpl and TableBasedDeleteHandlerImpl respectively.\nClass AbstractTableBasedBulkIdHandler.ProcessedWhereClause;\nClass IdTableHelper;\nClass IdTableSupportStandardImpl;\nClass TableBasedDeleteHandlerImpl;\nClass TableBasedUpdateHandlerImpl;\n", "des": "Support for multi-table update and delete statements via id-tables."}
{"index": 3139, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package persistent;\n\nClass DeleteHandlerImpl;\nClass Helper;\nClass PersistentTableBulkIdStrategy; // This is a strategy that mimics temporary tables for databases which do not support temporary tables.\nClass UpdateHandlerImpl;\n", "des": "Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values."}
{"index": 3140, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package enhanced;\n\nInterface AccessCallback; // Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.\nInterface DatabaseStructure; // Encapsulates definition of the underlying data structure backing a sequence-style generator.\nInterface InitialValueAwareOptimizer; // Marker interface for optimizer which wishes to know the user-specified initial value.\nInterface Optimizer; // Performs optimization on an optimizable identifier generator.\nClass AbstractOptimizer; // Common support for optimizer implementations.\nClass HiLoOptimizer; // Optimizer which applies a 'hilo' algorithm in memory to achieve optimization.\nClass LegacyHiLoAlgorithmOptimizer; // Slight variation from HiLoOptimizer, maintaining compatibility with the values generated by the legacy Hibernate hilo based generators.\nClass NoopOptimizer; // An optimizer that performs no optimization.\nClass OptimizerFactory; // Factory for Optimizer instances.\nClass PooledLoOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value.\nClass PooledLoThreadLocalOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value, as well as using thread local to cache the generation state.\nClass PooledOptimizer; // Optimizer which uses a pool of values, storing the next low value of the range in the database.\nClass SequenceStructure; // Describes a sequence.\nClass SequenceStyleGenerator; // Generates identifier values based on a sequence-style database structure.\nClass TableGenerator; // An enhanced version of table-based id generation.\nClass TableStructure; // Describes a table used to mimic sequence behavior\nEnum StandardOptimizerDescriptor; // Enumeration of the standard Hibernate id generation optimizers.\n", "des": "Enhanced/improved versions of table and sequence based identifier generators targeting portability and unified configuration"}
{"index": 3141, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface Callback; // Represents a JPA event callback (the method).\nInterface CallbackBuilder;\nInterface CallbackBuilder.CallbackRegistrar;\nInterface CallbackDefinition;\nInterface CallbackRegistrar;\nInterface CallbackRegistry; // Registry of Callbacks by entity and type\nInterface CallbackRegistryConsumer; // Contract for injecting the registry of Callbacks into event listeners.\nEnum CallbackType;\n", "des": "The SPI contracts for supporting JPA lifecycle callbacks."}
{"index": 3142, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package plan;\n\nClass AbstractBatchingEntityLoaderBuilder; // Base class for LoadPlan-based BatchingEntityLoaderBuilder implementations.\nClass AbstractLoadPlanBasedEntityLoader; // A UniqueEntityLoader implementation based on using LoadPlans\nClass BatchingEntityLoader; // The base contract for UniqueEntityLoader implementations capable of performing batch-fetch loading of entities using multiple primary key values in the SQL WHERE clause.\nClass DynamicBatchingEntityLoader; // Batching entity loader using dynamic where-clause\nClass DynamicBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances capable of dynamically building its batch-fetch SQL based on the actual number of entity ids waiting to be batch fetched.\nClass EntityLoader; // UniqueEntityLoader implementation that is the main functionality for LoadPlan-based Entity loading.\nClass EntityLoader.Builder;\nClass LegacyBatchingEntityLoaderBuilder; // LoadPlan-based implementation of the legacy batch loading strategy\nClass LegacyBatchingEntityLoaderBuilder.LegacyBatchingEntityLoader;\nClass MultiEntityLoadingSupport;\nClass PaddedBatchingEntityLoader; // Batching entity loader using padded where-clause\nClass PaddedBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances building its batch-fetch SQL based on padding - using a set number of parameters, but setting \"unneeded ones\" to null.\n", "des": "Support for entity loaders built on top of the org.hibernate.loader.plan API to apply entity-graphs"}
{"index": 3143, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface ExpandingCollectionQuerySpace; // Describes a collection query space that allows adding joins with other query spaces; used while building a CollectionQuerySpace.\nInterface ExpandingCompositeQuerySpace; // Describes a composite query space that allows adding joins with other query spaces; used while building a CompositeQuerySpace.\nInterface ExpandingEntityIdentifierDescription; // Describes an entity identifier description that allows adding fetches; used while building a EntityIdentifierDescription.\nInterface ExpandingEntityQuerySpace; // Describes an entity query space that allows adding joins with other query spaces; used while building an EntityQuerySpace.\nInterface ExpandingFetchSource; // Describes the internal contract for things which can contain fetches.\nInterface ExpandingQuerySpace; // Describes a query space that allows adding joins with other query spaces; used while building a QuerySpace.\nInterface ExpandingQuerySpaces; // Models a collection of QuerySpace references and exposes the ability to create an ExpandingQuerySpace for \"returns\" and fetches; used when building a load plan.\nInterface LoadPlanBuildingAssociationVisitationStrategy; // Specialized AssociationVisitationStrategy implementation for building LoadPlan instances.\nInterface LoadPlanBuildingContext; // Provides access to context needed in building a LoadPlan.\nClass LoadPlanTreePrinter; // Prints a LoadPlan graph and its QuerySpaces graph as tree structures.\nClass MetamodelDrivenLoadPlanBuilder; // A metadata-driven builder of LoadPlans.\nClass QuerySpaceTreePrinter; // Prints a QuerySpaces graph as a tree structure.\nClass ReturnGraphTreePrinter; // Prints a Return graph as a tree structure.\nClass TreePrinterHelper; // A singleton helper class for printing tree structures using indentation.\n", "des": "Defines the SPI for building a metamodel-driven LoadPlan"}
{"index": 3144, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface NamedParameterContext; // The context for named parameters.\nInterface QueryBuildingParameters; // Provides values for all options that impact the built query.\n", "des": "Defines the SPI for obtaining values for options that impact the load query."}
{"index": 3145, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface AliasResolutionContext; // Provides aliases that are used by load queries and ResultSet processors.\nInterface CollectionReferenceAliases;\nInterface EntityReferenceAliases; // Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?\nInterface LoadQueryDetails;\nInterface LockModeResolver;\n", "des": "Defines the SPI for the load query generated for the LoadPlan and the ResultSet processor."}
{"index": 3146, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface AnyAttributeFetch; // Models the requested fetching of an \"any\" attribute.\nInterface AttributeFetch; // Models a Fetch that is specifically for an attribute.\nInterface BidirectionalEntityReference; // Represents the circular side of a bi-directional entity association.\nInterface CollectionAttributeFetch; // Models the requested fetching of a persistent collection attribute.\nInterface CollectionFetchableElement; // A collection element which is a FetchSource.\nInterface CollectionFetchableIndex; // A collection index which is a FetchSource.\nInterface CollectionQuerySpace; // Models a QuerySpace for a persistent collection.\nInterface CollectionReference; // Represents a reference to a persistent collection either as a Return or as a CollectionAttributeFetch.\nInterface CollectionReturn; // Models the a persistent collection as root Return.\nInterface CompositeAttributeFetch; // Models the requested fetching of a composite attribute.\nInterface CompositeFetch; // Models the requested fetching of a composition (component/embeddable), which may or may not be an attribute.\nInterface CompositeQuerySpace; // Models a QuerySpace for a composition (component/embeddable).\nInterface EntityFetch; // Models the requested fetching of an entity attribute.\nInterface EntityIdentifierDescription; // Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).\nInterface EntityQuerySpace; // Models a QuerySpace specific to an entity (EntityPersister).\nInterface EntityReference; // Represents a reference to an entity either as a return, fetch, or collection element or index.\nInterface EntityReturn; // Models the an entity as root Return.\nInterface Fetch; // Contract for associations that are being fetched.\nInterface FetchSource; // Contract for a FetchSource (aka, the thing that owns the fetched attribute).\nInterface Join; // Represents a join in the QuerySpace-sense.\nInterface JoinDefinedByMetadata; // Specialization of a Join that is defined by the metadata.\nInterface LoadPlan; // Describes a plan for performing a load of results.\nInterface QuerySpace; // Defines a persister reference (either entity or collection) or a composite reference.\nInterface QuerySpaces; // Models a collection of QuerySpace references and exposes the ability to find a QuerySpace by its UID\nInterface Return; // Represents a return value in the query results.\n", "des": "Defines the SPI for the building blocks that make up a LoadPlan."}
{"index": 3147, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface Getter; // The contract for getting value for a persistent property from its container/owner\nInterface PropertyAccess; // Describes access to a particular persistent property in terms of getting and setting values.\nInterface PropertyAccessStrategy; // Describes a strategy for persistent property access (field, JavaBean-style property, etc).\nInterface PropertyAccessStrategyResolver; // Contract for resolving the PropertyAccessStrategy to use.\nInterface Setter; // The contract for setting a persistent property value into its container/owner\nClass EnhancedGetterMethodImpl;\nClass EnhancedSetterImpl; // A specialized Setter implementation for handling setting values into a bytecode-enhanced Class.\nClass GetterFieldImpl; // Field-based implementation of Getter\nClass GetterMethodImpl;\nClass SetterFieldImpl; // Field-based implementation of Setter\nClass SetterMethodImpl;\nEnum BuiltInPropertyAccessStrategies; // Describes the built-in externally-nameable PropertyAccessStrategy implementations.\nClass PropertyAccessBuildingException; // Indicates a problem while building a PropertyAccess\nClass PropertyAccessException; // Indicates a problem reading or writing value from/to a persistent property.\nClass PropertyAccessSerializationException;\n", "des": "Defines strategies for accessing the persistent properties of an entity or composite."}
{"index": 3148, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package transaction;\n\npackage transaction.spi; // Extended SPI contracts for the resource-level transaction capabilities of Hibernate.\nClass LocalSynchronizationException; // Wraps an exception thrown from a \"local synchronization\" (one registered in the SynchronizationRegistry).\nClass NullSynchronizationException; // Indicates an attempt to register a null synchronization.\nClass TransactionRequiredForJoinException; // Indicates a call to TransactionCoordinator.explicitJoin() that requires an active transaction where there currently is none.\n", "des": "Defines the resource-level transaction capabilities of Hibernate, which revolves around the TransactionCoordinator contract."}
{"index": 3149, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package spi;\n\nInterface DdlTransactionIsolator; // Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands\nInterface SynchronizationRegistry; // Manages a registry of (local) JTA Synchronization instances\nInterface SynchronizationRegistryImplementor; // SPI contract for SynchronizationRegistry implementors.\nInterface TransactionCoordinator; // Models the coordination of all transaction related flows.\nInterface TransactionCoordinator.TransactionDriver; // Provides the means for \"local transactions\" (as transaction drivers) to control the underlying \"physical transaction\" currently associated with the TransactionCoordinator.\nInterface TransactionCoordinatorBuilder; // Builder for TransactionCoordinator instances\nInterface TransactionCoordinatorBuilder.Options; // Access to options to are specific to each TransactionCoordinator instance\nInterface TransactionCoordinatorOwner; // Models an owner of a TransactionCoordinator.\nEnum TransactionStatus; // Enumeration of statuses in which a transaction facade (Transaction) might be.\n", "des": "Extended SPI contracts for the resource-level transaction capabilities of Hibernate."}
{"index": 3150, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package converter;\n\nClass AttributeConverterMutabilityPlanImpl<T>; // The standard approach for defining a MutabilityPlan for converted (AttributeConverter) values is to always assume that they are immutable to make sure that dirty checking, deep copying and second-level caching all work properly no matter what.\nClass AttributeConverterSqlTypeDescriptorAdapter; // Adapter for incorporating JPA AttributeConverter handling into the SqlTypeDescriptor contract.\nClass AttributeConverterTypeAdapter<T>; // Adapts the Hibernate Type contract to incorporate JPA AttributeConverter calls.\n", "des": "Support for handling JPA AttributeConverter instances as part of the Hibernate Type system."}
{"index": 3151, "repo": "hibernate-core-jakarta-5.6.15.Final", "code": "package sql;\n\nInterface SqlTypeDescriptor; // Descriptor for the SQL/JDBC side of a value mapping.\nClass BasicBinder<J>; // Convenience base implementation of ValueBinder\nClass BasicExtractor<J>; // Convenience base implementation of ValueExtractor\nClass BigIntTypeDescriptor; // Descriptor for BIGINT handling.\nClass BinaryTypeDescriptor; // Descriptor for BINARY handling.\nClass BitTypeDescriptor; // Descriptor for BIT handling.\nClass BlobTypeDescriptor; // Descriptor for BLOB handling.\nClass BooleanTypeDescriptor; // Descriptor for BOOLEAN handling.\nClass CharTypeDescriptor; // Descriptor for CHAR handling.\nClass ClobTypeDescriptor; // Descriptor for CLOB handling.\nClass DateTypeDescriptor; // Descriptor for DATE handling.\nClass DecimalTypeDescriptor; // Descriptor for DECIMAL handling.\nClass DoubleTypeDescriptor; // Descriptor for DOUBLE handling.\nClass FloatTypeDescriptor; // Descriptor for FLOAT handling.\nClass IntegerTypeDescriptor; // Descriptor for INTEGER handling.\nClass JdbcTypeFamilyInformation; // Information pertaining to JDBC type families.\nClass JdbcTypeJavaClassMappings; // Maintains the JDBC recommended mappings for JDBC type-code to/from Java Class as defined in _Appendix B : Data Type Conversion Tables_ of the _JDBC 4.0 Specification_ Eventually, the plan is to have Dialect and DatabaseMetaData.getTypeInfo() contribute this information.\nClass LobTypeMappings;\nClass LongNVarcharTypeDescriptor; // Descriptor for LONGNVARCHAR handling.\nClass LongVarbinaryTypeDescriptor; // Descriptor for LONGVARBINARY handling.\nClass LongVarcharTypeDescriptor; // Descriptor for LONGVARCHAR handling.\nClass NationalizedTypeMappings; // Manages a mapping between nationalized and non-nationalized variants of JDBC types.\nClass NCharTypeDescriptor; // Descriptor for NCHAR handling.\nClass NClobTypeDescriptor; // Descriptor for NCLOB handling.\nClass NumericTypeDescriptor; // Descriptor for NUMERIC handling.\nClass NVarcharTypeDescriptor; // Descriptor for NVARCHAR handling.\nClass RealTypeDescriptor; // Descriptor for REAL handling.\nClass SmallIntTypeDescriptor; // Descriptor for SMALLINT handling.\nClass SqlTypeDescriptorRegistry;\nClass SqlTypeDescriptorRegistry.ObjectSqlTypeDescriptor;\nClass TimestampTypeDescriptor; // Descriptor for TIMESTAMP handling.\nClass TimeTypeDescriptor; // Descriptor for TIME handling.\n", "des": "Defines handling of the standard JDBC-defined types."}
{"index": 3152, "repo": "tika-core-2.8.0", "code": "package tika;\n\npackage tika.config; // Tika configuration tools.\npackage tika.detect; // Media type detection.\npackage tika.exception; // Tika exception.\npackage tika.extractor; // Extraction of component documents.\npackage tika.fork; // Forked parser.\npackage tika.io; // IO utilities.\npackage tika.metadata; // Multi-valued metadata container, and set of constant metadata fields.\npackage tika.mime; // Media type information.\npackage tika.parser; // Tika parsers.\npackage tika.sax; // SAX utilities.\npackage tika.utils; // Utilities.\nClass Tika; // Facade class for accessing Tika functionality.\n", "des": "Apache Tika."}
{"index": 3153, "repo": "tika-core-2.8.0", "code": "package config;\n\nInterface Initializable; // Components that must do special processing across multiple fields at initialization time should implement this interface.\nInterface InitializableProblemHandler; // This is to be used to handle potential recoverable problems that might arise during initialization.\nInterface LoadErrorHandler; // Interface for error handling strategies in service class loading.\nClass ConfigBase;\nClass Param<T>; // This is a serializable model class for parameters from configuration file.\nClass ParamField; // This class stores metdata for Field annotation are used to map them to Param at runtime\nClass ServiceLoader; // Internal utility class that Tika uses to look up service providers.\nClass TikaActivator; // Bundle activator that adjust the class loading mechanism of the ServiceLoader class to work correctly in an OSGi environment.\nClass TikaConfig; // Parse xml config file.\nClass TikaConfigSerializer;\nClass TikaTaskTimeout;\nEnum TikaConfigSerializer.Mode;\nAnnotation Type Field; // Field annotation is a contract for binding Param value from Tika Configuration to an object.\n", "des": "Tika configuration tools."}
{"index": 3154, "repo": "tika-core-2.8.0", "code": "package detect;\n\nInterface Detector; // Content type detector.\nInterface EncodingDetector; // Character encoding detector.\nClass AutoDetectReader; // An input stream reader that automatically detects the character encoding to be used for converting bytes to characters.\nClass CompositeDetector; // Content type detector that combines multiple different detection mechanisms.\nClass CompositeEncodingDetector;\nClass DefaultDetector; // A composite detector based on all the Detector implementations available through the service provider mechanism.\nClass DefaultEncodingDetector; // A composite encoding detector based on all the EncodingDetector implementations available through the service provider mechanism.\nClass DefaultProbDetector; // A version of DefaultDetector for probabilistic mime detectors, which use statistical techniques to blend the results of differing underlying detectors when attempting to detect the type of a given file.\nClass EmptyDetector; // Dummy detector that returns application/octet-stream for all documents.\nClass FileCommandDetector; // This runs the linux 'file' command against a file.\nClass MagicDetector; // Content type detection based on magic bytes, i.e.\nClass NameDetector; // Content type detection based on the resource name.\nClass NNExampleModelDetector;\nClass NNTrainedModel;\nClass NNTrainedModelBuilder;\nClass NonDetectingEncodingDetector; // Always returns the charset passed in via the initializer\nClass OverrideDetector;\nClass TextDetector; // Content type detection of plain text documents.\nClass TextStatistics; // Utility class for computing a histogram of the bytes seen in a stream.\nClass TrainedModel;\nClass TrainedModelDetector;\nClass TypeDetector; // Content type detection based on a content type hint.\nClass XmlRootExtractor; // Utility class that uses a SAXParser to determine the namespace URI and local name of the root element of an XML file.\nClass ZeroSizeFileDetector; // Detector to identify zero length files as application/x-zerovalue\n", "des": "Media type detection."}
{"index": 3155, "repo": "tika-core-2.8.0", "code": "package exception;\n\nClass ZeroByteFileException.IgnoreZeroByteFileException;\nClass AccessPermissionException; // Exception to be thrown when a document does not allow content extraction.\nClass CorruptedFileException; // This exception should be thrown when the parse absolutely, positively has to stop.\nClass EncryptedDocumentException;\nClass FileTooLongException;\nClass RuntimeSAXException; // Use this to throw a SAXException in subclassed methods that don't throw SAXExceptions\nClass TikaConfigException; // Tika Config Exception is an exception to occur when there is an error in Tika config file and/or one or more of the parsers failed to initialize from that erroneous config.\nClass TikaException; // Tika exception\nClass TikaMemoryLimitException;\nClass TikaTimeoutException; // Runtime/unchecked version of TimeoutException\nClass UnsupportedFormatException; // Parsers should throw this exception when they encounter a file format that they do not support.\nClass WriteLimitReachedException;\nClass ZeroByteFileException; // Exception thrown by the AutoDetectParser when a file contains zero-bytes.\n", "des": "Tika exception."}
{"index": 3156, "repo": "tika-core-2.8.0", "code": "package extractor;\n\nInterface ContainerExtractor; // Tika container extractor interface.\nInterface DocumentSelector; // Interface for different document selection strategies for purposes like embedded document extraction by a ContainerExtractor instance.\nInterface EmbeddedDocumentExtractor;\nInterface EmbeddedDocumentExtractorFactory;\nInterface EmbeddedResourceHandler; // Tika container extractor callback interface.\nInterface EmbeddedStreamTranslator; // Interface for different filtering of embedded streams.\nClass DefaultEmbeddedStreamTranslator; // Loads EmbeddedStreamTranslators via service loading.\nClass EmbeddedDocumentUtil; // Utility class to handle common issues with embedded documents.\nClass ParserContainerExtractor; // An implementation of ContainerExtractor powered by the regular Parser API.\nClass ParsingEmbeddedDocumentExtractor; // Helper class for parsers of package archives or other compound document formats that support embedded or attached component documents.\nClass ParsingEmbeddedDocumentExtractorFactory;\n", "des": "Extraction of component documents."}
{"index": 3157, "repo": "tika-core-2.8.0", "code": "package fork;\n\nInterface ForkProxy;\nInterface ForkResource;\nClass ForkParser;\nClass ParserFactoryFactory; // Lightweight, easily serializable class that contains enough information to build a ParserFactory\n", "des": "Forked parser."}
{"index": 3158, "repo": "tika-core-2.8.0", "code": "package io;\n\nInterface InputStreamFactory; // A factory which returns a fresh InputStream for the same resource each time.\nClass BoundedInputStream; // Very slight modification of Commons' BoundedInputStream so that we can figure out if this hit the bound or not.\nClass EndianUtils; // General Endian Related Utilties.\nClass FilenameUtils;\nClass IOUtils;\nClass LookaheadInputStream; // Stream wrapper that make it easy to read up to n bytes ahead from a stream that supports the mark feature.\nClass MappedBufferCleaner; // Copied/pasted from the Apache Lucene/Solr project.\nClass TailStream; // A specialized input stream implementation which records the last portion read from an underlying stream.\nClass TemporaryResources; // Utility class for tracking and ultimately closing or otherwise disposing a collection of temporary resources.\nClass TikaInputStream; // Input stream with extended capabilities.\nClass EndianUtils.BufferUnderrunException;\n", "des": "IO utilities."}
{"index": 3159, "repo": "tika-core-2.8.0", "code": "package metadata;\n\nInterface AccessPermissions; // Until we can find a common standard, we'll use these options.\nInterface ClimateForcast; // Met keys from NCAR CCSM files in the Climate Forecast Convention.\nInterface CreativeCommons; // A collection of Creative Commons properties names.\nInterface Database;\nInterface DublinCore; // A collection of Dublin Core metadata names.\nInterface Epub; // EPub properties collection.\nInterface ExternalProcess;\nInterface FileSystem; // A collection of metadata elements for file system level metadata\nInterface Font;\nInterface Geographic; // Geographic schema.\nInterface HTML;\nInterface HttpHeaders; // A collection of HTTP header names.\nInterface IPTC; // IPTC photo metadata schema.\nInterface MachineMetadata; // Metadata for describing machines, such as their architecture, type and endian-ness\nInterface Message; // A collection of Message related property names.\nInterface Office; // Office Document properties collection.\nInterface OfficeOpenXMLCore; // Core properties as defined in the Office Open XML specification part Two that are not in the DublinCore namespace.\nInterface OfficeOpenXMLExtended; // Extended properties as defined in the Office Open XML specification part Four.\nInterface PagedText; // XMP Paged-text schema.\nInterface PDF; // PDF properties collection.\nInterface Photoshop; // XMP Photoshop metadata schema.\nInterface QuattroPro; // QuattroPro properties collection.\nInterface Rendering;\nInterface RTFMetadata;\nInterface TIFF; // XMP Exif TIFF schema.\nInterface TikaCoreProperties; // Contains a core set of basic Tika metadata properties, which all parsers will attempt to supply (where the file format permits).\nInterface TikaMimeKeys; // A collection of Tika metadata keys used in Mime Type resolution\nInterface TikaPagedText; // Metadata properties for paged text, metadata appropriate for an individual page (useful for embedded document handlers called on individual pages).\nInterface WARC;\nInterface WordPerfect; // WordPerfect properties collection.\nInterface XMP;\nInterface XMPDM; // XMP Dynamic Media schema.\nInterface XMPIdq;\nInterface XMPMM;\nInterface XMPRights; // XMP Rights management schema.\nClass MachineMetadata.Endian;\n", "des": "Multi-valued metadata container, and set of constant metadata fields."}
{"index": 3160, "repo": "tika-core-2.8.0", "code": "package mime;\n\nInterface MimeTypesReaderMetKeys; // Met Keys used by the MimeTypesReader.\nClass HexCoDec; // A set of Hex encoding and decoding utility methods.\nClass MediaType; // Internet media type.\nClass MediaTypeRegistry; // Registry of known Internet media types.\nClass MimeType; // Internet media type.\nClass MimeTypes; // This class is a MimeType repository.\nClass MimeTypesFactory; // Creates instances of MimeTypes.\nClass MimeTypesReader; // A reader for XML files compliant with the freedesktop MIME-info DTD.\nClass ProbabilisticMimeDetectionSelector; // Selector for combining different mime detection results based on probability\nClass ProbabilisticMimeDetectionSelector.Builder; // build class for probability parameters setting\nClass MimeTypeException; // A class to encapsulate MimeType related exceptions.\n", "des": "Media type information."}
{"index": 3161, "repo": "tika-core-2.8.0", "code": "package parser;\n\npackage parser.external; // External parser process.\nInterface DigestingParser.Digester; // Interface for digester.\nInterface DigestingParser.DigesterFactory; // This is used in AutoDetectParserConfig to (optionally) wrap the parser in a digesting parser.\nInterface DigestingParser.Encoder; // Encodes byte array from a MessageDigest to String\nInterface Parser; // Tika parser interface.\nInterface PasswordProvider; // Interface for providing a password to a Parser for handling Encrypted and Password Protected Documents.\nInterface RenderingParser;\nClass AbstractEncodingDetectorParser; // Abstract base class for parsers that use the AutoDetectReader and need to use the EncodingDetector configured by TikaConfig\nClass AbstractExternalProcessParser; // Abstract base class for parsers that call external processes.\nClass AbstractParser; // Abstract base class for new parsers.\nClass AutoDetectParser;\nClass AutoDetectParserConfig; // This config object can be used to tune how conservative we want to be when parsing data that is extremely compressible and resembles a ZIP bomb.\nClass AutoDetectParserFactory; // Factory for an AutoDetectParser\nClass CompositeParser; // Composite parser that delegates parsing tasks to a component parser based on the declared content type of the incoming document.\nClass CryptoParser; // Decrypts the incoming document stream and delegates further parsing to another parser instance.\nClass DefaultParser; // A composite parser based on all the Parser implementations available through the service provider mechanism.\nClass DelegatingParser; // Base class for parser implementations that want to delegate parts of the task of parsing an input document to another parser.\nClass DigestingParser;\nClass EmptyParser; // Dummy parser that always produces an empty XHTML document without even attempting to parse the given document stream.\nClass ErrorParser; // Dummy parser that always throws a TikaException without even attempting to parse the given document stream.\nClass NetworkParser;\nClass ParseContext; // Parse context.\nClass ParserDecorator; // Decorator base class for the Parser interface.\nClass ParseRecord; // Use this class to store exceptions, warnings and other information during the parse.\nClass ParserFactory;\nClass ParserPostProcessor; // Parser decorator that post-processes the results from a decorated parser.\nClass ParsingReader; // Reader for the text content from a given binary stream.\n", "des": "Tika parsers."}
{"index": 3162, "repo": "tika-core-2.8.0", "code": "package external;\n\nInterface ExternalParser.LineConsumer; // Consumer contract\nInterface ExternalParsersConfigReaderMetKeys; // Met Keys used by the ExternalParsersConfigReader.\nClass CompositeExternalParser; // A Composite Parser that wraps up all the available External Parsers, and provides an easy way to access them.\nClass ExternalParser; // Parser that uses an external program (like catdoc or pdf2txt) to extract text content and metadata from a given document.\nClass ExternalParsersConfigReader; // Builds up ExternalParser instances based on XML file(s) which define what to run, for what, and how to process any output metadata.\nClass ExternalParsersFactory; // Creates instances of ExternalParser based on XML configuration files.\n", "des": "External parser process."}
{"index": 3163, "repo": "tika-core-2.8.0", "code": "package sax;\n\npackage sax.xpath; // XPath utilities\nInterface ContentHandlerDecoratorFactory;\nInterface ContentHandlerFactory; // Interface to allow easier injection of code for getting a new ContentHandler\nInterface SafeContentHandler.Output; // Internal interface that allows both character and ignorable whitespace content to be filtered the same way.\nInterface WriteLimiter;\nClass AbstractRecursiveParserWrapperHandler; // This is a special handler to be used only with the RecursiveParserWrapper.\nClass BasicContentHandlerFactory; // Basic factory for creating common types of ContentHandlers\nClass BodyContentHandler; // Content handler decorator that only passes everything inside the XHTML <body/> tag to the underlying handler.\nClass CleanPhoneText; // Class to help de-obfuscate phone numbers in text.\nClass ContentHandlerDecorator; // Decorator base class for the ContentHandler interface.\nClass DIFContentHandler;\nClass ElementMappingContentHandler; // Content handler decorator that maps element QNames using a Map.\nClass ElementMappingContentHandler.TargetElement;\nClass EmbeddedContentHandler; // Content handler decorator that prevents the EmbeddedContentHandler.startDocument() and EmbeddedContentHandler.endDocument() events from reaching the decorated handler.\nClass EndDocumentShieldingContentHandler; // A wrapper around a ContentHandler which will ignore normal SAX calls to EndDocumentShieldingContentHandler.endDocument(), and only fire them later.\nClass ExpandedTitleContentHandler; // Content handler decorator which wraps a TransformerHandler in order to allow the TITLE tag to render as <title></title> rather than <title/> which is accomplished by calling the ContentHandler.characters(char[], int, int) method with a length of 1 but a zero length char array.\nClass Link;\nClass LinkContentHandler; // Content handler that collects links from an XHTML document.\nClass OfflineContentHandler; // Content handler decorator that always returns an empty stream from the OfflineContentHandler.resolveEntity(String, String) method to prevent potential network or other external resources from being accessed by an XML parser.\nClass PhoneExtractingContentHandler; // Class used to extract phone numbers while parsing.\nClass RecursiveParserWrapperHandler; // This is the default implementation of AbstractRecursiveParserWrapperHandler.\nClass RichTextContentHandler; // Content handler for Rich Text, it will extract XHTML <img/> tag <alt/> attribute and XHTML <a/> tag <name/> attribute into the output.\n", "des": "SAX utilities."}
{"index": 3164, "repo": "tika-core-2.8.0", "code": "package xpath;\n\nClass AttributeMatcher; // Final evaluation state of a .../@* XPath expression.\nClass ChildMatcher; // Intermediate evaluation state of a .../*... XPath expression.\nClass CompositeMatcher; // Composite XPath evaluation state.\nClass ElementMatcher; // Final evaluation state of an XPath expression that targets an element.\nClass Matcher; // XPath element matcher.\nClass MatchingContentHandler; // Content handler decorator that only passes the elements, attributes, and text nodes that match the given XPath expression.\nClass NamedAttributeMatcher; // Final evaluation state of a .../@name XPath expression.\nClass NamedElementMatcher; // Intermediate evaluation state of a .../name... XPath expression.\nClass NodeMatcher; // Final evaluation state of a .../node() XPath expression.\nClass SubtreeMatcher; // Evaluation state of a ...//... XPath expression.\nClass TextMatcher; // Final evaluation state of a .../text() XPath expression.\nClass XPathParser; // Parser for a very simple XPath subset.\n", "des": "XPath utilities"}
{"index": 3165, "repo": "tika-core-2.8.0", "code": "package utils;\n\nClass AnnotationUtils; // This class contains utilities for dealing with tika annotations\nClass CharsetUtils;\nClass CompareUtils;\nClass ConcurrentUtils; // Utility Class for Concurrency in Tika\nClass DateUtils; // Date related utility methods and constants\nClass ExceptionUtils;\nClass FileProcessResult;\nClass ParserUtils; // Helper util methods for Parsers themselves.\nClass ProcessUtils;\nClass RegexUtils; // Inspired from Nutch code class OutlinkExtractor.\nClass RereadableInputStream; // Wraps an input stream, reading it only once, but making it available for rereading an arbitrary number of times.\nClass ServiceLoaderUtils; // Service Loading and Ordering related utils\nClass StreamGobbler;\nClass StringUtils;\nClass SystemUtils; // Copied from commons-lang to avoid requiring the dependency\nClass XMLReaderUtils; // Utility functions for reading XML.\n", "des": "Utilities."}
{"index": 3166, "repo": "gson-2.10.1", "code": "package gson;\n\npackage gson.annotations; // This package provides annotations that can be used with Gson.\npackage gson.reflect; // This package provides utility classes for finding type information for generic types.\npackage gson.stream; // This package provides classes for processing JSON in an efficient streaming way.\nInterface ExclusionStrategy; // A strategy (or policy) definition that is used to decide whether or not a field or class should be serialized or deserialized as part of the JSON output/input.\nInterface FieldNamingStrategy; // A mechanism for providing custom field naming in Gson.\nInterface InstanceCreator<T>; // This interface is implemented to create instances of a class that does not define a no-args constructor.\nInterface JsonDeserializationContext; // Context for deserialization that is passed to a custom deserializer during invocation of its JsonDeserializer.deserialize(JsonElement, Type, JsonDeserializationContext) method.\nInterface JsonDeserializer<T>; // Interface representing a custom deserializer for JSON.\nInterface JsonSerializationContext; // Context for serialization that is passed to a custom serializer during invocation of its JsonSerializer.serialize(Object, Type, JsonSerializationContext) method.\nInterface JsonSerializer<T>; // Interface representing a custom serializer for JSON.\nInterface ReflectionAccessFilter; // Filter for determining whether reflection based serialization and deserialization is allowed for a class.\nInterface ToNumberStrategy; // A strategy that is used to control how numbers should be deserialized for Object and Number when a concrete type of the deserialized number is unknown in advance.\nInterface TypeAdapterFactory; // Creates type adapters for set of related types.\nClass FieldAttributes; // A data object that stores attributes of a field.\nClass Gson; // This is the main class for using Gson.\nClass GsonBuilder; // Use this builder to construct a Gson instance when you need to set configuration options other than the default.\nClass JsonArray; // A class representing an array type in JSON.\nClass JsonElement; // A class representing an element of JSON.\nClass JsonNull; // A class representing a JSON null value.\nClass JsonObject; // A class representing an object type in Json.\nClass JsonParser; // A parser to parse JSON into a parse tree of JsonElements.\nClass JsonPrimitive; // A class representing a JSON primitive value.\nClass JsonStreamParser; // A streaming parser that allows reading of multiple JsonElements from the specified reader asynchronously.\n", "des": "This package provides the Gson class to convert Json to Java and vice-versa."}
{"index": 3167, "repo": "gson-2.10.1", "code": "package annotations;\n\nAnnotation Type Expose; // An annotation that indicates this member should be exposed for JSON serialization or deserialization.\nAnnotation Type JsonAdapter; // An annotation that indicates the Gson TypeAdapter to use with a class or field.\nAnnotation Type SerializedName; // An annotation that indicates this member should be serialized to JSON with the provided name value as its field name.\nAnnotation Type Since; // An annotation that indicates the version number since a member or a type has been present.\nAnnotation Type Until; // An annotation that indicates the version number until a member or a type should be present.\n", "des": "This package provides annotations that can be used with Gson."}
{"index": 3168, "repo": "gson-2.10.1", "code": "package reflect;\n\nClass TypeToken<T>; // Represents a generic type T.\n", "des": "This package provides utility classes for finding type information for generic types."}
{"index": 3169, "repo": "gson-2.10.1", "code": "package stream;\n\nClass JsonReader; // Reads a JSON (RFC 7159) encoded value as a stream of tokens.\nClass JsonWriter; // Writes a JSON (RFC 7159) encoded value to a stream, one token at a time.\nEnum JsonToken; // A structure, name or value type in a JSON-encoded string.\nClass MalformedJsonException; // Thrown when a reader encounters malformed JSON.\n", "des": "This package provides classes for processing JSON in an efficient streaming way."}
{"index": 3170, "repo": "tomcat-api-10.1", "code": "package ant;\n\npackage ant.jmx; // This package contains a set of JMX Task implementations for Ant (version 1.6 or later) that can be used to interact with the Remote JMX JSR 160 RMI Adaptor to get/set attributes, invoke MBean operations and query for Mbeans inside a running instance of Tomcat.\nClass AbstractCatalinaCommandTask;\nClass AbstractCatalinaTask; // Abstract base class for Ant tasks that interact with the Manager web application for dynamically deploying and undeploying applications.\nClass BaseRedirectorHelperTask; // Abstract base class to add output redirection support for Catalina Ant tasks.\nClass DeployTask; // Ant task that implements the /deploy command, supported by the Tomcat manager application.\nClass FindLeaksTask; // Ant task that implements the /findleaks command, supported by the Tomcat manager application.\nClass JKStatusUpdateTask; // Ant task that implements the /status command, supported by the mod_jk status (1.2.9) application.\nClass JMXGetTask; // Ant task that implements the JMX Get command (/jmxproxy/?\nClass JMXQueryTask; // Ant task that implements the JMX Query command (/jmxproxy/?\nClass JMXSetTask; // Ant task that implements the JMX Set command (/jmxproxy/?\nClass ListTask; // Ant task that implements the /list command, supported by the Tomcat manager application.\nClass ReloadTask; // Ant task that implements the /reload command, supported by the Tomcat manager application.\nClass ResourcesTask; // Ant task that implements the /resources command, supported by the Tomcat manager application.\nClass ServerinfoTask; // Ant task that implements the /serverinfo command supported by the Tomcat manager application.\nClass SessionsTask; // Ant task that implements the /sessions command supported by the Tomcat manager application.\nClass SslConnectorCiphersTask; // Ant task that implements the /sslConnectorCiphers command supported by the Tomcat manager application.\nClass StartTask; // Ant task that implements the /start command, supported by the Tomcat manager application.\nClass StopTask; // Ant task that implements the /stop command, supported by the Tomcat manager application.\n", "des": "This package contains a set of Task implementations for Ant (version 1.6.x or later) that can be used to interact with the Manager application to deploy, undeploy, list, reload, start and stop web applications from a running instance of Tomcat."}
{"index": 3171, "repo": "tomcat-api-10.1", "code": "package jmx;\n\nClass Arg;\nClass JMXAccessorCondition; // Definition:\nClass JMXAccessorConditionBase;\nClass JMXAccessorCreateTask; // Create new MBean at JMX JSR 160 MBeans Server.\nClass JMXAccessorEqualsCondition; // Definition\nClass JMXAccessorGetTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorInvokeTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorQueryTask; // Query for Mbeans.\nClass JMXAccessorSetTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorTask; // Access JMX JSR 160 MBeans Server.\nClass JMXAccessorUnregisterTask; // unregister an MBean at JMX JSR 160 MBeans Server.\n", "des": "This package contains a set of JMX Task implementations for Ant (version 1.6 or later) that can be used to interact with the Remote JMX JSR 160 RMI Adaptor to get/set attributes, invoke MBean operations and query for Mbeans inside a running instance of Tomcat."}
{"index": 3172, "repo": "tomcat-api-10.1", "code": "package authenticator;\n\nClass AuthenticatorBase; // Basic implementation of the Valve interface that enforces the <security-constraint> elements in the web application deployment descriptor.\nClass BasicAuthenticator; // An Authenticator and Valve implementation of HTTP BASIC Authentication, as outlined in RFC 7617: \"The 'Basic' HTTP Authentication Scheme\"\nClass BasicAuthenticator.BasicCredentials; // Parser for an HTTP Authorization header for BASIC authentication as per RFC 2617 section 2, and the Base64 encoded credentials as per RFC 2045 section 6.8.\nClass Constants;\nClass DigestAuthenticator; // An Authenticator and Valve implementation of HTTP DIGEST Authentication, as outlined in RFC 7616: \"HTTP Digest Authentication\"\nClass DigestAuthenticator.DigestInfo;\nClass DigestAuthenticator.NonceInfo;\nClass FormAuthenticator; // An Authenticator and Valve implementation of FORM BASED Authentication, as described in the Servlet API Specification.\nClass NonLoginAuthenticator; // An Authenticator and Valve implementation that checks only security constraints not involving user authentication.\nClass SavedRequest; // Object that saves the critical information from a request so that form-based authentication can reproduce it once the user has been authenticated.\nClass SingleSignOn; // A Valve that supports a \"single sign on\" user experience, where the security identity of a user who successfully authenticates to one web application is propagated to other web applications in the same security domain.\nClass SingleSignOnEntry; // A class that represents entries in the cache of authenticated users.\nClass SingleSignOnListener;\nClass SingleSignOnSessionKey; // Key used by SSO to identify a session.\nClass SpnegoAuthenticator; // A SPNEGO authenticator that uses the SPNEGO/Kerberos support built in to Java 6.\nClass SpnegoAuthenticator.AcceptAction; // This class gets a gss credential via a privileged action.\nClass SpnegoAuthenticator.AuthenticateAction;\nClass SpnegoAuthenticator.SpnegoTokenFixer; // This class implements a hack around an incompatibility between the SPNEGO implementation in Windows and the SPNEGO implementation in Java 8 update 40 onwards.\nClass SSLAuthenticator; // An Authenticator and Valve implementation of authentication that utilizes SSL certificates to identify client users.\nEnum AuthenticatorBase.AllowCorsPreflight;\n", "des": "This package contains Authenticator implementations for the various supported authentication methods (BASIC, DIGEST, and FORM)."}
{"index": 3173, "repo": "tomcat-api-10.1", "code": "package ha;\n\nInterface CatalinaCluster; // A CatalinaCluster interface allows to plug in and out the different cluster implementations\nInterface ClusterDeployer; // A ClusterDeployer interface allows to plug in and out the different deployment implementations\nInterface ClusterManager; // The common interface used by all cluster manager.\nInterface ClusterMessage;\nInterface ClusterSession;\nInterface ClusterValve; // Cluster valves are a simple extension to the Tomcat valve architecture with a small addition of being able to reference the cluster component in the container it sits in.\nClass ClusterListener; // Receive SessionID cluster change from other backup node after primary session node is failed.\nClass ClusterMessageBase;\nClass ClusterRuleSet; // RuleSet for processing the contents of a Cluster definition element.\n", "des": "This package contains code for Clustering, the base class of a Cluster is org.apache.catalina.Cluster implementations of this class is done when implementing a new Cluster protocol"}
{"index": 3174, "repo": "tomcat-api-10.1", "code": "package realm;\n\nInterface X509UsernameRetriever; // Provides an interface for retrieving a user name from an X509Certificate.\nClass AuthenticatedUserRealm; // This Realm is intended for use with Authenticator implementations (SSLAuthenticator, SpnegoAuthenticator) that authenticate the user as well as obtain the user credentials.\nClass CombinedRealm; // Realm implementation that contains one or more realms.\nClass DataSourceRealm; // Implementation of Realm that works with any JDBC JNDI DataSource.\nClass DigestCredentialHandlerBase; // Base implementation for the Tomcat provided CredentialHandlers.\nClass GenericPrincipal; // Generic implementation of java.security.Principal that is available for use by Realm implementations.\nClass JAASCallbackHandler; // Implementation of the JAAS CallbackHandler interface, used to negotiate delivery of the username and credentials that were specified to our constructor.\nClass JAASMemoryLoginModule; // Implementation of the JAAS LoginModule interface, primarily for use in testing JAASRealm.\nClass JAASRealm; // Implementation of Realm that authenticates users via the Java Authentication and Authorization Service (JAAS).\nClass JNDIRealm; // Implementation of Realm that works with a directory server accessed via the Java Naming and Directory Interface (JNDI) APIs.\nClass JNDIRealm.JNDIConnection; // Class holding the connection to the directory plus the associated non thread safe message formats.\nClass JNDIRealm.User; // A protected class representing a User\nClass LockOutRealm; // This class extends the CombinedRealm (hence it can wrap other Realms) to provide a user lock out mechanism if there are too many failed authentication attempts in a given period of time.\nClass LockOutRealm.LockRecord;\nClass MemoryRealm; // Simple implementation of Realm that reads an XML file to configure the valid users, passwords, and roles.\nClass MemoryRuleSet; // RuleSet for recognizing the users defined in the XML file processed by MemoryRealm.\nClass MessageDigestCredentialHandler; // This credential handler supports the following forms of stored passwords: encodedCredential - a hex encoded digest of the password digested using the configured digest {MD5}encodedCredential - a Base64 encoded MD5 digest of the password {SHA}encodedCredential - a Base64 encoded SHA1 digest of the password {SSHA}encodedCredential - 20 byte Base64 encoded SHA1 digest followed by variable length salt.\n", "des": "This package contains Realm implementations for the various supported realm technologies for authenticating users and identifying their associated roles."}
{"index": 3175, "repo": "tomcat-api-10.1", "code": "package servlets;\n\nClass CGIServlet; // CGI-invoking servlet for web applications, used to execute scripts which comply to the Common Gateway Interface (CGI) specification and are named in the path-info used to invoke this servlet.\nClass CGIServlet.HTTPHeaderInputStream; // This is an input stream specifically for reading HTTP headers.\nClass DefaultServlet; // The default resource-serving servlet for most web applications, used to serve static resources such as HTML pages and images.\nClass DefaultServlet.CompressionFormat;\nClass WebdavServlet; // Servlet which adds support for WebDAV level 2.\n", "des": "This package contains Servlets that implement some of the standard functionality provided by the Catalina servlet container."}
{"index": 3176, "repo": "tomcat-api-10.1", "code": "package session;\n\nClass Constants; // Manifest constants for the org.apache.catalina.session package.\nClass DataSourceStore; // Implementation of the Store interface that stores serialized session objects in a database.\nClass FileStore; // Concrete implementation of the Store interface that utilizes a file per saved Session in a configured directory.\nClass ManagerBase; // Minimal implementation of the Manager interface that supports no session persistence or distributable capabilities.\nClass ManagerBase.SessionTiming;\nClass PersistentManager; // Implementation of the Manager interface that makes use of a Store to swap active Sessions to disk.\nClass PersistentManagerBase; // Extends the ManagerBase class to implement most of the functionality required by a Manager which supports any kind of persistence, even if only for restarts.\nClass StandardManager; // Standard implementation of the Manager interface that provides simple session persistence across restarts of this component (such as when the entire server is shut down and restarted, or when a particular web application is reloaded.\nClass StandardSession; // Standard implementation of the Session interface.\nClass StandardSessionFacade; // Facade for the StandardSession object.\nClass StoreBase; // Abstract implementation of the Store interface to support most of the functionality required by a Store.\nClass TooManyActiveSessionsException; // An exception that indicates the maximum number of active sessions has been reached and the server is refusing to create any new sessions.\n", "des": "This package contains the standard Manager and Session implementations that represent the collection of active sessions and the individual sessions themselves, respectively, that are associated with a Context."}
{"index": 3177, "repo": "tomcat-api-10.1", "code": "package ssi;\n\nInterface SSICommand; // The interface that all SSI commands ( SSIEcho, SSIInclude, ...) must implement.\nInterface SSIExternalResolver; // Interface used by SSIMediator to talk to the 'outside world' ( usually a servlet )\nClass ByteArrayServletOutputStream; // Class that extends ServletOutputStream, used as a wrapper from within SsiInclude\nClass ExpressionParseTree; // Represents a parsed expression.\nClass ExpressionTokenizer; // Parses an expression string to return the individual tokens.\nClass ResponseIncludeWrapper; // An HttpServletResponseWrapper, used from SSIServletExternalResolver\nClass SSIConditional; // SSI command that handles all conditional directives.\nClass SSIConfig; // Implements the Server-side #exec command\nClass SSIEcho; // Return the result associated with the supplied Server Variable.\nClass SSIExec; // Implements the Server-side #exec command\nClass SSIFilter; // Filter to process SSI requests within a webpage.\nClass SSIFlastmod; // Implements the Server-side #flastmod command\nClass SSIFsize; // Implements the Server-side #fsize command\nClass SSIInclude; // Implements the Server-side #include command\nClass SSIMediator; // Allows the different SSICommand implementations to share data/talk to each other\nClass SSIPrintenv; // Implements the Server-side #printenv command\nClass SSIProcessor; // The entry point to SSI processing.\nClass SSIServlet; // Servlet to process SSI requests within a webpage.\nClass SSIServletExternalResolver; // An implementation of SSIExternalResolver that is used with servlets.\nClass SSIServletExternalResolver.ServletContextAndPath;\nClass SSIServletRequestUtil;\nClass SSISet; // Implements the Server-side #set command\nClass SSIStopProcessingException; // Exception used to tell SSIProcessor that it should stop processing SSI commands.\n", "des": "This package contains code that is used by the SsiInvoker."}
{"index": 3178, "repo": "tomcat-api-10.1", "code": "package tribes;\n\nInterface Channel; // Channel interface A channel is a representation of a group of nodes all participating in some sort of communication with each other. The channel is the main API class for Tribes, this is essentially the only class that an application needs to be aware of.\nInterface ChannelInterceptor; // A ChannelInterceptor is an interceptor that intercepts messages and membership messages in the channel stack.\nInterface ChannelInterceptor.InterceptorEvent;\nInterface ChannelListener; // An interface to listens to incoming messages from a channel.\nInterface ChannelMessage; // Message that is passed through the interceptor stack after the data serialized in the Channel object and then passed down to the interceptor and eventually down to the ChannelSender component\nInterface ChannelReceiver; // ChannelReceiver Interface The ChannelReceiver interface is the data receiver component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface).\nInterface ChannelSender; // ChannelReceiver Interface The ChannelSender interface is the data sender component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface). The channel sender must support \"silent\" members, ie, be able to send a message to a member that is not in the membership, but is part of the destination parameter\nInterface ErrorHandler; // The ErrorHandler class is used when sending messages that are sent asynchronously and the application still needs to get confirmation when the message was sent successfully or when a message errored out.\nInterface Heartbeat; // Can be implemented by the ChannelListener and Membership listeners to receive heartbeat notifications from the Channel\nInterface JmxChannel;\nInterface ManagedChannel; // Channel interface A managed channel interface gives you access to the components of the channels such as senders, receivers, interceptors etc for configurations purposes\nInterface Member; // The Member interface, defines a member in the group.\nInterface MembershipListener; // The MembershipListener interface is used as a callback to the membership service.\nInterface MembershipProvider;\nInterface MembershipService; // MembershipService Interface The MembershipService interface is the membership component at the bottom layer, the IO layer (for layers see the javadoc for the Channel interface).\nInterface MessageListener; // The listener to be registered with the ChannelReceiver, internal Tribes component.\nClass ByteMessage; // A byte message is not serialized and deserialized by the channel instead it is sent as a byte array By default Tribes uses java serialization when it receives an object to be sent over the wire.\n", "des": "QuickStart"}
{"index": 3179, "repo": "tomcat-api-10.1", "code": "package valves;\n\nInterface AbstractAccessLogValve.AccessLogElement; // AccessLogElement writes the partial message into the buffer.\nInterface AbstractAccessLogValve.CachedElement; // Marks an AccessLogElement as needing to be have the value cached at the start of the request rather than just recorded at the end as the source data for the element may not be available at the end of the request.\nClass AbstractAccessLogValve; // Abstract implementation of the Valve interface that generates a web server access log with the detailed line contents matching a configurable pattern.\nClass AbstractAccessLogValve.ByteSentElement; // write bytes sent, excluding HTTP headers - %b, %B\nClass AbstractAccessLogValve.ConnectionStatusElement; // Write connection status when response is completed - %X\nClass AbstractAccessLogValve.CookieElement; // write a specific cookie - %{xxx}c\nClass AbstractAccessLogValve.DateFormatCache; // Cache structure for formatted timestamps based on seconds.\nClass AbstractAccessLogValve.ElapsedTimeElement; // write time taken to process the request - %D, %T\nClass AbstractAccessLogValve.FirstByteTimeElement; // write time until first byte is written (commit time) in millis - %F\nClass AbstractAccessLogValve.HeaderElement; // write incoming headers - %{xxx}i\nClass AbstractAccessLogValve.HttpStatusCodeElement; // write HTTP status code of the response - %s\nClass AbstractAccessLogValve.LocalAddrElement; // write local IP address - %A\nClass AbstractAccessLogValve.LogicalUserNameElement; // write remote logical username from identd (always returns '-') - %l\nClass AbstractAccessLogValve.MethodElement; // write request method (GET, POST, etc.) - %m\nClass AbstractAccessLogValve.QueryElement; // write Query string (prepended with a '?'\nClass AbstractAccessLogValve.RequestAttributeElement; // write an attribute in the ServletRequest - %{xxx}r\nClass AbstractAccessLogValve.RequestElement; // write first line of the request (method and request URI) - %r\nClass AbstractAccessLogValve.RequestURIElement; // write requested URL path - %U\nClass AbstractAccessLogValve.ResponseHeaderElement; // write a specific response header - %{xxx}o\n", "des": "This package contains a variety of small Valve implementations that do not warrant being packaged separately."}
{"index": 3180, "repo": "tomcat-api-10.1", "code": "package logging;\n\nInterface Log; // A simple logging interface abstracting logging APIs.\nClass LogFactory; // This is a modified LogFactory that uses a simple ServiceLoader based discovery mechanism with a default of using JDK based logging.\nClass LogConfigurationException; // An exception that is thrown only if a suitable LogFactory or Log instance cannot be created by the corresponding factory methods.\n", "des": "Overview"}
{"index": 3181, "repo": "tomcat-api-10.1", "code": "package naming;\n\npackage naming.factory; // This package contains object factories used by the naming service.\npackage naming.java; // This package contains the URL context factory for the \"java\" namespace.\nClass AbstractRef;\nClass ContextAccessController; // Handles the access control on the JNDI contexts.\nClass ContextBindings; // Handles the associations : Object with a NamingContext Calling thread with a NamingContext Calling thread with object bound to the same naming context Thread context class loader with a NamingContext Thread context class loader with object bound to the same NamingContext The objects are typically Catalina Server or Context objects.\nClass EjbRef; // Represents a reference address to an EJB.\nClass HandlerRef; // Represents a reference handler for a web service.\nClass LookupRef; // Represents a reference to lookup.\nClass NameParserImpl; // Parses names.\nClass NamingContext; // Catalina JNDI Context implementation.\nClass NamingContextBindingsEnumeration; // Naming enumeration implementation.\nClass NamingContextEnumeration; // Naming enumeration implementation.\nClass NamingEntry; // Represents a binding in a NamingContext.\nClass ResourceEnvRef; // Represents a reference address to a resource environment.\nClass ResourceLinkRef; // Represents a reference address to a resource.\nClass ResourceRef; // Represents a reference address to a resource.\nClass SelectorContext; // Catalina JNDI Context implementation.\nClass ServiceRef; // Represents a reference web service.\nClass StringManager; // An internationalization / localization helper class which reduces the bother of handling ResourceBundles and takes care of the common cases of message formatting which otherwise require the creation of Object arrays and such.\nClass TransactionRef; // Represents a reference address to a transaction.\n", "des": "This package contains a memory based naming service provider."}
{"index": 3182, "repo": "tomcat-api-10.1", "code": "package factory;\n\nClass BeanFactory; // Object factory for any Resource conforming to the JavaBean spec.\nClass Constants; // Static constants for this package.\nClass DataSourceLinkFactory; // Object factory for resource links for shared data sources.\nClass DataSourceLinkFactory.DataSourceHandler; // Simple wrapper class that will allow a user to configure a ResourceLink for a data source so that when DataSource.getConnection() is called, it will invoke DataSource.getConnection(String, String) with the preconfigured username and password.\nClass EjbFactory; // Object factory for EJBs.\nClass FactoryBase; // Abstract base class that provides common functionality required by sub-classes.\nClass LookupFactory; // Object factory for lookups.\nClass MailSessionFactory; // Factory class that creates a JNDI named JavaMail Session factory, which can be used for managing inbound and outbound electronic mail messages via JavaMail APIs.\nClass OpenEjbFactory; // Object factory for EJBs.\nClass ResourceEnvFactory; // Object factory for Resources env.\nClass ResourceFactory; // Object factory for Resources.\nClass ResourceLinkFactory; // Object factory for resource links.\nClass SendMailFactory; // Factory class that creates a JNDI named javamail MimePartDataSource object which can be used for sending email using SMTP.\nClass TransactionFactory; // Object factory for User transactions.\n", "des": "This package contains object factories used by the naming service."}
{"index": 3183, "repo": "tomcat-api-10.1", "code": "package java;\n\nClass javaURLContextFactory; // Context factory for the \"java:\" namespace.\n", "des": "This package contains the URL context factory for the \"java\" namespace."}
{"index": 3184, "repo": "tomcat-api-10.1", "code": "package dbcp2;\n\npackage dbcp2.cpdsadapter; // This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations.\npackage dbcp2.datasources; // This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool.\npackage dbcp2.managed; // This package provides support for pooling of ManagedConnections.\nInterface BasicDataSourceMXBean; // Interface to keep API compatibility.\nInterface ConnectionFactory; // Abstract factory interface for creating Connections.\nInterface DataSourceMXBean; // Defines the methods that will be made available via JMX.\nInterface PoolableConnectionMXBean; // Defines the attributes and methods that will be exposed via JMX for PoolableConnection instances.\nClass AbandonedTrace; // Tracks connection usage for recovering and reporting abandoned connections.\nClass BasicDataSource; // Basic implementation of javax.sql.DataSource that is configured via JavaBeans properties.\nClass BasicDataSourceFactory; // JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions: connectionInitSqls must be passed to this factory as a single String using semicolon to delimit the statements whereas BasicDataSource requires a collection of Strings.\nClass Constants; // Constants.\nClass DataSourceConnectionFactory; // A DataSource-based implementation of ConnectionFactory.\nClass DelegatingCallableStatement; // A base delegating implementation of CallableStatement.\nClass DelegatingConnection<C extends Connection>; // A base delegating implementation of Connection.\nClass DelegatingDatabaseMetaData; // A base delegating implementation of DatabaseMetaData.\nClass DelegatingPreparedStatement; // A base delegating implementation of PreparedStatement.\nClass DelegatingResultSet; // A base delegating implementation of ResultSet.\nClass DelegatingStatement; // A base delegating implementation of Statement.\nClass DriverConnectionFactory; // A Driver-based implementation of ConnectionFactory.\nClass DriverManagerConnectionFactory; // A DriverManager-based implementation of ConnectionFactory.\nClass Jdbc41Bridge; // Defines bridge methods to JDBC 4.1 (Java 7) methods to allow call sites to operate safely (without AbstractMethodError) when using a JDBC driver written for JDBC 4.0 (Java 6).\n", "des": "Database Connection Pool API."}
{"index": 3185, "repo": "tomcat-api-10.1", "code": "package cpdsadapter;\n\nClass DriverAdapterCPDS; // An adapter for JDBC drivers that do not include an implementation of ConnectionPoolDataSource, but still include a DriverManager implementation.\nClass PStmtKeyCPDS;\n", "des": "This package contains one public class which is a ConnectionPoolDataSource (CPDS) implementation that can be used to adapt older Driver based JDBC implementations."}
{"index": 3186, "repo": "tomcat-api-10.1", "code": "package datasources;\n\nClass InstanceKeyDataSource; // The base class for SharedPoolDataSource and PerUserPoolDataSource.\nClass PerUserPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass PerUserPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\nClass SharedPoolDataSource; // A pooling DataSource appropriate for deployment within J2EE environment.\nClass SharedPoolDataSourceFactory; // A JNDI ObjectFactory which creates SharedPoolDataSources\n", "des": "This package contains two DataSources: PerUserPoolDataSource and SharedPoolDataSource which provide a database connection pool."}
{"index": 3187, "repo": "tomcat-api-10.1", "code": "package managed;\n\nInterface TransactionContextListener; // A listener for transaction completion events.\nInterface XAConnectionFactory; // XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.\nClass BasicManagedDataSource; // BasicManagedDataSource is an extension of BasicDataSource which creates ManagedConnections.\nClass DataSourceXAConnectionFactory; // An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.\nClass LocalXAConnectionFactory; // An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.\nClass LocalXAConnectionFactory.LocalXAResource; // LocalXAResource is a fake XAResource for non-XA connections.\nClass ManagedConnection<C extends Connection>; // ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").\nClass ManagedDataSource<C extends Connection>; // The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.\nClass PoolableManagedConnection; // PoolableConnection that unregisters from TransactionRegistry on Connection real destroy.\nClass PoolableManagedConnectionFactory; // A PoolableConnectionFactory that creates PoolableManagedConnections.\nClass TransactionContext; // TransactionContext represents the association between a single XAConnectionFactory and a Transaction.\nClass TransactionRegistry; // TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.\n", "des": "This package provides support for pooling of ManagedConnections."}
{"index": 3188, "repo": "tomcat-api-10.1", "code": "package pool2;\n\npackage pool2.impl; // Object pooling API implementations.\nInterface KeyedObjectPool<K,​V>; // A \"keyed\" pooling interface.\nInterface KeyedPooledObjectFactory<K,​V>; // An interface defining life-cycle methods for instances to be served by a KeyedObjectPool.\nInterface ObjectPool<T>; // A pooling simple interface.\nInterface PooledObject<T>; // Defines the wrapper that is used to track the additional information, such as state, for the pooled objects.\nInterface PooledObjectFactory<T>; // An interface defining life-cycle methods for instances to be served by an ObjectPool.\nInterface SwallowedExceptionListener; // Pools that unavoidably swallow exceptions may be configured with an instance of this listener so the user may receive notification of when this happens.\nInterface TrackedUse; // Allows pooled objects to make information available about when and how they were used available to the object pool.\nInterface UsageTracking<T>; // This interface may be implemented by an object pool to enable clients (primarily those clients that wrap pools to provide pools with extended features) to provide additional information to the pool relating to object using allowing more informed decisions and reporting to be made regarding abandoned objects.\nClass BaseObject; // A base class for common functionality.\nClass BaseObjectPool<T>; // A simple base implementation of ObjectPool.\nClass PoolUtils; // This class consists exclusively of static methods that operate on or return ObjectPool or KeyedObjectPool related interfaces.\nEnum DestroyMode; // Destroy context provided to object factories via destroyObject and invalidateObject methods.\nEnum PooledObjectState; // Provides all possible states of a PooledObject.\n", "des": "Object pooling API."}
{"index": 3189, "repo": "tomcat-api-10.1", "code": "package impl;\n\nInterface CallStack; // Strategy for obtaining and printing the current call stack.\nInterface DefaultPooledObjectInfoMBean; // The interface that defines the information about pooled objects that will be exposed via JMX.\nInterface EvictionPolicy<T>; // To provide a custom eviction policy (i.e. something other than DefaultEvictionPolicy for a pool, users must provide an implementation of this interface that provides the required eviction policy.\nInterface GenericKeyedObjectPoolMXBean<K>; // Defines the methods that will be made available via JMX.\nInterface GenericObjectPoolMXBean; // Defines the methods that will be made available via JMX.\nClass AbandonedConfig; // Configuration settings for abandoned object removal.\nClass BaseGenericObjectPool<T>; // Base class that provides common functionality for GenericObjectPool and GenericKeyedObjectPool.\nClass BaseObjectPoolConfig<T>; // Provides the implementation for the common attributes shared by the sub-classes.\nClass CallStackUtils; // Utility methods for CallStack.\nClass DefaultEvictionPolicy<T>; // Provides the default implementation of EvictionPolicy used by the pools.\nClass DefaultPooledObject<T>; // This wrapper is used to track the additional information, such as state, for the pooled objects.\nClass DefaultPooledObjectInfo; // Implementation of object that is used to provide information on pooled objects via JMX.\nClass EvictionConfig; // This class is used by pool implementations to pass configuration information to EvictionPolicy instances.\nClass GenericKeyedObjectPool<K,​T>; // A configurable KeyedObjectPool implementation.\nClass GenericKeyedObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericKeyedObjectPool.\nClass GenericObjectPool<T>; // A configurable ObjectPool implementation.\nClass GenericObjectPoolConfig<T>; // A simple \"struct\" encapsulating the configuration for a GenericObjectPool.\nClass NoOpCallStack; // CallStack strategy using no-op implementations of all functionality.\nClass PooledSoftReference<T>; // Extension of DefaultPooledObject to wrap pooled soft references.\nClass SecurityManagerCallStack; // A CallStack strategy using a SecurityManager.\nClass SoftReferenceObjectPool<T>; // A SoftReference based ObjectPool.\n", "des": "Object pooling API implementations."}
{"index": 3190, "repo": "tomcat-api-10.1", "code": "package bcel;\n\npackage bcel.classfile; // This package contains the classes that describe the structure of a Java class file and a class file parser.\nClass Const; // Constants for the project, mostly defined in the JVM specification.\n", "des": "This package contains basic classes for the Byte Code Engineering Library and constants defined by the JVM specification."}
{"index": 3191, "repo": "tomcat-api-10.1", "code": "package classfile;\n\nClass AnnotationElementValue;\nClass AnnotationEntry; // Represents one annotation in the annotation table\nClass Annotations; // base class for annotations\nClass ArrayElementValue;\nClass ClassElementValue;\nClass ClassParser; // Wrapper class that parses a given Java .class file.\nClass Constant; // Abstract superclass for classes to represent the different constant types in the constant pool of a class file.\nClass ConstantClass; // This class is derived from the abstract Constant and represents a reference to a (external) class.\nClass ConstantDouble; // This class is derived from the abstract Constant and represents a reference to a Double object.\nClass ConstantFloat; // This class is derived from the abstract Constant and represents a reference to a float object.\nClass ConstantInteger; // This class is derived from the abstract Constant and represents a reference to an int object.\nClass ConstantLong; // This class is derived from the abstract Constant and represents a reference to a long object.\nClass ConstantPool; // This class represents the constant pool, i.e., a table of constants, of a parsed classfile.\nClass ConstantUtf8; // Extends the abstract Constant to represent a reference to a UTF-8 encoded string.\nClass ElementValue; // The element_value structure is documented at https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7.16.1\nClass ElementValuePair; // An annotation's element value pair.\nClass EnumElementValue;\nClass JavaClass; // Represents a Java class, i.e., the data structures, constant pool, fields, methods and commands contained in a Java .class file.\nClass SimpleElementValue;\nClass ClassFormatException; // Thrown when the BCEL attempts to read a class file and determines that a class is malformed or otherwise cannot be interpreted as a class file.\n", "des": "This package contains the classes that describe the structure of a Java class file and a class file parser."}
{"index": 3192, "repo": "tomcat-api-10.1", "code": "package buf;\n\nInterface ByteChunk.ByteInputChannel; // Input interface, used when the buffer is empty.\nInterface ByteChunk.ByteOutputChannel; // When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.\nInterface CharChunk.CharInputChannel; // Input interface, used when the buffer is empty.\nInterface CharChunk.CharOutputChannel; // When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.\nClass AbstractChunk; // Base class for the *Chunk implementation to reduce duplication.\nClass Ascii; // This class implements some basic ASCII character handling functions.\nClass Asn1Parser; // This is a very basic ASN.1 parser that provides the limited functionality required by Tomcat.\nClass Asn1Writer;\nClass B2CConverter; // NIO based character decoder.\nClass ByteBufferHolder; // Simple wrapper for a ByteBuffer that remembers if the buffer has been flipped or not.\nClass ByteBufferUtils;\nClass ByteChunk; // This class is used to represent a chunk of bytes, and utilities to manipulate byte[].\nClass C2BConverter; // NIO based character encoder.\nClass CharChunk; // Utilities to manipulate char chunks.\nClass CharsetCache;\nClass CharsetUtil;\nClass HexUtils; // Tables useful when converting byte arrays to and from strings of hexadecimal digits.\nClass MessageBytes; // This class is used to represent a subarray of bytes in an HTTP message.\nClass StringCache; // This class implements a String cache for ByteChunk and CharChunk.\nClass StringUtils; // Utility methods to build a separated list from a given set (not java.util.Set) of inputs and return that list as a string or append it to an existing StringBuilder.\nClass UDecoder; // All URL decoding happens here.\nClass UEncoder; // Efficient implementation of a UTF-8 encoder.\nClass UriUtil; // Utility class for working with URIs and URLs.\nClass Utf8Encoder; // Encodes characters as bytes using UTF-8.\nEnum EncodedSolidusHandling;\nEnum UEncoder.SafeCharsSet;\nClass ByteChunk.BufferOverflowException;\n", "des": "Buffers and Encodings"}
{"index": 3193, "repo": "tomcat-api-10.1", "code": "package binary;\n\nClass Base64; // Provides Base64 encoding and decoding as defined by RFC 2045.\nClass BaseNCodec; // Abstract superclass for Base-N encoders and decoders.\nClass StringUtils; // Converts String to and from bytes using the encodings required by the Java specification.\n", "des": "Base64, Base32, Binary, and Hexadecimal String encoding and decoding."}
{"index": 3194, "repo": "tomcat-api-10.1", "code": "package tld;\n\nClass ImplicitTldRuleSet; // RulesSet for digesting implicit.tld files.\nClass TagFileXml; // Bare-bone model of a tag file loaded from a TLD.\nClass TaglibXml; // Common representation of a Tag Library Descriptor (TLD) XML file.\nClass TagXml; // Model of a tag define in a tag library descriptor.\nClass TldParser; // Parses a Tag Library Descriptor.\nClass TldResourcePath; // A TLD Resource Path as defined in JSP 7.3.2.\nClass TldRuleSet; // RulesSet for digesting TLD files.\nClass TldRuleSet.Attribute;\nClass TldRuleSet.Variable;\nClass ValidatorXml; // Model of a Tag Library Validator from the XML descriptor.\n", "des": "Package containing a Java model of the XML for a Tag Library Descriptor."}
{"index": 3195, "repo": "tomcat-api-10.1", "code": "package web;\n\nInterface Injectable;\nInterface NamingResources; // Defines an interface for the object that is added to the representation of a JNDI resource in web.xml to enable it to also be the implementation of that JNDI resource.\nClass ApplicationParameter; // Representation of a context initialization parameter that is configured in the server configuration file, rather than the application deployment descriptor.\nClass Constants;\nClass ContextEjb; // Representation of an EJB resource reference for a web application, as represented in a <ejb-ref> element in the deployment descriptor.\nClass ContextEnvironment; // Representation of an application environment entry, as represented in an <env-entry> element in the deployment descriptor.\nClass ContextHandler; // Representation of a handler reference for a web service, as represented in a <handler> element in the deployment descriptor.\nClass ContextLocalEjb; // Representation of a local EJB resource reference for a web application, as represented in a <ejb-local-ref> element in the deployment descriptor.\nClass ContextResource; // Representation of a resource reference for a web application, as represented in a <resource-ref> element in the deployment descriptor.\nClass ContextResourceEnvRef; // Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.\nClass ContextResourceLink; // Representation of a resource link for a web application, as represented in a <ResourceLink> element in the server configuration file.\nClass ContextService; // Representation of a web service reference for a web application, as represented in a <service-ref> element in the deployment descriptor.\nClass ContextTransaction; // Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.\nClass ErrorPage; // Representation of an error page element for a web application, as represented in a <error-page> element in the deployment descriptor.\nClass FilterDef; // Representation of a filter definition for a web application, as represented in a <filter> element in the deployment descriptor.\nClass FilterMap; // Representation of a filter mapping for a web application, as represented in a <filter-mapping> element in the deployment descriptor.\nClass FragmentJarScannerCallback; // Callback handling a web-fragment.xml descriptor.\nClass InjectionTarget;\nClass JspConfigDescriptorImpl;\n", "des": "This package contains Java objects that represent complex data structures from the web application deployment descriptor file (web.xml)."}
{"index": 3196, "repo": "tomcat-api-10.1", "code": "package digester;\n\nInterface Digester.GeneratedCodeLoader;\nInterface DocumentProperties; // A collection of interfaces, one per property, that enables the object being populated by the digester to signal to the digester that it supports the given property and that the digester should populate that property if available.\nInterface DocumentProperties.Charset; // The character encoding used by the source XML document.\nInterface ObjectCreationFactory; // Interface for use with FactoryCreateRule.\nInterface Rules; // Public interface defining a collection of Rule instances (and corresponding matching patterns) plus an implementation of a matching policy that selects the rules that match a particular pattern of nested elements discovered during parsing.\nInterface RuleSet; // Public interface defining a shorthand means of configuring a complete set of related Rule definitions, possibly associated with a particular namespace URI, in one operation.\nInterface SetPropertiesRule.Listener;\nClass AbstractObjectCreationFactory; // Abstract base class for ObjectCreationFactory implementations.\nClass ArrayStack<E>; // Imported copy of the ArrayStack class from Commons Collections, which was the only direct dependency from Digester.\nClass CallMethodRule; // Rule implementation that calls a method on an object on the stack (normally the top/parent object), passing arguments collected from subsequent CallParamRule rules or from the body of this element.\nClass CallParamRule; // Rule implementation that saves a parameter for use by a surrounding CallMethodRule.\nClass Digester; // A Digester processes an XML input stream by matching a series of element nesting patterns to execute Rules that have been added prior to the start of parsing.\nClass EnvironmentPropertySource; // A IntrospectionUtils.SecurePropertySource that uses environment variables to resolve expressions.\nClass FactoryCreateRule; // Rule implementation that uses an ObjectCreationFactory to create a new object which it pushes onto the object stack.\nClass ObjectCreateRule; // Rule implementation that creates a new object and pushes it onto the object stack.\nClass Rule; // Concrete implementations of this class implement actions to be taken when a corresponding nested pattern of XML elements has been matched.\nClass RulesBase; // Default implementation of the Rules interface that supports the standard rule matching behavior.\nClass ServiceBindingPropertySource; // A IntrospectionUtils.SecurePropertySource that uses Kubernetes service bindings to resolve expressions.\n", "des": "The Digester package provides for rules-based processing of arbitrary XML documents."}
{"index": 3197, "repo": "tomcat-api-10.1", "code": "package file;\n\nInterface ConfigurationSource; // Abstracts configuration file storage.\nClass ConfigFileLoader; // This class is used to obtain InputStreams for configuration files from a given location String.\nClass ConfigurationSource.Resource; // Represents a resource: a stream to the resource associated with its URI.\nClass Matcher; // This is a utility class to match file globs.\n", "des": "This package contains utility classes for file handling."}
{"index": 3198, "repo": "tomcat-api-10.1", "code": "package http;\n\npackage http.fileupload; // NOTE: This code has been copied from commons-fileupload trunk 1.3 and commons-io 1.4 and package renamed to avoid clashes with any web apps that may wish to use these libraries.\nInterface CookieProcessor;\nClass ConcurrentDateFormat; // A thread safe wrapper around SimpleDateFormat that does not make use of ThreadLocal and - broadly - only creates enough SimpleDateFormat objects to satisfy the concurrency requirements.\nClass CookieProcessorBase;\nClass FastHttpDateFormat; // Utility class to generate HTTP dates.\nClass HeaderUtil;\nClass MimeHeaders; // Memory-efficient repository for Mime Headers.\nClass Parameters;\nClass RequestUtil;\nClass ResponseUtil;\nClass Rfc6265CookieProcessor;\nClass ServerCookie; // Server-side cookie representation.\nClass ServerCookies; // This class is not thread-safe.\nEnum Parameters.FailReason;\nEnum SameSiteCookies;\n", "des": "Special utils for handling HTTP-specific entities - headers, parameters, cookies, etc."}
{"index": 3199, "repo": "tomcat-api-10.1", "code": "package fileupload;\n\npackage fileupload.disk; // A disk-based implementation of the FileItem interface.\npackage fileupload.impl; // Implementations and exceptions utils.\npackage fileupload.servlet; // An implementation of FileUpload for use in servlets conforming to JSR 53.\npackage fileupload.util; // This package contains various IO related utility classes or methods, which are basically reusable and not necessarily restricted to the scope of a file upload.\nInterface FileItem; // This class represents a file or form item that was received within a multipart/form-data POST request.\nInterface FileItemFactory; // A factory interface for creating FileItem instances.\nInterface FileItemHeaders; // This class provides support for accessing the headers for a file or form item that was received within a multipart/form-data POST request.\nInterface FileItemHeadersSupport; // Interface that will indicate that FileItem or FileItemStream implementations will accept the headers read for the item.\nInterface FileItemIterator; // An iterator, as returned by FileUploadBase.getItemIterator(RequestContext).\nInterface FileItemStream; // This interface provides access to a file or form item that was received within a multipart/form-data POST request.\nInterface ProgressListener; // The ProgressListener may be used to display a progress bar or do stuff like that.\nInterface RequestContext; // Abstracts access to the request information needed for file uploads.\nInterface UploadContext; // Enhanced access to the request information needed for file uploads, which fixes the Content Length data access in RequestContext.\nClass ByteArrayOutputStream; // This class implements an output stream in which the data is written into a byte array.\nClass DeferredFileOutputStream; // An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.\nClass FileUpload; // High level API for processing file uploads.\nClass FileUploadBase; // High level API for processing file uploads.\nClass FileUtils; // General file manipulation utilities.\nClass IOUtils; // General IO stream manipulation utilities.\nClass MultipartStream; // Low level API for processing file uploads.\nClass MultipartStream.ProgressNotifier; // Internal class, which is used to invoke the ProgressListener.\nClass ParameterParser; // A simple parser intended to parse sequences of name/value pairs.\nClass ThresholdingOutputStream; // An output stream which triggers an event when a specified number of bytes of data have been written to it.\n", "des": "NOTE: This code has been copied from commons-fileupload trunk 1.3 and commons-io 1.4 and package renamed to avoid clashes with any web apps that may wish to use these libraries."}
{"index": 3200, "repo": "tomcat-api-10.1", "code": "package disk;\n\nClass DiskFileItem; // The default implementation of the FileItem interface.\nClass DiskFileItemFactory; // The default FileItemFactory implementation.\n", "des": "A disk-based implementation of the FileItem interface."}
{"index": 3201, "repo": "tomcat-api-10.1", "code": "package impl;\n\nClass FileItemIteratorImpl; // The iterator, which is returned by FileUploadBase.getItemIterator(RequestContext).\nClass FileItemStreamImpl; // Default implementation of FileItemStream.\nClass FileCountLimitExceededException; // This exception is thrown if a request contains more files than the specified limit.\nClass FileSizeLimitExceededException; // Thrown to indicate that A files size exceeds the configured maximum.\nClass FileUploadIOException; // This exception is thrown for hiding an inner FileUploadException in an IOException.\nClass InvalidContentTypeException; // Thrown to indicate that the request is not a multipart request.\nClass IOFileUploadException; // Thrown to indicate an IOException.\nClass SizeException; // This exception is thrown, if a requests permitted size is exceeded.\nClass SizeLimitExceededException; // Thrown to indicate that the request size exceeds the configured maximum.\n", "des": "Implementations and exceptions utils."}
{"index": 3202, "repo": "tomcat-api-10.1", "code": "package servlet;\n\nClass ServletRequestContext; // Provides access to the request information needed for a request made to an HTTP servlet.\n", "des": "An implementation of FileUpload for use in servlets conforming to JSR 53."}
{"index": 3203, "repo": "tomcat-api-10.1", "code": "package util;\n\npackage util.mime; // MIME decoder implementation, imported and retailed from Apache Geronimo.\nInterface Closeable; // Interface of an object, which may be closed.\nClass FileItemHeadersImpl; // Default implementation of the FileItemHeaders interface.\nClass LimitedInputStream; // An input stream, which limits its data size.\nClass Streams; // Utility class for working with streams.\n", "des": "This package contains various IO related utility classes or methods, which are basically reusable and not necessarily restricted to the scope of a file upload."}
{"index": 3204, "repo": "tomcat-api-10.1", "code": "package mime;\n\nClass MimeUtility; // Utility class to decode MIME texts.\nClass RFC2231Utility; // Utility class to decode/encode character set on HTTP Header fields based on RFC 2231.\n", "des": "MIME decoder implementation, imported and retailed from Apache Geronimo."}
{"index": 3205, "repo": "tomcat-api-10.1", "code": "package modeler;\n\npackage modeler.modules; // Implementation classes - should not be used directly.\nInterface RegistryMBean; // Interface for modeler MBeans.\nClass AttributeInfo; // Internal configuration information for an Attribute descriptor.\nClass BaseAttributeFilter; // Implementation of NotificationFilter for attribute change notifications.\nClass BaseModelMBean; // Basic implementation of the DynamicMBean interface, which supports the minimal requirements of the interface contract.\nClass BaseNotificationBroadcaster; // Implementation of NotificationBroadcaster for attribute change notifications.\nClass FeatureInfo; // Convenience base class for AttributeInfo and OperationInfo classes that will be used to collect configuration information for the ModelMBean beans exposed for management.\nClass ManagedBean; // Internal configuration information for a managed bean (MBean) descriptor.\nClass NoDescriptorRegistry; // An implementation of the MBean registry that effectively disables MBean registration.\nClass NotificationInfo; // Internal configuration information for a Notification descriptor.\nClass OperationInfo; // Internal configuration information for an Operation descriptor.\nClass ParameterInfo; // Internal configuration information for a Parameter descriptor.\nClass Registry; // Registry for modeler MBeans.\nClass Util;\n", "des": "The Modeler component of the Commons project offers convenient support for configuring and instantiating Model MBeans (management beans), as described in the JMX Specification."}
{"index": 3206, "repo": "tomcat-api-10.1", "code": "package modules;\n\nClass MbeansDescriptorsDigesterSource;\nClass MbeansDescriptorsIntrospectionSource;\nClass ModelerSource; // Source for descriptor data.\n", "des": "Implementation classes - should not be used directly."}
{"index": 3207, "repo": "tomcat-api-10.1", "code": "package scan;\n\nClass AbstractInputStreamJar; // Base implementation of Jar for implementations that use a JarInputStream to access the JAR file.\nClass Constants; // String constants for the scan package.\nClass JarFactory; // Provide a mechanism to obtain objects that implement Jar.\nClass JarFileUrlJar; // Implementation of Jar that is optimised for file based JAR URLs that refer directly to a JAR file (e.g URLs of the form jar:file: ... .jar!\nClass JarFileUrlNestedJar; // Implementation of Jar that is optimised for file based JAR URLs that refer to a JAR file nested inside a WAR (e.g URLs of the form jar:file: ... .war!\nClass NonClosingJarInputStream; // When using a JarInputStream with an XML parser, the stream will be closed by the parser.\nClass ReferenceCountedJar; // This class provides a wrapper around Jar that uses reference counting to close and re-create the wrapped Jar instance as required.\nClass StandardJarScanFilter;\nClass StandardJarScanner; // The default JarScanner implementation scans the WEB-INF/lib directory followed by the provided classloader and then works up the classloader hierarchy.\nClass UrlJar; // Implementation of Jar that is optimised for non-file based JAR URLs.\n", "des": "This package contains the common classes used to perform configuration scanning for Catalina and Jasper."}
{"index": 3208, "repo": "tomcat-api-10.1", "code": "package pojo;\n\nClass Constants; // Internal implementation constants.\nClass PojoEndpointBase; // Base implementation (client and server have different concrete implementations) of the wrapper that converts a POJO instance into a WebSocket endpoint instance.\nClass PojoEndpointClient; // Wrapper class for instances of POJOs annotated with ClientEndpoint so they appear as standard Endpoint instances.\nClass PojoEndpointServer; // Wrapper class for instances of POJOs annotated with ServerEndpoint so they appear as standard Endpoint instances.\nClass PojoMessageHandlerBase<T>; // Common implementation code for the POJO message handlers.\nClass PojoMessageHandlerPartialBase<T>; // Common implementation code for the POJO partial message handlers.\nClass PojoMessageHandlerPartialBinary; // ByteBuffer specific concrete implementation for handling partial messages.\nClass PojoMessageHandlerPartialText; // Text specific concrete implementation for handling partial messages.\nClass PojoMessageHandlerWholeBase<T>; // Common implementation code for the POJO whole message handlers.\nClass PojoMessageHandlerWholeBinary; // ByteBuffer specific concrete implementation for handling whole messages.\nClass PojoMessageHandlerWholePong; // PongMessage specific concrete implementation for handling whole messages.\nClass PojoMessageHandlerWholeText; // Text specific concrete implementation for handling whole messages.\nClass PojoMethodMapping; // For a POJO class annotated with ServerEndpoint, an instance of this class creates and caches the method handler, method information and parameter information for the onXXX calls.\nClass PojoPathParam; // Stores the parameter type and name for a parameter that needs to be passed to an onXxx method of Endpoint.\n", "des": "This package provides the necessary plumbing to convert an annotated POJO into a WebSocket Endpoint."}
{"index": 3209, "repo": "tomcat-api-10.1", "code": "package server;\n\nClass Constants; // Internal implementation constants.\nClass DefaultServerEndpointConfigurator;\nClass UpgradeUtil;\nClass UriTemplate; // Extracts path parameters from URIs used to create web socket connections using the URI template defined for the associated Endpoint.\nClass WsContextListener; // In normal usage, this ServletContextListener does not need to be explicitly configured as the WsSci performs all the necessary bootstrap and installs this listener in the ServletContext.\nClass WsFilter; // Handles the initial HTTP connection for WebSocket connections.\nClass WsFrameServer;\nClass WsHandshakeRequest; // Represents the request that this session was opened under.\nClass WsHttpUpgradeHandler; // Servlet 3.1 HTTP upgrade handler for WebSocket connections.\nClass WsRemoteEndpointImplServer; // This is the server side RemoteEndpoint implementation - i.e. what the server uses to send data to the client.\nClass WsSci; // Registers an interest in any class that is annotated with ServerEndpoint so that Endpoint can be published via the WebSocket server.\nClass WsServerContainer; // Provides a per class loader (i.e. per web application) instance of a ServerContainer.\nClass WsSessionListener;\nClass WsWriteTimeout; // Provides timeouts for asynchronous web socket writes.\n", "des": "Server-side specific implementation classes."}
{"index": 3210, "repo": "tomcat-servletapi-10.1", "code": "package servlet;\n\npackage servlet.http; // The jakarta.servlet.http package contains a number of classes and interfaces that describe and define the contracts between a servlet class running under the HTTP protocol and the runtime environment provided for an instance of such a class by a conforming servlet container.\nInterface AsyncContext; // Provides the context for asynchronous request handling\nInterface AsyncListener; // Listener for events associated with an AsyncContext.\nInterface Filter; // A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.\nInterface FilterChain; // A FilterChain is an object provided by the servlet container to the developer giving a view into the invocation chain of a filtered request for a resource.\nInterface FilterConfig; // A filter configuration object used by a servlet container to pass information to a filter during initialization.\nInterface FilterRegistration; // Interface through which a Filter may be further configured.\nInterface FilterRegistration.Dynamic; // Interface through which a Filter registered via one of the addFilter methods on ServletContext may be further configured.\nInterface ReadListener; // Receives notification of read events when using non-blocking IO.\nInterface Registration; // Common interface for the registration of Filters and Servlets.\nInterface Registration.Dynamic; // Interface through which a Servlet or Filter registered via one of the addServlet or addFilter methods, respectively, on ServletContext may be further configured.\nInterface RequestDispatcher; // Defines an object that receives requests from the client and sends them to any resource (such as a servlet, HTML file, or JSP file) on the server.\nInterface Servlet; // Defines methods that all servlets must implement.\nInterface ServletConfig; // A servlet configuration object used by a servlet container to pass information to a servlet during initialization.\nInterface ServletConnection; // Provides information about the connection made to the Servlet container.\nInterface ServletContainerInitializer; // ServletContainerInitializers (SCIs) are registered via an entry in the file META-INF/services/jakarta.servlet.ServletContainerInitializer that must be included in the JAR file that contains the SCI implementation.\nInterface ServletContext; // Defines a set of methods that a servlet uses to communicate with its servlet container, for example, to get the MIME type of a file, dispatch requests, or write to a log file.\n", "des": "The jakarta.servlet package contains a number of classes and interfaces that describe and define the contracts between a servlet class and the runtime environment provided for an instance of such a class by a conforming servlet container."}
{"index": 3211, "repo": "tomcat-servletapi-10.1", "code": "package http;\n\nInterface HttpServletMapping; // Represents how the request from which this object was obtained was mapped to the associated servlet.\nInterface HttpServletRequest; // Extends the ServletRequest interface to provide request information for HTTP servlets.\nInterface HttpServletResponse; // Extends the ServletResponse interface to provide HTTP-specific functionality in sending a response.\nInterface HttpSession; // Provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.\nInterface HttpSessionActivationListener; // Objects that are bound to a session may listen to container events notifying them that sessions will be passivated and that session will be activated.\nInterface HttpSessionAttributeListener; // This listener interface can be implemented in order to get notifications of changes to the attribute lists of sessions within this web application.\nInterface HttpSessionBindingListener; // Causes an object to be notified when it is bound to or unbound from a session.\nInterface HttpSessionIdListener; // Implementations of this interface are notified when an HttpSession's ID changes.\nInterface HttpSessionListener; // Implementations of this interface are notified of changes to the list of active sessions in a web application.\nInterface HttpUpgradeHandler; // Interface between the HTTP upgrade process and the new protocol.\nInterface Part; // This class represents a part as uploaded to the server as part of a multipart/form-data request body.\nInterface PushBuilder; // Builds a push request based on the HttpServletRequest from which this builder was obtained.\nInterface WebConnection; // The interface used by an HttpUpgradeHandler to interact with an upgraded HTTP connection.\nClass Cookie; // Creates a cookie, a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server.\nClass HttpFilter; // Provides a base class that implements the Filter interface and ensures that the Request and Response are of type HttpServletRequest and HttpServletResponse respectively.\nClass HttpServlet; // Provides an abstract class to be subclassed to create an HTTP servlet suitable for a Web site.\nClass HttpServletRequestWrapper; // Provides a convenient implementation of the HttpServletRequest interface that can be subclassed by developers wishing to adapt the request to a Servlet.\nClass HttpServletResponseWrapper; // Provides a convenient implementation of the HttpServletResponse interface that can be subclassed by developers wishing to adapt the response from a Servlet.\n", "des": "The jakarta.servlet.http package contains a number of classes and interfaces that describe and define the contracts between a servlet class running under the HTTP protocol and the runtime environment provided for an instance of such a class by a conforming servlet container."}
{"index": 3212, "repo": "commons-configuration2-2.9.0", "code": "package configuration2;\n\npackage configuration2.beanutils; // In this package a Configuration implementation can be found that implements the DynaBean interface.\npackage configuration2.builder; // This package contains the implementations of configuration builder classes used to create new Configuration objects.\npackage configuration2.convert; // This package contains interfaces and classes related to data type conversions.\npackage configuration2.event; // This package contains interfaces and classes for receiving notifications about changes at configurations.\npackage configuration2.ex; // This package contains all exception classes used by this library.\npackage configuration2.interpol; // A package with helper classes used for interpolation (variable substitution).\npackage configuration2.io; // A package with classes related to I/O operations.\npackage configuration2.plist; // Configuration classes supporting NeXT / OpenStep /GNUStep style configuration.\npackage configuration2.reloading; // This package contains classes and interfaces related to the reloading mechanism.\npackage configuration2.resolver; // A package containing EntityResolvers.\npackage configuration2.spring; // A package containing integrations for the Spring Framework.\npackage configuration2.sync; // A package containing interfaces and classes related to synchronization of configurations.\npackage configuration2.tree; // A package with helper and utility classes used by hierarchical configurations.\npackage configuration2.web; // This package contains some implementations of the Configuration interface that are useful in web environments.\nInterface Configuration; // The main Configuration interface.\nInterface ConfigurationComparator; // Comparator for configurations interface.\nInterface ConfigurationConsumer<T>; // A Configuration task that may throw a ConfigurationException.\nInterface ConfigurationDecoder; // An interface for decoding encoded values from a configuration source.\nInterface FileBasedConfiguration; // An interface which combines the FileBased and Configuration interfaces.\nInterface HierarchicalConfiguration<T>; // An interface for mutable hierarchical configurations.\nInterface ImmutableConfiguration; // The main interface for accessing configuration data in a read-only fashion.\nInterface ImmutableHierarchicalConfiguration; // An interface for immutable hierarchical configurations.\nInterface Initializable; // Definition of an interface to be implemented by Configuration implementations which support a special initialization method.\nInterface PropertiesConfiguration.IOFactory; // Definition of an interface that allows customization of read and write operations.\nClass AbstractConfiguration; // Abstract configuration class.\n", "des": "The Configuration main package."}
{"index": 3213, "repo": "commons-configuration2-2.9.0", "code": "package beanutils;\n\nInterface BeanCreationContext; // Definition of a context object storing all required information for the creation of a bean.\nInterface BeanDeclaration; // Definition of an interface for declaring a bean in a configuration file.\nInterface BeanFactory; // Definition of an interface for bean factories.\nClass BeanHelper; // A helper class for creating bean instances that are defined in configuration files.\nClass CombinedBeanDeclaration; // A special implementation of the BeanDeclaration interface which allows combining multiple BeanDeclaration objects.\nClass ConfigurationDynaBean; // The ConfigurationDynaBean dynamically reads and writes configurations properties from a wrapped configuration-collection Configuration instance.\nClass ConfigurationDynaClass; // The ConfigurationDynaClass dynamically determines properties for a ConfigurationDynaBean from a wrapped configuration-collection Configuration instance.\nClass ConstructorArg; // A class representing an argument for a constructor invocation to be used by a BeanDeclaration.\nClass DefaultBeanFactory; // The default implementation of the BeanFactory interface.\nClass XMLBeanDeclaration; // An implementation of the BeanDeclaration interface that is suitable for XML configuration files.\n", "des": "In this package a Configuration implementation can be found that implements the DynaBean interface."}
{"index": 3214, "repo": "commons-configuration2-2.9.0", "code": "package builder;\n\npackage builder.combined; // A package containing the implementation of the builder for combined configurations.\npackage builder.fluent; // This package defines a fluent API for setting up fully configured configuration builders.\nInterface BasicBuilderProperties<T>; // Definition of a properties interface for basic parameters which are supported by all ConfigurationBuilder implementations derived from BasicConfigurationBuilder.\nInterface BuilderParameters; // An interface to be implemented by objects which can be used to parameterize a ConfigurationBuilder.\nInterface ConfigurationBuilder<T extends ImmutableConfiguration>; // Definition of an interface for objects that can create ImmutableConfiguration or Configuration objects of a specific type.\nInterface DatabaseBuilderProperties<T>; // Definition of a properties interface for parameters of a database configuration.\nInterface DefaultParametersHandler<T>; // Definition of an interface for setting default values for specific configuration parameter objects.\nInterface EventListenerProvider; // Definition of an interface that is evaluated by a ConfigurationBuilder to initialize event listeners.\nInterface FileBasedBuilderProperties<T>; // Definition of a properties interface for parameters of file-based configurations.\nInterface HierarchicalBuilderProperties<T>; // Definition of a parameters interface for hierarchical configurations.\nInterface INIBuilderProperties<T>; // Definition of a parameters interface for INI configurations.\nInterface JndiBuilderProperties<T>; // Definition of a properties interface for parameters of a JNDI configuration.\nInterface PropertiesBuilderProperties<T>; // Definition of a parameters interface for properties configurations.\nInterface ReloadingDetectorFactory; // Definition of an interface for objects which can create a ReloadingDetector.\nInterface XMLBuilderProperties<T>; // Definition of a parameters interface for XML configurations.\nClass BasicBuilderParameters; // An implementation of BuilderParameters which handles the parameters of a ConfigurationBuilder common to all concrete Configuration implementations.\nClass BasicConfigurationBuilder<T extends ImmutableConfiguration>; // An implementation of the ConfigurationBuilder interface which is able to create different concrete ImmutableConfiguration implementations based on reflection.\nClass BuilderConfigurationWrapperFactory; // A class that allows the creation of configuration objects wrapping a ConfigurationBuilder.\nClass ConfigurationBuilderEvent; // A base event class for events generated by a ConfigurationBuilder.\nClass ConfigurationBuilderResultCreatedEvent; // A specialized event class which is generated by a ConfigurationBuilder when a result configuration has been created.\n", "des": "This package contains the implementations of configuration builder classes used to create new Configuration objects."}
{"index": 3215, "repo": "commons-configuration2-2.9.0", "code": "package combined;\n\nInterface CombinedBuilderProperties<T>; // Definition of a properties interface for the parameters of a combined configuration builder.\nInterface ConfigurationBuilderProvider; // An interface for creating builders for configuration sources of a CombinedConfigurationBuilder.\nInterface MultiFileBuilderProperties<T>; // Definition of a properties interface for the parameters of a multiple file configuration builder.\nClass BaseConfigurationBuilderProvider; // A fully-functional, reflection-based implementation of the ConfigurationBuilderProvider interface which can deal with the default tags defining configuration sources.\nClass CombinedBuilderParametersImpl; // A specialized parameters object for a CombinedConfigurationBuilder.\nClass CombinedConfigurationBuilder; // A specialized ConfigurationBuilder implementation that creates a CombinedConfiguration from multiple configuration sources defined by an XML-based configuration definition file.\nClass CombinedConfigurationBuilderProvider; // A specialized ConfigurationBuilderProvider implementation which deals with combined configuration builders.\nClass ConfigurationDeclaration; // A specialized BeanDeclaration implementation that represents the declaration of a configuration source.\nClass FileExtensionConfigurationBuilderProvider; // A specialized implementation of ConfigurationBuilderProvider which determines the name of the result configuration class based on the extension of the file to load.\nClass MultiFileBuilderParametersImpl; // A specialized parameters object for MultiFileConfigurationBuilder.\nClass MultiFileConfigurationBuilder<T extends FileBasedConfiguration>; // A specialized ConfigurationBuilder implementation providing access to multiple file-based configurations based on a file name pattern.\nClass MultiFileConfigurationBuilderProvider; // A specialized ConfigurationBuilderProvider implementation for integrating MultiFileConfigurationBuilder with CombinedConfigurationBuilder.\nClass ReloadingCombinedConfigurationBuilder; // An extension of CombinedConfigurationBuilder which also supports reloading operations.\nClass ReloadingMultiFileConfigurationBuilder<T extends FileBasedConfiguration>; // A specialized MultiFileConfigurationBuilder implementation which adds support for reloading.\n", "des": "A package containing the implementation of the builder for combined configurations."}
{"index": 3216, "repo": "commons-configuration2-2.9.0", "code": "package fluent;\n\nInterface CombinedBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a builder for a combined configuration.\nInterface DatabaseBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a database configuration.\nInterface FileBasedBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a configuration of a file-based configuration builder.\nInterface HierarchicalBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a hierarchical configuration.\nInterface INIBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a INI configuration.\nInterface JndiBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a JNDI configuration.\nInterface MultiFileBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties of a builder managing multiple file-based configurations.\nInterface PropertiesBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a properties configuration.\nInterface XMLBuilderParameters; // Definition of a parameters interface providing a fluent API for setting all properties for a XML configuration.\nClass Configurations; // A convenience class which simplifies the creation of standard configurations and their builders.\nClass Parameters; // A convenience class for creating parameter objects for initializing configuration builder objects.\n", "des": "This package defines a fluent API for setting up fully configured configuration builders."}
{"index": 3217, "repo": "commons-configuration2-2.9.0", "code": "package convert;\n\nInterface ConversionHandler; // An interface defining the possible data type conversions supported by the configuration framework.\nInterface ListDelimiterHandler; // Definition of an interface that controls the handling of list delimiters in configuration properties.\nInterface ValueTransformer; // Definition of an interface used by ListDelimiterHandler to perform additional transformations on behalf of a configuration when a property value is escaped.\nClass AbstractListDelimiterHandler; // An abstract base class for concrete ListDelimiterHandler implementations.\nClass DefaultConversionHandler; // A default implementation of the ConversionHandler interface.\nClass DefaultListDelimiterHandler; // The default implementation of the ListDelimiterHandler interface.\nClass DisabledListDelimiterHandler; // A specialized implementation of the ListDelimiterHandler interface which disables list splitting.\nClass LegacyListDelimiterHandler; // A specialized implementation of ListDelimiterHandler which simulates the list delimiter handling as it was used by PropertiesConfiguration in Commons Configuration 1.x.\nClass PropertyConverter; // A utility class to convert the configuration properties into any type.\n", "des": "This package contains interfaces and classes related to data type conversions."}
{"index": 3218, "repo": "commons-configuration2-2.9.0", "code": "package event;\n\nInterface EventListener<T extends Event>; // Definition of a generic event listener interface.\nInterface EventSource; // An interface for configuration implementations which support registration of event listeners.\nClass BaseEventSource; // A base class for objects that can generate configuration events.\nClass ConfigurationErrorEvent; // An event class that is used for reporting errors that occurred while processing configuration properties.\nClass ConfigurationEvent; // An event class for reporting updates on a configuration object.\nClass Event; // The base class for all events generated by this library.\nClass EventListenerList; // A class for managing event listeners for an event source.\nClass EventListenerList.EventListenerIterator<T extends Event>; // A special Iterator implementation used by the getEventListenerIterator() method.\nClass EventListenerRegistrationData<T extends Event>; // A data class holding information about an event listener registration.\nClass EventType<T extends Event>; // A class representing an event type.\n", "des": "This package contains interfaces and classes for receiving notifications about changes at configurations."}
{"index": 3219, "repo": "commons-configuration2-2.9.0", "code": "package ex;\n\nClass ConfigurationException; // Any exception that occurs while initializing a Configuration object.\nClass ConfigurationRuntimeException; // A configuration related runtime exception.\nClass ConversionException; // Thrown when a property is incompatible with the type requested.\n", "des": "This package contains all exception classes used by this library."}
{"index": 3220, "repo": "commons-configuration2-2.9.0", "code": "package interpol;\n\nInterface Lookup; // Definition of an interface for looking up variables during interpolation.\nClass ConfigurationInterpolator; // A class that handles interpolation (variable substitution) for configuration objects.\nClass ConstantLookup; // Looks up constant fields in classes.\nClass EnvironmentLookup;\nClass ExprLookup; // Lookup that allows expressions to be evaluated.\nClass ExprLookup.Variable; // The key and corresponding object that will be made available to the JexlContext for use in expressions.\nClass ExprLookup.Variables; // List wrapper used to allow the Variables list to be created as beans in DefaultConfigurationBuilder.\nClass InterpolatorSpecification; // A simple value class defining a ConfigurationInterpolator.\nClass InterpolatorSpecification.Builder; // A builder class for creating instances of InterpolatorSpecification.\nClass SystemPropertiesLookup;\nEnum DefaultLookups; // An enumeration class defining constants for built-in Lookup objects available for Configuration instances.\nEnum DummyLookup; // A simple dummy Lookup implementation.\n", "des": "A package with helper classes used for interpolation (variable substitution)."}
{"index": 3221, "repo": "commons-configuration2-2.9.0", "code": "package io;\n\nInterface FileBased; // Definition of an interface to be implemented by objects which know how to read and write themselves from or to a character stream.\nInterface FileHandlerListener; // A listener interface for receiving notifications about updates of a FileHandler.\nInterface FileLocationStrategy; // An interface allowing applications to customize the process of locating a file.\nInterface FileLocatorAware; // Definition of an interface to be implemented by FileBased objects which need access to the current FileLocator.\nInterface FileOptionsProvider; // Some FileSystems allow options to be passed on File operations.\nInterface InputStreamSupport; // Definition of an interface to be implemented by objects which support reading from an input stream.\nClass AbsoluteNameLocationStrategy; // A specialized implementation of FileLocationStrategy which checks whether the provided file name is already an absolute file name.\nClass BasePathLocationStrategy; // A specialized implementation of FileLocationStrategy which tries to construct a file path from the locator's base path and file name.\nClass ClasspathLocationStrategy; // A specialized FileLocationStrategy implementation which searches for files on the class path.\nClass CombinedLocationStrategy; // A specialized implementation of a FileLocationStrategy which encapsulates an arbitrary number of FileLocationStrategy objects.\nClass ConfigurationLogger; // A class providing basic logging capabilities.\nClass DefaultFileSystem; // FileSystem that uses java.io.File or HttpClient.\nClass FileHandler; // A class that manages persistence of an associated FileBased object.\nClass FileHandlerListenerAdapter; // An adapter class simplifying the implementation of custom FileHandlerListener classes.\nClass FileLocator; // A class describing the location of a file.\nClass FileLocator.FileLocatorBuilder; // A typical builder implementation for creating FileLocator objects.\nClass FileLocatorUtils; // A utility class providing helper methods related to locating files.\nClass FileSystem; // Abstract layer to allow various types of file systems.\nClass FileSystemLocationStrategy; // A specialized implementation of FileLocationStrategy which uses the passed in FileSystem to locate a file.\nClass HomeDirectoryLocationStrategy; // A specialized implementation of FileLocationStrategy which searches for files in the user's home directory or another special configurable directory.\nClass ProvidedURLLocationStrategy; // A specialized implementation of FileLocationStrategy which checks whether a passed in FileLocator already has a defined URL.\nClass URLConnectionOptions; // Carries options and operates on URLConnection.\n", "des": "A package with classes related to I/O operations."}
{"index": 3222, "repo": "commons-configuration2-2.9.0", "code": "package plist;\n\nInterface PropertyListParserConstants; // Token literal values and constants.\nClass PropertyListConfiguration; // NeXT / OpenStep style configuration.\nClass PropertyListParserTokenManager; // Token Manager.\nClass SimpleCharStream; // An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).\nClass Token; // Describes the input token stream.\nClass XMLPropertyListConfiguration; // Property list file (plist) in XML FORMAT as used by Mac OS X (http://www.apple.com/DTDs/PropertyList-1.0.dtd).\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Configuration classes supporting NeXT / OpenStep /GNUStep style configuration."}
{"index": 3223, "repo": "commons-configuration2-2.9.0", "code": "package reloading;\n\nInterface ManagedReloadingDetectorMBean; // MBean definition for managing configuration reload.\nInterface ReloadingControllerSupport; // Definition of an interface to be implemented by components which support reloading operations managed by a ReloadingController.\nInterface ReloadingDetector; // An interface to be implemented by objects which can detect whether a reload operation is required.\nClass CombinedReloadingController; // A specialized ReloadingController implementation which manages an arbitrary number of other ReloadingController objects.\nClass FileHandlerReloadingDetector; // A specialized implementation of ReloadingDetector which monitors a file specified by a FileHandler.\nClass ManagedReloadingDetector; // A strategy to reload configuration based on management requests.\nClass PeriodicReloadingTrigger; // A timer-based trigger for reloading checks.\nClass ReloadingController; // A class for adding support for reload operations in a generic way.\nClass ReloadingEvent; // An event that is fired when a reload operation is required.\nClass VFSFileHandlerReloadingDetector; // A file-based reloading strategy that uses Commons VFS to determine when a file was changed.\n", "des": "This package contains classes and interfaces related to the reloading mechanism."}
{"index": 3224, "repo": "commons-configuration2-2.9.0", "code": "package resolver;\n\nInterface EntityRegistry; // Interface used for registering and retrieving PUBLICID to URL mappings.\nInterface EntityResolverSupport; // Interface that identifies the class as using an EntityResolver\nClass CatalogResolver; // Thin wrapper around xml commons CatalogResolver to allow list of catalogs to be provided.\nClass CatalogResolver.Catalog; // Overrides the Catalog implementation to use the underlying FileSystem.\nClass CatalogResolver.CatalogManager; // Extends the CatalogManager to make the FileSystem and base directory accessible.\nClass DefaultEntityResolver; // The DefaultEntityResolver used by XML Configurations.\n", "des": "A package containing EntityResolvers."}
{"index": 3225, "repo": "commons-configuration2-2.9.0", "code": "package spring;\n\nClass ConfigurationPropertiesFactoryBean; // FactoryBean which wraps a Commons CompositeConfiguration object for usage with PropertiesLoaderSupport.\nClass ConfigurationPropertySource; // Allow use of Apache Commons Configuration Objects as Spring PropertySources\n", "des": "A package containing integrations for the Spring Framework."}
{"index": 3226, "repo": "commons-configuration2-2.9.0", "code": "package sync;\n\nInterface Synchronizer; // An interface controlling synchronization of configuration instances.\nInterface SynchronizerSupport; // Definition of an interface for objects that can be associated with a Synchronizer.\nClass ReadWriteSynchronizer; // A special implementation of Synchronizer based on the JDK's ReentrantReadWriteLock class.\nEnum LockMode; // An enumeration used by SynchronizerSupport to specify how an object is locked.\nEnum NoOpSynchronizer; // An implementation of the Synchronizer interface which does not perform any synchronization.\n", "des": "A package containing interfaces and classes related to synchronization of configurations."}
{"index": 3227, "repo": "commons-configuration2-2.9.0", "code": "package tree;\n\npackage tree.xpath; // This package contains the XPathExpressionEngine class which enables XPATH support for querying configuration properties.\nInterface ConfigurationNodeVisitor<T>; // Definition of a Visitor interface for a configuration node structure.\nInterface ExpressionEngine; // Definition of an interface for evaluating keys for hierarchical configurations.\nInterface InMemoryNodeModelSupport; // A specialized version of the NodeModelSupport interface which allows querying an InMemoryNodeModel.\nInterface NodeHandler<T>; // Definition of an interface for accessing the data of a configuration node.\nInterface NodeKeyResolver<T>; // Definition of an interface which allows resolving a (property) key for different manipulating operations.\nInterface NodeMatcher<C>; // An interface for matching nodes based on specific criteria.\nInterface NodeModel<T>; // Definition of an interface describing a model based on a nodes structure.\nInterface NodeModelSupport<T>; // An interface to be implemented by objects that support a NodeModel.\nInterface ReferenceNodeHandler; // An extension of the NodeHandler interface which allows access to so-called references stored for a node.\nClass ConfigurationNodeVisitorAdapter<T>; // A simple adapter class that simplifies writing custom node visitor implementations.\nClass DefaultConfigurationKey; // A simple class that supports creation of and iteration on configuration keys supported by a DefaultExpressionEngine object.\nClass DefaultExpressionEngine; // A default implementation of the ExpressionEngine interface providing the \"native\" expression language for hierarchical configurations.\nClass DefaultExpressionEngineSymbols; // A class representing the various symbols that are supported in keys recognized by DefaultExpressionEngine.\nClass DefaultExpressionEngineSymbols.Builder; // A builder class for creating instances of DefaultExpressionEngineSymbols.\nClass ImmutableNode; // An immutable default implementation for configuration nodes.\nClass ImmutableNode.Builder; // A builder class for creating instances of ImmutableNode.\nClass InMemoryNodeModel; // A specialized node model implementation which operates on ImmutableNode structures.\nClass MergeCombiner; // A specialized implementation of the NodeCombiner interface that performs a merge from two passed in node hierarchies.\nClass NodeAddData<T>; // A simple data class used by ExpressionEngine to store the results of the prepareAdd() operation.\nClass NodeCombiner; // A base class for node combiner implementations.\nClass NodeHandlerDecorator<T>; // An abstract base class for decorators of a NodeHandler.\n", "des": "A package with helper and utility classes used by hierarchical configurations."}
{"index": 3228, "repo": "commons-configuration2-2.9.0", "code": "package xpath;\n\nClass ConfigurationNodePointerFactory; // Implementation of the NodePointerFactory interface for configuration nodes.\nClass XPathExpressionEngine; // A specialized implementation of the ExpressionEngine interface that is able to evaluate XPATH expressions.\n", "des": "This package contains the XPathExpressionEngine class which enables XPATH support for querying configuration properties."}
{"index": 3229, "repo": "commons-configuration2-2.9.0", "code": "package web;\n\nClass AppletConfiguration; // A configuration wrapper to read applet parameters.\nClass ServletConfiguration; // A configuration wrapper around a ServletConfig.\nClass ServletContextConfiguration; // A configuration wrapper to read the initialization parameters of a servlet context.\nClass ServletFilterConfiguration; // A configuration wrapper around a FilterConfig.\nClass ServletRequestConfiguration; // A configuration wrapper to read the parameters of a servlet request.\n", "des": "This package contains some implementations of the Configuration interface that are useful in web environments."}
{"index": 3230, "repo": "commons-release-plugin-1.8.1", "code": "package plugin;\n\npackage plugin.mojos; // This package contains all the maven mojos for the commons-release-plugin.\npackage plugin.velocity; // Contains classes that take our velocity templates and render's them to a Writer class.\nClass SharedFunctions; // Shared static functions for all of our Mojos.\n", "des": "Base package for the commons-release-plugin."}
{"index": 3231, "repo": "commons-release-plugin-1.8.1", "code": "package mojos;\n\nClass CommonsDistributionDetachmentMojo; // The purpose of this Maven mojo is to detach the artifacts generated by the maven-assembly-plugin, which for the Apache Commons Project do not get uploaded to Nexus, and putting those artifacts in the dev distribution location for Apache projects.\nClass CommonsDistributionStagingMojo; // This class checks out the dev distribution location, copies the distributions into that directory structure under the target/commons-release-plugin/scm directory.\nClass CommonsSiteCompressionMojo;\nClass CommonsStagingCleanupMojo; // This class checks out the dev distribution location, checks whether anything exists in the distribution location, and if it is non-empty it deletes all the resources there.\n", "des": "This package contains all the maven mojos for the commons-release-plugin."}
{"index": 3232, "repo": "commons-release-plugin-1.8.1", "code": "package velocity;\n\nClass HeaderHtmlVelocityDelegate; // This class' purpose is to generate the HEADER.html that moves along with the release for the sake of downloading the release from the distribution area.\nClass HeaderHtmlVelocityDelegate.HeaderHtmlVelocityDelegateBuilder; // A builder class for instantiation of the HeaderHtmlVelocityDelegate.\nClass ReadmeHtmlVelocityDelegate; // This class' purpose is to generate the README.html that moves along with the release for the sake of downloading the release from the distribution area.\nClass ReadmeHtmlVelocityDelegate.ReadmeHtmlVelocityDelegateBuilder; // A builder class for instantiation of the ReadmeHtmlVelocityDelegate.\n", "des": "Contains classes that take our velocity templates and render's them to a Writer class."}
{"index": 3233, "repo": "opencms-core-15.0", "code": "package rpc;\n\nAnnotation Type SynchronizedRpcRequest;\n", "des": "Contains the compile time classes required to allow synchronous RPC calls."}
{"index": 3234, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Contains the acacia editor RPC service interfaces.\nInterface I_CmsSerialDateValue; // Interface to access serial date values easily.\nClass A_CmsSerialDateValue; // The base class for implementations of serial date values.\nClass CmsAttributeConfiguration; // The attribute configuration.\nClass CmsContentDefinition; // Contains all information defining a content entity type.\nClass CmsEntity; // Serializable entity implementation.\nClass CmsEntityAttribute; // Serializable entity attribute implementation.\nClass CmsEntityChangeEvent; // Value change event for entities with an additional field that indicates the type of change.\nClass CmsEntityHtml; // The entity HTML representation including validation data.\nClass CmsSerialDateUtil; // Utility methods for the serial date widget.\nClass CmsTabInfo; // Form tab information bean.\nClass CmsType; // CmsEntity attribute type data.\nClass CmsValidationResult; // The entity validation result containing all errors and warnings for a set of entities.\nClass CmsWidgetUtil; // Helper with methods commonly used in editor widgets.\nClass I_CmsSerialDateValue.JsonKey; // The JSON keys used in the JSON representation of serial date specifications.\nEnum CmsEntityChangeEvent.ChangeType; // Enum indicating the type of changes.\nEnum I_CmsSerialDateValue.DateType; // Different types of serial dates.\nEnum I_CmsSerialDateValue.EndType; // Different types of conditions how serial dates can end.\nEnum I_CmsSerialDateValue.Month; // Months as enumeration.\nEnum I_CmsSerialDateValue.PatternType; // Type of the series.\nEnum I_CmsSerialDateValue.WeekDay; // Enumeration representing the week days.\nEnum I_CmsSerialDateValue.WeekOfMonth; // Possible weeks of a month.\n", "des": "Contains the acacia editor shared client/server classes."}
{"index": 3235, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContentService; // The content service used to load and persist entity and type information.\nInterface I_CmsContentServiceAsync; // The content service used to load and persist entity and type information.\nInterface I_CmsSerialDateService; // Synchronous interface for the serial date service.\nInterface I_CmsSerialDateServiceAsync; // Asynchronous interface for the serial date service.\n", "des": "Contains the acacia editor RPC service interfaces."}
{"index": 3236, "repo": "opencms-core-15.0", "code": "package configuration;\n\npackage configuration.formatters; // Classes for handling formatter configurations.\nInterface I_CmsConfigurationObject<X extends I_CmsConfigurationObject<X>>; // Interface for a single named configuration object that can either be merged with other configuration objects or disable a configuration object with the same name.\nInterface I_CmsGlobalConfigurationCache; // This is interface is intended to be used in combination with the CmsGlobalConfigurationCacheEventHandler class.\nClass CmsADEConfigCacheState; // An immutable object which represents the complete ADE configuration (sitemap and module configurations) at a certain instant in time.\nClass CmsADEConfigData; // A class which represents the accessible configuration data at a given point in a sitemap.\nClass CmsADEConfigDataInternal; // Represents a parsed sitemap or module configuration.\nClass CmsADEConfigDataInternal.AttributeValue; // Represents the value of an attribute, with additional information about where the value originated from.\nClass CmsADEConfigurationSequence; // Represents a sequence of inherited module/sitemap configurations, together with an index into that list.\nClass CmsADEManager; // This is the main class used to access the ADE configuration and also accomplish some other related tasks like loading/saving favorite and recent lists.\nClass CmsConfigurationReader; // A class to parse ADE sitemap or module configuration files and create configuration objects from them.\nClass CmsContentFolderDescriptor; // A bean which represents the location configured for content elements of a specific type in a sitemap configuration.\nClass CmsDetailNameCache; // A cache which stores structure ids for URL names.\nClass CmsElementView; // Represents a element view for the container page editor.\nClass CmsElementView.ElementViewComparator; // The element view comparator.\nClass CmsFormatterUtils; // Helper class for formatter-related functionality.\nClass CmsFunctionAvailability; // Helper class for computing dynamic function availability based on sitemap configuration settings.\nClass CmsFunctionReference; // Bean for representing a named dynamic function reference from the configuration.\nClass CmsGlobalConfigurationCacheEventHandler; // This event handler manages cache instances which are instances of the interface I_CmsGlobalConfigurationCache.\nClass CmsModelPageConfig; // This class contains the model page configuration for a sitemap region.\nClass CmsModelPageConfigWithoutResource; // This class contains the model page configuration for a sitemap region, without the actual resource.\n", "des": "Contains the ade configuration classes."}
{"index": 3237, "repo": "opencms-core-15.0", "code": "package formatters;\n\nClass CmsFormatterBeanParser; // Parses formatter beans from formatter configuration XML contents.\nClass CmsFormatterChangeSet; // This class represents the changes which can be made to formatters in a sitemap configuration file.\nClass CmsFormatterConfigurationCache; // A cache object which holds a collection of formatter configuration beans read from the VFS.\nClass CmsFormatterConfigurationCacheState; // Represents the currently cached collection of all formatter beans extracted from formatter configuration files.\nClass CmsFormatterIndex; // Helper class for keeping track of which keys map to which formatters, and which formatters are active, when evaluating the sitemap configuration.\nClass CmsSettingConfiguration; // Contains the setting-related data for a formatter bean.\nClass CmsSharedSettingKey; // A pair consisting of the include name of a setting definition and the formatter key (possibly null) for which the setting should be used, for use as a map key in a map of setting definitions.\nClass CmsFormatterBeanParser.ParseException; // Exception for the errors in the configuration file not covered by other exception types.\n", "des": "Classes for handling formatter configurations."}
{"index": 3238, "repo": "opencms-core-15.0", "code": "package containerpage;\n\npackage containerpage.inherited; // Contains classes used for reading and caching inheritance groups.\npackage containerpage.shared; // Contains the shared container page editor classes.\nInterface I_CmsResourceTypeEnabledCheck; // Checks whether types are enabled for Add/New dialogs.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAddDialogTypeHelper; // Helper class for preparing the resource type lists for gallery and new dialog.\nClass CmsContainerpageActionElement; // Action element for container-page editor includes.\nClass CmsContainerpageService; // The RPC service used by the container-page editor.\nClass CmsDetailOnlyContainerPageBuilder; // This is a simple helper class to more easily produce container page beans to be used as detail-only containers.\nClass CmsDetailOnlyContainerPageBuilder.ContainerInfo; // Bean containing the information for a single container.\nClass CmsDetailOnlyContainerUtil; // Static utility class for functions related to detail-only containers.\nClass CmsElementUtil; // Utility class to generate the element data objects used within the container-page editor.\nClass CmsModelGroupHelper; // Handles all model group specific tasks.\nClass CmsRelationTargetListBean; // Helper bean used to collect a list of resources (usually relation targets) and keep track of whether any of them have the \"changed\" state.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the container page editor service classes."}
{"index": 3239, "repo": "opencms-core-15.0", "code": "package inherited;\n\nClass CmsContainerConfiguration; // A bean representing a single configuration entry for the inherited container configuration.\nClass CmsContainerConfigurationCache; // A cache class for storing inherited container configurations.\nClass CmsContainerConfigurationCacheState; // A cache class for storing inherited container configurations.\nClass CmsContainerConfigurationGroup; // A class which represents all the configuration entries which have been read from an inherited container configuration file.\nClass CmsContainerConfigurationParser; // A parser class which reads data from inherited container configuration files.\nClass CmsContainerConfigurationWriter; // A helper class for writing inherited container configuration back to a VFS file.\nClass CmsInheritanceGroupUtils; // Utility methods for inheritance groups which don't fit anywhere else.\nClass CmsInheritanceReference; // Reference to an container inheritance configuration.\nClass CmsInheritanceReferenceParser; // Parser class for parsing inheritance container references.\nClass CmsInheritedContainerState; // The state of an inherited container at a given point in the VFS tree.\n", "des": "Contains classes used for reading and caching inheritance groups."}
{"index": 3240, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Contains the container page editor service interfaces.\nClass CmsCntPageData; // Convenience class to provide server-side information to the client.\nClass CmsContainer; // Container bean.\nClass CmsContainerElement; // Bean holding basic container element information.\nClass CmsContainerElementData; // Bean holding all element information including it's formatted contents.\nClass CmsContainerPageGalleryData; // Gallery data loaded initially for the 'Add' menu in the page editor.\nClass CmsContainerPageRpcContext; // Bean containing the 'context' of the edited container page for use in RPC calls.\nClass CmsCreateElementData; // Bean containing the needed data when creating a new resource.\nClass CmsDialogOptions; // Option dialog data.\nClass CmsDialogOptions.Option; // Describes a dialog option.\nClass CmsDialogOptionsAndInfo; // Holds both a bean containing edit handler dialog options and a resource info bean for a selected resource.\nClass CmsElementLockInfo; // Contains lock information for a container page element.\nClass CmsElementSettingsConfig; // Represents the setting configuration for a container element.\nClass CmsElementViewInfo; // Element view info.\nClass CmsFormatterConfig; // Formatter configuration data.\nClass CmsFormatterConfigCollection; // Bean which holds a list of formatter configurations (client-side) which can be retrieved by key or id.\nClass CmsGroupContainer; // Group container bean.\nClass CmsGroupContainerSaveResult; // Bean which holds the results of saving a group container.\nClass CmsInheritanceContainer; // The inheritance container data.\nClass CmsInheritanceInfo; // A class whose instances are added to container element beans to provide information about container inheritance.\nClass CmsLocaleLinkBean; // Bean representing a link to a different locale variant.\nClass CmsRemovedElementStatus; // A bean used to store information about a container page element which was just removed.\nEnum CmsCntPageData.ElementDeleteMode; // The element delte modes.\nEnum CmsCntPageData.ElementReuseMode; // Enum representing the different ways dropping elements on a container page can be handled.\nEnum CmsContainerElement.ModelGroupState; // The model group states.\n", "des": "Contains the shared container page editor classes."}
{"index": 3241, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContainerpageService; // The RPC service interface used by the container-page editor.\nInterface I_CmsContainerpageServiceAsync; // The RPC service asynchronous interface used by the container-page editor.\n", "des": "Contains the container page editor service interfaces."}
{"index": 3242, "repo": "opencms-core-15.0", "code": "package contenteditor;\n\npackage contenteditor.shared; // Contains data beans used on the server side as well as on the client side of the XML content editor.\nClass A_CmsXmlContentEditorChangeHandler; // Abstract implementation of the content editor change handler.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsContentEditorActionElement; // The content editor action element.\nClass CmsContentService; // Service to provide entity persistence within OpenCms.\nClass CmsContentTypeVisitor; // Visitor to read all types and attribute configurations within a content definition.\nClass CmsDelayedDefaultChangeHandler; // A change handler that reacts to changes in a field by setting another empty field to a default value.\nClass CmsDynamicCategoryFieldList; // Class used to keep track of optional dynamic category fields for a content.\nClass CmsEditorChangeHandlerFormatterSelection; // Editor change handler implementation for the formatter selection in the sitemap config.\nClass CmsEditorChangeHandlerProperty; // Handles editor content changes to read OpenCms resource properties and insert their values into the edited content.\nClass CmsSerialDateService; // Implementation of the serial date RPC service.\nClass CmsWidgetUtil; // Utility methods for getting widget informations out of content definitions.\nClass CmsWidgetUtil.WidgetInfo; // Bean representing widget information.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsContentTypeVisitor.EvaluationRule; // Widget display type evaluation rules.\n", "des": "Contains server side classes for the XML content editor."}
{"index": 3243, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Contains the RPC service interfaces used by the XML content editor.\nClass CmsComplexWidgetData; // Bean which holds the necessary data for complex value widgets in the Acacia editor.\nClass CmsContentDefinition; // Contains all information needed for editing an XMLContent.\nClass CmsEditHandlerData; // Data which needs to be passed to the edit handler when using the 'new' button for an editable list element.\nClass CmsEditorConstants; // Constants used for content editor integration.\nClass CmsExternalWidgetConfiguration; // External widget configuration settings.\nClass CmsSaveResult; // Stores the editor save result information.\n", "des": "Contains data beans used on the server side as well as on the client side of the XML content editor."}
{"index": 3244, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContentService; // The content editor service interface.\nInterface I_CmsContentServiceAsync; // The content editor asynchronous service interface.\n", "des": "Contains the RPC service interfaces used by the XML content editor."}
{"index": 3245, "repo": "opencms-core-15.0", "code": "package detailpage;\n\nInterface I_CmsDetailPageHandler; // Interface for classes which can find the detail page for a given resource, and determine whether a given detail page / detail content combination is valid.\nClass CmsDefaultDetailPageHandler; // This class uses information from the detail page information stored in the sitemap to find/recognize the detail pages for a given resource.\nClass CmsDetailPageConfigurationWriter; // Class for writing detail page information to an XML configuration file.\nClass CmsDetailPageInfo; // Data bean containing the information for a detail page.\nClass CmsDetailPageResourceHandler; // Resource init handler for detail-pages.\nClass CmsDetailPageUtil; // This is a utility class which provides convenience methods for finding detail page names for resources which include the URL names of the resources themselves.\nClass CmsPermissiveDetailPageHandler; // Original detail page handler implementing the detail page logic from OpenCms versions up to 11.0.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains functions for the detail pages in OpenCms."}
{"index": 3246, "repo": "opencms-core-15.0", "code": "package galleries;\n\npackage galleries.shared; // Contains the shared client/server side gallery dialog classes.\nClass A_CmsTreeTabDataPreloader<T extends I_CmsGalleryTreeEntry<T>>; // Abstract class which is used to generate the data for showing an already opened tree in the gallery dialog.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAddContentRestriction; // Replacement configuration for the 'add content' dialog.\nClass CmsAddContentRestriction.TypeEntry; // Contains the replacements (and titles of the replacements) for a single type.\nClass CmsGalleryActionElement; // Gallery action used to generate the gallery dialog.\nClass CmsGalleryFilteredNavTreeBuilder; // Helper class for building a filtered sitemap tree for the gallery dialog's 'Sitemap' tab.\nClass CmsGalleryService; // Handles all RPC services related to the gallery dialog.\nClass CmsOpenGallery; // Provides methods to open gwt-based gallery dialog.\nClass CmsPreviewService; // Handles all RPC services related to the gallery preview dialog.\nClass CmsSiteSelectorOptionBuilder; // Helper class for building the options for the site selector in the gallery dialog.\nClass CmsTreeOpenState; // The tree open state of a gallery tree tab.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains server side classes for the gallery dialogs."}
{"index": 3247, "repo": "opencms-core-15.0", "code": "package shared;\n\nInterface I_CmsBinaryPreviewProvider; // Constants interface for binary resource preview.\nInterface I_CmsGalleryConfiguration; // The gallery configuration interface.\nInterface I_CmsGalleryProviderConstants; // Shared constants interface.\nInterface I_CmsGalleryTreeEntry<T>; // Common interface for accessing sitemap/VFS entry beans as tree nodes.\nInterface I_CmsImagePreviewProvider; // Constants interface for binary resource preview.\nClass CmsGalleryActionInfo; // Represents information about whether a gallery folder should use a custom upload action.\nClass CmsGalleryConfiguration; // The gallery configuration.\nClass CmsGalleryDataBean; // This bean holding the gallery dialog information required for displaying the content of the gallery tabs.\nClass CmsGalleryFolderBean; // Represents a gallery folder.\nClass CmsGallerySearchBean; // This bean represents the current search object.\nClass CmsGalleryTabConfiguration; // A bean containing a configuration for the gallery dialog's available tabs, consisting of a list of tabs and a default tab to display first.\nClass CmsGalleryTreeEntry; // Gallery tree entry class.\nClass CmsImageInfoBean; // Bean holding image info to be display in the resource preview dialog.\nClass CmsPoint; // A point in 2D space.\nClass CmsResourceInfoBean; // This bean contains the preview content for the selected item.\nClass CmsResourceTypeBean; // Bean representing resource type information.\nClass CmsResultItemBean; // A specific bean holding all info to be displayed in org.opencms.ade.galleries.client.ui.CmsResultListItems.\nClass CmsSitemapEntryBean; // A sitemap entry bean.\nClass CmsSiteSelectorOption; // Bean class which represents an option for the site selector in the gallery dialog.\nClass CmsVfsEntryBean; // Represents a single VFS resource entry for use by the VFS tab of the galleries.\nEnum CmsGallerySearchScope; // An enum that represents the possible search scope choices in the ADE gallery search tab.\nEnum CmsResourceTypeBean.Origin; // Enum for data source from which resource type bean was constructed.\nEnum CmsResourceTypeBean.TypeVisibility; // Enum representing the visibility of a resource type in the bean.\nEnum CmsSiteSelectorOption.Type; // Enum for indicating the site type.\nEnum I_CmsGalleryProviderConstants.GalleryMode; // Gallery mode constants.\n", "des": "Contains the shared client/server side gallery dialog classes."}
{"index": 3248, "repo": "opencms-core-15.0", "code": "package publish;\n\npackage publish.shared; // Classes for the publish dialog which are used by both the client and the server.\nInterface I_CmsPublishRelatedResourceProvider; // Interface used to generate mode-specific 'related resources' for the publish dialog in addition to resources linked by normal relations.\nInterface I_CmsVirtualProject; // This interface can be used to implement a new option in the publish dialog's project selector.\nClass A_CmsPublishGroupHelper<RESOURCE,​GROUP>; // Helper class for splitting a publish list into publish groups.\nClass ClientMessages;\nClass CmsCollectorPublishListHelper; // Helper class used to determine which resources from a collector list should be included in a publish list.\nClass CmsCurrentPageProject; // Virtual project which includes the currently edited resource and all its related resources.\nClass CmsDefaultCollectorPublishListProvider; // Default implementation of the I_CmsCollectorPublishListProvider interface.\nClass CmsDefaultPublishGroupHelper; // Default implementation of the publish group helper which operates on CmsPublishResource objects.\nClass CmsDirectPublishProject; // Virtual project for 'direct publishing' of resources.\nClass CmsDummyRelatedResourceProvider; // Dummy implementation of the I_CmsRelatedResourceProvider interface which doesn't actually add any related resources.\nClass CmsMyChangesProject; // Virtual project for the \"My changes\" mode in the publish dialog.\nClass CmsPublish; // ADE publishing features.\nClass CmsPublishActionElement;\nClass CmsPublishListHelper; // Helper functions used to collect information for the publish dialog.\nClass CmsPublishRelationFinder; // Helper class for finding all related resources for a set of resources to be published, for use with the new ADE publish dialog.\nClass CmsPublishRelationFinder.ResourceMap; // A map from resources to sets of resources, which automtically instantiates an empty set when accessing a key that doesn't exist via get().\nClass CmsPublishService; // The implementation of the publish service.\nClass CmsRealProjectVirtualWrapper; // Wrapper to use real OpenCms projects through the I_CmsVirtualProject interface.\nClass CmsSinglePublishGroupHelper; // Publish group helper which only puts all publish resources into a single group.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum A_CmsPublishGroupHelper.GroupAge; // An enum representing the age of a publish list resource.\n", "des": "This package contains the server-side classes for the publish module."}
{"index": 3249, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Classes to handle client-side GWT-RPC services.\nClass CmsProjectBean; // A project bean.\nClass CmsPublishData; // A bean that contains both publish options and a map of projects.\nClass CmsPublishGroup; // A publish group.\nClass CmsPublishGroupList; // A class which represents a list of publish groups to display to the user for selection.\nClass CmsPublishListToken; // A bean which can be used to reconstruct a publish list.\nClass CmsPublishOptions; // Bean encapsulating all ADE publish options.\nClass CmsPublishResource; // A publish resource.\nClass CmsPublishResourceInfo; // A publish resource additional information bean.\nClass CmsWorkflow; // A bean which represents a possible workflow, containing an identifier, a user-readable name and a list of workflow actions.\nClass CmsWorkflowAction; // Work flow action information.\nClass CmsWorkflowActionParams; // Contains the data on which a workflow action should act (usually, a list of resources).\nClass CmsWorkflowResponse; // The result of a workflow action.\nEnum CmsPublishResourceInfo.Type; // Reason value constants, when resources can not be published.\n", "des": "Classes for the publish dialog which are used by both the client and the server."}
{"index": 3250, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsPublishService; // The synchronous publish list interface.\nInterface I_CmsPublishServiceAsync; // The asynchronous interface to the publish service.\n", "des": "Classes to handle client-side GWT-RPC services."}
{"index": 3251, "repo": "opencms-core-15.0", "code": "package sitemap;\n\npackage sitemap.shared; // Shared Client-Server side of the sitemap view.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAliasBulkEditHelper; // Helper class used by a service to edit or import aliases for a whole site.\nClass CmsAliasEditorLockTable; // A class used to keep track of which user is editing the alias table from which sites.\nClass CmsAliasImportResponseTable; // A class used for storing alias import results by key.\nClass CmsModelPageHelper; // Helper class for model page operations in the sitemap editor.\nClass CmsSitemapActionElement; // Sitemap action used to generate the sitemap editor.\nClass CmsSitemapAttributeUpdater; // Performs attribute changes in a sitemap configuration file CmsXmlContent instance.\nClass CmsSitemapNavPosCalculator; // Helper class for recalculating navigation positions when a user has changed the order of navigation entries in the sitemap editor.\nClass CmsSitemapSessionCache; // Sitemap session cache.\nClass CmsVfsSitemapService; // Handles all RPC services related to the vfs sitemap.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Server side of the sitemap view."}
{"index": 3252, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Shared RPC interfaces.\nInterface I_CmsAliasConstants; // Constants for parameters, JSON keys, etc.\nInterface I_CmsSitemapController; // The interface to the sitemap controller.\nClass CmsAdditionalEntryInfo; // Bean for additional site-map entry information.\nClass CmsClientSitemapEntry; // Sitemap entry data.\nClass CmsDetailPageTable; // A data structure for managing the detail page ordering for different types in a given sitemap.\nClass CmsGalleryFolderEntry; // Gallery folder entry bean.\nClass CmsGalleryType; // The gallery type bean.\nClass CmsLocaleComparePropertyData; // Data used for the property editor in the sitemap editor's locale comparison view.\nClass CmsModelInfo; // Wraps the model page and model group info into one object.\nClass CmsModelPageEntry; // Bean representing a model page, for use in the model page mode of the sitemap editor.\nClass CmsNewResourceInfo; // A bean representing a resource type for use in the detail page creation menu.\nClass CmsSitemapAttributeData; // The data needed by the sitemap attribute editor dialog in the sitemap editor.\nClass CmsSitemapCategoryData; // The category data for the current sitemap.\nClass CmsSitemapChange; // Bean containing sitemap entry change information.\nClass CmsSitemapClipboardData; // Sitemap clipboard data bean.\nClass CmsSitemapData; // Sitemap initialization data bean for prefetching.\nClass CmsSitemapInfo; // Sitemap info object.\nClass CmsSitemapMergeInfo; // This class represents the result of a 'merge sub-sitemap' operation.\nClass CmsSubSitemapInfo; // A data class which is used to transfer information about sub-sitemaps which have been created.\nEnum CmsClientSitemapEntry.EditStatus; // An enum for the edit status of the entry.\nEnum CmsClientSitemapEntry.EntryType; // An enum for the entry type.\nEnum CmsDetailPageTable.Status; // A type indicating the status of a page.\nEnum CmsSitemapChange.ChangeType; // The change types.\nEnum CmsSitemapData.EditorMode; // The sitemap editor modes.\n", "des": "Shared Client-Server side of the sitemap view."}
{"index": 3253, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsSitemapService; // Handles all RPC services related to the sitemap.\nInterface I_CmsSitemapServiceAsync; // Handles all RPC services related to the sitemap.\n", "des": "Shared RPC interfaces."}
{"index": 3254, "repo": "opencms-core-15.0", "code": "package cache;\n\nInterface I_CmsLruCacheObject; // Defines the methods which an object being cached by CmsFlexLruCache must implement.\nClass CmsLruCache; // Implements an LRU (last recently used) cache.\nClass CmsMemoryObjectCache; // A singleton memory cache, that stores objects related with keys.\nClass CmsVfsCache; // Configurable VFS based cache, for caching objects related to offline/online resources.\nClass CmsVfsDiskCache; // Implements a RFS file based disk cache, that handles parameter based versions of VFS files, providing a cache for the \"online\" and another for the \"offline\" project.\nClass CmsVfsMemoryObjectCache; // Implements a memory cache, that stores objects related to VFS files, providing a cache for the \"online\" and another for the \"offline\" project.\nClass CmsVfsNameBasedDiskCache; // Implements a name based RFS file based disk cache, that handles parameter based versions of VFS files.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Implementations of specialized caches used in OpenCms."}
{"index": 3255, "repo": "opencms-core-15.0", "code": "package configuration;\n\npackage configuration.preferences; // Classes to build the user preferences dialog.\nInterface I_CmsConfigurationParameterHandler; // Used for classes that are configurable using <param name=\"name\">value</param> in the XML configuration.\nInterface I_CmsNeedsAdminCmsObject; // Interface for configured classes that need a CmsObject with admin privileges.\nInterface I_CmsXmlConfiguration; // Each configurable element in OpenCms must implement this interface.\nInterface I_CmsXmlConfigurationWithUpdateHandler; // Interface for configurations which should run custom logic when the configuration is written back by OpenCms.\nClass A_CmsXmlConfiguration; // Abstract base implementation for xml configurations.\nClass CmsAdditionalLogFolderConfig; // Bean containing additional log folders available for the log file viewer.\nClass CmsConfigurationCopyResource; // Describes a resource to copy during the creation of a new resource.\nClass CmsConfigurationManager; // Configuration manager for digesting the OpenCms XML configuration.\nClass CmsDefaultUserSettings; // Default user workplace settings, used as default values for worklace settings in the user preferences.\nClass CmsDefaultUserSettings.CmsPublishRelatedResourcesMode; // Enumeration class for defining the publish related resources mode.\nClass CmsDigesterResourceTypeCreationFactory; // Factory to create resource type instances from the XML configuration.\nClass CmsElementWithAttrsParamConfigHelper; // Helper class for parsing an element with no content but several attributes into a subclass of I_CmsConfigurationParameterHandler.\nClass CmsElementWithSubElementsParamConfigHelper; // Helper class for parsing an element with several sub-elements which are text-valued (i.e.\nClass CmsImportExportConfiguration; // Import / export master configuration class.\nClass CmsModuleConfiguration; // Modules configuration class.\nClass CmsParameterConfiguration; // Provides convenient access to configuration parameters.\nClass CmsParameterConfiguration.ParameterReader; // Used to read parameter lines from a property file.\nClass CmsParameterConfiguration.ParameterTokenizer; // This class divides property value into tokens separated by \",\".\nClass CmsParameterStore; // Class for accessing global 'weighted' configuration parameters defined in parameter files in the VFS.\nClass CmsParameterStore.WeightedValue; // An individual weighted parameter value, with a 'source' attribute for better debuggability.\nClass CmsRemoteShellConfiguration; // RMI shell server configuration.\nClass CmsSchedulerConfiguration; // Scheduled jobs configuration class.\n", "des": "Reads and writes the XML based OpenCms configuration files."}
{"index": 3256, "repo": "opencms-core-15.0", "code": "package preferences;\n\nInterface I_CmsPreference; // Interface describing a single preference value which can possibly be edited by the user.\nClass A_CmsPreference; // Abstract superclass for preferences.\nClass CmsBuiltinPreference; // Preference subclass for built-in preferences accessed with a getter/setter pair via reflection.\nClass CmsBuiltinPreference.SelectOptions; // A bean representing a set of select options.\nClass CmsEditorPreference; // Preference subclass for preferred editors.\nClass CmsElementViewPreference; // Element view preference configuration.\nClass CmsExplorerElementViewPreference; // Explorer element view preference.\nClass CmsGalleryShowInvalidDefaultPreference; // Class for the preference which controls whether invalid elements should be shown by default in the gallery result tab.\nClass CmsHiddenBuiltinPreference; // Class for preferences that are not meant to be displayed in the preference dialog.\nClass CmsLanguagePreference; // Workplace locale preference.\nClass CmsPreferenceData; // Bean representing the configurable attributes for a preference.\nClass CmsProjectPreference; // Preference subclass for selecting the start project.\nClass CmsSitePreference; // Preference for the start site.\nClass CmsStartFolderPreference; // Preference for the start folder.\nClass CmsStartGallleryPreference; // Start gallery preference.\nClass CmsStartViewPreference; // Preference for the start site.\nClass CmsTimeWarpPreference; // Preference for the timewarp widget.\nClass CmsUserDefinedPreference; // Subclass for user-defined preferences.\nClass CmsUserSettingsStringPropertyWrapper; // Bean used to access the built-in preferences via reflection.\nClass CmsWorkplaceModePreference; // Workplace mode preference configuration.\nClass CmsWrapperPreference; // Wrapper used for built-in preferene which have also been configured in opencms-workplace.xml.\nAnnotation Type PrefMetadata; // Annotation used for declaring that a specific preference class should be used for a built-in preference.\n", "des": "Classes to build the user preferences dialog."}
{"index": 3257, "repo": "opencms-core-15.0", "code": "package db;\n\npackage db.as400; // AS400 implementation of the OpenCms database connector.\npackage db.db2; // DB2 implementation of the OpenCms database connector.\npackage db.generic; // Generic (ANSI-SQL) implementation of the OpenCms database connector.\npackage db.hsqldb; // HSQLDB implementation of the OpenCms database connector.\npackage db.log; // This package contains the implementation classes for the DB log.\npackage db.mssql; // MS SQL implementation of the OpenCms database connector.\npackage db.mysql; // MySQL4+ implementation of the OpenCms database connector.\npackage db.oracle; // Oracle9+ implementation of the OpenCms database connector.\npackage db.postgresql; // PostgreSql implementation of the OpenCms database connector.\npackage db.timing; // Utility classes for profiling driver calls.\nInterface I_CmsCacheKey; // Describes the cache key generating methods.\nInterface I_CmsDbContextFactory; // This interface defines a factory to create runtime info objects.\nInterface I_CmsDriver; // Generic base driver interface.\nInterface I_CmsExportPointDriver; // Provides methods to write export points to the \"real\" file system.\nInterface I_CmsHistoryDriver; // Definitions of all required history driver methods.\nInterface I_CmsPreparedStatementParameter; // An interface which represents a parameter value which is going to be used in an SQL prepared statement.\nInterface I_CmsProjectDriver; // Definitions of all required project driver methods.\nInterface I_CmsQueryFragment; // An interface for classes which are used to generate SQL statements.\nInterface I_CmsSubscriptionDriver; // The interface for drivers handling subscriptions and user tracking.\nInterface I_CmsUserDriver; // Definitions of all required user driver methods.\nInterface I_CmsVfsDriver; // Definitions of all required VFS driver methods.\nClass CmsAlias; // This class represents an alias from a virtual path to a resource in the VFS.\nClass CmsAliasFilter; // This class is used for filtering aliases in database operations.\nClass CmsAliasManager; // The alias manager provides access to the aliases stored in the database.\nClass CmsCacheKey; // Generates the cache keys for the user and permission caches.\nClass CmsCacheSettings; // The settings of the OpenCms memory monitor.\nClass CmsCompositeQueryFragment; // A query fragment which aggregates the results from a list of other query fragments.\n", "des": "Low-level database connection and access functionality."}
{"index": 3258, "repo": "opencms-core-15.0", "code": "package as400;\n\nClass CmsHistoryDriver; // AS400 implementation of the history driver methods.\nClass CmsProjectDriver; // AS400 implementation of the project driver methods.\nClass CmsSqlManager; // AS400 implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // AS/400 implementation of the subscription driver.\nClass CmsUserDriver; // AS400 implementation of the user driver methods.\nClass CmsVfsDriver; // AS400 implementation of the VFS driver methods.\n", "des": "AS400 implementation of the OpenCms database connector."}
{"index": 3259, "repo": "opencms-core-15.0", "code": "package db2;\n\nClass CmsHistoryDriver; // DB2 implementation of the history driver methods.\nClass CmsProjectDriver; // DB2 implementation of the project driver methods.\nClass CmsSqlManager; // DB2 implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // DB2 implementation of the subscription driver.\nClass CmsUserDriver; // DB2 implementation of the user driver methods.\nClass CmsVfsDriver; // DB2 implementation of the VFS driver methods.\n", "des": "DB2 implementation of the OpenCms database connector."}
{"index": 3260, "repo": "opencms-core-15.0", "code": "package generic;\n\nClass CmsHistoryDriver; // Generic (ANSI-SQL) database server implementation of the history driver methods.\nClass CmsProjectDriver; // Generic (ANSI-SQL) implementation of the project driver methods.\nClass CmsPublishHistoryCleanupFilter; // Filter object that describes what to clean up in a publish history cleanup operation.\nClass CmsSqlManager; // Generic (ANSI-SQL) implementation of the SQL manager.\nClass CmsSubscriptionDriver; // Generic implementation of the user tracking and subscription driver interface.\nClass CmsUserDriver; // Generic (ANSI-SQL) database server implementation of the user driver methods.\nClass CmsUserQueryBuilder; // Default implementation of the user query builder.\nClass CmsVfsDriver; // Generic (ANSI-SQL) database server implementation of the VFS driver methods.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsPublishHistoryCleanupFilter.Mode; // Mode of operation for publish history cleanup.\n", "des": "Generic (ANSI-SQL) implementation of the OpenCms database connector."}
{"index": 3261, "repo": "opencms-core-15.0", "code": "package hsqldb;\n\nClass CmsHistoryDriver; // HSQLDB implementation of the history driver methods.\nClass CmsProjectDriver; // HSQLDB implementation of the project driver methods.\nClass CmsSqlManager; // HSQLDB implementation of the SQL Manager.\nClass CmsSubscriptionDriver; // HSQLDB implementation of the subscription driver.\nClass CmsUserDriver; // HSQLDB implementation of the user driver methods.\nClass CmsVfsDriver; // HSQLDB implementation of the VFS driver methods.\n", "des": "HSQLDB implementation of the OpenCms database connector."}
{"index": 3262, "repo": "opencms-core-15.0", "code": "package log;\n\nClass CmsLogEntry; // Wrapper class for a DB log entry.\nClass CmsLogFilter; // A filter to retrieve log entries.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsLogEntryType; // Wrapper class for the different types of log entries.\n", "des": "This package contains the implementation classes for the DB log."}
{"index": 3263, "repo": "opencms-core-15.0", "code": "package mssql;\n\nClass CmsHistoryDriver; // MS SQL implementation of the history driver methods.\nClass CmsProjectDriver; // MS SQL implementation of the project driver methods.\nClass CmsSqlManager; // MS SQL implementation of the SQL manager.\nClass CmsSubscriptionDriver; // MSSQL implementation of the subscription driver.\nClass CmsUserDriver; // MS SQL implementation of the user driver methods.\nClass CmsVfsDriver; // MS SQL implementation of the VFS driver methods.\n", "des": "MS SQL implementation of the OpenCms database connector."}
{"index": 3264, "repo": "opencms-core-15.0", "code": "package mysql;\n\nClass CmsHistoryDriver; // MySQL implementation of the history driver methods.\nClass CmsProjectDriver; // MySQL implementation of the project driver methods.\nClass CmsSqlManager; // MySQL implementation of the SQL manager.\nClass CmsSubscriptionDriver; // MySQL implementation of the subscription driver.\nClass CmsUserDriver; // MySQL implementation of the user driver methods.\nClass CmsVfsDriver; // MySQL implementation of the VFS driver methods.\n", "des": "MySQL4+ implementation of the OpenCms database connector."}
{"index": 3265, "repo": "opencms-core-15.0", "code": "package oracle;\n\nClass CmsHistoryDriver; // Oracle implementation of the history driver methods.\nClass CmsProjectDriver; // Oracle/OCI implementation of the project driver methods.\nClass CmsSqlManager; // Oracle implementation of the SQL manager.\nClass CmsSubscriptionDriver; // Oracle implementation of the subscription driver.\nClass CmsUserDriver; // Oracle implementation of the user driver methods.\nClass CmsVfsDriver; // Oracle implementation of the VFS driver methods.\n", "des": "Oracle9+ implementation of the OpenCms database connector."}
{"index": 3266, "repo": "opencms-core-15.0", "code": "package postgresql;\n\nClass CmsHistoryDriver; // PostgreSql implementation of the history driver methods.\nClass CmsProjectDriver; // PostgreSql implementation of the project driver methods.\nClass CmsSqlManager; // PostgreSql implementation of the SQL manager.\nClass CmsSubscriptionDriver; // PostgreSQL implementation of the subscription driver.\nClass CmsUserDriver; // PostgreSql implementation of the user driver methods.\nClass CmsVfsDriver; // PostgreSql implementation of the VFS driver methods.\n", "des": "PostgreSql implementation of the OpenCms database connector."}
{"index": 3267, "repo": "opencms-core-15.0", "code": "package timing;\n\nInterface I_CmsProfilingHandler; // Profiling handler interface which gets informed of method call durations.\nClass CmsDefaultProfilingHandler; // Default profiling handler which only has a single instance and delegates method calls to its registered child handlers.\nClass CmsProfilingInvocationHandler; // Invocation handler used to measure method calls durations.\nClass CmsThreadStatsTreeProfilingHandler; // Builds up a tree whose nodes correspond to stack trace lines of the threads calling this profiling handler.\nClass CmsThreadStatsTreeProfilingHandler.Node; // The tree node.\n", "des": "Utility classes for profiling driver calls."}
{"index": 3268, "repo": "opencms-core-15.0", "code": "package file;\n\npackage file.collectors; // Collectors allow to gather lists of OpenCms resources from the OpenCms VFS using specific rules.\npackage file.history; // This package contains the classes to deal with the OpenCms VFS history archive.\npackage file.types; // The implementations of the core resource types for the VFS are located here.\npackage file.wrapper; // This package contains classes and interfaces used to access OpenCms through a wrapped CmsObject.\nInterface I_CmsResource; // Common ancestor interface for CmsFile and CmsFolder as well as for CmsHistoryFile and CmsHistoryFolder.\nClass CmsFile; // A file resource in the OpenCms VFS.\nClass CmsFolder; // A folder resource in the OpenCms VFS.\nClass CmsGroup; // A group principal in the OpenCms permission system.\nClass CmsLinkRewriter; // A class used to rewrite links and relations in one subtree such that relations from that subtree to another given subtree replaced with relations to the first subtree.\nClass CmsObject; // This pivotal class provides all authorized access to the OpenCms VFS resources.\nClass CmsProject; // Describes an OpenCms project, which contains a set of VFS resources that are being worked on at the same time.\nClass CmsProject.CmsProjectType; // Enumeration class for project types.\nClass CmsProperty; // Represents a property (meta-information) mapped to a VFS resource.\nClass CmsProperty.CmsPropertyLocaleTransformer; // Transforms a given properties map, to a map where the returned values for a property are dependent on the locale.\nClass CmsPropertyDefinition; // Defines a property name, so that CmsProperty instances can be created with that name.\nClass CmsPropertyDefinition.CmsPropertyType; // Enumeration class for property types.\nClass CmsRequestContext; // Stores the information about the current users OpenCms context, for example the requested URI, the current project, the selected site and more.\nClass CmsResource; // Base class for all OpenCms VFS resources like CmsFile or CmsFolder.\nClass CmsResource.CmsResourceCopyMode; // Enumeration class for resource copy modes.\nClass CmsResource.CmsResourceDeleteMode; // Enumeration class for resource delete modes.\nClass CmsResource.CmsResourceUndoMode; // Enumeration class for resource undo changes modes.\nClass CmsResourceBuilder; // This class allows the developer to build a CmsResource object by filling out individual fields one after the other.\nClass CmsResourceFilter; // Provides filters for resource result sets obtained from requests to the OpenCms VFS.\n", "des": "This important package provides the methods to access the OpenCms VFS repository with the permissions of an authenticated user."}
{"index": 3269, "repo": "opencms-core-15.0", "code": "package collectors;\n\nInterface I_CmsCollectorPostCreateHandler; // Interface which can be used to add custom code to execute after a user has created a new content via a collector list.\nInterface I_CmsCollectorPublishListProvider; // Interface which should be used for collectors which can provide their own publish list.\nInterface I_CmsResourceCollector; // A collector that generates list of CmsResource objects from the VFS.\nClass A_CmsResourceCollector; // Provides some helpful base implementations for resource collector classes.\nClass CmsAddCategoriesPostCreateHandler; // A post create handler that adds categories to newly created resources (that are not a copy of an existing resource).\nClass CmsCategoryResourceCollector; // A collector to fetch XML contents in a folder or the current site filtered by one or more given category types.\nClass CmsChangedResourceCollector; // A resource collector that collects resources changed in a given time frame and supports flexible sorting based on resource dates.\nClass CmsCollectorData; // Data structure for the collector, parsed from the collector parameters.\nClass CmsDateResourceCollector; // A default resource collector that supports flexible sorting based on resource dates.\nClass CmsDateResourceComparator; // Comparator for sorting resource objects based on dates.\nClass CmsDefaultPostCreateHandler; // Default implementation for the post-create handler interface.\nClass CmsDefaultResourceCollector; // A default resource collector to generate some example list of resources from the VFS.\nClass CmsExtendedCollectorData; // Extended data structure for the collector, parsed from the collector parameters.\nClass CmsPriorityDateResourceComparator; // Comparator for sorting resource objects based on priority and date.\nClass CmsPriorityResourceCollector; // A collector to fetch sorted XML contents in a folder or subtree based on their priority and date or title values.\nClass CmsPriorityTitleResourceComparator; // Comparator for sorting resource objects based on priority and title.\nClass CmsPropertyResourceComparator; // Comparator for sorting resource objects based on a selected property value.\nClass CmsSolrCollector; // A Solr collector.\nClass CmsSubscriptionCollector; // A collector that returns visited or subscribed resources depending on the current user and parameters.\nClass CmsTimeFrameCategoryCollector; // A collector that allows to collect resources within a time range based upon a configurable property that contains a time stamp.\nClass ComparatorInverter; // Wrapper around a comparator that inverts comparison results which may e.g.\n", "des": "Collectors allow to gather lists of OpenCms resources from the OpenCms VFS using specific rules."}
{"index": 3270, "repo": "opencms-core-15.0", "code": "package history;\n\nInterface I_CmsHistoryResource; // A historical version of a resource in the OpenCms VFS resource history.\nClass CmsHistoryFile; // A historical version of a file in the OpenCms VFS resource history.\nClass CmsHistoryFolder; // A historical version of a file in the OpenCms VFS resource history.\nClass CmsHistoryPrincipal; // Describes an OpenCms historical principal entry.\nClass CmsHistoryProject; // Describes an OpenCms historical project entry.\nClass CmsHistoryResourceHandler; // Resource init handler that loads historical versions of resources.\n", "des": "This package contains the classes to deal with the OpenCms VFS history archive."}
{"index": 3271, "repo": "opencms-core-15.0", "code": "package types;\n\nInterface I_CmsResourceType; // Resource type descriptors for all resources in the VFS.\nClass A_CmsResourceType; // Base implementation for resource type classes.\nClass A_CmsResourceTypeFolderBase; // Resource type descriptor for the type \"folder\".\nClass A_CmsResourceTypeLinkParseable; // Base implementation for resource types implementing the I_CmsLinkParseable interface.\nClass CmsResourceTypeBinary; // Resource type descriptor for the type \"binary\".\nClass CmsResourceTypeFolder; // Resource type descriptor for the type \"folder\".\nClass CmsResourceTypeFolderExtended; // Resource type descriptor for extended folder types (like for example the workplace galleries).\nClass CmsResourceTypeFolderSubSitemap; // Resource type descriptor for sub site map folder types.\nClass CmsResourceTypeFunctionConfig; // Resource type class for the second version of dynamic functions.\nClass CmsResourceTypeHtmlRedirect; // The HTML redirect resource type.\nClass CmsResourceTypeImage; // Resource type descriptor for the type \"image\".\nClass CmsResourceTypeImage.CmsImageAdjuster; // A data container for image size and scale operations.\nClass CmsResourceTypeJsp; // Resource type descriptor for the type \"jsp\".\nClass CmsResourceTypeLocaleIndependentXmlContent; // Special resource type for locale independent XML contents.\nClass CmsResourceTypeMacroFormatter; // The macro formatter resource type.\nClass CmsResourceTypePlain; // Resource type descriptor for the type \"plain\".\nClass CmsResourceTypePointer; // Resource type descriptor for the type \"pointer\".\nClass CmsResourceTypeSeoFile; // The SEO file resource type.\nClass CmsResourceTypeSubsitemapContentFolder; // Content type class for subsitemap content folders.\nClass CmsResourceTypeUnknown; // Resource type descriptor used in case the given resource type class in the XML configuration could not be instantiated.\nClass CmsResourceTypeUnknownFile; // Resource type descriptor for unknown file types.\nClass CmsResourceTypeUnknownFolder; // Resource type descriptor for unknown folder types.\nClass CmsResourceTypeXmlAdeConfiguration; // Custom resource type for ADE configurations.\nClass CmsResourceTypeXmlContainerPage; // Resource type descriptor for the type \"containerpage\".\nClass CmsResourceTypeXmlContent; // Resource type descriptor for the type \"xmlcontent\".\nClass CmsResourceTypeXmlPage; // Resource type descriptor for the type \"xmlpage\".\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum I_CmsResourceType.Formatter; // Resource formatter.\n", "des": "The implementations of the core resource types for the VFS are located here."}
{"index": 3272, "repo": "opencms-core-15.0", "code": "package wrapper;\n\nInterface I_CmsResourceWrapper; // Interface which is used by the CmsObjectWrapper to create a different view to the resources in the VFS.\nClass A_CmsResourceExtensionWrapper; // Abstract base class which implements I_CmsResourceWrapper and makes it possible to add and remove file extensions to resources.\nClass A_CmsResourceWrapper; // Default abstract implementation of the interface I_CmsResourceWrapper.\nClass CmsObjectWrapper; // This class contains a subset of the methods of CmsObject and uses the configured resource wrappers (I_CmsResourceWrapper) to change the view to the existing resources in the VFS.\nClass CmsResourceExtensionWrapperJsp; // A resource type wrapper for jsp files, which adds the correct file extension \"jsp\" to the resources.\nClass CmsResourceExtensionWrapperXmlContent; // A resource type wrapper for xml content files, which adds the correct file extension \"xml\" to the resources.\nClass CmsResourceExtensionWrapperXmlPage; // A resource type wrapper for xml pages, which adds the correct file extension \"xml\" to the resources.\nClass CmsResourceWrapperModules; // Resource wrapper used to import/export modules by copying them to/from virtual folders.\nClass CmsResourceWrapperModulesNonLazy; // Resource wrapper used to import/export modules by copying them to/from virtual folders.\nClass CmsResourceWrapperPreventCreateNameCI; // Resource wrapper class which is used to prevent resources with a certain name from being created.\nClass CmsResourceWrapperPreventCreateNameRegex; // Resource wrapper class which is used to prevent resources with names matching a given regex from being created.\nClass CmsResourceWrapperPropertyFile; // Adds a folder in every existing folder with the name \"__properties\" which contains property files for every resource in the existing folder.\nClass CmsResourceWrapperReplaceDeleted; // Resource wrapper which intercepts createResource calls and substitutes them with replaceResource if there is already a deleted file at the same path.\nClass CmsResourceWrapperSystemFolder; // Adds the system folder to every root folder of target sites.\nClass CmsResourceWrapperUtils; // Helper class with several methods used by different implementations of the interface I_CmsResourceWrapper.\nClass CmsResourceWrapperXmlPage; // A resource type wrapper for xml page files, which explodes the xml pages to folders.\nClass CmsWrappedResource; // Helper class to create \"virtual\" resources not existing in the vfs which are based on existing resources.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "This package contains classes and interfaces used to access OpenCms through a wrapped CmsObject."}
{"index": 3273, "repo": "opencms-core-15.0", "code": "package flex;\n\nClass CmsFlexBucketConfiguration; // Represents a Flex bucket configuration.\nClass CmsFlexCache; // This class implements the FlexCache.\nClass CmsFlexCache.CmsFlexCacheVariation; // A simple data container class for the FlexCache variations.\nClass CmsFlexCacheConfiguration; // Flex Cache configuration class.\nClass CmsFlexCacheEntry; // Contains the contents of a cached resource.\nClass CmsFlexCacheKey; // Key used to describe the caching behaviour of a specific resource.\nClass CmsFlexController; // Controller for getting access to the CmsObject, should be used as a request attribute.\nClass CmsFlexRequest; // Wrapper class for a HttpServletRequest.\nClass CmsFlexRequestContextInfo; // Contains information about the OpenCms request context required by the Flex implementation.\nClass CmsFlexRequestDispatcher; // Implementation of the RequestDispatcher interface to allow JSPs to be loaded from the OpenCms VFS.\nClass CmsFlexRequestKey; // Describes the caching behaviour (or caching options) for a Flex request.\nClass CmsFlexRequestKey.PathsBean; // Contains the root paths to be used for determining the buckets of a flex cache entry.\nClass CmsFlexResponse; // Wrapper class for a HttpServletResponse, required in order to process JSPs from the OpenCms VFS.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsFlexCacheException; // Signals an error of the Flex cache.\n", "des": "Provides low-level JSP integration funtionality for OpenCms, also implements the FlexCache, a declarative parameter-based cache."}
{"index": 3274, "repo": "opencms-core-15.0", "code": "package gwt;\n\npackage gwt.shared; // Core shared stuff.\nInterface I_CmsClientMessageBundle; // Convenient client message bundle interface.\nInterface I_CmsCoreProvider; // Convenience interface to provide core server-side data to the client.\nInterface I_CmsFormValidator; // Interface for handling the server-side validation of a whole form.\nInterface I_CmsValidationService; // This interface is the server-side counterpart to the org.opencms.gwt.client.validation.I_CmsValidator.\nClass A_CmsClientMessageBundle; // Convenience class to access the localized messages of this OpenCms package.\nClass ClientMessages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsAliasHelper; // This class contains the real implementations of service methods related to aliases.\nClass CmsBrokenLinkRenderer; // A helper class used to generate the necessary information for displaying links which will be broken if the user tries to delete a file in the ADE GUI.\nClass CmsClientUserSettingConverter; // Helper class to deal with loading and saving user preferences from the ADE user interface.\nClass CmsCoreService; // Provides general core services.\nClass CmsDefaultFormValidator; // A form validator which does nothing special and just validates form field values independently of each other.\nClass CmsDefaultResourceStatusProvider; // Helper class to generate all the data which is necessary for the resource status dialog(s).\nClass CmsDummySerializationPolicy; // A serialization policy which allows serialization and deserialization of all classes.\nClass CmsGwtActionElement; // Sitemap action used to generate the sitemap editor.\nClass CmsGwtService; // Wrapper for GWT services served through OpenCms.\nClass CmsGwtServiceContext; // This class contains the data that should be cached for a specific service class.\nClass CmsIconUtil; // Utility class to generate the resource icon CSS.\nClass CmsLogService; // Handles client side logging.\nClass CmsMessagesService; // Exports the register client messages into a single JavaScript resource.\nClass CmsPrefetchSerializationPolicy; // A GWT serialization policy for pre-fetching.\nClass CmsPropertyEditorHelper; // Helper class responsible for loading / saving properties when using the property dialog.\nClass CmsQuickLaunchProvider; // Provides the data for the buttons in the quick launch menu.\nClass CmsResourceStatusConstants; // Constants for the resource info dialog.\n", "des": "Provides core support for GWT."}
{"index": 3275, "repo": "opencms-core-15.0", "code": "package shared;\n\npackage shared.rpc; // Shared RPC interfaces.\nInterface I_CmsAutoBeanFactory; // General AutoBean factory interface.\nInterface I_CmsCodeMirrorClientConfiguration; // AutoBean interface that represents the configuration for the client-side CodeMirror editor widget.\nInterface I_CmsContentLoadCollectorInfo; // Interface defining the data used to call a content collector.\nInterface I_CmsEditableDataExtensions; // Extended attributes for editable data generated by e.g.\nInterface I_CmsEmbeddedDialogInfo; // AutoBean interface for the data needed to open an embedded Vaadin dialog from GWT.\nInterface I_CmsHasIconClasses; // Interface for elements with icons.\nInterface I_CmsListAddMetadata; // AutoBean interface for the data injected into the page by the cms:enable-list-add tag.\nInterface I_CmsUnlockData; // Parameters for the unlock service.\nInterface I_CmsUploadConstants; // An interface that holds some constants for the upload dialog.\nClass CmsAdditionalInfoBean; // Additional info bean.\nClass CmsBroadcastMessage; // Contains the broadcast message data.\nClass CmsBrokenLinkBean; // A bean which represents either the source or the target of a broken link.\nClass CmsCategoryBean; // A specific bean holding all info to be displayed in the categories tab.\nClass CmsCategoryTreeEntry; // Recursive category tree entry.\nClass CmsClientDateBean; // A bean containing a date, both as a 'long' value and a user-readable string representation.\nClass CmsClientLock; // Client side lock class.\nClass CmsClientVariantInfo; // Client-side bean which holds information about a client variant of a template context.\nClass CmsContextMenuEntryBean; // A context menu entry bean.\nClass CmsCoreData; // Runtime data bean for prefetching.\nClass CmsCoreData.UserInfo; // Bean class containing info about the current user.\nClass CmsDataViewConstants; // Constants used by the data view widget code (client/server side).\nClass CmsDataViewParamEncoder; // Encodes/decodes the configuration passed to the data view popup as a request parameter.\nClass CmsDeleteResourceBean; // A bean which represents the information for the delete dialog.\nClass CmsExternalLinkInfoBean; // Provides information about an external link.\n", "des": "Core shared stuff."}
{"index": 3276, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsCoreService; // Provides general core services.\nInterface I_CmsCoreServiceAsync; // Provides general core services.\nInterface I_CmsLogService; // Handles client side logging.\nInterface I_CmsLogServiceAsync; // Handles client side logging.\nInterface I_CmsUploadService; // Handles all RPC services related to the upload dialog.\nInterface I_CmsUploadServiceAsync; // Handles all RPC services related to the upload dialog.\nInterface I_CmsVfsService; // A service interface for retrieving information about the VFS tree.\nInterface I_CmsVfsServiceAsync; // An asynchronous service interface for retrieving information about the VFS tree.\n", "des": "Shared RPC interfaces."}
{"index": 3277, "repo": "opencms-core-15.0", "code": "package i18n;\n\npackage i18n.tools; // Tools for i18n.\nInterface CmsMultiMessages.I_KeyFallbackHandler; // Interface to provide fallback keys to be used when the message for a key is not found.\nInterface CmsVfsResourceBundle.I_Loader; // Implementors of this interface are responsible for actually loading the data from the VFS.\nInterface I_CmsLocaleHandler; // A locale handler returns the locale name to use for the given request context.\nInterface I_CmsMessageBundle; // Utility interface for generating localized messages for internal OpenCms operations.\nInterface I_CmsMessageContainer; // Interface which represents a message independent of the locale.\nInterface I_CmsResourceBundle; // Increases the visibility of some key methods of a ResourceBundle.\nClass A_CmsMessageBundle; // Convenience base class to access the localized messages of an OpenCms package.\nClass CmsAcceptLanguageHeaderParser; // Parses the HTTP Accept-Language header as per section 14.4 of RFC 2068 (HTTP 1.1 header field definitions) and creates a sorted list of Locales from it.\nClass CmsAcceptLanguageHeaderParser.AcceptLanguage; // Struct representing an element of the HTTP Accept-Language header.\nClass CmsDefaultLocaleHandler; // Default implementation of the locale handler.\nClass CmsEncoder; // The OpenCms CmsEncoder class provides static methods to decode and encode data.\nClass CmsI18nInfo; // Bundle of i18n setting to be used to setup a new request context.\nClass CmsListResourceBundle; // A list based resource bundle that with increased visibility of some key methods.\nClass CmsLocaleComparator; // Simple comparator implementation for locales, that compares the String value of the locales.\nClass CmsLocaleGroup; // Represents a group of resources which are locale variants of each other.\nClass CmsLocaleGroupService; // Helper class for manipulating locale groups.\nClass CmsLocaleManager; // Manages the locales configured for this OpenCms installation.\nClass CmsMessageContainer; // Contains a localized message key, it's arguments and a I_CmsMessageBundle.\nClass CmsMessages; // Reads localized resource Strings from a java.util.ResourceBundle and provides convenience methods to access the Strings from a template.\nClass CmsMessageToBundleIndex; // A lookup table used to find out which VFS based message bundles (XML/property bundles) contain a given key.\n", "des": "Classes to handle internalization (i18n) and locale selection in OpenCms."}
{"index": 3278, "repo": "opencms-core-15.0", "code": "package tools;\n\nClass CmsContainerPageCopier; // Helper class for copying container pages including some of their elements.\nEnum CmsContainerPageCopier.CopyMode; // Enum representing the element copy mode.\nClass CmsContainerPageCopier.NoCustomReplacementException; // Exception indicating that no custom replacement element was found for a type which requires replacement.\n", "des": "Tools for i18n."}
{"index": 3279, "repo": "opencms-core-15.0", "code": "package importexport;\n\nInterface I_CmsImport; // This interface describes a import class which is used to import resources into the VFS.\nInterface I_CmsImportExportHandler; // An import/export handler is an abstract layer to hide the logic how to import/export a specific type of Cms data.\nClass A_CmsImport;\nClass CmsExport; // Provides the functionality to export files from the OpenCms VFS to a ZIP file.\nClass CmsExportHelper; // Wrapper to write exported OpenCms resources either to a .ZIP file or to the file system.\nClass CmsExportParameters; // Export parameters.\nClass CmsExtendedHtmlImportDefault; // The CmsExtendedHtmlImportManager keeps the default values for the HTML-> OpenCms Template converter.\nClass CmsImport; // Holds the functionality to import resources from the file system or a zip file into the OpenCms VFS.\nClass CmsImportExportManager; // Provides information about how to handle imported resources.\nClass CmsImportHelper; // Import helper.\nClass CmsImportParameters; // Import parameters.\nClass CmsImportResourceDataReader; // Subclass which doesn't actually import anything, but just reads the module data into a data structure which can then be used by the module updater.\nClass CmsImportVersion10; // Adds the XML handler rules for import and export of resources and accounts.\nClass CmsImportVersion10.RelationData; // Data class to temporarily keep track of relation data for a resource to be imported.\nClass CmsImportVersion2;\nClass CmsImportVersion3;\nClass CmsImportVersion4;\nClass CmsImportVersion5;\nClass CmsImportVersion6;\nClass CmsImportVersion7;\nClass CmsVfsImportExportHandler; // Import/export handler implementation for VFS data.\nClass CmsXmlPageConverter;\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsImportExportManager.TimestampMode; // Time modes to specify how time stamps should be handled.\nEnum CmsImportVersion10.LinkParsableCategory; // Categories of resources that need to be handled differently in the 'rewrite parseables' import step.\nClass CmsImportExportException; // Signals an error during import or export of OpenCms data.\n", "des": "Contains functions to import and export resources from the OpenCms VFS."}
{"index": 3280, "repo": "opencms-core-15.0", "code": "package json;\n\nInterface I_CmsJsonifable; // To convert objects to json.\nInterface I_JSONString; // The I_JSONString interface allows a toJSONString() method so that a class can change the behavior of JSONObject.toString(), JSONArray.toString(), and JSONWriter.value(Object).\nClass CDL; // This provides static methods to convert comma delimited text into a JSONArray, and to covert a JSONArray into comma delimited text.\nClass JSONArray; // A JSONArray is an ordered sequence of values.\nClass JSONML; // This provides static methods to convert an XML text into a JSONObject, and to convert a JSONObject into an XML text using the JsonML transform.\nClass JSONObject; // A JSONObject is an unordered collection of name/value pairs.\nClass JSONObject.Null; // JSONObject.NULL is equivalent to the value that JavaScript calls null, whilst Java's null is equivalent to the value that JavaScript calls undefined.\nClass JSONStringer; // JSONStringer provides a quick and convenient way of producing JSON text.\nClass JSONTokener; // A JSONTokener takes a source string and extracts characters and tokens from it.\nClass JSONWriter; // JSONWriter provides a quick and convenient way of producing JSON text.\nClass XML; // This provides static methods to convert an XML text into a JSONObject, and to covert a JSONObject into an XML text.\nClass XMLTokener; // The XMLTokener extends the JSONTokener to provide additional methods for the parsing of XML texts.\nClass JSONException; // The JSONException is thrown by the JSON.org classes when things are amiss.\n", "des": "Classes to create JSON objects and arrays for JavaScript in OpenCms."}
{"index": 3281, "repo": "opencms-core-15.0", "code": "package jsp;\n\npackage jsp.decorator; // HTML postprocessor, used to tag single words or phrases in the HTML output.\npackage jsp.parse; // API classes for the <cms:parse> tag.\npackage jsp.util; // Utility classes to be used for JSP pages.\nInterface I_CmsJspJsonContext; // Interface implemented by JSON tags.\nInterface I_CmsJspTagParamParent; // Interface for tag handlers implementing valid parent tags for <c:param>.\nInterface I_CmsResourceContainer; // Provides access to a CmsResource object that was previously loaded by a parent tag.\nInterface I_CmsXmlContentContainer; // Provides access to a I_CmsXmlDocument document that was previously loaded by a parent tag.\nClass A_CmsJspJsonTag; // Abstract superclass that handles the common behavior of the jsonarray/jsonobject/jsonvalue tags.\nClass CmsContentInfoBean; // A container to store information about a collector's result.\nClass CmsContentLoadCollectorInfo; // Bean containing the data needed to call a collector.\nClass CmsJspActionElement; // Bean to be used in JSP scriptlet code that provides direct access to the functionality offered by the OpenCms taglib.\nClass CmsJspBean; // Superclass for OpenCms JSP beans that provides convient access to OpenCms core and VFS functionality.\nClass CmsJspImageScalerTagSupport; // Abstract parent for all JSP tags dealing with image scaling, defines some common image scaler properties and corresponding getters/setters that may be used by extending classes.\nClass CmsJspLoginBean; // Provides convenient wrappers useful to create user login pages.\nClass CmsJspLoginPersistingBean; // Login bean which sets a cookie that can be used by CmsPersistentLoginAuthorizationHandler to automatically log the user back in when his session has expired.\nClass CmsJspNavBuilder; // Bean to provide a convenient way to build navigation structures based on the CmsJspNavElement.\nClass CmsJspNavBuilder.NavContext; // Navigation builder context.\nClass CmsJspNavElement; // Bean to collect navigation information from a resource in the OpenCms VFS.\nClass CmsJspResourceWrapper; // Wrapper subclass of CmsResource with some convenience methods.\nClass CmsJspScopedVarBodyTagSuport; // Parent for body tags that require support for setting scoped variables to the JSP page context.\nClass CmsJspTagAddParams; // This tag is used to dynamically add request parameters which are available during the execution of its body.\n", "des": "The implementation of the OpenCms JSP tag library, with some additional utility classes to help in JSP scriplet code and navigation building."}
{"index": 3282, "repo": "opencms-core-15.0", "code": "package decorator;\n\nInterface I_CmsDecoratorConfiguration; // Interface for a CmsDecoratorConfiguration.\nClass CmsDecorationBundle; // CmsDecorationBundle, contains a map of merged CmsDEcorationMaps.\nClass CmsDecorationDefintion; // This class defines text decoration to be made by the postprocessor.\nClass CmsDecorationMap; // The CmsDecorationMap is the object representation of a single decoartion file.\nClass CmsDecorationObject; // The CmsDecorationObject defines a single text decoration.\nClass CmsDecoratorConfiguration; // The CmsDecoratorConfiguration initalizes and stores the text decorations.\nClass CmsHtmlDecorator; // The CmsHtmlDecorator is the main object for processing the text decorations.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "HTML postprocessor, used to tag single words or phrases in the HTML output."}
{"index": 3283, "repo": "opencms-core-15.0", "code": "package parse;\n\nClass A_CmsConfiguredHtmlParser; // Base class for all classes that are specified for the <cms:parse parserClass=\"name\" param=\"config\" /> tag in the parserClass Attribute.\n", "des": "API classes for the <cms:parse> tag."}
{"index": 3284, "repo": "opencms-core-15.0", "code": "package config;\n\npackage config.parser; // API classes for the configuration parsers of the search form support provided for server-side Solr search.\nInterface I_CmsSearchConfiguration; // Interface the main search configuration must implement.\nInterface I_CmsSearchConfigurationCommon; // Interface the common search configuration must implement.\nInterface I_CmsSearchConfigurationDidYouMean; // Interface of the \"Did you mean ...?\" configuration for the JSP search form.\nInterface I_CmsSearchConfigurationFacet; // Configuration common to all facets.\nInterface I_CmsSearchConfigurationFacetField; // The interface a field facet configuration must implement.\nInterface I_CmsSearchConfigurationFacetQuery; // Interface for the query facet configuration.\nInterface I_CmsSearchConfigurationFacetQuery.I_CmsFacetQueryItem; // The interface of a single query facet item.\nInterface I_CmsSearchConfigurationFacetRange; // The interface a field facet configuration must implement.\nInterface I_CmsSearchConfigurationGeoFilter; // The interface a Geo filter configuration must implement.\nInterface I_CmsSearchConfigurationHighlighting; // The interface each highlighting configuration must implement.\nInterface I_CmsSearchConfigurationPagination; // The interface a pagination configuration must implement.\nInterface I_CmsSearchConfigurationSorting; // The interface a sort configuration must implement.\nInterface I_CmsSearchConfigurationSortOption; // The interface a sort option configuration must implement.\nClass CmsSearchConfiguration; // The main search configuration.\nClass CmsSearchConfigurationCommon; // Search configuration for common parameters as the query parameter etc.\nClass CmsSearchConfigurationDidYouMean; // Class keeping the configuration of the \"Did you mean ...?\" feature of the search form.\nClass CmsSearchConfigurationFacet; // Configuration that is common for all facets.\nClass CmsSearchConfigurationFacetField; // Search configuration special for field facets.\nClass CmsSearchConfigurationFacetQuery; // Configuration for the query facet.\nClass CmsSearchConfigurationFacetQuery.CmsFacetQueryItem; // Representation of one query facet item.\nClass CmsSearchConfigurationFacetRange; // Search configuration special for field facets.\nClass CmsSearchConfigurationGeoFilter; // Search configuration for the Geo filter.\nClass CmsSearchConfigurationHighlighting; // Search configuration for highlighting options.\nClass CmsSearchConfigurationPagination; // Search configuration for pagination.\nClass CmsSearchConfigurationSorting; // Configuration for sorting in general.\nClass CmsSearchConfigurationSortOption; // Configuration for a single sort option.\n", "des": "API classes for the configuration of the search form support provided for server-side Solr search."}
{"index": 3285, "repo": "opencms-core-15.0", "code": "package parser;\n\npackage parser.simplesearch; // Helpers to convert the list configuration XML content into a suitable bean, used by the CmsSimpleSearchConfigurationParser and the List manager app.\nInterface I_CmsSearchConfigurationParser; // The interface that must be implemented by search (form) configuration parsers.\nClass CmsJSONSearchConfigurationParser; // Search configuration parser reading JSON.\nClass CmsPlainQuerySearchConfigurationParser; // Search configuration parser reading a configuration containing a plain Solr query.\nClass CmsSimpleSearchConfigurationParser; // Search configuration parser using a list configuration file as the base configuration with additional JSON.\nClass CmsXMLSearchConfigurationParser; // Search configuration parser reading XML.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsSimpleSearchConfigurationParser.SortOption; // Sort options that are available by default.\n", "des": "API classes for the configuration parsers of the search form support provided for server-side Solr search."}
{"index": 3286, "repo": "opencms-core-15.0", "code": "package simplesearch;\n\npackage simplesearch.daterestrictions; // Contains classes for dealing with restrictions in list configurations.\npackage simplesearch.preconfiguredrestrictions; // Helpers for the preconfigured filter query part of the list configuration (ie.\nClass CmsCategoryFolderRestrictionBean; // Wrapper for a combined category and folder restriction.\nClass CmsConfigParserUtils; // Utils to read and update the list configuration.\nClass CmsConfigurationBean; // The list configuration data.\nClass CmsGeoFilterBean; // Bean representing a Geo filter.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsConfigurationBean.CombinationMode; // Enum representing how filter queries should be combined in a search.\n", "des": "Helpers to convert the list configuration XML content into a suitable bean, used by the CmsSimpleSearchConfigurationParser and the List manager app."}
{"index": 3287, "repo": "opencms-core-15.0", "code": "package daterestrictions;\n\nInterface I_CmsDateRestriction; // Interface for date restrictions used in list configurations.\nClass CmsDateFromTodayRestriction; // Date restrictions for a fixed number of time units going backward or forward from the current time.\nClass CmsDatePastFutureRestriction; // A restriction which selects either all entries in the past (from the current time) or all entries in the future.\nClass CmsDateRangeRestriction; // Restriction to a date between a fixed start and end date, but only one of them has to be given.\nClass CmsDateRestrictionParser; // Parses date restrictions in a list configuration.\nEnum I_CmsDateRestriction.TimeDirection; // Enum representing a direction in time (past / future).\nEnum I_CmsDateRestriction.TimeUnit; // Enum representing a time unit.\n", "des": "Contains classes for dealing with restrictions in list configurations."}
{"index": 3288, "repo": "opencms-core-15.0", "code": "package preconfiguredrestrictions;\n\nClass CmsRestrictionRule; // A single restriction rule, telling for which field and type what kind of restriction should be enforced.\nClass CmsRestrictionRuleParser; // Parser for restriction rules.\nClass CmsRestrictionsBean; // Wraps the preconfigured restrictions.\nClass CmsRestrictionsBean.FieldValues; // The values in one input field.\nEnum CmsRestrictionRule.MatchType; // Match type of the restriction, i.e., how the values should be treated.\nEnum CmsRestrictionsBean.FieldValues.FieldType; // The type describes how values in that input field should be handled.\n", "des": "Helpers for the preconfigured filter query part of the list configuration (ie."}
{"index": 3289, "repo": "opencms-core-15.0", "code": "package controller;\n\nInterface I_CmsSearchController; // Interface all search controllers must implement.\nInterface I_CmsSearchControllerCommon; // Interface to get controllers state and configuration - version for common search configurations.\nInterface I_CmsSearchControllerDidYouMean; // Interface the \"Did you mean ...?\" controller must implement.\nInterface I_CmsSearchControllerFacetField; // Interface to get controllers state and configuration - version for field facets.\nInterface I_CmsSearchControllerFacetQuery; // Interface to get controllers state and configuration - version for the query facet.\nInterface I_CmsSearchControllerFacetRange; // Interface to get controllers state and configuration - version for field facets.\nInterface I_CmsSearchControllerFacetsField; // Interface the controller for all field facets must implement - just allow access to the single controllers.\nInterface I_CmsSearchControllerFacetsRange; // Interface the controller for all range facets must implement - just allow access to the single controllers.\nInterface I_CmsSearchControllerGeoFilter; // Interface to get controllers state and configuration - version for the Geo filter.\nInterface I_CmsSearchControllerHighlighting; // Interface to get controllers configuration - version for highlighting.\nInterface I_CmsSearchControllerMain; // Interface for the main search controller.\nInterface I_CmsSearchControllerPagination; // Interface to get controllers state and configuration - version for pagination.\nInterface I_CmsSearchControllerSorting; // Interface to get controllers state and configuration - version for common search configurations.\nClass CmsSearchController; // The main controller that allows to access all single sub-controllers.\nClass CmsSearchControllerCommon; // Search controller for the common search options.\nClass CmsSearchControllerDidYouMean; // Controller for the \"Did you mean ...?\" feature.\nClass CmsSearchControllerFacetField; // Search controller for the field facet options.\nClass CmsSearchControllerFacetQuery; // Search controller for the query facet options.\nClass CmsSearchControllerFacetRange; // Search controller for the field facet options.\nClass CmsSearchControllerFacetsField; // Search controller as aggregation of all single field facet controllers.\nClass CmsSearchControllerFacetsRange; // Search controller as aggregation of all single field facet controllers.\nClass CmsSearchControllerGeoFilter; // Search controller for the Geo filter.\nClass CmsSearchControllerHighlighting; // Controller for highlighting options.\nClass CmsSearchControllerPagination; // Controller for the pagination.\nClass CmsSearchControllerSorting; // Controller for sorting options.\n", "des": "API classes for the controllers of the search form support provided for server-side Solr search."}
{"index": 3290, "repo": "opencms-core-15.0", "code": "package result;\n\nInterface I_CmsSearchResourceBean; // Interface for a single search result, as wrapped JSP EL friendly.\nInterface I_CmsSearchResultWrapper; // Interface of the JSP EL friendly wrapper for all Solr search results and the search form controller.\nInterface I_CmsSearchStateParameters; // Interface for the search state parameters.\nClass CmsSearchResourceBean; // JSP EL friendly wrapper class for a single search result (document).\nClass CmsSearchResultWrapper; // Wrapper for the whole search result.\nClass CmsSearchStateParameters; // State parameter wrapper that allows to manipulate the request parameters representing the state of the current search.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "API classes for the result of the search form support provided for server-side Solr search."}
{"index": 3291, "repo": "opencms-core-15.0", "code": "package state;\n\nInterface I_CmsSearchStateCommon; // Class for keeping the state of the common search options.\nInterface I_CmsSearchStateDidYouMean; // Class for keeping the state of the spellcheck search options.\nInterface I_CmsSearchStateFacet; // Interface for the state all facet types have in common.\nInterface I_CmsSearchStateGeoFilter; // Interface for the Geo filter state.\nInterface I_CmsSearchStatePagination; // Interface for pagination states.\nInterface I_CmsSearchStateSorting; // Interface for sorting states.\nClass CmsSearchStateCommon; // Class for handling the state of the common search options.\nClass CmsSearchStateDidYouMean; // Class for handling the state of the \"Did you mean?\" search options.\nClass CmsSearchStateFacet; // Class for keeping the state common for all facet types.\nClass CmsSearchStateGeoFilter; // Class keeping the state of the Geo filter.\nClass CmsSearchStatePagination; // Class for keeping the state for the pagination.\nClass CmsSearchStateSorting; // Class for keeping the state of the sorting options.\n", "des": "API classes for the state of the search form support provided for server-side Solr search."}
{"index": 3292, "repo": "opencms-core-15.0", "code": "package util;\n\nInterface I_CmsFormatterInfo; // Common interface for accessing formatter / resource type infos in JSPs.\nInterface I_CmsJspDeviceSelector; // This interface supports the basic functionality for the device detection.\nClass A_CmsJspCustomContextBean; // Base class for context sensitive custom beans that supports creation via CmsJspStandardContextBean.getBean(String className).\nClass CmsContainerTypeInfoWrapper; // Wrapper bean for querying information related to a container type in JSPs.\nClass CmsDynamicFunctionBeanWrapper; // A wrapper class for using dynamic function beans inside JSPs via the EL.\nClass CmsDynamicFunctionFormatWrapper; // Wrapper class for dynamic function formats which can be used from JSP EL.\nClass CmsErrorBean; // Class to display the error dialog.\nClass CmsFormatterInfoWrapper; // Wrapper class for accessing formatter information from JSPs.\nClass CmsFunctionRenderer; // Class used for rendering dynamic functions (v2).\nClass CmsJspCategoryAccessBean; // Bean for easy access to categories of a resource in JSPs.\nClass CmsJspContainerPageWrapper; // Wrapper for using container pages in JSPs.\nClass CmsJspContentAccessBean; // Allows access to the individual elements of an XML content, usually used inside a loop of a <cms:contentload> tag.\nClass CmsJspContentAccessValueWrapper; // Allows direct access to XML content values, with possible iteration of sub-nodes.\nClass CmsJspContentAccessValueWrapper.NullValueInfo; // The null value info, used to generate RDFA and DND annotations for null values.\nClass CmsJspContentAttachmentsBean; // Allows accessing 'attachments' of an XML content via the EL in JSP code, which in OpenCms are defined as the contents of its detail-only containers.\nClass CmsJspContentLoadBean; // Allows JSP access to the results of a <cms:contentload ...\nClass CmsJspDateSeriesBean; // Bean for easy access to information of an event series.\nClass CmsJspDeviceSelector; // This class provides the detection for different devices, so that the <cms:device type=\"...\">-Tag can detect which device sends the HTTP request.\nClass CmsJspDeviceSelectorDesktopMobileTablet; // Device selector class which distinguishes between the cases \"desktop\", \"mobile\" and \"tablet\".\n", "des": "Utility classes to be used for JSP pages."}
{"index": 3293, "repo": "opencms-core-15.0", "code": "package letsencrypt;\n\nInterface I_CmsLetsEncryptUpdater; // Interface for classes which should handle an updated certificate configuration.\nClass CmsLetsEncryptConfiguration; // Configuration class containing the LetsEncrypt configuration settings OpenCms needed by OpenCms.\nClass CmsLetsEncryptUpdater; // Updates the certificate configuration for the LetsEncrypt container.\nClass CmsSiteConfigToLetsEncryptConfigConverter; // Class which converts the OpenCms site configuration to a certificate configuration for the LetsEncrypt docker instance.\nClass CmsSiteConfigToLetsEncryptConfigConverter.DomainGrouping; // Represents a grouping of domains into certificates.\nClass CmsSiteConfigToLetsEncryptConfigConverter.SiteDomainInfo; // Represents the domain information for a single site.\nEnum CmsLetsEncryptConfiguration.Mode; // Enum which represents different modes that control which domains OpenCms puts into the certificate configuration.\nEnum CmsLetsEncryptConfiguration.Trigger; // Enum which represents the different types of events that LetsEncrypt updates should be triggered by.\n", "des": "Classes related to the LetsEncrypt docker integration."}
{"index": 3294, "repo": "opencms-core-15.0", "code": "package loader;\n\nInterface I_CmsFileNameGenerator; // Provides methods to generate file names either for the urlName mapping or when using a \"new\" operation in the context of the direct edit interface.\nInterface I_CmsFlexCacheEnabledLoader; // Resource loaders that implement this interface are flex cache enabled.\nInterface I_CmsResourceLoader; // This interface describes a resource loader for OpenCms, a class that can load a resource from the VFS, process it's contents and deliver the result to the user.\nInterface I_CmsResourceStringDumpLoader; // Resource loaders that implement this method can easily provide the contents of a selected targe element as a String.\nInterface I_CmsTemplateContextProvider; // Interface for template context providers.\nClass CmsClientVariant; // Bean that represents a client variant of a template context.\nClass CmsDefaultFileNameGenerator; // The default class used for generating file names either for the urlName mapping or when using a \"new\" operation in the context of the direct edit interface.\nClass CmsDefaultTemplateContextProvider; // Example implementation of a template context provider for deciding between a desktop template and a mobile template.\nClass CmsDumpLoader; // Dump loader for binary or other unprocessed resource types.\nClass CmsImageLoader; // Loader for images from the OpenCms VSF with integrated image scaling and processing capabilities.\nClass CmsImageScaler; // Creates scaled images, acting as it's own parameter container.\nClass CmsJsonMessageContainer; // Simple JSON-based message container.\nClass CmsJspLoader; // The JSP loader which enables the execution of JSP in OpenCms.\nClass CmsMacroFormatterLoader; // Loader for macro formatter.\nClass CmsMimeType; // Describes a MIME type configured in OpenCms.\nClass CmsPointerLoader; // Loader for \"pointers\" to resources in the VFS or to external resources.\nClass CmsRedirectLoader; // Loader for HTML redirects.\nClass CmsResourceManager; // Collects all available resource loaders, resource types and resource collectors at startup and provides methods to access them during OpenCms runtime.\nClass CmsResourceManager.NamedTemplate; // Bean containing a template resource and the name of the template.\nClass CmsSeoFileLoader; // The SEO file loader.\nClass CmsTemplateContext; // A template context is basically a named path to a template JSP, which has both an internal name used as a key, and a user-readable, localizable name.\n", "des": "Low-level functions to manage the loading of resources from the OpenCms VFS."}
{"index": 3295, "repo": "opencms-core-15.0", "code": "package lock;\n\nClass CmsLock; // Represents the lock state of a VFS resource.\nClass CmsLockActionRecord; // Bean class which keeps track of a locking action performed on a resource.\nClass CmsLockFilter; // A filter to retrieve the locks.\nClass CmsLockManager; // The CmsLockManager is used by the Cms application to detect the lock state of a resource.\nClass CmsLockType; // Indicates the different possible lock types.\nClass CmsLockUtil; // Locking utility class.\nClass CmsLockUtil.LockedFile; // Helper to handle the lock reports together with the files.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsLockActionRecord.LockChange; // A type for the different locking actions.\nClass CmsLockException; // Signals that a particular action was invoked on resource with an insufficient lock state.\n", "des": "The lock state of the resources in the VFS is handled with these classes."}
{"index": 3296, "repo": "opencms-core-15.0", "code": "package mail;\n\nClass CmsHtmlMail; // This class is used to send an HTML formatted email with optional attachments.\nClass CmsInputStreamDataSource; // DataSource implementation that may be filled with content from an InputStream.\nClass CmsMailHost; // Contains the configuration of an individual mail host.\nClass CmsMailSettings; // Contains the settings for the OpenCms mail service.\nClass CmsMailTransport; // Sends an email using a Thread, so that the application can continue without waiting for the mail to be send.\nClass CmsMailUtil; // Contains utility methods for dealing with emails.\nClass CmsMultiPartMail; // This class is used to send multi-part internet email like messages with attachments.\nClass CmsSimpleMail; // This class is used to send simple text internet email messages without attachments.\nClass CmsVfsDataSource; // DataSource wrapper for VFS resources, allows easy sending of VFS resources as email attachments.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Provides utility classes to generate email messages using the OpenCms email configuration."}
{"index": 3297, "repo": "opencms-core-15.0", "code": "package main;\n\nInterface I_CmsEventListener; // Implement this interface in case your class has to react to CmsEvents that are thrown by system.\nInterface I_CmsRequestHandler; // Describes an OpenCms request handler.\nInterface I_CmsResourceInit; // This interface checks the requested resource from the OpenCms request context and returns it to the calling method, which will usually be OpenCms.initResource(CmsObject, String, HttpServletRequest, HttpServletResponse).\nInterface I_CmsSessionDestroyHandler; // Interface used for notifying objects stored in a session when the session is destroyed.\nInterface I_CmsSessionStorageProvider; // This interface is used to define the session storage implementation provider.\nInterface I_CmsShellCommands; // Provides scriptable access to a class from the CmsShell.\nInterface I_CmsStartStopHandler; // Interface for plugins that need to be called during startup and shutdown.\nInterface I_CmsThrowable; // Provides localized Exception handling based on the OpenCms default locale.\nClass A_CmsAuthorizationHandler; // Abstract class to grant the needed access to the session manager.\nClass CmsAliasResourceHandler; // Resource init handler for detail-pages.\nClass CmsBroadcast; // A single broadcast message, send from one OpenCms user to another.\nClass CmsContextInfo; // Contains user information for automated creation of a CmsRequestContext during system runtime.\nClass CmsDefaultSessionStorageProvider; // The default session storage provider implementation.\nClass CmsDuplicateRemovingLogBuffer; // Class used to collect log messages and later write them to the actual log but with duplicates removed.\nClass CmsDuplicateRemovingLogBuffer.Entry; // Entry to write to the log.\nClass CmsEvent; // Event class for OpenCms for system wide events that are thrown by various operations (e.g.\nClass CmsEventManager; // Manager that controls the OpenCms event system.\nClass CmsHttpAuthenticationSettings; // Contains the settings to handle HTTP basic authentication.\nClass CmsLog; // Provides the OpenCms logging mechanism.\nClass CmsPermalinkResourceHandler; // Resource init handler that loads a resource given its permalink.\nClass CmsProtectedStaticFileHandler; // Resource init handler that provides an alternative way of serving static files like images or binary files, using the API authorization mechanism instead of the normal authorization handler.\nClass CmsServletContainerSettings; // Stores specific servlet container options, that might influence OpenCms behavior.\n", "des": "Provides the main OpenCms \"operating system\"."}
{"index": 3298, "repo": "opencms-core-15.0", "code": "package module;\n\nInterface I_CmsModuleAction; // Module action classes in OpenCms must implement this interface.\nClass A_CmsModuleAction; // Simple base implementation of the I_CmsModuleAction interface, extend this class for more sophisticated module action implementations.\nClass CmsModule; // Describes an OpenCms module.\nClass CmsModuleDependency; // Describes an OpenCms module dependency.\nClass CmsModuleImportData; // Module data read from a module zip file.\nClass CmsModuleImportExportHandler; // Import/export handler implementation for Cms modules.\nClass CmsModuleImportExportRepository; // Class which manages import/export of modules from repositories configured in opencms-importexport.xml.\nClass CmsModuleImportExportRepository.ModuleExportData; // Holds exported module data and a modification date.\nClass CmsModuleLog; // This class is responsible for reading and writing module import/export log messages, to be used by CmsResourceWrapperModules.\nClass CmsModuleManager; // Manages the modules of an OpenCms installation.\nClass CmsModuleUpdater; // Class used for updating modules.\nClass CmsModuleVersion; // A version number for an OpenCms module.\nClass CmsModuleXmlHandler; // Adds the XML handler rules for import and export of a single module.\nClass CmsReplaceModuleInfo; // Status after updating a module.\nClass CmsResourceImportData; // Import data for a single resource.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsModule.ExportMode; // The available module export modes.\nEnum CmsModuleLog.Action; // Action type.\nEnum CmsModuleXmlHandler.XmlWriteMode; // Enum used to distinguish whether we want to generate the XML for a module export's manifest or the XML for writing back opencms-modules.xml.\n", "des": "OpenCms modules provide a powerful, standardized way to extend the core OpenCms functionality."}
{"index": 3299, "repo": "opencms-core-15.0", "code": "package monitor;\n\nInterface I_CmsMemoryMonitorable; // Describes an object that can be memory monitored.\nClass CmsGroupListCache; // Cache for users' groups and data derived from those groups, like role membership.\nClass CmsMemoryMonitor; // Monitors OpenCms memory consumption.\nClass CmsMemoryMonitorConfiguration; // Memory Monitor configuration class.\nClass CmsMemoryStatus; // Data structure for dealing with memory status information.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsMemoryMonitor.CacheType; // Cache types.\n", "des": "Contains functions to monitor the OpenCms system status."}
{"index": 3300, "repo": "opencms-core-15.0", "code": "package newsletter;\n\nInterface I_CmsNewsletter; // Interface for the newsletter.\nInterface I_CmsNewsletterContent; // Every I_CmsNewsletter contains a list of I_CmsNewsletterContent objects.\nInterface I_CmsNewsletterRecipient; // Interface for recipients of I_CmsNewsletter objects.\nClass CmsNewsletter; // Basic implementation of the interface I_CmsNewsletter.\nClass CmsNewsletterContent; // Content for newsletters.\nClass CmsNewsletterContentType; // Type definition class for email content types.\nClass CmsNewsletterDistributor; // A content distributor that sends the extracted xmlcontent data to the recepient via email.\nClass CmsSimpleNewsletterRecipient; // Simple implementation of interface I_CmsNewsletterRecipient, with I_CmsNewsletterRecipient.isSubscriber(org.opencms.newsletter.I_CmsNewsletterContent) always returning true.\n", "des": "Contains classes to distribute newsletters."}
{"index": 3301, "repo": "opencms-core-15.0", "code": "package notification;\n\nClass A_CmsNotification; // Abstract class to create a notfication which will be send as a html mail to a user in OpenCms.\nClass CmsContentNotification; // The E-Mail to be written to responsibles of resources.\nClass CmsContentNotificationJob; // Scheduled job that checks the system for resources that will shortly expire, be released, or will be outdated.\nClass CmsExtendedNotificationCause; // Class to encapsulate a resource and the cause of its notification.\nClass CmsNotificationCandidates; // The basic class for the content notification feature in OpenCms.\nClass CmsNotificationCause; // Objects of this class are serialized in the additional infos of a user to store, which resources were already confirmed by the user.\nClass CmsNotificationMacroResolver; // MacroResolver for Notifications.\nClass CmsPublishNotification; // Class to send a notification to an OpenCms user with a summary of warnings and errors occurred while publishing the project.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains classes for the automatical notification of outdated, expiring or released content."}
{"index": 3302, "repo": "opencms-core-15.0", "code": "package publish;\n\nInterface I_CmsPublishEventListener; // This interface listens to events for a specific publish job.\nClass CmsPublishEngine; // This class is responsible for the publish process.\nClass CmsPublishEngineState; // Class defining the publish engine states.\nClass CmsPublishEventAdapter; // Default implementation for the I_CmsPublishEventListener.\nClass CmsPublishHistory; // List of already finished publish jobs.\nClass CmsPublishJobBase; // Defines a read-only publish job.\nClass CmsPublishJobEnqueued; // Defines a read-only publish job that is still waiting for publishing.\nClass CmsPublishJobFinished; // Defines a read-only publish job that has been already published.\nClass CmsPublishJobInfoBean; // Publish job information bean.\nClass CmsPublishJobRunning; // Defines a read-only publish job that is being published.\nClass CmsPublishListenerCollection; // Publish job information bean.\nClass CmsPublishListVerifier; // Performs some additional checks on publish lists to prevent inconsistent VFS states.\nClass CmsPublishManager; // This manager provide access to the publish engine runtime information.\nClass CmsPublishQueue; // This queue contains all not jet started publish jobs.\nClass CmsPublishReport; // Report class used for the publish operations.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsPublishManager.PublishListRemoveMode; // Enum for the different publish list remove modes.\nClass CmsPublishException; // Used to signal publish issues.\n", "des": "Classes to handle the OpenCms publish process."}
{"index": 3303, "repo": "opencms-core-15.0", "code": "package relations;\n\nInterface I_CmsCustomLinkRenderer; // Interface used to inject custom link handling behavior into HTML/link content fields.\nInterface I_CmsLinkParseable; // This interface serves to retrieve all links from a given file by parsing.\nClass CmsCategory; // Represents a category, that is just a folder.\nClass CmsCategoryService; // Provides several simplified methods for manipulating category relations.\nClass CmsExternalLinksValidationResult; // Stores the result of a pointer link validation.\nClass CmsExternalLinksValidator; // Class to validate pointer links.\nClass CmsInternalLinksValidator; // Util class to find broken links in a bundle of resources.\nClass CmsInternalRelationsValidationJob; // A schedulable OpenCms job to validate internal relations.\nClass CmsLink; // A single link entry in the link table.\nClass CmsLinkInfo; // Immutable bean representing most of the information in a CmsLink.\nClass CmsLinkUpdateUtil; // An utility class for updating the link xml node.\nClass CmsRelation; // A relation between two opencms resources.\nClass CmsRelationDeleteValidator; // Util class to find broken links in a bundle of resources to be deleted.\nClass CmsRelationFilter; // A filter to retrieve the relations for a given resource.\nClass CmsRelationPublishValidator; // Util class to find broken links in a bundle of resources to be published.\nClass CmsRelationSystemValidator; // Validates relations of resources in the OpenCms VFS.\nClass CmsRelationType; // Wrapper class for the different types of relations.\nClass CmsRelationValidatorInfoEntry; // Relation validator entry information bean.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsRelationType.CopyBehavior; // Enum representing how relations should be handled while copying resources.\n", "des": "Classes to represent and validate the internal and external links/relations of resources in the OpenCms VFS."}
{"index": 3304, "repo": "opencms-core-15.0", "code": "package report;\n\nInterface I_CmsReport; // This is the interface for the report classes which are used for the output during operations that run on a spearate Thread in OpenCms, like publish, import, export etc.\nInterface I_CmsReportThread; // Identifies a class that can be used as a report thread .\nInterface I_CmsReportUpdateFormatter; // Interface used to format report updates.\nClass A_CmsReport; // Base report class.\nClass A_CmsReportThread; // Provides a common Thread class for the reports.\nClass CmsClassicJavascriptReportUpdateFormatter; // Report update formatter for the Javascript-based report update format, which was used in the old workplace most of the time.\nClass CmsHtmlReport; // HTML report output to be used for import / export / publish operations in the entire OpenCms system.\nClass CmsLogReport; // Report class used for the logfile.\nClass CmsMultiplexReport; // Report proxy that multiplexes to all contained I_CmsReport instances.\nClass CmsPrintStreamReport; // Stream report where the output is streamed to the given print stream instance.\nClass CmsReportUpdateItem; // Represents a single report entry.\nClass CmsShellLogReport; // Report for shell which writes to LOG.\nClass CmsShellReport; // Report class used for the shell.\nClass CmsStringBufferReport; // Report class used to write the output of a report to a StringBuffer.\nClass CmsVaadinHtmlReportUpdateFormatter; // Report update formatter for the new Vaadin-based workplace.\nClass CmsWorkplaceReport; // Report class for displaying reports to the user in the workplace.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsReportFormatType; // Enum representing report entry types.\n", "des": "Classes used to generate the OpenCms reports, which are displayed during publish, import, export etc."}
{"index": 3305, "repo": "opencms-core-15.0", "code": "package repository;\n\nInterface I_CmsRepository; // Represents a repository.\nInterface I_CmsRepositoryItem; // This class represents items in the repository interface.\nInterface I_CmsRepositorySession; // A repository session which provides basic file and folder operations to the resources in the VFS of OpenCms.\nClass A_CmsRepository; // Abstract implementation of the repository interface I_CmsRepository.\nClass A_CmsRepositorySession; // Abstract implementation of the interface I_CmsRepositorySession to provide the functionality of filtering items.\nClass CmsPropertyName;\nClass CmsRepository; // Creates a repository session to access OpenCms.\nClass CmsRepositoryFilter; // This class is a filter for the repositories.\nClass CmsRepositoryItem; // Represents a single entry in the repository.\nClass CmsRepositoryLockInfo; // The class represents a lock to a I_CmsRepositoryItem.\nClass CmsRepositoryManager; // The RepositoryManager keeps a list with all configured I_CmsRepository and can be used to get a repository by its name.\nClass CmsRepositorySession; // This is the session class to work with the CmsRepository.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Package contains all classes and interfaces needed to create or use a repository to access the resources in the VFS."}
{"index": 3306, "repo": "opencms-core-15.0", "code": "package rmi;\n\nInterface I_CmsRemoteShell; // Remote interface for executing shell commands.\nInterface I_CmsRemoteShellProvider; // Used to create new instances of I_CmsRemoteShell.\nClass CmsRemoteShell; // RMI object which wraps a CmsShell and can be used for shell command execution.\nClass CmsRemoteShellClient; // Client application used to connect locally to the CmsShell server.\nClass CmsRemoteShellConstants; // Constants used by both the shell server and the client application.\nClass CmsRemoteShellProvider; // Remote object responsible for creating new remote shell instances.\nClass CmsRemoteShellServer; // This class is used to initialize the RMI mechanism and export the object used to access the remote shell.\nClass CmsShellCommandResult; // An object containing the output of a remote shell command and also the updated values for some of the internal state fields of the client application.\n", "des": "The CmsRemoteShell allows to manipulate a running server using OpenCms shell commands."}
{"index": 3307, "repo": "opencms-core-15.0", "code": "package scheduler;\n\npackage scheduler.jobs; // Some predefined implementations for often used scheduled job tasks.\nInterface I_CmsScheduledJob; // Identifies a class that can be scheduled with the OpenCms scheduler.\nClass CmsScheduledJobInfo; // Describes a scheduled job for the OpenCms scheduler.\nClass CmsScheduleManager; // Manages the OpenCms scheduled jobs.\nClass CmsSchedulerThread; // A worker thread for the OpenCms scheduler.\nClass CmsSchedulerThreadPool; // Simple thread pool used for the Quartz scheduler in OpenCms.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsSchedulerException; // Describes errors that occur in the context of the OpenCms scheduler.\n", "des": "The OpenCms scheduler provides a facility to run jobs in a regular schedule, much like the \"cron\" faciltiy in UNIX systems."}
{"index": 3308, "repo": "opencms-core-15.0", "code": "package jobs;\n\nClass CmsCreateImageSizeJob; // A schedulable OpenCms job to calculate image size information.\nClass CmsDeleteExpiredResourcesJob; // A schedulable OpenCms job to delete expired resources.\nClass CmsHistoryClearJob; // A schedulable OpenCms job to clear the history.\nClass CmsImageCacheCleanupJob; // A schedulable OpenCms job that clear the image cache for the scaled images created by the CmsImageLoader.\nClass CmsPublishJob; // Scheduled job for time based publishing.\nClass CmsPublishScheduledJob; // Scheduled job for time based publishing.\nClass CmsRemoveOldDbLogEntriesJob; // A scheduled job which removes entries older than a given amount of time from the CMS_LOG table, to improve database performance.\nClass CmsSearchIndexOptimizeJob; // A schedulable OpenCms job that optimizes the Lucene based search indexes at runtime.\nClass CmsStaticExportJob; // A schedulable OpenCms job to write a complete static export (e.g.\nClass CmsUnsubscribeDeletedResourcesJob; // A scheduled OpenCms job to unsubscribe deleted resources.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Some predefined implementations for often used scheduled job tasks."}
{"index": 3309, "repo": "opencms-core-15.0", "code": "package search;\n\npackage search.documents; // Handles indexing different sorts of document and resource type from the OpenCms VFS for the full text search.\npackage search.extractors; // Contains a generic, low-level framework for extration of plain text content out of various popular file formats.\npackage search.fields; // These classes control the mapping of the OpenCms content to the Lucene search fields.\npackage search.galleries; // Implements the search functions for the OpenCms Gallery search index, which is used by the Advanced Direct Edit (ADE) functions.\npackage search.solr; // The package contains the Solr search integration.\nInterface I_CmsIndexer; // Indexes resources for the OpenCms search.\nInterface I_CmsIndexWriter; // Abstracts the index writer implementation for the most important index manipulation operations.\nInterface I_CmsSearchDocument; // The interface for search documents.\nInterface I_CmsSearchIndex; // Interface for search indizes that should be handled by the CmsSearchManager.\nClass A_CmsSearchIndex; // Abstract base class for search indexes.\nClass CmsDependencyIndexer; // A VFS indexer that resolves locale dependent documents.\nClass CmsIndexingThread; // Implements the indexing method for a single resource as thread.\nClass CmsIndexingThreadManager; // Implements the management of indexing threads.\nClass CmsLuceneDocument; // A Lucene search document implementation.\nClass CmsLuceneIndexWriter; // Delegates indexing to a standard Lucene IndexWriter.\nClass CmsSearch; // Helper class to access the search facility within a jsp.\nClass CmsSearchAnalyzer; // An analyzer class is used by Lucene to reduce the content to be indexed with trimmed endings etc.\nClass CmsSearchCategoryCollector; // Collects category information during a search process.\nClass CmsSearchDocumentType; // A document type specifies which document factory class is used to pull the content of an OpenCms document into a Lucene index document.\nClass CmsSearchIndex; // Abstract search index implementation.\nClass CmsSearchIndexSource; // A search index source is a description of a list of Cms resources to be indexed.\nClass CmsSearchIndexUpdateData; // A collection of resources for the incremental update of a search index.\nClass CmsSearchManager; // Implements the general management and configuration of the search and indexing facilities in OpenCms.\nClass CmsSearchManager.CmsSearchForceUnlockMode; // Enumeration class for force unlock types.\n", "des": "Implements the main full text search and indexing functions available in OpenCms."}
{"index": 3310, "repo": "opencms-core-15.0", "code": "package documents;\n\nInterface I_CmsDocumentFactory; // Used to create index Lucene Documents for OpenCms resources, controls the text extraction algorithm used for a specific OpenCms resource type / MIME type combination.\nInterface I_CmsSearchExtractor; // Defines a text extractor for the integrated search engine.\nInterface I_CmsTermHighlighter; // Highlights arbitrary terms, used for generation of search excerpts.\nClass A_CmsVfsDocument; // Base document factory class for a VFS CmsResource, just requires a specialized implementation of I_CmsSearchExtractor.extractContent(CmsObject, CmsResource, I_CmsSearchIndex) for text extraction from the binary document content.\nClass CmsDocumentContainerPage; // Lucene document factory class to extract index data from a resource of type CmsResourceTypeContainerPage.\nClass CmsDocumentDependency; // Provides the dependency information about one search result document, used to generate the list of document search results.\nClass CmsDocumentGeneric; // Lucene document factory class for indexing data from a generic CmsResource.\nClass CmsDocumentHtml; // Lucene document factory class to extract index data from a cms resource containing plain html data.\nClass CmsDocumentMsOfficeOLE2; // Lucene document factory class to extract text data from a VFS resource that is an OLE 2 MS Office document.\nClass CmsDocumentMsOfficeOOXML; // Lucene document factory class to extract text data from a VFS resource that is an OOXML MS Office document.\nClass CmsDocumentOpenOffice; // Lucene document factory class to extract index data from a cms resource containing Open Document Format data.\nClass CmsDocumentPdf; // Lucene document factory class to extract index data from a cms resource containing Adobe pdf data.\nClass CmsDocumentPlainText; // Lucene document factory class to extract index data from a cms resource containing plain text data.\nClass CmsDocumentRtf; // Lucene document factory class to extract index data from a cms resource containing RTF data.\nClass CmsDocumentXmlContent; // Lucene document factory class to extract index data from an OpenCms VFS resource of type CmsResourceTypeXmlContent.\nClass CmsDocumentXmlPage; // Lucene document factory class to extract index data from a cms resource of type CmsResourceTypeXmlPage.\nClass CmsExtractionResultCache; // Implements a disk cache that stores text extraction results in the RFS.\nClass CmsTermHighlighterHtml; // Default highlighter implementation used for generation of search excerpts.\n", "des": "Handles indexing different sorts of document and resource type from the OpenCms VFS for the full text search."}
{"index": 3311, "repo": "opencms-core-15.0", "code": "package extractors;\n\nInterface I_CmsExtractionResult; // The result of a document text extraction.\nInterface I_CmsTextExtractor; // Allows extraction of the indexable \"plain\" text plus (optional) meta information from a given binary input document format.\nClass A_CmsTextExtractor; // Base utility class that allows extraction of the indexable \"plain\" text from a given document format.\nClass CmsExtractionResult; // The result of a document text extraction.\nClass CmsExtractorHtml; // Extracts the text from an HTML document.\nClass CmsExtractorMsOfficeOLE2; // Extracts text data from a VFS resource that is an OLE 2 MS Office document.\nClass CmsExtractorMsOfficeOOXML; // Extracts text data from a VFS resource that is an OOXML MS Office document.\nClass CmsExtractorOpenOffice; // Extracts the text from OpenOffice documents (.ods, .odf).\nClass CmsExtractorPdf; // Extracts the text from a PDF document.\nClass CmsExtractorRtf; // Extracts the text from a RTF document.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains a generic, low-level framework for extration of plain text content out of various popular file formats."}
{"index": 3312, "repo": "opencms-core-15.0", "code": "package fields;\n\nInterface I_CmsSearchFieldConfiguration; // Interface for search field configurations used by I_CmsSearchIndex and configured in the opencms-search.xml (see CmsSearchConfiguration).\nInterface I_CmsSearchFieldMapping; // Describes a mapping of a piece of content from an OpenCms VFS resource to a field of a search index.\nClass A_CmsSearchFieldConfiguration; // Base class for a typical field configuration.\nClass CmsGeoCoordinateFieldMapping; // Class extracting the Geo coordinates from a content field.\nClass CmsLuceneField; // An individual field configuration in a Lucene search index.\nClass CmsLuceneFieldConfiguration; // Describes a configuration of fields that are used in building a search index.\nClass CmsMacroSearchFieldMapping; // Field mapping to resolve macros as for gallery names.\nClass CmsSearchField; // A abstract implementation for a search field.\nClass CmsSearchFieldConfiguration; // Abstract implementation for OpenCms search field configurations.\nClass CmsSearchFieldConfigurationOldCategories; // Describes a field configuration using the old (pre 8.0) logic for categories that depend on properties.\nClass CmsSearchFieldMapping; // Describes a mapping of a piece of content from an OpenCms VFS resource to a field of a search index.\nClass CmsSearchFieldMappingType; // Describes a possible mapping type for a piece of content used in building a search index.\n", "des": "These classes control the mapping of the OpenCms content to the Lucene search fields."}
{"index": 3313, "repo": "opencms-core-15.0", "code": "package galleries;\n\nClass CmsGalleryNameMacroResolver; // Macro resolver used to resolve macros for the gallery name mapping.\nClass CmsGallerySearch; // Contains the functions for the gallery search.\nClass CmsGallerySearchParameters; // Parameters used for the gallery search index.\nClass CmsGallerySearchResult;\nClass CmsGallerySearchResultList; // The search result list for the gallery search index.\nEnum CmsGallerySearchParameters.CmsGallerySortParam; // Sort parameter constants.\n", "des": "Implements the search functions for the OpenCms Gallery search index, which is used by the Advanced Direct Edit (ADE) functions."}
{"index": 3314, "repo": "opencms-core-15.0", "code": "package solr;\n\npackage solr.spellchecking; // Contains the SOLR based spellcheck service classes.\nInterface I_CmsSolrIndexWriter; // Interface for Solr index writers.\nInterface I_CmsSolrPostSearchProcessor; // The post document processor can be used in order to manipulate search results after the OpenCms permission check has been done.\nClass CmsSolrConfiguration; // The Solr configuration class.\nClass CmsSolrDocument; // A search document implementation for Solr indexes.\nClass CmsSolrDocumentContainerPage; // Lucene document factory class to extract index data from a resource of type CmsResourceTypeContainerPage.\nClass CmsSolrDocumentXmlContent; // Special document text extraction factory for Solr index.\nClass CmsSolrField; // An individual field for the Solr search index.\nClass CmsSolrFieldConfiguration; // The search field implementation for Solr.\nClass CmsSolrIndex; // Implements the search within an Solr index.\nClass CmsSolrIndexWriter; // Implements the index writer for the Solr server used by OpenCms.\nClass CmsSolrLinkProcessor; // This Solr post processor generates for each found document the corresponding link and adds this link into the resulting document as field.\nClass CmsSolrQuery; // A Solr search query.\nClass CmsSolrQueryUtil; // Utilities for building and analyzing Solr queries.\nClass CmsSolrResultList; // Encapsulates a list of 'OpenCms resource documents' (CmsSearchResource).\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "The package contains the Solr search integration."}
{"index": 3315, "repo": "opencms-core-15.0", "code": "package spellchecking;\n\nClass CmsSolrSpellchecker; // CmsSolrSpellchecker is used to perform spellchecking in OpenCms by using Solr.\nClass CmsSpellcheckDictionaryIndexer; // Helping class for manipulating the Solr spellchecker indices.\n", "des": "Contains the SOLR based spellcheck service classes."}
{"index": 3316, "repo": "opencms-core-15.0", "code": "package security;\n\nInterface I_CmsAuthorizationHandler; // Defines general authorization methods.\nInterface I_CmsAuthorizationHandler.I_PrivilegedLoginAction; // Class providing the privileged login action.\nInterface I_CmsCredentialsResolver; // This interface can be used to override or replace user names or passwords which occur in the OpenCms configuration, for example to hide passwords from users who can read the configuration files.\nInterface I_CmsLoginAction; // Interface used to provide a protected login method.\nInterface I_CmsPasswordGenerator;\nInterface I_CmsPasswordHandler; // Defines methods for OpenCms password validation.\nInterface I_CmsPasswordSecurityEvaluator; // Password handler implementing this interface allow the password security to be evaluated.\nInterface I_CmsPermissionHandler; // Permission handler interface.\nInterface I_CmsPrincipal; // Representation of an identity in the cms (currently user or group), used to define permissions on a resource.\nInterface I_CmsValidationHandler; // Defines general validation methods.\nClass CmsAccessControlEntry; // An access control entry defines the permissions of a user or group for a distinct resource.\nClass CmsAccessControlList; // An access control list contains the permission sets of all principals for a distinct resource that are calculated on the permissions defined by various access control entries.\nClass CmsAdvancedPasswordHandler; // Validates the user passwords in with advanced password requirements.\nClass CmsDefaultAuthorizationHandler; // Defines default authorization methods.\nClass CmsDefaultCredentialsResolver; // Default implementation of a I_CmsCredentialResolver, which does nothing but return the credential which was passed in.\nClass CmsDefaultPasswordGenerator; // Default Password Generator class.\nClass CmsDefaultPasswordHandler; // Default implementation for OpenCms password validation, just checks if a password is at last 4 characters long.\nClass CmsDefaultPermissionHandler; // Generic base driver interface.\nClass CmsDefaultValidationHandler; // Default implementation for the validation handler.\nClass CmsOrganizationalUnit; // An organizational unit in OpenCms.\nClass CmsOrgUnitManager; // This manager provide access to the organizational unit related operations.\nClass CmsPasswordInfo; // Validating bean for changing the password.\nClass CmsPermissionSet; // An immutable permission set that contains both allowed and denied permissions as bitsets.\nClass CmsPermissionSetCustom; // A custom permission set that can be modified during runtime and contains both allowed and denied permissions as bitsets.\n", "des": "Access control and security classes for the OpenCms ACL permission system."}
{"index": 3317, "repo": "opencms-core-15.0", "code": "package site;\n\npackage site.xmlsitemap; // Contains classes related to XML sitemap generation.\nClass CmsAlternativeSiteRootMapping; // Describes a mapping rule that selects a different site root based on whether the requested path matches a set of prefixes or not.\nClass CmsSite; // Describes a configured site in OpenCms.\nClass CmsSiteManagerImpl; // Manages all configured sites in OpenCms.\nClass CmsSiteMatcher; // A matcher object to compare request data against the configured sites.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsSite.LocalizationMode; // The site localization modes.\nEnum CmsSiteMatcher.RedirectMode; // Represents the different redirect modes for a site alias.\nEnum CmsSSLMode; // Enumeration for different SSL Modes of sites.\n", "des": "Provides access to the multi-site configuration of OpenCms."}
{"index": 3318, "repo": "opencms-core-15.0", "code": "package xmlsitemap;\n\nClass CmsDetailPageDuplicateEliminatingSitemapGenerator; // Sitemap generator class which tries to eliminate duplicate detail pages for the same content and locale.\nClass CmsPathIncludeExcludeSet; // A helper class used for calculating which paths need to be included or excluded from the XML sitemap generation.\nClass CmsUpdateXmlSitemapCacheJob; // Scheduled job for updating the XML sitemap cache.\nClass CmsXmlSeoConfiguration; // Configuration bean which represents the options which are configurable from a 'seo-file' resource.\nClass CmsXmlSitemapActionElement; // Action element class for displaying the XML sitemap from a JSP.\nClass CmsXmlSitemapCache; // Cache for XML sitemaps.\nClass CmsXmlSitemapGenerator; // Class for generating XML sitemaps for SEO purposes, as described in http://www.sitemaps.org/protocol.html.\nClass CmsXmlSitemapUrlBean; // A bean which represents an entry in an XML sitemap for SEO purposes.\n", "des": "Contains classes related to XML sitemap generation."}
{"index": 3319, "repo": "opencms-core-15.0", "code": "package staticexport;\n\nInterface I_CmsLinkSubstitutionHandler; // Allows to configure customized link substitution behavior.\nInterface I_CmsStaticExportHandler; // Provides a method for scrubbing files from the export folder that might have been changed, so that the export is newly created after the next request to the resource.\nClass A_CmsOnDemandStaticExportHandler; // Abstract implementation for the I_CmsStaticExportHandler interface.\nClass A_CmsStaticExportHandler; // Abstract base implementation for the I_CmsStaticExportHandler interface.\nClass CmsAdvancedLinkSubstitutionHandler; // Advanced link substitution behavior.\nClass CmsAfterPublishMultiLanguageStaticExportHandler; // Extended after publish static export handler, supporting multi-language exports.\nClass CmsAfterPublishStaticExportHandler; // Implementation for the I_CmsStaticExportHandler interface.\nClass CmsDefaultLinkSubstitutionHandler; // Default link substitution behavior.\nClass CmsExportFolderMatcher; // This class provides a file name matcher to find out those resources which must be part of a static export.\nClass CmsExportname; // A bean for a export name.\nClass CmsExportname.CmsExportNameComparator; // A export name comparator.\nClass CmsLinkManager; // Does the link replacement for the ≶link> tags.\nClass CmsLinkProcessor; // Implements the HTML parser node visitor pattern to exchange all links on the page.\nClass CmsLinkTable; // Maintains a table of links for an element of a CmsXmlPage.\nClass CmsLinkTable.LinkKeyComparator; // Comparator used to deterministically order the link table.\nClass CmsLocalePrefixLinkSubstitutionHandler; // Link substitution handler required to render single tree localized sites.\nClass CmsOnDemandHtmlSubTreeHandler; // Concrete OnDemandExportHandler.\nClass CmsOnDemandStaticExportHandler; // Concrete OnDemandExportHandler.\nClass CmsPrefixFileFilter; // Implements the file filter used to guess the right suffix of a deleted jsp file.\nClass CmsStaticExportData; // Provides a data structure for the result of an export request.\nClass CmsStaticExportExportRule; // Help class for storing of export-rules.\nClass CmsStaticExportManager; // Provides the functionality to export resources from the OpenCms VFS to the file system.\nClass CmsStaticExportRequest; // Wrapper for static export requests, required for parameter based requests.\n", "des": "Contains the functionality for the static HTML page export."}
{"index": 3320, "repo": "opencms-core-15.0", "code": "package synchronize;\n\nInterface I_CmsSynchronizeModification; // Defines methods which can be pluged into the syncronisation process between VFS and \"real\" FS.\nClass CmsSynchronize; // Contains all methods to synchronize the VFS with the \"real\" FS.\nClass CmsSynchronizeList; // Defines the CmsSynchronizeList object, used to store synchronisation data required to synchronize the VFS and the server FS.\nClass CmsSynchronizeSettings; // Contains the settings for the synchronization.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nClass CmsSynchronizeException; // Thrown by a class which implements org.opencms.file.I_CmsSyncModifications.\n", "des": "Classes used to synchronize the OpenCms VFS with the real file system."}
{"index": 3321, "repo": "opencms-core-15.0", "code": "package ui;\n\npackage ui.actions; // Contains classes for workplace actions.\npackage ui.apps; // Contains code for workplace apps.\npackage ui.components; // Contains some reusable GUI components for Vaadin UI.\npackage ui.contextmenu; // Contains code for workplace context menu.\npackage ui.dialogs; // Contains code for workplace dialogs.\npackage ui.editors; // The available content editors.\npackage ui.login; // Contains the user interface components for the Vaadin-based login dialog.\npackage ui.report; // Contains the user interface components for reports.\npackage ui.sitemap; // Vaadin GUI components and utilities for use in the sitemap editor.\npackage ui.util; // Utilities for Vaadin workplace code.\nInterface I_CmsAppView; // Factory to create components.\nInterface I_CmsDialogContext; // Context for dialogs opened from the context menu.\nInterface I_CmsDialogContextWithAdeContext; // Interface for a dialog context which also has access to the ADE context for which it is used.\nInterface I_CmsEditPropertyContext; // Action context that allows direct editing of single properties.\nInterface I_CmsHasButtons; // Provides buttons for a dialog.\nInterface I_CmsUpdateListener<T>; // Handles updates to items of a given type.\nClass A_CmsDialogContext; // Abstract dialog context.\nClass A_CmsUI; // Abstract UI class providing access to the OpenCms context.\nClass CmsCssIcon; // An icon resource.\nClass CmsUserIconHelper; // Generates user ident-icons.\nClass CmsVaadinErrorHandler; // Error handler for uncaught Vaadin exceptions.\nClass CmsVaadinUtils; // Vaadin utility functions.\nClass CmsVaadinUtils.OptionGroupBuilder; // Helper class for building option groups.\nClass Messages; // Message bundle class.\nEnum CmsVaadinUtils.PropertyId; // Container property ids.\nEnum FontOpenCms; // The available OpenCms workplace icons.\nEnum I_CmsDialogContext.ContextType; // The available context types.\n", "des": "General code for the Vaadin UI."}
{"index": 3322, "repo": "opencms-core-15.0", "code": "package actions;\n\nInterface I_CmsADEAction; // Interface for actions used within the ADE context.\nInterface I_CmsDefaultAction; // Marks workplace actions as an default action to be executed on item click within the file table.\nInterface I_CmsWorkplaceAction; // Workplace action interface.\nClass A_CmsEditFileAction; // Action to edit a file given by the file param.\nClass A_CmsGalleryDialogAction; // Class representing an abstract gallery dialog action.\nClass A_CmsJSPAction; // Abstract class for actions to display a JSP file in a vaadin window.\nClass A_CmsToolbarAction; // Workplace action only visible in the toolbar context menus, not within the file table.\nClass A_CmsWorkplaceAction; // Abstract workplace actions class providing helper methods.\nClass CmsAboutDialogAction; // The about dialog action.\nClass CmsAvailabilityDialogAction; // The availability dialog action.\nClass CmsCategoriesDialogAction; // The categories dialog action.\nClass CmsChangeTypeDialogAction; // The change type dialog action.\nClass CmsContextMenuActionItem; // A workplace action context menu item.\nClass CmsCopyDialogAction; // The copy move dialog action.\nClass CmsCopyPageDialogAction; // Action for the 'copy page' dialog.\nClass CmsCopyToProjectDialogAction; // The copy to project dialog action.\nClass CmsDeleteDialogAction; // The delete dialog action.\nClass CmsDirectPublishDialogAction; // The direct publish dialog action.\nClass CmsDisplayAction; // The display action.\nClass CmsEditCodeDialogAction; // The edit control code dialog action.\nClass CmsEditContentAction; // Action to logout.\nClass CmsEditDialogAction; // The edit dialog action.\nClass CmsEditPageAction; // The edit page action.\nClass CmsEditPointerAction; // Action for editing external links resources.\nClass CmsEditPropertyAction; // The edit table property action.\nClass CmsEditSmallElementsAction; // Action to logout.\nClass CmsEditUserDialogAction; // The delete dialog action.\nClass CmsFavoriteDialogAction; // The action for the favorite dialog.\nClass CmsFormEditDialogAction; // The form edit dialog action.\nClass CmsGalleryDialogAction; // The gallery dialog action.\nClass CmsGalleryOptimizeDialogAction; // The gallery optimize dialog action.\n", "des": "Contains classes for workplace actions."}
{"index": 3323, "repo": "opencms-core-15.0", "code": "package apps;\n\npackage apps.cacheadmin; // Contains classes of the cache admin app.\npackage apps.dbmanager; // Contains classes of the cache admin app.\npackage apps.filehistory; // Contains classes of the file history app.\npackage apps.git; // This package contains the app classes for the git check in functionality.\npackage apps.linkvalidation; // Contains classes of the link validation app.\npackage apps.lists; // This package contains the app classes for the list configurations manager.\npackage apps.logfile; // Contains classes of the site manager app.\npackage apps.modules; // Contains classes of the module manager app.\npackage apps.projects; // The project manager app classes.\npackage apps.publishqueue; // Contains classes of the publish queue app.\npackage apps.scheduler; // The scheduled jobs manager app classes.\npackage apps.search; // Contains classes of the source search app.\npackage apps.searchindex; // Contains classes of the searchindex app.\npackage apps.sessions; // Contains classes of the site manager app.\npackage apps.sitemanager; // Contains classes of the site manager app.\npackage apps.user; // Contains classes of the user manager app.\nInterface I_CmsAppButtonProvider; // Generates app launcher buttons.\nInterface I_CmsAppCategory; // App category interface.\nInterface I_CmsAppSettings; // Used to write app settings to the user.\nInterface I_CmsAppUIContext; // The app ui context.\nInterface I_CmsCachableApp; // Apps implementing this interface will be stored in the user session so returning to the app will be quicker and use less resources.\nInterface I_CmsContextProvider; // Provides the dialog context to context menus and other context sensitive dialogs.\nInterface I_CmsCRUDApp<T>; // Interface for apps which perform CRUD operations on any kind of element like CmsSites or CmsScheduledJobs.\nInterface I_CmsFolderAppCategory; // Displays a sub menu in the app launch pad.\nInterface I_CmsHasAppLaunchCommand; // Implement this interface for apps that require special app launch actions.\nInterface I_CmsHasOrder; // Sortable configuration item interface.\nInterface I_CmsHasShortcutActions; // To provide shortcut actions an app may implement this intreface.\nInterface I_CmsMenuItem; // Workplace view menu item.\n", "des": "Contains code for workplace apps."}
{"index": 3324, "repo": "opencms-core-15.0", "code": "package cacheadmin;\n\nInterface CmsFlushCache.I_CloseableDialog; // Interface for the dialogs.\nClass CmsCacheAdminApp; // Vaadin app for Cache Administration.\nClass CmsCacheAdminConfiguration; // Configuration for Cache Administration vaadin-tool.\nClass CmsCacheFolder; // Class for the Cache folder.\nClass CmsCacheViewApp; // Class for the app which shows the content of caches.\nClass CmsCacheViewFlexConfiguration; // Configuration class for the view flex cache app.\nClass CmsCacheViewImageConfiguration; // Configuration class for the image cache view app.\nClass CmsConfirmSimpleFlushDialog; // Dialog to confirm flush without any options.\nClass CmsFlexCacheCleanDialog; // Dialog for clean flex cache.\nClass CmsFlexCacheTable; // Table showong content of flex cache.\nClass CmsFlushButtonHolderDialog; // Dialog for the flush actions.\nClass CmsFlushCache; // Vaadin Layout with Buttons to clear the different types of cache.\nClass CmsImageCacheCleanDialog; // Dialog to clean Image Cache.\nClass CmsImageCacheHelper; // Image Cache helper.\nClass CmsImageCacheHolder; // Helper class for getting information about cached images.\nClass CmsImageCacheInput; // class for the input dialog to search for cached images.\nClass CmsImageCacheTable; // Table to show entries of image cache.\nClass CmsImageVariationsTable; // Table showing information about variations of images.\nClass CmsVariationBean; // Bean for Variations im image resources.\nClass CmsVariationsDialog; // Class for the dialog to show variations of flex cache and image cache.\nEnum CmsCacheViewApp.Mode; // Modes to run this app.\n", "des": "Contains classes of the cache admin app."}
{"index": 3325, "repo": "opencms-core-15.0", "code": "package dbmanager;\n\nInterface I_CmsReportApp; // Interface for Apps, which run an import thread for files.\nClass A_CmsHTTPImportForm; // Abstract class for HTTP imports.\nClass A_CmsImportForm; // Abstract class for a form to import a file.\nClass A_CmsServerImportForm; // Abstract class for the import from a folder on the server.\nClass CmsAddExportResourcesDialog; // Dialog used to enter a list of paths to be added to the resources in the database export dialog.\nClass CmsAddPropertyDefinitionDialog; // Class for dialog to create property definition.\nClass CmsDbExportApp; // Class for the database export function.\nClass CmsDbExportConfiguration; // Configuration for Database manager app.\nClass CmsDbExportView; // Class for the Export dialog.\nClass CmsDbImportApp; // Class for the database import app.\nClass CmsDbImportHTTP; // HTTP import class.\nClass CmsDbImportHTTPConfiguration; // Configuration for Database manager app.\nClass CmsDbImportServer; // Class for the import from server option.\nClass CmsDbImportServerConfiguration; // Class for app configuration.\nClass CmsDbManager; // Class for database manager app.\nClass CmsDbManagerConfiguration; // Configuration for Database manager app.\nClass CmsDbManagerFolder; // Class for the app folder.\nClass CmsDbPropertiesApp; // Class for the property definition app.\nClass CmsDbPropertiesAppConfiguration; // Configuration class for property app.\nClass CmsDbRemovePublishLocks; // Remove publish locks.\nClass CmsDbRemovePubLocksApp; // App for the remove publish-locks function.\nClass CmsDbRemovePubLocksConfiguration; // Class for app configuration.\nClass CmsDbStaticExportApp; // Class for the database static export app.\nClass CmsDbStaticExportConfiguration; // Configuration for Database manager app.\nClass CmsDbStaticExportView; // Class for the static export view.\nClass CmsDbSynchDialog; // Class for the synchronization dialog.\nClass CmsDbSynchronizationApp; // Class for the database synchronization app.\nClass CmsDbSynchronizationConfiguration; // Configuration class for the synchronization app.\nClass CmsDbSynchronizationView; // Synchronization layout class.\nClass CmsExportThreadDialog; // The export thread report.\nClass CmsImportFile;\nClass CmsPropertyDeleteDialog; // Dialog to delete property definitions.\nClass CmsPropertyTable; // Class for the table containing all property definitions in the system.\n", "des": "Contains classes of the cache admin app."}
{"index": 3326, "repo": "opencms-core-15.0", "code": "package filehistory;\n\nClass CmsFileHistoryApp; // App for the history settings and clearing of history.\nClass CmsFileHistoryConfiguration; // Configuration class of file history app.\nClass CmsFileHistoryFolder; // Class for the folder with the file history apps.\nClass CmsFileHistoryPanel; // Class for the clear file history dialog and execution.\nClass CmsFileHistorySettings; // Class for the history settings dialog.\nClass CmsHistoryClearThread; // Clears the file history of the OpenCms database.\n", "des": "Contains classes of the file history app."}
{"index": 3327, "repo": "opencms-core-15.0", "code": "package git;\n\nClass CmsGitActionResultPanel; // Dialog that prints the result of the execution of a git action.\nClass CmsGitAppConfiguration; // App configuration for the Git checkin tool.\nClass CmsGitCheckin; // The class provides methods to automatically export modules from OpenCms and check in the exported, unzipped modules into some git repository.\nClass CmsGitConfiguration; // Access to a single git configuration file.\nClass CmsGitToolOptionsPanel; // Main widget for the Git check-in tool.\nClass Messages; // Message bundle class.\n", "des": "This package contains the app classes for the git check in functionality."}
{"index": 3328, "repo": "opencms-core-15.0", "code": "package linkvalidation;\n\nInterface I_CmsUpdatableComponent; // Interface with method to update a vaadin table.\nClass A_CmsLinkValidator; // Validator for links.\nClass CmsExternalLinksValidatorThread; // Thread for extern link validation.\nClass CmsInternalResources; // Class for the layout for choosing the resources.\nClass CmsLinkInFolderValidationApp; // App to check relations of resources in folder to other folder.\nClass CmsLinkInFolderValidationConfiguration; // Configuration for Check relation to resources outside of folder - app.\nClass CmsLinkValidationApp; // Class for the Link validation app.\nClass CmsLinkValidationConfiguration; // Configuration for Link Validation app.\nClass CmsLinkValidationExternal; // Class for the external link validation.\nClass CmsLinkValidationExternalApp; // Class for the Link validation app.\nClass CmsLinkValidationExternalConfiguration; // Configuration for Link Validation app.\nClass CmsLinkValidationFolder; // Class for the folder for the link validation tools.\nClass CmsLinkValidationInternalTable; // Result table for broken internal relations.\nClass CmsResourceListDialog; // Dialog to show list of resources.\n", "des": "Contains classes of the link validation app."}
{"index": 3329, "repo": "opencms-core-15.0", "code": "package lists;\n\nInterface CmsOptionDialog.I_OptionHandler; // Dialog handler to handle the selected option.\nClass CmsListManager; // Manager for list configuration files.\nClass CmsListManagerConfiguration; // The list manager app configuration.\nClass CmsOptionDialog; // Option dialog.\nClass CmsResultFacets; // Displays search result facets.\nClass CmsResultTable; // Table to display the list manager search results.\n", "des": "This package contains the app classes for the list configurations manager."}
{"index": 3330, "repo": "opencms-core-15.0", "code": "package logfile;\n\nInterface I_CmsLogDownloadProvider; // Provides log file download functionality.\nClass CmsDefaultLogDownloadProvider; // Default implementation for the log download functionality.\nClass CmsLogChannelTable; // Class for table to display and edit Log channels.\nClass CmsLogDownloadDialog; // Class for the Download dialog.\nClass CmsLogDownloadDialog.ZipGenerator; // Helper class for generating the zip file for the log download.\nClass CmsLogFileApp; // Main class of Log management app.\nClass CmsLogFileConfiguration; // Configuration class for Log management app.\nClass CmsLogFileOptionProvider; // Provides log files which should be available as options in the OpenCms log file viewer.\nClass CmsLogFileView; // Class for the view of log files.\nClass CmsLogFileViewSettings; // Class for the log file view settings dialog.\n", "des": "Contains classes of the site manager app."}
{"index": 3331, "repo": "opencms-core-15.0", "code": "package modules;\n\npackage modules.edit; // Contains classes of the module manager app used to edit modules.\nClass A_CmsModuleImportForm; // Abstract superclass for the module import forms.\nClass CmsImportTabForm; // Module import dialog with two tabs, one for importing via HTTP and one for importing from the server.\nClass CmsModuleApp; // Main module manager app class.\nClass CmsModuleApp.Attributes; // Additional app attributes for the module manager.\nClass CmsModuleApp.Icons; // Contains the icon constants for the module manager.\nClass CmsModuleApp.States; // Contains the different navigation states for the module maanger.\nClass CmsModuleAppConfiguration; // App configuration for the module maanger app.\nClass CmsModuleExportDialog; // The module export dialog.\nClass CmsModuleImportFile; // A bean representing a module zip file to be imported.\nClass CmsModuleImportForm; // The form for importing modules via HTTP.\nClass CmsModuleImportThread; // Report thread for importing a module.\nClass CmsModuleInfoDialog; // Widget to display the list of resource / explorer types defined in a module.\nClass CmsModuleRow; // Represents a row of the modules overview table.\nClass CmsModuleTable<T>; // Overview list for module information.\nClass CmsNewTypeForm;\nClass CmsServerModuleImportForm; // The form for importing a module from the application server.\nClass CmsSiteSelectDialog; // The dialog for selecting a site when exporting / deleting a module without a module site.\n", "des": "Contains classes of the module manager app."}
{"index": 3332, "repo": "opencms-core-15.0", "code": "package edit;\n\nClass CmsEditModuleForm; // Form for editing a module.\nClass CmsExportPointWidget; // Widget used to edit a module export point.\nClass CmsModuleDependencyWidget; // Widget used to edit a module dependency.\nClass CmsModuleResourceSelectField; // A widget for selecting a module resource.\nClass CmsSiteSelectorNewValueHandler; // Helper class used when new options are automatically added to a site selector combo box.\n", "des": "Contains classes of the module manager app used to edit modules."}
{"index": 3333, "repo": "opencms-core-15.0", "code": "package projects;\n\nClass CmsEditProjectForm; // The edit project form component.\nClass CmsProjectHistoryTable; // The project history table.\nClass CmsProjectManager; // The project manager app.\nClass CmsProjectManagerConfiguration; // The project manager app configuration.\nClass CmsProjectOverviewConfiguration; // The project overview app configuration.\nClass CmsProjectsTable; // The projects table.\nClass CmsProjectsTable.ProjectResources;\n", "des": "The project manager app classes."}
{"index": 3334, "repo": "opencms-core-15.0", "code": "package publishqueue;\n\nClass CmsPublishQueue; // Class for the Publish queue app.\nClass CmsPublishQueueConfiguration; // Configuration class for the publish queue app.\nClass CmsPublishReport; // Vertical Layout showing a publish report of a publish job.\nClass CmsPublishResources; // Class for the published resources dialog.\nClass CmsQueuedTable; // Class for Vaadin Table showing history queue elements.\n", "des": "Contains classes of the publish queue app."}
{"index": 3335, "repo": "opencms-core-15.0", "code": "package scheduler;\n\nClass CmsJobBean; // Don't use CmsScheduledJobInfo directly, so we don't need to change it if we want to change how the values are rendered, and having only the fields we want displayed in the table makes it easier to understand.\nClass CmsJobEditView; // Form used to edit a scheduled job.\nClass CmsJobManagerApp; // The scheduled jobs manager app.\nClass CmsJobTable; // Table used to display scheduled jobs, together with buttons for modifying the jobs.\nClass CmsScheduledJobsAppConfig; // App configuration for the job scheduler.\nEnum CmsJobTable.TableProperty; // Property columns of table, including their Messages for header.\n", "des": "The scheduled jobs manager app classes."}
{"index": 3336, "repo": "opencms-core-15.0", "code": "package search;\n\nClass CmsSearchReplaceSettings; // Settings bean for the dialog.\nClass CmsSearchReplaceThread; // Searches in sources.\nClass CmsSourceSearchApp; // The source search app.\nClass CmsSourceSearchAppConfiguration; // The source search app configuration.\nClass CmsSourceSearchForm; // The source search form.\nEnum CmsSourceSearchForm.SearchType; // The available search types.\n", "des": "Contains classes of the source search app."}
{"index": 3337, "repo": "opencms-core-15.0", "code": "package searchindex;\n\nClass CmsIndexingReportThread; // Implements methods to utilize a report thread for CmsIndexingReport.\nClass CmsSearchindexApp; // Class for the search index app.\nClass CmsSearchindexAppConfiguration; // Configuration class for the searchindex app.\nClass CmsSearchindexRebuild; // Class for the GUI to rebuild indexes.\nClass CmsSearchIndexTable; // Class for the vaadin table to show the indexes.\nClass CmsSourceDialog; // Class for the dialog to show source information of a given index.\n", "des": "Contains classes of the searchindex app."}
{"index": 3338, "repo": "opencms-core-15.0", "code": "package sessions;\n\nClass CmsBroadCastConfigurtion; // Configuration class of app.\nClass CmsEditLoginView; // Class for the Edit Login View.\nClass CmsKillSessionDialog; // Class for the dialog to kill sessions.\nClass CmsSendBroadcastDialog; // Class for the dialiog to send broadcasts.\nClass CmsSessionsApp; // Class for the broadcast app.\nClass CmsSessionsTable; // Class for the table to show all current sessions.\nClass CmsUserInfoDialog; // Dialog to show user information and to switch to user session.\n", "des": "Contains classes of the site manager app."}
{"index": 3339, "repo": "opencms-core-15.0", "code": "package sitemanager;\n\nClass CmsCreateSiteThread; // Report thread to save site configurations.\nClass CmsDeleteSiteDialog; // Dialog for deleting Sites.\nClass CmsEditSiteForm; // Class for the Form to edit or add a site.\nClass CmsGlobalForm; // Class for the Global configuration dialog.\nClass CmsSiteManager; // Manager class for the Site manager app.\nClass CmsSiteManagerConfiguration; // Configuration class for the site management app.\nClass CmsSitesTable; // Class to create Vaadin Table object with all available sites.\nClass CmsSitesWebserverThread; // Executes a script file.\nClass CmsWebServerConfigForm; // Class for the Web server configuration form and execution of script.\nClass CmsWorkplaceServerWidget; // Layout for workplace server configuration.\nEnum CmsSitesTable.TableProperty; // Table properties.\n", "des": "Contains classes of the site manager app."}
{"index": 3340, "repo": "opencms-core-15.0", "code": "package user;\n\nInterface I_CmsFilterableTable; // Interface for tables which support a filter function.\nInterface I_CmsOuTreeType; // Interface for OU tree types.\nInterface I_CmsPasswordFetcher; // Interface for fetching randomly generated passwords.\nInterface I_CmsToggleTable; // Interface for toggable tables.\nInterface I_CmsTreeTypeProvider; // Interface for providers of tree types in the account management overview tree.\nClass A_CmsEditUserGroupRoleDialog; // Abstract class for dialogs to change role or groups of a given user.\nClass A_CmsImportExportUserDialog; // Class to export user.\nClass CmsAccountsApp; // App for the OU Management.\nClass CmsAccountsAppConfiguration; // Configuration for Account Management app.\nClass CmsAdditionalInfosDialog; // Class for the Additional User info dialog.\nClass CmsAvailableRoleOrPrincipalTable; // Table showing available items from A_CmsEditUserGroupRoleDialog.\nClass CmsCsvWriter; // Helper to produce Csv files.\nClass CmsCurrentRoleOrPrincipalTable; // Class for the table to view and edit groups of a given user.\nClass CmsDefaultTreeTypeProvider; // Default tree type provider implementation.\nClass CmsDeleteMultiplePrincipalDialog; // Dialog for delete multiple principal.\nClass CmsDeleteOUDialog; // Dialog for delete of principals and ous.\nClass CmsGeneratePasswordDialog; // Dialog to generate a random password.\nClass CmsGroupEditDialog; // Class for the dialog to edit or create a CmsGroup.\nClass CmsGroupEditParameters; // The group edit parameters.\nClass CmsGroupsOfUserTable; // Table showing all Groups of a user.\nClass CmsGroupTable; // Class for the table containing groups of a ou.\nClass CmsImportExportUserDialog; // Dialog for CSV im- and export.\nClass CmsImportUserThread; // Class for the import user thread.\nClass CmsMoveUserToOU; // Dialog to change OU of given user.\nClass CmsNewElementDialog; // Dialog to create new element.\nClass CmsOUEditDialog; // Class for the ou edit and new dialog.\nClass CmsOUHandler; // Ou Handler.\nClass CmsOUTable; // Class to show ous in table for account management.\nClass CmsOuTree; // Class for the OU Tree.\n", "des": "Contains classes of the user manager app."}
{"index": 3341, "repo": "opencms-core-15.0", "code": "package components;\n\npackage components.editablegroup; // Contains components for editing a homogeneous list of Vaadin components, often used for multivalued fields in dialogs.\npackage components.extensions; // Contains Vaadin UI extensions.\npackage components.fileselect; // Contains components for selecting resources.\nInterface CmsAutoItemCreatingComboBox.I_NewValueHandler; // Handles automatic creation of new values.\nInterface CmsFileTable.I_FolderSelectHandler; // Handles folder selects in the file table.\nInterface CmsResourceTable.I_ResourcePropertyProvider; // Provides item property values for additional table columns.\nInterface CmsUploadButton.I_UploadListener; // Upload listener interface.\nInterface I_CmsFilePropertyEditHandler; // File table inline edit handler.\nInterface I_CmsWindowCloseListener; // Window close listener.\nClass A_CmsFocusShortcutListener; // Shortcut listener that will only be active, while the given text field has the keyboard focus.\nClass CmsAppViewLayout; // The layout used within the app view.\nClass CmsAutoItemCreatingComboBox; // A combo box which automatically creates a new option if setValue is called with an item id not already contained in the data source.\nClass CmsBasicDialog; // Basic dialog class with a content panel and button bar.\nClass CmsBasicReportPage; // Page to display a report.\nClass CmsBreadCrumb; // The bread crumb component.\nClass CmsBrowserFrame; // Extending the browser frame class to allow setting of the iFrame name attribute.\nClass CmsButtonFormRow<T extends com.vaadin.ui.Component>; // Form row with button.\nClass CmsConfirmationDialog; // Basic confirmation dialog.\nClass CmsCopyToClipboardButton; // The copy to clip-board/select text button.\nClass CmsDateField; // Convenience subclass of PopupDateField which comes preconfigured with a resolution and validation error message.\nClass CmsErrorDialog; // Dialog used to display error stack traces in the workplace.\nClass CmsExtendedSiteSelector; // Site selector widget which also optionally offers subsite options.\nClass CmsExtendedSiteSelector.SiteSelectorOption; // Class representing a single option.\nClass CmsExternalLayout; // Single component container that can render the given component in any HTML element.\nClass CmsFakeWindow; // Layout which looks like a Vaadin window without actually being a window.\n", "des": "Contains some reusable GUI components for Vaadin UI."}
{"index": 3342, "repo": "opencms-core-15.0", "code": "package editablegroup;\n\nInterface CmsEditableGroup.I_EmptyHandler; // Handles state changes when the group becomes empty/not empty.\nInterface CmsEditableGroup.I_HasError; // Interface for group row components that can have errors.\nInterface CmsEditableGroup.I_RowBuilder; // Builds editable group rows by wrapping other components.\nInterface I_CmsEditableGroupActionHandler; // Server side handler interface for button presses in a multivalue widget group row's button bar.\nInterface I_CmsEditableGroupRow; // Interface for components used as editable group rows.\nClass CmsDefaultActionHandler; // Default action handler for group buttons.\nClass CmsEditableGroup; // Manages a group of widgets used as a multivalue input.\nClass CmsEditableGroup.AddButtonEmptyHandler; // Empty handler which shows or hides an 'Add' button to add new rows, depending on whether the group is empty.\nClass CmsEditableGroup.DefaultRowBuilder; // Default implementation for row builder.\nClass CmsEditableGroupButtons; // Button bar for manipulating rows in a multivalued field list.\nClass CmsEditableGroupRow; // Default implementation for row for multivalue field lists.\n", "des": "Contains components for editing a homogeneous list of Vaadin components, often used for multivalued fields in dialogs."}
{"index": 3343, "repo": "opencms-core-15.0", "code": "package extensions;\n\nInterface CmsMaxHeightExtension.I_HeightChangeHandler; // Callback interfaces for height change notifications.\nClass CmsAutoGrowingTextArea; // Extension to add a CSS class to any component depending on it's scroll position.\nClass CmsEmbeddedDialogExtension; // The extension that provides RPC communication between the client and server side of embedded VAADIN dialogs.\nClass CmsGwtDialogExtension; // Extension used to open existing GWT based dialogs (from ADE, etc.) from the server side, for use in context menu actions.\nClass CmsHistoryExtension; // Extension to allow clientside history back and forward.\nClass CmsJSPBrowserFrameExtension; // Vaadin extension class for a BrowserFrame to display a JSP.\nClass CmsMaxHeightExtension; // Allows the use of max height in combination with vaadin layout components.\nClass CmsPollServerExtension; // Allows the use of max height in combination with vaadin layout components.\nClass CmsPropertyDialogExtension; // Extension used for the GWT-based property dialog called from the workplace.\nClass CmsScrollPositionCss; // Extension to add a CSS class to any component depending on it's scroll position.\nClass CmsUploadAreaExtension; // Extends the given component to be an upload drop area.\nClass CmsWindowCloseExtension; // Makes window close events available on the server side.\nClass CmsWindowExtension; // Extension used to open new browser windows.\n", "des": "Contains Vaadin UI extensions."}
{"index": 3344, "repo": "opencms-core-15.0", "code": "package fileselect;\n\nInterface I_CmsSelectionHandler<T>; // Handles selection of a generic type T.\nClass A_CmsFileSelectField<T>; // Abstract file select field.\nClass CmsNavigationFilter; // Filter used to hide folder tree items which are not either navigation items themselves or are required to navigate from the site root to a navigation item.\nClass CmsPathSelectField; // File path select field.\nClass CmsResourceSelectDialog; // Dialog with a site selector and file tree which can be used to select resources.\nClass CmsResourceSelectDialog.Options; // Class for site select options.\nClass CmsResourceSelectDialogContents; // Contents of the resource select dialog, filled using the declarative layout mechanism.\nClass CmsResourceTreeContainer; // The data container for the sitmeap folder selection tree.\nClass CmsResourceTreeTable; // Tree subclass used to display VFS resource trees.\nClass CmsResourceTreeTable.FileSorter; // Extends the default sorting to differentiate between files and folder when sorting by name.\n", "des": "Contains components for selecting resources."}
{"index": 3345, "repo": "opencms-core-15.0", "code": "package contextmenu;\n\nInterface CmsContextMenu.ContextMenuClosedListener; // ContextMenuClosedListener is used to listen for the event that the context menu is closed, either when a item is clicked or when the popup is canceled.\nInterface CmsContextMenu.ContextMenuItemClickListener; // ContextMenuItemClickListener is listener for context menu items wanting to notify listeners about item click\nInterface CmsContextMenu.ContextMenuOpenedListener; // ContextMenuOpenedListener is used to modify the content of context menu based on what was clicked.\nInterface CmsContextMenu.ContextMenuOpenedListener.ComponentListener; // ComponentListener is used when context menu is extending a component and works in mode where auto opening is disabled.\nInterface CmsContextMenu.ContextMenuOpenedListener.TableListener; // ContextMenuOpenedListener.TableListener sub interface for table related context menus.\nInterface CmsContextMenu.ContextMenuOpenedListener.TreeListener; // Tree listener interface.\nInterface I_CmsContextMenuAction; // Action to perform when a context menu item is clicked.\nInterface I_CmsContextMenuBuilder; // Builds an explorer context menu based on the set of selected resources' IDs.\nInterface I_CmsContextMenuItem; // Interface for workplace context menu items.\nInterface I_CmsContextMenuItemProvider; // Interface for classes which provide context menu items.\nInterface I_CmsHasMenuItemVisibility; // Interface used to check menu item visibility for context menus.\nInterface I_CmsSimpleContextMenuEntry<T>; // Interface for generic context menu entris.\nInterface I_CmsSimpleContextMenuEntry.I_HasCssStyles; // This interface allows special styles for certain entries.\nClass A_CmsSimpleVisibilityCheck; // Abstract superclass for menu item visibility checks.\nClass CmsBlockingLockCheck; // A wrapper context menu action which first checks whether the resources for which the action is executed have any children locked by different users.\nClass CmsContextMenu; // ContextMenu is an extension which can be attached to any Vaadin component to display a popup context menu.\nClass CmsContextMenu.ContextMenuClosedEvent; // ContextMenuClosedEvent is an event fired by the context menu when it's closed.\nClass CmsContextMenu.ContextMenuItemClickEvent; // ContextMenuItemClickEvent is an event produced by the context menu item when it is clicked.\nClass CmsContextMenu.ContextMenuOpenedOnComponentEvent; // ContextMenuOpenedOnComponentEvent is an event fired by the context menu when it's opened from a component.\n", "des": "Contains code for workplace context menu."}
{"index": 3346, "repo": "opencms-core-15.0", "code": "package dialogs;\n\npackage dialogs.availability; // Contains code for the availability dialog.\npackage dialogs.history; // Contains code for the file history dialog.\npackage dialogs.permissions; // Contains permission dialog classes.\nInterface I_CmsHasTitle; // Implementing classes provide a title.\nClass A_CmsSelectResourceTypeDialog;\nClass CmsChangeTypeDialog; // Dialog for changing the resource type.\nClass CmsCopyMoveDialog; // The copy move dialog.\nClass CmsCopyToProjectDialog; // The copy to project dialog.\nClass CmsDeleteDialog; // Dialog for deleting resources.\nClass CmsEmbeddedDialogContext; // Context for dialogs embedded into plain GWT modules.\nClass CmsEmbeddedDialogsUI; // Separate UI for VAADIN based dialog embedded into a GWT module.\nClass CmsGalleryOptimizeDialog; // Class representing a dialog for optimizing galleries.\nClass CmsNewDialog; // Dialog for creating new resources.\nClass CmsProjectSelectDialog; // The project select dialog.\nClass CmsPublishScheduledDialog; // The publish schedule dialog.\nClass CmsReindexDialog; // Dialog used to change resource modification times.\nClass CmsRestoreDeletedDialog; // Dialog for restoring deleted resources in a folder.\nClass CmsSecureExportDialog; // Dialog used to change resource modification times.\nClass CmsSiteSelectDialog; // The site select dialog.\nClass CmsTouchDialog; // Dialog used to change resource modification times.\nClass CmsUndeleteDialog; // Dialog used to change resource modification times.\nClass CmsUndoDialog; // Dialog used to change resource modification times.\nClass CmsUserDataDialog; // Dialog to edit the user data.\nClass Messages; // Message bundle class.\nEnum CmsCopyMoveDialog.Action; // The copy/move actions.\nEnum CmsCopyMoveDialog.DialogMode; // The dialog mode.\n", "des": "Contains code for workplace dialogs."}
{"index": 3347, "repo": "opencms-core-15.0", "code": "package availability;\n\nClass CmsAvailabilityDialog; // Availability dialog.\nClass CmsAvailabilityInfoBean; // A bean that holds the informations of the availability dialog.\n", "des": "Contains code for the availability dialog."}
{"index": 3348, "repo": "opencms-core-15.0", "code": "package history;\n\npackage history.diff; // Contains code for the comparison view of the file history dialog.\nClass CmsHistoryDialog; // Dialog used to change resource modification times.\nClass CmsHistoryRow; // Represents a row of the file history table.\n", "des": "Contains code for the file history dialog."}
{"index": 3349, "repo": "opencms-core-15.0", "code": "package diff;\n\nInterface I_CmsDiffProvider; // Interface for classes which display a comparison widget in the comparison view of the history dialog.\nClass A_CmsAttributeDiff; // Abstract super class for displaying differences between a set of properties / attributes.\nClass A_CmsAttributeDiff.IsAttributeDifference; // Predicate used to check if an attribute comparison bean actually represents a difference.\nClass CmsAttributeDiff; // Displays changes between attributes (size, modification date, etc.\nClass CmsImageDiff; // Displays two image versions side by side, scaled.\nClass CmsPropertyCompareBean; // Represents a row in an attribute comparison table.\nClass CmsPropertyDiff; // Displays differences between the sets of properties of two versions of a resource.\nClass CmsShowVersionButtons; // Provides buttons for showing the two versions being compared.\nClass CmsTextDiff; // Interprets two versions of a resource as text files, and shows a diff view for the two texts.\nClass CmsTextDiffPanel; // Widget used to display a colorized diff view for two texts.\nClass CmsValueCompareBean; // Represents a row of the XML content value comparison table.\nClass CmsValueDiff; // Displays either a diff for the XML file, or a table displaying the differences between individual content values, allowing the user to switch between the two views.\nClass CmsVersionMacroResolver;\n", "des": "Contains code for the comparison view of the file history dialog."}
{"index": 3350, "repo": "opencms-core-15.0", "code": "package permissions;\n\nInterface CmsPermissionView.PermissionChangeHandler; // Permission change handler.\nInterface CmsPrincipalSelect.I_PrincipalSelectHandler; // Handles the principal selection.\nInterface I_CmsPrincipalSelect; // Interface for use of CmsPrincipleSelectDialog.\nClass CmsPermissionBean; // Bean for permissions which have changed.\nClass CmsPermissionDialog; // The permission dialog.\nClass CmsPermissionView; // Displays the permission settings for a single principal.\nClass CmsPermissionViewTable; // Table for the ACE Entries.\nClass CmsPrincipalSelect; // The principal select widget.\nClass CmsPrincipalSelectDialog; // Class for the dialog to show the principal table.\nClass CmsPrincipalSelectExtension; // The principal select extension.\nClass CmsPrincipalTable; // Table to selecet principals used in the CmsPrincipalSelect vaadin element.\nEnum CmsPrincipalSelect.PrincipalType; // Type of principal.\nEnum CmsPrincipalSelect.WidgetType; // The widget types.\n", "des": "Contains permission dialog classes."}
{"index": 3351, "repo": "opencms-core-15.0", "code": "package editors;\n\npackage editors.messagebundle; // The data bindings and logic for the translator editor.\nInterface I_CmsEditor; // Interface for resource editors.\nClass A_CmsFrameEditor; // Class to extended by frame based editors.\nClass CmsAcaciaEditor; // The acacia XML content editor.\nClass CmsEditorStateExtension; // Extension for iFrame embedded editors storing the changed state of the edited content.\nClass CmsSourceEditor; // The plain text editor.\nClass CmsSourceEditor.EditorSettings; // Stores the editor settings.\nClass CmsXmlContentEditor; // The acacia XML content editor.\nClass CmsXmlPageEditor; // The acacia XML content editor.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "The available content editors."}
{"index": 3352, "repo": "opencms-core-15.0", "code": "package messagebundle;\n\nClass CmsMessageBundleEditor; // Controller for the VAADIN UI of the Message Bundle Editor.\nClass CmsMessageBundleEditorModel; // The class contains the logic behind the message translation editor.\nClass CmsMessageBundleEditorModel.CmsCaseInsensitiveStringComparator; // Comparator that compares strings case insensitive.\nClass CmsMessageBundleEditorModel.ConfigurableMessages; // Wrapper for the configurable messages for the column headers of the message bundle editor.\nClass CmsMessageBundleEditorModel.SortedProperties; // Extension of Properties to allow saving with keys alphabetically ordered and without time stamp as first comment.\nClass CmsMessageBundleEditorOptions; // View of the message bundle editor options, i.e., language/mode switcher, file name display and \"Add key\" option.\nClass CmsMessageBundleEditorTypes; // Types and helper classes used by the message bundle editor.\nClass CmsMessageBundleEditorTypes.Descriptor; // Helper for accessing Bundle descriptor XML contents.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsMessageBundleEditorTypes.BundleType; // Types of bundles editable by the Editor.\nEnum CmsMessageBundleEditorTypes.TableProperty; // The propertyIds of the table columns.\n", "des": "The data bindings and logic for the translator editor."}
{"index": 3353, "repo": "opencms-core-15.0", "code": "package login;\n\nClass CmsChangePasswordDialog; // Dialog used to change the password.\nClass CmsForgotPasswordDialog; // Dialog to request a password reset link if you forgot your passsword.\nClass CmsInactiveUserMessages; // Helper class for getting localized messages for the 'lock inactive users' feature.\nClass CmsLockInactiveAccountsJob; // Scheduled job for locking user accounts which have not been logged into for longer than the configured time.\nClass CmsLoginController; // Controller class which actually handles the login dialog logic.\nClass CmsLoginController.CmsLoginTargetInfo; // Represents the login target information.\nClass CmsLoginController.LoginContext; // The login context.\nClass CmsLoginController.UserAgreementHelper; // Helper subclass of CmsLoginUserAgreement which can be used without a page context.\nClass CmsLoginForm; // Login form.\nClass CmsLoginHelper; // Utility to login users to the OpenCms workplace.\nClass CmsLoginHelper.LoginParameters; // Holds the current login parameters.\nClass CmsLoginOuSelector; // Widget used to allow the user to search and select an organizational unit.\nClass CmsLoginPasswordField; // Password field for the login dialog.\nClass CmsLoginTargetOpener; // Server side component used to open the login target for a logged in user.\nClass CmsLoginUI; // The UI class for the Vaadin-based login dialog.\nClass CmsLoginUI.Parameters; // Parameters which are initialized during the initial page load of the login dialog.\nClass CmsLoginUserField; // Widget for the user name field of the login dialog.\nClass CmsPasswordChangeNotification; // Notification used to send password change link to user.\nClass CmsPasswordForm; // The change password form.\nClass CmsSecondFactorDialog; // Dialog used to ask the user for a verification code generated from his second factor, using an authenticator app.\nClass CmsSecondFactorSetupDialog; // Dialog used to set up two-factor authentication for a user.\nClass CmsSetPasswordDialog; // Dialog used to change the password.\nClass CmsTokenValidator; // Helper class for dealing with authorization tokens for the 'forgot password' functionality.\n", "des": "Contains the user interface components for the Vaadin-based login dialog."}
{"index": 3354, "repo": "opencms-core-15.0", "code": "package report;\n\nClass CmsReportDialog; // Simple dialog for displaying a report.\nClass CmsReportOverlay; // Report overlay, shows the wait spinner first and the report window later in case off longer running threads.\nClass CmsReportWidget; // A widget used to display an OpenCms report.\nClass CmsStreamReportWidget; // Widget that can be used to view a running report that is not generated specifically by an OpenCms report thread, but from the text written to the stream provided by this widget.\n", "des": "Contains the user interface components for reports."}
{"index": 3355, "repo": "opencms-core-15.0", "code": "package components;\n\nInterface I_CmsGwtDialogClientRpc; // Server-to-client Interface for the GWT dialog extension.\nInterface I_CmsGwtDialogServerRpc; // Client-to-server rpc interface for the GWT dialog extension.\nClass CmsAutoGrowingTextAreaState; // The scroll position CSS shared state.\nClass CmsBreadCrumbState; // The bread crumb state.\nClass CmsCopyToClipboardState; // The copy to clip-board/select text button shared state.\nClass CmsExternalLayoutState; // The external layout state.\nClass CmsGwtContextMenuButtonState; // Context menu button widget state.\nClass CmsHistoryState; // The history state.\nClass CmsMaxHeightState; // The max height shared state.\nClass CmsPasswordFieldState; // Widget state for the special password field used by the login dialog.\nClass CmsReportWidgetState; // Report widget state.\nClass CmsScrollPositionCssState; // The scroll position CSS shared state.\nClass CmsUploadAreaState; // The upload button state.\nClass CmsUploadState; // The upload button state.\nEnum CmsUploadState.UploadType; // The upload types.\n", "des": "Contains Vaadin component state classes and other RPC classes."}
{"index": 3356, "repo": "opencms-core-15.0", "code": "package login;\n\nInterface I_CmsLoginTargetRpc; // Client RPC interface for opening a login target.\n", "des": "Contains the user shared classes for the Vaadin-based login dialog."}
{"index": 3357, "repo": "opencms-core-15.0", "code": "package rpc;\n\nInterface I_CmsContextMenuClientRpc; // Server to client RPC communication.\nInterface I_CmsContextMenuServerRpc; // The context menu server RPC.\nInterface I_CmsEditableGroupButtonsServerRpc; // Interface for the server side RPC for the CmsEditableGroupButtons component.\nInterface I_CmsEditorStateRPC; // Editor state RPCs\nInterface I_CmsEmbeddedDialogClientRPC; // Client RPC to handle embedded dialogs.\nInterface I_CmsEmbeddingServerRpc; // Client-to-server RPC for embedding Vaadin dialogs in GWT.\nInterface I_CmsGwtContextMenuServerRpc; // Server side RPC interface for the GWT based context menu buttons.\nInterface I_CmsJSPBrowserFrameRpc; // Rpc -interface for handling results from JSP displayed on an extended BrowserFrame.\nInterface I_CmsMaxHeightServerRpc; // The max height server interface.\nInterface I_CmsPollServerRpc; // The max height server interface.\nInterface I_CmsPrincipalSelectRpc; // The principal select RPC service.\nInterface I_CmsPropertyClientRpc; // Server-to-client Interface for the GWT dialog extension.\nInterface I_CmsPropertyServerRpc; // Client-to-server rpc interface for the GWT dialog extension.\nInterface I_CmsReportClientRpc; // Client RPC interface for the report widget.\nInterface I_CmsReportServerRpc; // Server RPC interface for the report widget.\nInterface I_CmsSitemapClientRpc; // Interface for the server-to-client RPC calls used by the sitemap extension.\nInterface I_CmsSitemapServerRpc; // Interface for the client-to-server rpc calls used by the sitemap extension.\nInterface I_CmsUploadRpc; // The upload RPC interface.\nInterface I_CmsWindowClientRpc; // Server-to-client RPC for CmsWindowExtension.\nInterface I_CmsWindowCloseServerRpc; // Handles window close calls.\nInterface I_CmsWindowServerRpc; // Client-to-server RPC interface for CmsWindowExtension.\n", "des": "Contains Vaadin RPC interfaces."}
{"index": 3358, "repo": "opencms-core-15.0", "code": "package sitemap;\n\nInterface I_CmsLocaleCompareContext; // Provides information about the current state of the locale comparison editor.\nClass CmsCopyPageDialog; // Dialog used to copy container pages including their elements.\nClass CmsLocaleComparePanel; // View used to compare sitemaps across locales.\nClass CmsLocaleLinkTargetSelectionDialog; // Dialog used to select a resource which should be linked to a locale group.\nClass CmsSitemapExtension; // Extension used for the Vaadin dialogs in the sitemap editor.\nClass CmsSitemapTreeController; // Manages the sitemap tree in the 'locale comparison' view in the sitemap editor.\nClass CmsSitemapTreeDataProvider; // Loads node data for the sitemap tree.\nClass CmsSitemapTreeNode; // Widget displaying a sitemap tree node, with an openable area for its children.\nClass CmsSitemapTreeNodeData; // Represents the data of a sitemap tree node.\nClass CmsSitemapTreeNodeOpener; // Button used for opening / closing tree levels.\nClass CmsSitemapUI; // UI class for Vaadin dialogs in the sitemap editor.\nClass CmsUnlinkDialog; // Dialog to confirm detaching a resource from a locale group.\n", "des": "Vaadin GUI components and utilities for use in the sitemap editor."}
{"index": 3359, "repo": "opencms-core-15.0", "code": "package util;\n\npackage util.table; // Contains utility classes for dealing with Vaadin tables.\nInterface CmsLogicalCheckboxGroup.I_ChangeListener; // Listener interface.\nInterface CmsNewResourceBuilder.I_Callback; // Interface for callbacks which should be notified when this helper has created a resource.\nInterface I_CmsItemSorter; // Interface for item sorters that evaluate the sortable container properties.\nClass CmsComboNullToEmptyConverter; // Converts null values to an empty string for the input widgets.\nClass CmsComponentField<T extends com.vaadin.ui.Component>; // Container wrapping a single UI component.\nClass CmsLogicalCheckboxGroup; // Ensures that among a set of check boxes, at most one of them is checked, without imposing constraints on the location of the checkboxes in the UI.\nClass CmsNewResourceBuilder; // Helper class for creating a new resource using the New dialog.\nClass CmsNullToEmptyConverter; // Converts null values to an empty string for the input widgets.\nClass CmsStyleVariable;\nEnum CmsDisplayType; // Represents the three possible display types (small, medium, wide).\n", "des": "Utilities for Vaadin workplace code."}
{"index": 3360, "repo": "opencms-core-15.0", "code": "package table;\n\nClass CmsBeanTableBuilder<T>; // Builds a table based on a given bean class.\nClass CmsTableUtil; // Contains utility methods for Vaadin tables.\nAnnotation Type Column; // Annotation used to mark up bean properties with metadata for table columns.\n", "des": "Contains utility classes for dealing with Vaadin tables."}
{"index": 3361, "repo": "opencms-core-15.0", "code": "package util;\n\nInterface I_CmsCloseable; // Closeable interface that throws no exceptions.\nInterface I_CmsHtmlConverter; // HTML converters can be used to clean up HTML code and/or pretty print the code.\nInterface I_CmsHtmlNodeVisitor; // Interface for a combination of a visitor of HTML documents along with the hook to start the parser / lexer that triggers the visit.\nInterface I_CmsMacroResolver; // Describes a macro mapper, which is used to efficiently resolve macros in the form of %(key) or ${key} in an input String.\nInterface I_CmsRegexSubstitution; // Interface for generating a substitution for a pattern in a string.\nClass A_CmsHtmlConverter;\nClass A_CmsModeIntEnumeration; // Base class for all integer mode enumeration classes.\nClass A_CmsModeStringEnumeration; // Base class for all string mode enumeration classes.\nClass CmsByteArrayDataSource; // A DataSource backed by a byte array.\nClass CmsCollectionsGenericWrapper; // Provides Map wrapping utility functions for Java generics.\nClass CmsCollectionsGenericWrapper.MapWrapper<K,​V>; // Wrapper for lazy maps providing a better containsKey implementation.\nClass CmsConstantMap<K,​V>; // Returns the constant Object the map was initialized with for all CmsConstantMap.get(Object) calls, regardless of what the actual key is.\nClass CmsDataTypeUtil; // Utilities to handle basic data types.\nClass CmsDateUtil; // Utilities to get and set formated dates in OpenCms.\nClass CmsDefaultSet<T>; // A utility class used for keeping track of a set of objects.\nClass CmsExpiringValue<T>; // Simple utility class for caching a single value with a given cache expiration time.\nClass CmsFileUtil; // Provides File utility functions.\nClass CmsFileUtil.FileWalkState; // Data bean which walkFileSystem passes to its callback.\nClass CmsGeoUtil; // Utility methods for processing geo coordinates.\nClass CmsHtml2TextConverter; // Extracts the HTML page content.\nClass CmsHtmlConverter; // HTML cleaner and pretty printer.\nClass CmsHtmlConverterJTidy; // HTML cleaner and pretty printer using JTidy.\nClass CmsHtmlConverterOption; // Represents a single HTML converter configuration as defined in the OpenCms configuration file opencms-vfs.xml.\n", "des": "Utility functions for String manipulation and other often used tasks."}
{"index": 3362, "repo": "opencms-core-15.0", "code": "package widgets;\n\npackage widgets.serialdate; // Contains the server-side widget implementation, for the serial date widget..\nInterface I_CmsADEWidget; // Widgets to be used with the new XML content editor are required to implement this interface.\nInterface I_CmsComplexWidget; // Interface for complex widgets which are used in the Acacia editor to render whole nested contents.\nInterface I_CmsGalleryWidgetDynamicConfiguration; // Enables a dynamic configuration of values for the A_CmsGalleryWidget.\nInterface I_CmsImageWidgetDynamicConfiguration; // Enables a dynamic configuration of values for the CmsVfsImageWidget.\nInterface I_CmsWidget; // Describes an editor widget for use in the OpenCms workplace.\nInterface I_CmsWidgetDialog; // Describes a widget enabled dialog.\nInterface I_CmsWidgetParameter; // Parameter value wrapper used by the OpenCms workplace widgets.\nClass A_CmsAdeGalleryWidget; // Base class for all ADE gallery widget implementations.\nClass A_CmsCategorizedSelectWidget; // Abstract base class for categorized select widgets.\nClass A_CmsFormatterWidget; // Abstract superclass for widgets used to enable or disable formatters.\nClass A_CmsFormatterWidget.FormatterSelectComparator; // Comparator used to sort formatter beans in the order in which they should be displayed in the selection.\nClass A_CmsGalleryWidget; // Base class for all gallery widget implementations.\nClass A_CmsHtmlWidget; // Provides a widget that creates a rich input field using the matching component, for use on a widget dialog.\nClass A_CmsNativeComplexWidget; // This is an abstract class which you can inherit from to relatively easily implement complex widgets for rendering nested contents in Javascript.\nClass A_CmsSelectWidget; // Base class for select widgets.\nClass A_CmsWidget; // Base class for XML editor widgets.\nClass CmsAddFormatterWidget; // Widget used to select a formatter to add.\nClass CmsAdeDownloadGalleryWidget; // ADE download gallery widget implementations.\nClass CmsAdeImageGalleryWidget; // ADE image gallery widget implementations.\nClass CmsCalendarWidget; // Provides a DHTML calendar widget, for use on a widget dialog.\nClass CmsCategoryWidget; // Provides a widget for a category based dependent select boxes.\nClass CmsCategoryXmlContentHandler;\n", "des": "Contains the widget implementations, these are GUI elements used in editors and dialogs of the OpenCms workplace."}
{"index": 3363, "repo": "opencms-core-15.0", "code": "package serialdate;\n\nInterface I_CmsSerialDateBean; // Interface for serial date beans.\nClass A_CmsSerialDateBean; // Abstract base class for serial date beans.\nClass CmsSerialDateBeanDaily; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.\nClass CmsSerialDateBeanFactory; // Wrapper for the value stored by the CmsSerialDateWidget that provides easy access.\nClass CmsSerialDateBeanIndividual; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified as individual dates.\nClass CmsSerialDateBeanMonthly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.\nClass CmsSerialDateBeanMonthlyWeeks; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.\nClass CmsSerialDateBeanSingle; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles single events.\nClass CmsSerialDateBeanWeekly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a weekly base.\nClass CmsSerialDateBeanWorkingDays; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.\nClass CmsSerialDateBeanYearly; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.\nClass CmsSerialDateBeanYearlyWeekday; // Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.\nClass CmsSerialDateValue; // Server-side implementation of I_CmsSerialDateValue.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the server-side widget implementation, for the serial date widget.."}
{"index": 3364, "repo": "opencms-core-15.0", "code": "package workflow;\n\nInterface CmsDefaultPublishResourceFormatter.I_PublishResourceValidator; // Validator which can exclude some resources from publishing and supplies a status object for the excluded resources.\nInterface I_CmsPublishResourceFormatter; // 'Formats' a ResourceMap containing resources for publishing by creating a list of CmsPublishResource beans with the appropriate status informations to display.\nInterface I_CmsWorkflowManager; // Workflow manager interface.\nClass A_CmsWorkflowManager; // Abstract class which provides common functionality for workflow managers, like initialization of the configuration parameters.\nClass CmsDefaultPublishResourceFormatter; // Default formatter class for publish resources.\nClass CmsDefaultPublishResourceFormatter.DefaultComparator; // Compares publish resources by their sort date.\nClass CmsDefaultWorkflowManager; // The default implementation of the workflow manager interface, which offers only publish functionality.\nClass CmsExtendedPublishResourceFormatter; // Publish resource formatter for the extended workflow manager.\nClass CmsExtendedRealProjectWrapper; // Project wrapper which specially handles the 'release' workflow by reading resources of a project regardless of publish permissions.\nClass CmsExtendedWorkflowManager; // The default workflow manager implementation, which supports 2 basic actions, Release and Publish.\nClass CmsWorkflowNotification; // Notification class for the workflow 'release' action.\nClass CmsWorkflowResources; // Set of workflow resources, and an optional workflow.\nClass Messages; // The message bundle for the workflow package.\nClass CmsInvalidActionException; // An exception which indicates that a user tried to execute an invalid workflow action.\nClass CmsNewParentNotInWorkflowException; // An exception which indicates that the user tried to trigger a workflow action for a set of resources for which some parent folder is not included in the set, but has the resource state 'new'.\n", "des": "Classes related to publishing and workflow."}
{"index": 3365, "repo": "opencms-core-15.0", "code": "package workplace;\n\npackage workplace.commons; // Contains often used OpenCms Workplace dialogs, for example for file operations, user preferences and project based operations like publishing.\npackage workplace.comparison; // Utilities for comparing different versions of resources, used by both the classic workplace and the new Vaadin-based workplace.\npackage workplace.editors; // Base classes for the editors (WYSIWYG, plain text, XML content) used in the OpenCms Workplace.\npackage workplace.explorer; // Contains the functions that generate the Workplace \"Explorer\" view, also contains the \"New resource\" wizard.\npackage workplace.galleries; // Contains the various \"Galleries\" which are available in the editors and widgets of the OpenCms Workplace.\npackage workplace.list; // Generates the list views commonly used in the OpenCms Workplace \"Administration\" tools.\npackage workplace.threads; // A collection of thread classes that are used in the OpenCms Workplace, usually in connection with a report.\npackage workplace.tools; // Contains the base classes for implementing a tool in the OpenCms Workplace \"Administration\" view.\nInterface I_CmsDialogHandler; // Provides a method for selecting an individual jsp dialog.\nInterface I_CmsGroupNameTranslation; // Interface for transforming group names into a more human-readable form.\nInterface I_CmsPostUploadDialogHandler; // An interface which provides a hook which can be called after uploading files.\nInterface I_CmsRepositoryFolderHandler; // Evaluates the repository folder.\nInterface I_CmsWorkplaceMessageBundleProvider; // Implement this interface to provide message bundle names to added to the CmsWorkplaceMessages bundle.\nClass CmsAccountInfo; // Account info bean.\nClass CmsDialog; // Provides methods for building the dialog windows of OpenCms.\nClass CmsDialogSelector; // Selects the dialog which should be displayed by OpenCms depending on the configuration value.\nClass CmsLoginUserAgreement; // Provides methods to show a configurable user agreement dialog after a successful workplace login.\nClass CmsRepositoryFolderHandler; // The default upload folder handler.\nClass CmsWorkplace; // Master class for the JSP based workplace which provides default methods and session handling for all JSP workplace classes.\nClass CmsWorkplaceLoginHandler; // Resource init handler that loads the login form with the right parameters.\nClass CmsWorkplaceManager; // Manages the global OpenCms workplace settings for all users.\n", "des": "The base classes for the OpenCms Workplace (standard dialog, tab dialog, report based dialog) and the Workplace configuration classes are located here."}
{"index": 3366, "repo": "opencms-core-15.0", "code": "package commons;\n\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains often used OpenCms Workplace dialogs, for example for file operations, user preferences and project based operations like publishing."}
{"index": 3367, "repo": "opencms-core-15.0", "code": "package comparison;\n\nClass CmsAttributeComparison; // Comparison of resource attributes.\nClass CmsDiffViewMode; // Wrapper class for the different types of diff modes.\nClass CmsElementComparison; // Comparison of two xml page elements.\nClass CmsHistoryListUtil; // Utility methods for the history list.\nClass CmsHtmlDifferenceConfiguration; // OpenCms Html Diff operation configuration class.\nClass CmsResourceComparison; // Comparison of two OpenCms resources.\nClass CmsXmlContentElementComparison; // Comparison of two xml content elements.\nClass CmsXmlDocumentComparison; // A comparison of properties, attributes and elements of xml documents.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Utilities for comparing different versions of resources, used by both the classic workplace and the new Vaadin-based workplace."}
{"index": 3368, "repo": "opencms-core-15.0", "code": "package editors;\n\npackage editors.directedit; // Used to control the generation of the HTML for the \"direct edit\" buttons.\nInterface I_CmsEditorActionHandler; // Provides a method for performing an individual action if the user pressed a special button in the editor.\nInterface I_CmsEditorCssHandler; // Provides methods to determine the CSS style sheet URI for the editors based on the edited resource path.\nInterface I_CmsEditorHandler; // Provides a method for selecting an individual file editor.\nInterface I_CmsEditorTypeMatcher; // Provides a method for assigning additional resource types to editors.\nInterface I_CmsPreEditorActionDefinition; // Defines an action to be performed before the workplace editor is opened for the first time.\nClass A_CmsPreEditorActionDefinition; // Defines an action to be performed before the workplace editor is opened for the first time.\nClass CmsDefaultPageEditor; // Provides methods for building editors for the CmsDefaultPage page type.\nClass CmsDialogCopyLanguage; // Provides methods for the editor copy language dialog.\nClass CmsDialogElement; // Contains the setup information about a single dialog element.\nClass CmsDialogElements; // Provides methods for the editor elements dialog.\nClass CmsEditor; // Provides basic methods for building the file editors of OpenCms.\nClass CmsEditorActionDefault; // Provides a method to perform a user defined action when editing a page.\nClass CmsEditorBase; // Base class for all editors that turns of time warp deletion inherited from CmsWorkplace.\nClass CmsEditorCssHandlerDefault; // A default editor CSS handler to obtain the CSS style sheet path from the template property value of the template itself.\nClass CmsEditorDisplayOptions; // Provides methods to determine the display options of a workplace editor for the current user.\nClass CmsEditorFrameset; // Helper class to create the editor frameset.\nClass CmsEditorHandler; // This editor handler class returns the editor URI depending on various factors.\nClass CmsEditorSelector; // Selects the dialog which should be displayed by OpenCms depending on the configuration value.\nClass CmsEditorSessionInfo; // Stores editor session data.\nClass CmsPreEditorAction; // Handles the actions that should be performed before opening the editor frameset.\n", "des": "Base classes for the editors (WYSIWYG, plain text, XML content) used in the OpenCms Workplace."}
{"index": 3369, "repo": "opencms-core-15.0", "code": "package directedit;\n\nInterface I_CmsDirectEditProvider; // Provides the methods to generate the \"direct edit\" HTML fragments that are inserted in the generated pages in offline mode.\nInterface I_CmsEditHandler; // Edit handlers are optional and can be configured within the XSD-schema of a resource type.\nClass A_CmsDirectEditProvider; // Basic functions for direct edit providers.\nClass CmsAdvancedDirectEditProvider; // Provider for the OpenCms AdvancedDirectEdit.\nClass CmsDateSeriesEditHandler; // Special edit handler for contents that define multiple instances in a date series.\nClass CmsDirectEditButtonSelection; // Constants to indicate which direct edit buttons should be displayed for a direct edit resource if the user has the permissions.\nClass CmsDirectEditDefaultProvider; // Provider for the OpenCms default graphical \"direct edit\" buttons.\nClass CmsDirectEditJQueryProvider; // Provider for the OpenCms graphical \"direct edit\" buttons.\nClass CmsDirectEditJspIncludeProvider; // Direct edit provider that uses the same JSP include based logic that has been the default before the 6.2.3 release.\nClass CmsDirectEditMode; // Constants to indicate which mode to use for placement of the HTML that generates the direct edit buttons.\nClass CmsDirectEditParams; // A parameter set to start a direct edit element, for internal use only.\nClass CmsDirectEditPermissions; // Constants to indicate the direct edit permissions of a user for a VFS resource, used to describe if and how to show the direct edit buttons for the resource.\nClass CmsDirectEditResourceInfo; // Contains information about a resource that is direct edited.\nClass CmsDirectEditTextButtonProvider; // Creates HTML for simple text based direct edit buttons.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsAdvancedDirectEditProvider.SitemapDirectEditPermissions; // Direct edit permissions according to the sitemap configuration.\n", "des": "Used to control the generation of the HTML for the \"direct edit\" buttons."}
{"index": 3370, "repo": "opencms-core-15.0", "code": "package explorer;\n\nClass CmsExplorerTypeAccess; // Explorer type access object, encapsulates access control entries and lists of a explorer type.\nClass CmsExplorerTypeAccessFlushListener; // Class which listens for cache flush events to uncache cached access control settings.\nClass CmsExplorerTypeSettings; // Holds all information to build the explorer context menu of a resource type and information for the new resource dialog.\nClass CmsIconRule; // An icon configuration rule for an explorer type.\nClass CmsResourceUtil; // Provides CmsResource utility functions.\nClass CmsResourceUtil.CmsResourceProjectState; // Enumeration class for defining the resource project state.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the functions that generate the Workplace \"Explorer\" view, also contains the \"New resource\" wizard."}
{"index": 3371, "repo": "opencms-core-15.0", "code": "package galleries;\n\nClass A_CmsAjaxGallery; // Provides the general helper methods to generate the content of a gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxDownloadGallery; // Provides the specific constants, members and helper methods to generate the content of the download gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxImageGallery; // Provides the specific constants, members and helper methods to generate the content of the image gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsAjaxLinkGallery; // Provides the specific constants, members and helper methods to generate the content of the external link gallery dialog used in the XML content editors, WYSIWYG editors and context menu.\nClass CmsOpenGallery; // Provides methods for open gallery dialog.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the various \"Galleries\" which are available in the editors and widgets of the OpenCms Workplace."}
{"index": 3372, "repo": "opencms-core-15.0", "code": "package list;\n\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Generates the list views commonly used in the OpenCms Workplace \"Administration\" tools."}
{"index": 3373, "repo": "opencms-core-15.0", "code": "package threads;\n\nClass A_CmsProgressThread; // Abstract thread to keep track of operation progress.\nClass CmsDatabaseImportThread; // Imports an OpenCms export file into the VFS.\nClass CmsExportThread; // Exports selected resources of the OpenCms into an OpenCms export file.\nClass CmsExternalLinksValidatorThread; // Thread for extern link validation.\nClass CmsModuleDeleteThread; // Deletes a module.\nClass CmsModuleReplaceThread; // Replaces a module.\nClass CmsProjectDeleteThread; // Deletes a project.\nClass CmsRelationsValidatorThread; // A report thread for the relations validator.\nClass CmsSynchronizeThread; // Synchronizes a VFS folder with a folder form the \"real\" file system.\nClass CmsXmlContentRepairSettings; // Settings object that provides the settings to repair XML content resources in the OpenCms virtual file system (VFS).\nClass CmsXmlContentRepairThread; // Repairs XML content resources according to their XSD using the corresponding settings object.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "A collection of thread classes that are used in the OpenCms Workplace, usually in connection with a report."}
{"index": 3374, "repo": "opencms-core-15.0", "code": "package tools;\n\npackage tools.scheduler; // This package contains the tool classes for the job management related administration views.\nInterface I_CmsHtmlIconButton; // Interface for html buttons with icon.\nInterface I_CmsToolHandler; // Interface for an admin tool handler.\nClass A_CmsHtmlIconButton; // Default skeleton for an html icon button.\nClass A_CmsToolHandler; // Helper class to build easily other admin tool handlers.\nClass CmsDefaultToolHandler; // Default admin tool handler.\nClass CmsExplorerDialog; // Dialog for explorer views in the administration view.\nClass CmsHtmlIconButtonStyleEnum; // Wrapper class for the different style of icon buttons.\nClass CmsIdentifiableObjectContainer<T>; // Default implementation of a named object container.\nClass CmsInvisibleToolHandler; // This tool handler just hides the tool for the user, but the tool can still be invoked explicitly, usefull for tool that requires an argument, like edit tools.\nClass CmsOfflineToolHandler; // This tool handler disables the tool if in online project.\nClass CmsOnlyAdminToolHandler; // This tool handler hides the tool to non admin users.\nClass CmsTool; // Implementation of an administration tool.\nClass CmsToolDialog; // Helper class that encapsulates all the code for the \"new\" style of the administration dialogs.\nClass CmsToolGroup; // This is an admin tool group, it just generates the html code for the group structure.\nClass CmsToolMacroResolver; // Resolves special macros for the admin view.\nClass CmsToolManager; // Manages the registered tools, actualizing its state every time the workplace is reinitialize.\nClass CmsToolRootHandler; // Admin tool handler for tool roots.\nClass CmsToolUserData; // Store for some administration view parameters, for each user, used by the CmsToolManager.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains the base classes for implementing a tool in the OpenCms Workplace \"Administration\" view."}
{"index": 3375, "repo": "opencms-core-15.0", "code": "package scheduler;\n\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "This package contains the tool classes for the job management related administration views."}
{"index": 3376, "repo": "opencms-core-15.0", "code": "package xml;\n\npackage xml.containerpage; // Contains functions for the ADE main pages, commonly called \"Container Pages\" in OpenCms.\npackage xml.content; // Contains functions for structured content storage using XML, commonly called \"XML content\" in OpenCms.\npackage xml.page; // Contains functions for unstructured content storage using XML, commonly called \"XML pages\" in OpenCms.\npackage xml.types; // Contains the basic XML content type definitions, used for XML content and XML pages.\nInterface I_CmsXmlDocument; // Describes the API to access the values of a XML content document.\nClass A_CmsXmlDocument; // Provides basic XML document handling functions useful when dealing with XML documents that are stored in the OpenCms VFS.\nClass CmsXmlContentDefinition; // Describes the structure definition of an XML content object.\nClass CmsXmlContentTypeManager; // Manager class for registered OpenCms XML content types and content collectors.\nClass CmsXmlEntityResolver; // Resolves XML entities (e.g.\nClass CmsXmlErrorHandler; // Error hander for writing errors found during XML validation to the OpenCms log.\nClass CmsXmlFileTransformer; // Transforms all resources of a given type by\nClass CmsXmlGenericWrapper; // Provides generic wrappers for XML library methods that do not support Java 5 generic types.\nClass CmsXmlMessages; // The xml messages overwrite some methods of the general CmsMessages class to get keys from an individual configuration file.\nClass CmsXmlUtils; // Provides some basic XML handling utilities.\nClass CmsXmlValidationErrorHandler; // Error hander for writing errors found during XML validation to the OpenCms log.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum CmsXmlContentDefinition.SequenceType; // Enumeration of possible sequence types in a content definition.\nClass CmsXmlException; // Signals that an error occurred while processing an xml resource.\n", "des": "Basic XML functionality and utilities used by OpenCms to maintain XML documents and content."}
{"index": 3377, "repo": "opencms-core-15.0", "code": "package containerpage;\n\nInterface I_CmsADEConfiguration; // Configurable & expandable configuration.\nInterface I_CmsFormatterBean; // Interface representing a configured formatter.\nClass CmsADECache; // Cache object instance for simultaneously cache online and offline items.\nClass CmsADECacheSettings; // The cache settings for ADE.\nClass CmsADESessionCache; // ADE's session cache.\nClass CmsADESessionCache.LastPageBean; // Stores information about the container page which was last edited, so we can jump back to it later.\nClass CmsConfigurationFileFinder; // Helper class for locating configuration files by looking up their location in properties of another resource.\nClass CmsConfigurationItem; // A single item of the ADE file type configuration.\nClass CmsContainerBean; // One container of a container page.\nClass CmsContainerElementBean; // One element of a container in a container page.\nClass CmsContainerPageBean; // Describes one locale of a container page.\nClass CmsDynamicFunctionBean; // A class which contains the data parsed from a dynamic function XML content.\nClass CmsDynamicFunctionBean.Format; // A bean which contains a single format for a dynamic function, which contains of the function JSP, the container settings and the parameters.\nClass CmsDynamicFunctionParser; // The parser class for creating dynamic function beans from XML contents.\nClass CmsFlexFormatterBean; // Formatter configuration for flex formatters.\nClass CmsFormatterBean; // A bean containing formatter configuration data as strings.\nClass CmsFormatterConfiguration; // Represents a formatter configuration.\nClass CmsFormatterConfiguration.FormatterComparator; // This class is used to sort lists of formatter beans in order of importance.\nClass CmsFormatterConfiguration.IsDetail; // Predicate which checks whether the given formatter is a detail formatter.\nClass CmsFormatterConfiguration.IsDisplay; // Predicate which checks whether the given formatter is a display formatter.\nClass CmsFormatterConfiguration.IsSchemaFormatter; // Predicate to check whether the formatter is from a schema.\nClass CmsFunctionFormatterBean; // A bean containing formatter configuration data as strings.\nClass CmsGroupContainerBean; // A group container.\nClass CmsHtmlRedirectHandler; // Content handler for HTML redirects.\nClass CmsLazyFolder; // Helper class for creating a folder if it doesn'T already exist.\n", "des": "Contains functions for the ADE main pages, commonly called \"Container Pages\" in OpenCms."}
{"index": 3378, "repo": "opencms-core-15.0", "code": "package content;\n\nInterface I_CmsXmlContentEditorChangeHandler; // Handles changes during the xml content editor session.\nInterface I_CmsXmlContentHandler; // Handles special XML content livetime events, and also provides XML content editor rendering hints.\nInterface I_CmsXmlContentLocation; // This class represents a location in an XML content for a specific locale.\nInterface I_CmsXmlContentValueLocation; // Interface representing an XML content location which corresponds to an actual content value.\nInterface I_CmsXmlContentValueVisitor; // Visitor interface that allows looping through all the values in a XML content document.\nInterface I_CmsXmlContentVisibilityHandler; // Handles the visibility of fields in the XML content editor.\nClass CmsChangeHandlerConfig; // A configuration bean representing a <ChangeHandler> element configured in an XSD's field settings.\nClass CmsDefaultXmlContentHandler; // Default implementation for the XML content handler, will be used by all XML contents that do not provide their own handler.\nClass CmsDefaultXmlContentHandler.VisibilityConfiguration; // Contains the visibility handler configuration for a content field path.\nClass CmsGeoMappingConfiguration; // Geo-coordinate mapping configuration for an XML content schema.\nClass CmsGeoMappingConfiguration.Entry; // A single configuration entry.\nClass CmsMappingResolutionContext; // A class which represents the context for resolving all content value mappings of an XML content.\nClass CmsNumberSuffixNameSequence; // Name generator which appends a numeric suffix to a given base string.\nClass CmsVersionTransformer; // Provides static methods for XML content version transformations.\nClass CmsVfsBundleLoaderXml; // Loads message bundles from the different locales of a single XML content.\nClass CmsVfsFileValueBean; // A bean class containing both a path and a UUID which should be stored in an XML file value.\nClass CmsXmlContent; // Implementation of a XML content object, used to access and manage structured content.\nClass CmsXmlContentErrorHandler; // Handler for issues found during XML content validation.\nClass CmsXmlContentFactory; // Provides factory methods to unmarshal (read) an XML content object.\nClass CmsXmlContentMacroVisitor; // Visitor implementation that provides macro resolving for all visited values.\nClass CmsXmlContentProperty; // Describes both VFS properties and Container Page Element settings, used by the GWT client.\nClass CmsXmlContentPropertyHelper; // Provides common methods on XML property configuration.\nClass CmsXmlContentRootLocation; // Represents the root of an XML content for a given locale.\n", "des": "Contains functions for structured content storage using XML, commonly called \"XML content\" in OpenCms."}
{"index": 3379, "repo": "opencms-core-15.0", "code": "package page;\n\nClass CmsXmlPage; // Implementation of a page object used to access and manage xml data.\nClass CmsXmlPageFactory; // Provides factory methods to unmarshal (read) an XML page object.\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\n", "des": "Contains functions for unstructured content storage using XML, commonly called \"XML pages\" in OpenCms."}
{"index": 3380, "repo": "opencms-core-15.0", "code": "package types;\n\nInterface I_CmsXmlContentValue; // Provides access to the value of a specific XML content node.\nInterface I_CmsXmlSchemaType; // Describes a type in an OpenCms XML schema based content definition.\nInterface I_CmsXmlValidateWithMessage; // Interface to provide specific error messages on validation\nClass A_CmsXmlContentValue; // Base class for XML content value implementations.\nClass A_CmsXmlValueCdataBase; // Base class for XML content value implementations that require only a simple XML cdata text node.\nClass A_CmsXmlValueTextBase; // Base class for XML content value implementations that require only a simple XML plain text node.\nClass CmsXmlBooleanValue; // Describes the XML content type \"OpenCmsBoolean\".\nClass CmsXmlCategoryValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlColorValue; // Describes the XML content type \"OpenCmsColor\".\nClass CmsXmlDateTimeValue; // Describes the XML content type \"OpenCmsDateTime\".\nClass CmsXmlDisplayFormatterValue; // XML value type for display formatters.\nClass CmsXmlDynamicCategoryValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlHtmlValue; // Describes the XML content type \"OpenCmsHtml\".\nClass CmsXmlLocaleValue; // Describes the XML content type \"OpenCmsLocale\".\nClass CmsXmlNestedContentDefinition; // A nested content XML definition that is included by another XML content definition.\nClass CmsXmlPlainTextStringValue; // Describes the XML content type \"OpenCmsPlainTextString\".\nClass CmsXmlSerialDateValue; // Describes the XML content type \"OpenCmsSerialDate\".\nClass CmsXmlStringValue; // Describes the XML content type \"OpenCmsString\".\nClass CmsXmlVarLinkValue; // Describes the XML content type \"OpenCmsVarLink\".\nClass CmsXmlVfsFileValue; // Describes the XML content type \"OpenCmsVfsFile\".\nClass CmsXmlVfsImageValue; // Describes the XML content type \"OpenCmsVfsImage\".\nClass Messages; // Convenience class to access the localized messages of this OpenCms package.\nEnum I_CmsXmlContentValue.SearchContentType; // The available search types for element searchsetting.\n", "des": "Contains the basic XML content type definitions, used for XML content and XML pages."}
{"index": 3381, "repo": "dagger-2.47", "code": "package dagger;\n\npackage dagger.assisted; // This package contains the API for Dagger's assisted injection.\npackage dagger.multibindings; // This package contains the API by which Dagger allows you to bind several objects into a collection that can be injected without depending directly on each of the individual bindings.\nInterface Lazy<T>; // A handle to a lazily-computed value.\nInterface MembersInjector<T>; // Injects dependencies into the fields and methods on instances of type T.\nAnnotation Type Binds; // Annotates abstract methods of a Module that delegate bindings.\nAnnotation Type BindsInstance; // Marks a method on a component builder or a parameter on a component factory as binding an instance to some key within the component.\nAnnotation Type BindsOptionalOf; // Annotates methods that declare bindings for Optional containers of values from bindings that may or may not be present in the component.\nAnnotation Type Component; // Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of Component.modules().\nAnnotation Type Component.Builder; // A builder for a component.\nAnnotation Type Component.Factory; // A factory for a component.\nAnnotation Type MapKey; // Identifies annotation types that are used to associate keys with values returned by provider methods in order to compose a map.\nAnnotation Type Module; // Annotates a class that contributes to the object graph.\nAnnotation Type Provides; // Annotates methods of a module to create a provider method binding.\nAnnotation Type Reusable; // A scope that indicates that the object returned by a binding may be (but might not be) reused.\nAnnotation Type Subcomponent; // A subcomponent that inherits the bindings from a parent Component or Subcomponent.\nAnnotation Type Subcomponent.Builder; // A builder for a subcomponent.\nAnnotation Type Subcomponent.Factory; // A factory for a subcomponent.\n", "des": "This package contains the public API for the Dagger 2 dependency injection framework."}
{"index": 3382, "repo": "dagger-2.47", "code": "package assisted;\n\nAnnotation Type Assisted; // Annotates a parameter within an AssistedInject-annotated constructor.\nAnnotation Type AssistedFactory; // Annotates an abstract class or interface used to create an instance of a type via an AssistedInject constructor.\nAnnotation Type AssistedInject; // Annotates the constuctor of a type that will be created via assisted injection.\n", "des": "This package contains the API for Dagger's assisted injection."}
{"index": 3383, "repo": "dagger-2.47", "code": "package multibindings;\n\nAnnotation Type ClassKey; // A MapKey annotation for maps with Class<?> keys.\nAnnotation Type ElementsIntoSet; // The method's return type is Set<T> and all values are contributed to the set.\nAnnotation Type IntKey; // A MapKey annotation for maps with int keys.\nAnnotation Type IntoMap; // The method's return type forms the type argument for the value of a Map<K, Provider<V>>, and the combination of the annotated key and the returned value is contributed to the map as a key/value pair.\nAnnotation Type IntoSet; // The method's return type forms the generic type argument of a Set<T>, and the returned value is contributed to the set.\nAnnotation Type LongKey; // A MapKey annotation for maps with long keys.\nAnnotation Type Multibinds; // Annotates abstract module methods that declare multibindings.\nAnnotation Type StringKey; // A MapKey annotation for maps with String keys.\n", "des": "This package contains the API by which Dagger allows you to bind several objects into a collection that can be injected without depending directly on each of the individual bindings."}
{"index": 3384, "repo": "commons-imaging-1.0-alpha3", "code": "package imaging;\n\npackage imaging.color; // Color spaces and conversions between them.\npackage imaging.common; // Provides utility classes that are employed across multiple image formats and sub-packages.\npackage imaging.icc; // ICC color profile.\npackage imaging.internal; // Internal utility classes.\npackage imaging.palette; // Color quantization and palette manipulation tools.\nInterface ImageFormat; // Simple image format interface.\nClass ColorTools; // A selection of tools for evaluating and manipulating color spaces, color values, etc.\nClass FormatCompliance; // Provides information about the compliance of a specified data source (byte array, file, etc.) to an image format.\nClass ImageDump; // Used to store metadata and descriptive information extracted from image files.\nClass ImageInfo; // ImageInfo represents a collection of basic properties of an image, such as width, height, format, bit depth, etc.\nClass ImageParser<T extends ImagingParameters>; // Provides the abstract base class for all image reading and writing utilities.\nClass Imaging; // The primary application programming interface (API) to the Imaging library.\nClass ImagingConstants; // Defines constants that may be used in passing options to ImageParser read/write implementations, the utility routines implemented in the Imaging class, and throughout the Apache Commons Imaging package.\nClass ImagingParameters; // Imaging parameters.\nClass PixelDensity; // Used to specify pixel density and physical dimensions when reading or storing image information.\nEnum ImageFormats; // Enum of known image formats.\nEnum ImageInfo.ColorType;\nEnum ImageInfo.CompressionAlgorithm;\nClass ImageReadException; // A custom exception thrown when an ImageParser or other utility encounters a format-violation, non-supported element, or other condition that renders image data unaccessible.\nClass ImageWriteException; // A custom exception thrown when an ImageParser or other utility encounters a format-violation, non-supported element, or other condition that renders image data unwritable.\nClass ImagingException; // The base class for implementing custom exceptions in the Apache Commons Imaging package.\n", "des": "The main package for Apache Commons Imaging."}
{"index": 3385, "repo": "commons-imaging-1.0-alpha3", "code": "package color;\n\nClass ColorCieLab; // Represents a color in the CIELAB color space, also known as LAB color space.\nClass ColorCieLch; // Represents a color in the CIELCH color space.\nClass ColorCieLuv; // Represents a color in the CIELUV color space..\nClass ColorCmy; // Represents a color in the CMY color space.\nClass ColorCmyk; // Represents a color in the CMYK color space.\nClass ColorConversions;\nClass ColorDin99Lab; // Represents a color in the DIN99 color space, a derivation of the CIE LAB color space.\nClass ColorHsl; // Represents a color in the HSL color space.\nClass ColorHsv; // Represents a color in the HSV color space.\nClass ColorHunterLab; // Represents a color in the Hunter Lab color space.\nClass ColorXyz; // Represents a color in the CIE 1931 color space, also known as XYZ color space.\n", "des": "Color spaces and conversions between them."}
{"index": 3386, "repo": "commons-imaging-1.0-alpha3", "code": "package common;\n\npackage common.bytesource; // Encapsulates sources from which data may be read.\npackage common.itu_t4; // Provides ITU-T T.4 and T.6 compression classes.\npackage common.mylzw; // Provides LZW compression.\nInterface BufferedImageFactory;\nInterface ImageMetadata;\nInterface ImageMetadata.ImageMetadataItem;\nInterface XmpEmbeddable; // Implementations support embedding the Extensible Metadata Platform tags.\nClass BasicCParser; // A rudimentary preprocessor and parser for the C programming language.\nClass BinaryConstant;\nClass BinaryFileParser;\nClass BinaryFunctions; // Convenience methods for various binary and I/O operations.\nClass BinaryOutputStream;\nClass ByteConversions; // Convenience methods for converting data types to and from byte arrays.\nClass GenericImageMetadata;\nClass GenericImageMetadata.GenericImageMetadataItem;\nClass ImageBuilder; // A utility class primary intended for storing data obtained by reading image files.\nClass PackBits;\nClass RationalNumber; // Rational number, as used by the TIFF image format.\nClass RgbBufferedImageFactory;\nClass SimpleBufferedImageFactory;\nClass XmpImagingParameters; // Parameters for formats that support Xmp.\nClass ZlibDeflate; // Utility class to compress/decompress bytes using the ZLIB deflate/inflate compression.\n", "des": "Provides utility classes that are employed across multiple image formats and sub-packages."}
{"index": 3387, "repo": "commons-imaging-1.0-alpha3", "code": "package bytesource;\n\nClass ByteSource;\nClass ByteSourceArray;\nClass ByteSourceFile;\nClass ByteSourceInputStream;\n", "des": "Encapsulates sources from which data may be read."}
{"index": 3388, "repo": "commons-imaging-1.0-alpha3", "code": "package itu_t4;\n\nClass T4AndT6Compression;\n", "des": "Provides ITU-T T.4 and T.6 compression classes."}
{"index": 3389, "repo": "commons-imaging-1.0-alpha3", "code": "package mylzw;\n\nInterface MyLzwCompressor.Listener;\nInterface MyLzwDecompressor.Listener;\nClass BitsToByteInputStream;\nClass MyBitInputStream;\nClass MyBitOutputStream;\nClass MyLzwCompressor;\nClass MyLzwDecompressor;\n", "des": "Provides LZW compression."}
{"index": 3390, "repo": "commons-imaging-1.0-alpha3", "code": "package bmp;\n\nClass BmpImageParser;\nClass BmpImagingParameters; // Bmp format parameters.\n", "des": "The BMP image format."}
{"index": 3391, "repo": "commons-imaging-1.0-alpha3", "code": "package dcx;\n\nClass DcxImageParser;\n", "des": "The DCX image format."}
{"index": 3392, "repo": "commons-imaging-1.0-alpha3", "code": "package gif;\n\nClass GifImageMetadata;\nClass GifImageMetadataItem;\nClass GifImageParser;\nClass GifImagingParameters; // Gif format parameters.\nEnum DisposalMethod; // Describes the disposal of a GIF frame when rendering the animation.\n", "des": "The GIF image format."}
{"index": 3393, "repo": "commons-imaging-1.0-alpha3", "code": "package icns;\n\nClass IcnsImageParser;\nClass IcnsImagingParameters; // Icns format parameters.\n", "des": "The ICNS image format."}
{"index": 3394, "repo": "commons-imaging-1.0-alpha3", "code": "package ico;\n\nClass IcoImageParser;\nClass IcoImagingParameters; // Ico format parameters.\n", "des": "The ICO/CUR image formats."}
{"index": 3395, "repo": "commons-imaging-1.0-alpha3", "code": "package jpeg;\n\npackage jpeg.decoder; // JPEG image format decoder.\npackage jpeg.exif; // JPEG image format Exif utilities.\npackage jpeg.iptc; // JPEG image format IPTC metadata.\npackage jpeg.segments; // JPEG image format segments.\npackage jpeg.xmp; // JPEG image format XMP metadata.\nInterface JpegUtils.Visitor;\nClass JpegConstants;\nClass JpegImageMetadata;\nClass JpegImageParser;\nClass JpegImagingParameters; // Jpeg format parameters.\nClass JpegPhotoshopMetadata;\nClass JpegUtils;\n", "des": "The JPEG image format."}
{"index": 3396, "repo": "commons-imaging-1.0-alpha3", "code": "package decoder;\n\nClass JpegDecoder;\n", "des": "JPEG image format decoder."}
{"index": 3397, "repo": "commons-imaging-1.0-alpha3", "code": "package exif;\n\nClass ExifRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass ExifRewriter.ExifOverflowException;\n", "des": "JPEG image format Exif utilities."}
{"index": 3398, "repo": "commons-imaging-1.0-alpha3", "code": "package iptc;\n\nInterface IptcType;\nClass IptcBlock; // Represents an IPTC block, a set of key-value pairs of Photoshop IPTC data.\nClass IptcConstants;\nClass IptcParser;\nClass IptcRecord;\nClass IptcTypeLookup;\nClass JpegIptcRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass PhotoshopApp13Data;\nEnum IptcTypes;\n", "des": "JPEG image format IPTC metadata."}
{"index": 3399, "repo": "commons-imaging-1.0-alpha3", "code": "package segments;\n\nClass App13Segment;\nClass App14Segment; // http://www.aiim.org/documents/standards/PDF-Ref/References/Adobe/5116.DCT_Filter.pdf\nClass App2Segment;\nClass AppnSegment;\nClass ComSegment;\nClass DhtSegment;\nClass DhtSegment.HuffmanTable;\nClass DqtSegment;\nClass DqtSegment.QuantizationTable;\nClass GenericSegment;\nClass JfifSegment;\nClass Segment;\nClass SofnSegment;\nClass SofnSegment.Component;\nClass SosSegment;\nClass SosSegment.Component;\nClass UnknownSegment;\n", "des": "JPEG image format segments."}
{"index": 3400, "repo": "commons-imaging-1.0-alpha3", "code": "package xmp;\n\nClass JpegRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass JpegRewriter.JFIFPiece;\nClass JpegRewriter.JFIFPieces;\nClass JpegRewriter.JFIFPieceSegment;\nClass JpegXmpParser;\nClass JpegXmpRewriter; // Interface for Exif write/update/remove functionality for Jpeg/JFIF images.\nClass JpegRewriter.JpegSegmentOverflowException;\n", "des": "JPEG image format XMP metadata."}
{"index": 3401, "repo": "commons-imaging-1.0-alpha3", "code": "package pcx;\n\nClass PcxConstants;\nClass PcxImageParser;\nClass PcxImagingParameters; // Parameters used by the Pcx format.\n", "des": "The PCX image format."}
{"index": 3402, "repo": "commons-imaging-1.0-alpha3", "code": "package png;\n\nClass GammaCorrection;\nClass PhysicalScale; // Used to specify physical scale when reading or storing image information.\nClass PngConstants;\nClass PngImageInfo;\nClass PngImageParser;\nClass PngImagingParameters; // Png format parameters.\nClass PngText;\nClass PngText.Itxt;\nClass PngText.Text;\nClass PngText.Ztxt;\nEnum ChunkType; // Type of a PNG chunk.\nEnum InterlaceMethod; // Interlace methods.\nEnum PngColorType;\n", "des": "The PNG image format."}
{"index": 3403, "repo": "commons-imaging-1.0-alpha3", "code": "package pnm;\n\nClass PnmImageParser;\nClass PnmImagingParameters; // Pnm format parameters.\n", "des": "The PNM image format family."}
{"index": 3404, "repo": "commons-imaging-1.0-alpha3", "code": "package psd;\n\nClass PsdHeaderInfo;\nClass PsdImageContents;\nClass PsdImageParser;\nClass PsdImagingParameters; // Psd format parameters.\n", "des": "The PSD image format."}
{"index": 3405, "repo": "commons-imaging-1.0-alpha3", "code": "package rgbe;\n\nClass RgbeImageParser; // Parser for Radiance HDR images\nClass RgbeImagingParameters; // Rgbe format parameters.\n", "des": "The Radiance HDR image format."}
{"index": 3406, "repo": "commons-imaging-1.0-alpha3", "code": "package tiff;\n\npackage tiff.constants; // TIFF constants.\npackage tiff.datareaders; // TIFF data readers.\npackage tiff.fieldtypes; // TIFF field types.\npackage tiff.photometricinterpreters; // Classes for TIFF photometric interpretation (specifies the intended interpretation of the image pixel data).\npackage tiff.taginfos; // Classes for the TIFF tags.\npackage tiff.write; // TIFF writers.\nInterface TiffReader.Listener;\nClass JpegImageData;\nClass TiffContents;\nClass TiffDirectory; // Provides methods and elements for accessing an Image File Directory (IFD) from a TIFF file.\nClass TiffDirectory.ImageDataElement;\nClass TiffElement;\nClass TiffElement.DataElement;\nClass TiffElement.Stub;\nClass TiffField; // A TIFF field in a TIFF directory.\nClass TiffHeader;\nClass TiffImageData;\nClass TiffImageData.ByteSourceData;\nClass TiffImageData.Data;\nClass TiffImageData.Strips;\nClass TiffImageData.Tiles;\nClass TiffImageMetadata;\nClass TiffImageMetadata.Directory;\nClass TiffImageMetadata.GPSInfo;\nClass TiffImageMetadata.TiffMetadataItem;\nClass TiffImageParser;\nClass TiffImagingParameters; // Tiff format parameters.\nClass TiffRasterData; // Provides a simple container for numeric-raster data.\nClass TiffRasterDataFloat; // Provides a simple container for floating-point data.\nClass TiffRasterDataInt; // Provides a simple container for floating-point data.\nClass TiffRasterStatistics; // Collects and stores a set of simple statistics from the input raster.\nClass TiffReader;\nEnum TiffRasterDataType; // Provides an enumeration indicating the type of data for an instance of a TiffRasterData class.\n", "des": "Provides classes and methods for reading and writing Tagged Image File Format (TIFF) files."}
{"index": 3407, "repo": "commons-imaging-1.0-alpha3", "code": "package constants;\n\nClass AdobePageMaker6TagConstants; // TIFF specification supplement 1 Enhancements for Adobe PageMaker(R) 6.0 software http://partners.adobe.com/public/developer/en/tiff/TIFFPM6.pdf\nClass AdobePhotoshopTagConstants; // TIFF specification supplement 2 Adobe Photoshop (R) TIFF Technical Notes http://partners.adobe.com/public/developer/en/tiff/TIFFphotoshop.pdf\nClass AliasSketchbookProTagConstants; // Alias Sketchbook Pro multi-layer TIFF http://www.awaresystems.be/imaging/tiff/tifftags/docs/alias.html\nClass DcfTagConstants; // Design rule for Camera Filesystem http://www.exif.org/dcf.PDF\nClass DngTagConstants; // Digital Negative (DNG) Specification http://www.adobe.com/products/dng/pdfs/dng_spec_1_3_0_0.pdf\nClass ExifTagConstants; // References: http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html http://tiki-lounge.com/~raf/tiff/fields.html http://www.awaresystems.be/imaging/tiff/tifftags.html \"Stonits\": http://www.anyhere.com/gward/pixformat/tiffluv.html\nClass GdalLibraryTagConstants; // GDAL library.\nClass GeoTiffTagConstants; // Geo Tiff.\nClass GpsTagConstants;\nClass HylaFaxTagConstants;\nClass MicrosoftHdPhotoTagConstants; // Microsoft's HDP/WDP file format.\nClass MicrosoftTagConstants; // Largely undocumented and derived by experimentation.\nClass MolecularDynamicsGelTagConstants; // Molecular Dynamics GEL file format http://www.awaresystems.be/imaging/tiff/tifftags/docs/gel.html\nClass OceScanjobTagConstants; // Oce Scanjob.\n", "des": "TIFF constants."}
{"index": 3408, "repo": "commons-imaging-1.0-alpha3", "code": "package datareaders;\n\nClass DataReaderStrips; // Provides a data reader for TIFF file images organized by tiles.\nClass DataReaderTiled; // Provides a data reader for TIFF file images organized by tiles.\nClass ImageDataReader; // Defines the base class for the TIFF file reader classes.\n", "des": "TIFF data readers."}
{"index": 3409, "repo": "commons-imaging-1.0-alpha3", "code": "package fieldtypes;\n\nClass FieldType; // TIFF field types.\nClass FieldTypeAscii;\nClass FieldTypeByte;\nClass FieldTypeDouble;\nClass FieldTypeFloat;\nClass FieldTypeLong;\nClass FieldTypeRational;\nClass FieldTypeShort;\n", "des": "TIFF field types."}
{"index": 3410, "repo": "commons-imaging-1.0-alpha3", "code": "package photometricinterpreters;\n\npackage photometricinterpreters.floatingpoint; // Provides supplemental photometric interpreters for TIFF products based on floating-point data.\nClass PhotometricInterpreter; // Interpreter for photometric information in TIFF images.\nClass PhotometricInterpreterBiLevel;\nClass PhotometricInterpreterCieLab;\nClass PhotometricInterpreterCmyk;\nClass PhotometricInterpreterLogLuv; // Photometric interpretation Logluv support.\nClass PhotometricInterpreterPalette;\nClass PhotometricInterpreterRgb;\nClass PhotometricInterpreterYCbCr;\n", "des": "Classes for TIFF photometric interpretation (specifies the intended interpretation of the image pixel data)."}
{"index": 3411, "repo": "commons-imaging-1.0-alpha3", "code": "package floatingpoint;\n\nInterface PaletteEntry; // Defines an interface for specifying color assignments to floating point values.\nClass PaletteEntryForRange; // Provides a palette entry for colors associated with a range of values.\nClass PaletteEntryForValue; // Provides a palette entry for a color assignment to a single value.\nClass PhotometricInterpreterFloat; // Implements a custom photometric interpreter that can be supplied by applications in order to render Java images from real-valued TIFF data products.\n", "des": "Provides supplemental photometric interpreters for TIFF products based on floating-point data."}
{"index": 3412, "repo": "commons-imaging-1.0-alpha3", "code": "package taginfos;\n\nClass TagInfo;\nClass TagInfoAny;\nClass TagInfoAscii;\nClass TagInfoAsciiOrByte;\nClass TagInfoAsciiOrRational;\nClass TagInfoByte;\nClass TagInfoByteOrShort;\nClass TagInfoBytes;\nClass TagInfoDirectory; // A LONG representing an offset to a TIFF directory.\nClass TagInfoDouble;\nClass TagInfoDoubles;\nClass TagInfoFloat;\nClass TagInfoFloats;\nClass TagInfoGpsText; // Used by some GPS tags and the EXIF user comment tag, this badly documented value is meant to contain the text encoding in the first 8 bytes followed by the non-null-terminated text in an unknown byte order.\nClass TagInfoLong;\nClass TagInfoLongOrIFD;\nClass TagInfoLongs;\nClass TagInfoRational;\nClass TagInfoRationals;\nClass TagInfoSByte;\nClass TagInfoSBytes;\nClass TagInfoShort;\nClass TagInfoShortOrLong;\nClass TagInfoShortOrLongOrRational;\nClass TagInfoShortOrRational;\nClass TagInfoShorts;\nClass TagInfoSLong;\nClass TagInfoSLongs;\nClass TagInfoSRational;\nClass TagInfoSRationals;\nClass TagInfoSShort;\nClass TagInfoSShorts;\nClass TagInfoUndefined;\nClass TagInfoUndefineds;\nClass TagInfoUnknown; // A TIFF tag whose definition isn't known.\nClass TagInfoUnknowns;\nClass TagInfoXpString; // Windows XP onwards store some tags using UTF-16LE, but the field type is byte - here we deal with this.\n", "des": "Classes for the TIFF tags."}
{"index": 3413, "repo": "commons-imaging-1.0-alpha3", "code": "package write;\n\nClass TiffImageWriterBase;\nClass TiffImageWriterLossless;\nClass TiffImageWriterLossy;\nClass TiffOutputDirectory;\nClass TiffOutputField;\nClass TiffOutputSet;\n", "des": "TIFF writers."}
{"index": 3414, "repo": "commons-imaging-1.0-alpha3", "code": "package wbmp;\n\nClass WbmpImageParser;\nClass WbmpImagingParameters; // Wbmp format parameters.\n", "des": "The Wireless Application Protocol Bitmap Format image format."}
{"index": 3415, "repo": "commons-imaging-1.0-alpha3", "code": "package xbm;\n\nClass XbmImageParser;\nClass XbmImagingParameters; // Xbm format parameters.\n", "des": "The X BitMap image format."}
{"index": 3416, "repo": "commons-imaging-1.0-alpha3", "code": "package xpm;\n\nClass XpmImageParser;\nClass XpmImagingParameters; // Xpm format parameters.\n", "des": "The X PixMap image format."}
{"index": 3417, "repo": "commons-imaging-1.0-alpha3", "code": "package icc;\n\nClass IccConstants;\nClass IccProfileInfo;\nClass IccProfileParser;\nClass IccTag;\nEnum IccTagDataTypes;\nEnum IccTagTypes;\n", "des": "ICC color profile."}
{"index": 3418, "repo": "commons-imaging-1.0-alpha3", "code": "package internal;\n\nClass Debug; // Internal-only debug class.\nClass Util; // Internal utilities.\n", "des": "Internal utility classes."}
{"index": 3419, "repo": "commons-imaging-1.0-alpha3", "code": "package palette;\n\nInterface MedianCut;\nInterface Palette; // Color palette.\nClass ColorCountComparator; // A comparator for {#link ColorCount} elements.\nClass Dithering; // Dithering algorithms to use when quantizing an image to palette form.\nClass LongestAxisMedianCut;\nClass MedianCutQuantizer;\nClass MostPopulatedBoxesMedianCut;\nClass PaletteFactory; // Factory for creating palettes.\nClass QuantizedPalette;\nClass SimplePalette;\n", "des": "Color quantization and palette manipulation tools."}
{"index": 3420, "repo": "gremlin-core-3.6.4", "code": "package kryoshim;\n\npackage kryoshim.shaded; // Implementations of the interfaces in org.apache.tinkerpop.gremlin.structure.io.gryo.kryoshim using TinkerPop's shaded copy of Kryo.\nInterface InputShim; // A minimal Input-like abstraction.\nInterface KryoShim<I extends InputShim,​O extends OutputShim>; // A minimal Kryo-like abstraction.\nInterface KryoShimService; // This interface exists to decouple HadoopPools from TinkerPop's shaded Kryo.\nInterface OutputShim; // A minimal Output-like abstraction.\nInterface SerializerShim<T>; // A minimal Serializer-like abstraction.\nClass KryoShimServiceLoader; // Loads the highest-priority or user-selected KryoShimService.\n", "des": "Abstracts a minimal subset of Kryo types and methods."}
{"index": 3421, "repo": "gremlin-core-3.6.4", "code": "package shaded;\n\nClass ShadedInputAdapter;\nClass ShadedKryoAdapter;\nClass ShadedOutputAdapter;\nClass ShadedSerializerAdapter<T>;\n", "des": "Implementations of the interfaces in org.apache.tinkerpop.gremlin.structure.io.gryo.kryoshim using TinkerPop's shaded copy of Kryo."}
{"index": 3422, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface AfterTransactionCompletionProcess; // Contract representing some process that needs to occur during after transaction completion.\nInterface BeforeTransactionCompletionProcess; // Contract representing some process that needs to occur during before transaction completion.\nInterface Executable; // An operation which may be scheduled for later execution.\n", "des": "Defines SPI hooks into the ActionQueue."}
{"index": 3423, "repo": "hibernate-core-5.6.15.Final", "code": "package annotations;\n\nClass QueryHints; // Consolidation of hints available to Hibernate JPA queries.\nEnum CacheConcurrencyStrategy; // Cache concurrency strategy.\nEnum CacheModeType; // Enumeration for the different interaction modes between the session and the Level 2 Cache.\nEnum CascadeType; // Cascade types (can override default JPA cascades).\nEnum FetchMode; // Defines how the association should be fetched, compared to FetchType which defines when it should be fetched\nEnum FlushModeType; // Enumeration extending javax.persistence flush modes.\nEnum GenerationTime; // At what time(s) will the generation occur?\nEnum LazyCollectionOption; // Lazy options available for a collection.\nEnum LazyToOneOption; // Lazy options available for a ToOne association.\nEnum NotFoundAction; // Possible actions when the database contains a non-null fk with no matching target.\nEnum OnDeleteAction; // Possible actions for on-delete.\nEnum OptimisticLockType; // Possible optimistic locking strategies.\nEnum PolymorphismType; // Type of available polymorphism for a particular entity.\nEnum ResultCheckStyle; // Possible styles of checking return codes on SQL INSERT, UPDATE and DELETE queries.\nEnum SortType;\nEnum SourceType; // Where should Hibernate retrieve the value from? From the database, or from the current JVM?\nAnnotation Type AccessType;\nAnnotation Type Any; // Defines a ToOne-style association pointing to one of several entity types depending on a local discriminator, as opposed to discriminated inheritance where the discriminator is kept as part of the entity hierarchy.\nAnnotation Type AnyMetaDef;\nAnnotation Type AnyMetaDefs;\nAnnotation Type AttributeAccessor; // Names a persistent property access strategy (PropertyAccessStrategy) to use.\nAnnotation Type BatchSize; // Defines size for batch loading of collections or lazy entities.\nAnnotation Type Cache; // Add caching strategy to a root entity or a collection.\nAnnotation Type Cascade; // Apply a cascade strategy on an association.\nAnnotation Type Check; // Arbitrary SQL CHECK constraints which can be defined at the class, property or collection level.\nAnnotation Type CollectionId; // Describe an identifier column for a bag (ie an idbag).\nAnnotation Type CollectionType;\nAnnotation Type ColumnDefault; // Identifies the DEFAULT value to apply to the associated column via DDL.\nAnnotation Type Columns; // Support an array of columns.\n", "des": "Package containing all the Hibernate specific annotations."}
{"index": 3424, "repo": "hibernate-core-5.6.15.Final", "code": "package boot;\n\npackage boot.registry; // Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior.\npackage boot.xsd; // Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)\nInterface AttributeConverterInfo; // Delayed information about an AttributeConverter.\nInterface Metadata; // Represents the ORM model as determined from all provided mapping sources.\nInterface MetadataBuilder; // Contract for specifying various overrides to be used in metamodel building.\nInterface SessionFactoryBuilder; // The contract for building a SessionFactory given a number of options.\nClass CacheRegionDefinition; // Models the definition of caching settings for a particular region.\nClass JaccPermissionDefinition;\nClass MetadataSources; // Entry point into working with sources of metadata information (mapping XML, annotations).\nEnum CacheRegionDefinition.CacheRegionType;\nEnum SchemaAutoTooling; // Defines the possible values for \"hbm2ddl_auto\"\nEnum TempTableDdlTransactionHandling; // Enum describing how creation and dropping of temporary tables should be done in terms of transaction handling.\nClass InvalidMappingException;\nClass MappingException; // Indicates a problem parsing a mapping document.\nClass MappingNotFoundException;\nClass UnsupportedOrmXsdVersionException;\n", "des": "This package contains the contracts that make up the Hibernate native bootstrapping API (building a SessionFactory)."}
{"index": 3425, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ArchiveContext; // Describes the context for visiting the entries within an archive\nInterface ArchiveDescriptor; // Contract for visiting an archive, which might be a jar, a zip, an exploded directory, etc.\nInterface ArchiveDescriptorFactory; // Contract for building ArchiveDescriptor instances.\nInterface ArchiveEntry; // Represent an entry in the archive.\nInterface ArchiveEntryHandler; // Handler for archive entries, based on the classified type of the entry\nInterface InputStreamAccess; // Contract for building InputStreams, especially in on-demand situations\nInterface JarFileEntryUrlAdjuster; // Optional contract for ArchiveDescriptorFactory implementations to implement to be able to adjust <jar-file/> URL's defined in persistence.xml files.\nClass AbstractArchiveDescriptor; // Base support for ArchiveDescriptor implementors.\nClass AbstractArchiveDescriptorFactory;\nClass ArchiveException; // Indicates a problem accessing or visiting the archive\n", "des": "Defines the SPI for support of \"scanning\" of \"archives\"."}
{"index": 3426, "repo": "hibernate-core-5.6.15.Final", "code": "package naming;\n\nInterface EntityNaming;\nInterface ImplicitAnyDiscriminatorColumnNameSource; // Context for determining the implicit name for an ANY mapping's discriminator column.\nInterface ImplicitAnyKeyColumnNameSource; // Context for determining the implicit name for an ANY mapping's key column.\nInterface ImplicitBasicColumnNameSource; // Context for determining the implicit name related to basic values.\nInterface ImplicitCollectionTableNameSource; // Context for determining the implicit name for a collection table.\nInterface ImplicitConstraintNameSource; // Common implicit name source traits for all constraint naming: FK, UK, index\nInterface ImplicitDiscriminatorColumnNameSource; // Context for determining the implicit name of an entity's discriminator column.\nInterface ImplicitEntityNameSource; // Context for determining the implicit name of an entity's primary table\nInterface ImplicitForeignKeyNameSource;\nInterface ImplicitIdentifierColumnNameSource; // Context for determining the implicit name of an entity's identifier column.\nInterface ImplicitIndexColumnNameSource;\nInterface ImplicitIndexNameSource;\nInterface ImplicitJoinColumnNameSource; // Context for determining the implicit name of a \"join column\" (think JoinColumn).\nInterface ImplicitJoinTableNameSource; // Context for determining the implicit name for a join table.\nInterface ImplicitMapKeyColumnNameSource; // Context for determining the implicit name of a column used to back the key of a Map.\nInterface ImplicitNameSource; // Common contract for all implicit naming sources\nInterface ImplicitNamingStrategy; // Pluggable strategy for applying implicit naming rules when an explicit name is not given.\nInterface ImplicitPrimaryKeyJoinColumnNameSource; // Used to help determine the implicit name of columns which are part of a primary-key, well simultaneously being part of a foreign-key (join).\nInterface ImplicitTenantIdColumnNameSource; // Context for determining the implicit name of an entity's tenant identifier column.\nInterface ImplicitUniqueKeyNameSource;\nInterface NamingStrategyHelper; // Helper contract for dealing with naming strategies.\nInterface PhysicalNamingStrategy; // Pluggable strategy contract for applying physical naming rules for database object names.\nClass CamelCaseToUnderscoresNamingStrategy; // Originally copied from Spring Boot as this strategy is popular there (original name is SpringPhysicalNamingStrategy).\nClass DatabaseIdentifier; // Models an identifier (name), retrieved from the database.\nClass Identifier; // Models an identifier (name), which may or may not be quoted.\n", "des": "Represents a proposed new approach to allowing hooks into the process of determining the name of database objects (tables, columns, constraints, etc)."}
{"index": 3427, "repo": "hibernate-core-5.6.15.Final", "code": "package registry;\n\npackage registry.selector; // Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations.\nInterface BootstrapServiceRegistry; // Provides the most basic services needed.\nInterface StandardServiceInitiator<R extends Service>; // Contract for an initiator of services that target the standard ServiceRegistry.\nInterface StandardServiceRegistry; // Specialization of the ServiceRegistry contract mainly for type safety.\nClass BootstrapServiceRegistryBuilder; // Builder for BootstrapServiceRegistry instances.\nClass StandardServiceRegistryBuilder; // Builder for standard ServiceRegistry instances.\n", "des": "Defines service registry contracts application are likely to want to utilize for configuring Hibernate behavior."}
{"index": 3428, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ClassLoaderService; // A service for interacting with class loaders.\nInterface ClassLoaderService.Work<T>;\nClass ClassLoadingException; // Indicates a problem performing class loading.\n", "des": "The class loading service SPI."}
{"index": 3429, "repo": "hibernate-core-5.6.15.Final", "code": "package selector;\n\npackage selector.spi; // Defines actual contract used for strategy selection : StrategySelector.\nInterface StrategyRegistration<T>; // Describes the registration of a named strategy implementation.\nInterface StrategyRegistrationProvider; // Responsible for providing the registrations of strategy selector(s).\nClass SimpleStrategyRegistrationImpl<T>; // A simple implementation of StrategyRegistration.\n", "des": "Defines a feature-set around named registration of implementations of various contracts and the ability to select those implementations."}
{"index": 3430, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface StrategyCreator<T>;\nInterface StrategySelector; // Service which acts as a registry for named strategy implementations.\nClass StrategySelectionException; // Indicates a problem performing the selection/resolution.\n", "des": "Defines actual contract used for strategy selection : StrategySelector."}
{"index": 3431, "repo": "hibernate-core-5.6.15.Final", "code": "package xsd;\n\nClass ConfigXsdSupport; // Support for XSD handling related to Hibernate's `cfg.xml` and JPA's `persistence.xml`.\nClass LocalXsdResolver; // When Hibernate loads an XSD we fully expect that to be resolved from our jar file via ClassLoader resource look-up.\nClass MappingXsdSupport; // Support for XSD handling related to Hibernate's `hbm.xml` and JPA's `orm.xml`.\nClass XsdDescriptor; // Representation of a locally resolved XSD\n", "des": "Support for XSD handling, specifically for ORM mappings (Hibernate's `hbm.xml` and JPA's `orm.xml`) and config files (Hibernate's `cfg.xml` and JPA's `persistence.xml`)"}
{"index": 3432, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\npackage spi.interceptor; // interceptor implementations\nInterface CollectionTracker; // Interface to be implemented by collection trackers that hold the expected size od collections, a simplified Map<String, int>.\nInterface EnhancementContext; // The context for performing an enhancement.\nInterface Enhancer; // Class responsible for performing enhancement.\nInterface LazyPropertyInitializer; // Contract for controlling how lazy properties get initialized.\nInterface LazyPropertyInitializer.InterceptorImplementor;\nInterface UnloadedClass;\nInterface UnloadedField;\nClass DefaultEnhancementContext; // default implementation of EnhancementContext.\nClass EnhancementContextWrapper;\nClass EnhancerConstants; // Constants used during enhancement.\nClass EnhancementException; // An exception indicating some kind of problem performing bytecode enhancement.\n", "des": "package defining bytecode code enhancement (instrumentation) support."}
{"index": 3433, "repo": "hibernate-core-5.6.15.Final", "code": "package interceptor;\n\nInterface BytecodeInterceptorLogging; // Logging related to bytecode enhancement interceptors\nInterface BytecodeLazyAttributeInterceptor;\nInterface EnhancementHelper.InheritanceChecker;\nInterface LazyFetchGroupMetadata; // Information about a particular bytecode lazy attribute grouping.\nInterface SessionAssociableInterceptor;\nClass AbstractInterceptor;\nClass AbstractLazyLoadInterceptor;\nClass BytecodeInterceptorLogging_$logger; // Warning this class consists of generated code.\nClass EnhancementAsProxyLazinessInterceptor;\nClass EnhancementHelper;\nClass LazyAttributeDescriptor; // Descriptor for an attribute which is enabled for bytecode lazy fetching\nClass LazyAttributeLoadingInterceptor; // Interceptor that loads attributes lazily\nClass LazyAttributesMetadata; // Information about all of the bytecode lazy attributes for an entity\n", "des": "interceptor implementations"}
{"index": 3434, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface BasicProxyFactory; // A proxy factory for \"basic proxy\" generation.\nInterface BytecodeEnhancementMetadata; // Encapsulates bytecode enhancement information about a particular entity.\nInterface BytecodeProvider; // Contract for providers of bytecode services to Hibernate.\nInterface ClassTransformer; // A persistence provider provides an instance of this interface to the PersistenceUnitInfo.addTransformer method.\nInterface ProxyFactoryFactory; // An interface for factories of proxy factory instances.\nInterface ReflectionOptimizer; // Represents reflection optimization for a particular class.\nInterface ReflectionOptimizer.AccessOptimizer; // Represents optimized entity property access.\nInterface ReflectionOptimizer.InstantiationOptimizer; // Represents optimized entity instantiation.\nClass ByteCodeHelper; // A helper for reading byte code from various input sources.\nClass ClassLoadingStrategyHelper;\nClass InstrumentedClassLoader; // A specialized ClassLoader which performs bytecode enhancement on class definitions as they are loaded into the ClassLoader scope.\nClass NotInstrumentedException; // Indicates a condition where an instrumented/enhanced class was expected, but the class was not instrumented/enhanced.\n", "des": "Package defining bytecode code enhancement (instrumentation) support."}
{"index": 3435, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\npackage spi.support; // Package intended for simplifying the worked needed to implement a caching provider.\nInterface CacheImplementor; // SPI contract for Hibernate's second-level cache engine\nInterface CacheKeysFactory;\nInterface CacheTransactionSynchronization; // Defines a context object that a RegionFactory is asked to create (RegionFactory.createTransactionContext(org.hibernate.engine.spi.SharedSessionContractImplementor)}) when a Hibernate Session is created.\nInterface DirectAccessRegion; // Specialized Region whose data is accessed directly (not requiring key/item wrapping, e.g.\nInterface DomainDataRegion; // A Region for cacheable domain data - entity, collection, natural-id.\nInterface ExtendedStatisticsSupport; // Optional Region contract defining support for extra statistic information\nInterface QueryCache;\nInterface QueryResultsCache; // Defines the responsibility for managing query result data caching in regards to a specific region.\nInterface QueryResultsRegion; // Defines the contract for a cache region which will specifically be used to store query results.\nInterface Region; // Contract for a named \"region\".\nInterface RegionFactory; // Contract for building second level cache regions.\nInterface SecondLevelCacheLogger;\nInterface TimestampsCache; // Wrapper for a TimestampsRegion adding handling of stale results\nInterface TimestampsCacheFactory; // Responsible for building the TimestampsRegionAccessFactory to use for managing query results in regards to staleness of the underlying tables (sometimes called \"query spaces\" or \"table spaces\")\nInterface TimestampsRegion;\nInterface UpdateTimestampsCache;\nClass AbstractCacheTransactionSynchronization;\nClass AbstractRegionFactory;\nClass FilterKey; // Allows cached queries to be keyed by enabled filters.\nClass QueryKey; // A key that identifies a particular query with bound parameter values.\nClass QuerySpacesHelper;\nClass SecondLevelCacheLogger_$logger; // Warning this class consists of generated code.\nClass StandardCacheTransactionSynchronization;\n", "des": "Defines the integration aspect of Hibernate's second-level caching allowing \"caching back ends\" to be plugged in as a caching provider."}
{"index": 3436, "repo": "hibernate-core-5.6.15.Final", "code": "package support;\n\nInterface AbstractDomainDataRegion.Destructible; // Optional interface caching implementors can implement in their CachedDomainDataAccess impls to automatically have them destroyed when this region is destroyed\nInterface AbstractReadWriteAccess.Lockable; // Interface type implemented by all wrapper objects in the cache.\nInterface DomainDataStorageAccess; // Specialization of StorageAccess for domain data regions\nInterface StorageAccess; // A general read/write abstraction over the specific \"cache\" object from the caching provider.\nClass AbstractCachedDomainDataAccess;\nClass AbstractCollectionDataAccess;\nClass AbstractDomainDataRegion;\nClass AbstractEntityDataAccess;\nClass AbstractNaturalIdDataAccess;\nClass AbstractReadWriteAccess;\nClass AbstractReadWriteAccess.Item; // Wrapper type representing unlocked items.\nClass AbstractReadWriteAccess.SoftLockImpl; // Wrapper type representing locked items.\nClass AbstractRegion;\nClass CacheUtils;\nClass CollectionNonStrictReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass CollectionReadOnlyAccess; // Standard support for CollectionDataAccess using the AccessType.READ_ONLY access type.\nClass CollectionReadWriteAccess; // Standard support for CollectionDataAccess using the AccessType.READ_WRITE access type.\nClass CollectionTransactionAccess;\nClass DirectAccessRegionTemplate; // Bridge between DirectAccessRegion and StorageAccess\nClass DomainDataRegionImpl;\nClass DomainDataRegionTemplate; // Abstract implementation of DomainDataRegion based on implementations just needing to provide a DomainDataStorageAccess reference for basic caching support - DomainDataStorageAccess acts as a simple wrapper around some generalized cache actions such as put or get.\nClass EntityNonStrictReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass EntityReadOnlyAccess; // Standard support for EntityDataAccess using the AccessType.READ_ONLY access type.\nClass EntityReadWriteAccess; // Standard support for EntityDataAccess using the AccessType.READ_WRITE access type.\nClass EntityTransactionalAccess;\nClass NaturalIdNonStrictReadWriteAccess; // Standard support for NaturalIdDataAccess using the AccessType.NONSTRICT_READ_WRITE access type.\nClass NaturalIdReadOnlyAccess; // Standard support for NaturalIdDataAccess using the AccessType.READ_ONLY access type.\n", "des": "Package intended for simplifying the worked needed to implement a caching provider."}
{"index": 3437, "repo": "hibernate-core-5.6.15.Final", "code": "package reflection;\n\nInterface AttributeConverterDefinitionCollector;\nClass ClassLoaderAccessLazyImpl; // A ClassLoaderAccess implementation based on lazy access to MetadataBuildingOptions\nClass PersistentAttributeFilter;\n", "des": "Defines the capability to merge mapping information from both annotations and orm.xml sources into a unified set of metadata in the Hibernate commons-annotations model."}
{"index": 3438, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface LazyInitializable; // Hibernate \"wraps\" a java collection in an instance of PersistentCollection.\nInterface PersistentCollection; // Persistent collections are treated as value objects by Hibernate.\n", "des": "SPI definitions for persistent collections"}
{"index": 3439, "repo": "hibernate-core-5.6.15.Final", "code": "package context;\n\npackage context.spi; // SPI level contracts around \"current session\" support.\nClass TenantIdentifierMismatchException; // Indicates that tenant identifiers did not match in cases where CurrentTenantIdentifierResolver.validateExistingCurrentSessions() returns true and there is a mismatch found.\n", "des": "Defines support for \"current session\" feature."}
{"index": 3440, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface CurrentSessionContext; // Defines the contract for implementations which know how to scope the notion of a current session.\nInterface CurrentTenantIdentifierResolver; // A callback registered with the SessionFactory that is responsible for resolving the current tenant identifier for use with CurrentSessionContext and SessionFactory.getCurrentSession()\nClass AbstractCurrentSessionContext; // Base support for CurrentSessionContext implementors.\n", "des": "SPI level contracts around \"current session\" support."}
{"index": 3441, "repo": "hibernate-core-5.6.15.Final", "code": "package lock;\n\nInterface LockingStrategy; // A strategy abstraction for how locks are obtained in the underlying database.\nClass AbstractSelectLockingStrategy; // Base LockingStrategy implementation to support implementations based on issuing SQL SELECT statements\nClass OptimisticForceIncrementLockingStrategy; // An optimistic locking strategy that forces an increment of the version (after verifying that version hasn't changed).\nClass OptimisticLockingStrategy; // An optimistic locking strategy that verifies that the version hasn't changed (prior to transaction commit).\nClass PessimisticForceIncrementLockingStrategy; // A pessimistic locking strategy that increments the version immediately (obtaining an exclusive write lock).\nClass PessimisticReadSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticReadUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass PessimisticWriteSelectLockingStrategy; // A pessimistic locking strategy where the locks are obtained through select statements.\nClass PessimisticWriteUpdateLockingStrategy; // A pessimistic locking strategy where the locks are obtained through update statements.\nClass SelectLockingStrategy; // A locking strategy where the locks are obtained through select statements.\nClass UpdateLockingStrategy; // A locking strategy where the locks are obtained through update statements.\nClass LockingStrategyException; // Represents an error trying to apply a LockingStrategy to an entity\nClass OptimisticEntityLockException; // Represents an error trying to apply an optimistic LockingStrategy to an entity\nClass PessimisticEntityLockException; // Represents an error trying to apply a pessimistic LockingStrategy to an entity\n", "des": "Support for Dialect-specific locking strategies"}
{"index": 3442, "repo": "hibernate-core-5.6.15.Final", "code": "package pagination;\n\nInterface LimitHandler; // Contract defining dialect-specific LIMIT clause handling.\nClass AbstractLimitHandler; // Default implementation of LimitHandler interface.\nClass CUBRIDLimitHandler; // Limit handler for CUBRID\nClass FirstLimitHandler;\nClass Informix10LimitHandler;\nClass LegacyFirstLimitHandler;\nClass LegacyLimitHandler; // Limit handler that delegates all operations to the underlying dialect.\nClass LimitHelper; // A helper for dealing with LimitHandler implementations\nClass NoopLimitHandler; // Handler not supporting query LIMIT clause.\nClass Oracle12LimitHandler; // A LimitHandler for databases which support the ANSI SQL standard syntax FETCH FIRST m ROWS ONLY and OFFSET n ROWS FETCH NEXT m ROWS ONLY.\nClass SQL2008StandardLimitHandler; // LIMIT clause handler compatible with ISO and ANSI SQL:2008 standard.\nClass SQLServer2005LimitHandler; // LIMIT clause handler compatible with SQL Server 2005 and later.\nClass SQLServer2012LimitHandler; // LIMIT clause handler compatible with SQL Server 2012 and later.\nClass SybaseASE157LimitHandler; // This limit handler is very conservative and is only triggered in simple cases involving a select or select distinct.\nClass TopLimitHandler;\n", "des": "Support for Dialect-specific pagination strategies"}
{"index": 3443, "repo": "hibernate-core-5.6.15.Final", "code": "package unique;\n\nInterface UniqueDelegate; // Dialect-level delegate in charge of applying \"uniqueness\" to a column.\nClass DB2UniqueDelegate; // DB2 does not allow unique constraints on nullable columns.\nClass DefaultUniqueDelegate; // The default UniqueDelegate implementation for most dialects.\nClass InformixUniqueDelegate; // Informix requires the constraint name to come last on the alter table.\nClass MySQLUniqueDelegate;\n", "des": "Support for Dialect-specific unique constraint definition"}
{"index": 3444, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ConfigurationService; // Provides access to the initial user-provided configuration values.\nInterface ConfigurationService.Converter<T>; // Simple conversion contract for converting an untyped object to a specified type.\nClass StandardConverters; // Standard set of setting converters\n", "des": "SPI Package for the configuration service."}
{"index": 3445, "repo": "hibernate-core-5.6.15.Final", "code": "package jdbc;\n\npackage jdbc.spi; // SPI contracts for supporting various aspects of JDBC interaction\nInterface BinaryStream; // Wraps a binary stream to also provide the length which is needed when binding.\nInterface BlobImplementer; // Marker interface for non-contextually created Blob instances..\nInterface CharacterStream; // Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.\nInterface ClobImplementer; // Marker interface for non-contextually created Clob instances..\nInterface LobCreationContext; // Provides callback access into the context in which the LOB is to be created.\nInterface LobCreationContext.Callback<T>; // The callback contract for making use of the JDBC Connection.\nInterface LobCreator; // Contract for creating various LOB references.\nInterface NClobImplementer; // Marker interface for non-contextually created java.sql.NClob instances..\nInterface WrappedBlob; // Contract for Blob wrappers.\nInterface WrappedClob; // Contract for Clob wrappers.\nInterface WrappedNClob; // Contract for NClob wrappers.\nClass AbstractLobCreator; // Convenient base class for proxy-based LobCreator for handling wrapping.\nClass BlobProxy; // Manages aspects of representing Blob objects.\nClass ClobProxy; // Manages aspects of proxying Clobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass ColumnNameCache;\nClass ContextualLobCreator; // LobCreator implementation using contextual creation against the JDBC Connection class's LOB creation methods.\nClass NClobProxy; // Manages aspects of proxying java.sql.NClobs for non-contextual creation, including proxy creation and handling proxy invocations.\nClass NonContextualLobCreator; // LobCreator implementation using non-contextual or local creation, meaning that we generate the LOB references ourselves as opposed to delegating to the JDBC Connection.\nClass ReaderInputStream; // Exposes a Reader as an InputStream.\nClass ResultSetWrapperProxy;\nClass SerializableBlobProxy; // Manages aspects of proxying Blobs to add serializability.\nClass SerializableClobProxy; // Manages aspects of proxying Clobs to add serializability.\n", "des": "Support for various aspects of JDBC interaction"}
{"index": 3446, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface Batch; // Conceptually models a batch.\nInterface BatchBuilder; // A builder for Batch instances\nInterface BatchKey; // Unique key for batch identification.\nInterface BatchObserver; // An observer contract for batch events.\n", "des": "Defines contracts for JDBC batching support."}
{"index": 3447, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionProvider; // A contract for obtaining JDBC connections.\nInterface JdbcConnectionAccess; // Provides centralized access to JDBC connections.\nInterface MultiTenantConnectionProvider; // A specialized Connection provider contract used when the application is using multi-tenancy support requiring tenant aware connections.\nClass AbstractDataSourceBasedMultiTenantConnectionProviderImpl; // Basic support for implementations of MultiTenantConnectionProvider based on DataSources.\nClass AbstractMultiTenantConnectionProvider; // Basic support for MultiTenantConnectionProvider implementations using individual ConnectionProvider instances per tenant behind the scenes.\nClass DataSourceBasedMultiTenantConnectionProviderImpl; // A concrete implementation of the MultiTenantConnectionProvider contract bases on a number of reasonable assumptions.\n", "des": "Defines contracts for accessing JDBC Connections"}
{"index": 3448, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface RefCursorSupport; // Contract for JDBC REF_CURSOR support.\n", "des": "Defines contracts for JDBC REF_CURSOR support."}
{"index": 3449, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface DialectFactory; // A factory for generating Dialect instances.\nInterface DialectResolutionInfo; // Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.\nInterface DialectResolutionInfoSource; // Contract for the source of DialectResolutionInfo.\nInterface DialectResolver; // Contract for determining the Dialect to use based on information about the database / driver.\nClass BasicDialectResolver; // Intended as support for custom resolvers which match a single db name (with optional version info).\nClass BasicSQLExceptionConverter; // A helper to centralize conversion of SQLExceptions to JDBCExceptions.\nClass DatabaseMetaDataDialectResolutionInfoAdapter; // An implementation of DialectResolutionInfo that delegates calls to a wrapped DatabaseMetaData.\n", "des": "Contracts supporting Dialect resolution (from JDBC metadata) and Dialect building."}
{"index": 3450, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ConnectionObserver; // An observer of logical connection events.\nInterface InvalidatableWrapper<T>; // Specialized JdbcWrapper contract for wrapped objects that can additioanlly be invalidated\nInterface JdbcCoordinator; // Coordinates JDBC-related activities.\nInterface JdbcServices; // Contract for services around JDBC operations.\nInterface JdbcWrapper<T>; // Generic contract for wrapped JDBC objects.\nInterface NonDurableConnectionObserver; // Additional optional contract for connection observers to indicate that they should be released when the physical connection is released.\nInterface ResultSetReturn; // Contract for extracting ResultSets from Statements, executing Statements, managing Statement/ResultSet resources, and logging statement calls.\nInterface ResultSetWrapper;\nInterface SchemaNameResolver; // Contract for resolving the schema of a Connection.\nInterface SqlExceptionHelper.WarningHandler; // Contract for handling warnings\nInterface StatementPreparer; // Contracting for preparing SQL statements\nClass ConnectionObserverAdapter; // A no-op adapter for ConnectionObserver.\nClass SqlExceptionHelper; // Helper for handling SQLExceptions in various manners.\nClass SqlExceptionHelper.StandardWarningHandler; // Standard SQLWarning handler for logging warnings\nClass SqlExceptionHelper.WarningHandlerLoggingSupport; // Basic support for SqlExceptionHelper.WarningHandler implementations which handle warnings\nClass SqlStatementLogger; // Centralize logging for SQL statements.\nClass TypeInfo; // Models type info extracted from DatabaseMetaData.getTypeInfo()\nEnum TypeNullability; // Describes the instrinsic nullability of a data type as reported by the JDBC driver.\nEnum TypeSearchability; // Describes the searchability of a data type as reported by the JDBC driver.\n", "des": "SPI contracts for supporting various aspects of JDBC interaction"}
{"index": 3451, "repo": "hibernate-core-5.6.15.Final", "code": "package jndi;\n\npackage jndi.spi; // The SPI contracts for Hibernate JNDI support\nClass JndiException; // An exception indicating trouble accessing JNDI\nClass JndiNameException; // Indicates a problem with a given JNDI name being deemed as not valid.\n", "des": "Support for JNDI within Hibernate"}
{"index": 3452, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface JndiService; // Service providing simplified access to JNDI related features needed by Hibernate.\n", "des": "The SPI contracts for Hibernate JNDI support"}
{"index": 3453, "repo": "hibernate-core-5.6.15.Final", "code": "package profile;\n\nClass Association; // Models the association of a given fetch.\nClass Fetch; // Models an individual fetch within a profile.\nClass FetchProfile; // A 'fetch profile' allows a user to dynamically modify the fetching strategy used for particular associations at runtime, whereas that information was historically only statically defined in the metadata.\nEnum Fetch.Style; // The type or style of fetch.\n", "des": "Models the fetch profiles defined by the application"}
{"index": 3454, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface NativeQueryInterpreter; // Service contract for dealing with native queries.\nInterface ParameterParser.Recognizer; // Maybe better named a Journaler.\nInterface QueryPlanCache.QueryPlanCreator;\nClass AbstractParameterDescriptor; // NOTE: Consider this contract (and its sub-contracts) as incubating as we transition to 6.0 and SQM\nClass EntityGraphQueryHint; // Encapsulates a JPA EntityGraph provided through a JPQL query hint.\nClass FilterQueryPlan; // Extends an HQLQueryPlan to maintain a reference to the collection-role name being filtered.\nClass HQLQueryPlan; // Defines a query execution plan for an HQL query (or filter).\nClass NamedParameterDescriptor; // Descriptor regarding a named parameter.\nClass NativeQueryInterpreterInitiator;\nClass NativeSQLQueryPlan; // Defines a query execution plan for a native-SQL query.\nClass OrdinalParameterDescriptor; // Descriptor regarding an ordinal parameter.\nClass ParameterParser; // The single available method ParameterParser.parse(java.lang.String, org.hibernate.engine.query.spi.ParameterParser.Recognizer) is responsible for parsing a query string and recognizing tokens in relation to parameters (either named, JPA-style, or ordinal) and providing callbacks about such recognitions.\nClass ParamLocationRecognizer; // Implements a parameter parser recognizer specifically for the purpose of journaling parameter locations.\nClass ParamLocationRecognizer.InFlightJpaOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightNamedParameterState; // Internal in-flight representation of a recognized named parameter\nClass ParamLocationRecognizer.InFlightOrdinalParameterState; // Internal in-flight representation of a recognized named parameter\nClass QueryPlanCache; // Acts as a cache for compiled query plans, as well as query-parameter metadata.\nClass ReturnMetadata; // Metadata about the query return(s).\n", "des": "Defines support for query plans and stored metadata about queries"}
{"index": 3455, "repo": "hibernate-core-5.6.15.Final", "code": "package graph;\n\nInterface AttributeNode<J>; // Hibernate extension to the JPA entity-graph AttributeNode contract.\nInterface Graph<J>; // A container for AttributeNodes.\nInterface GraphNode<J>; // Commonality between AttributeNode and Graph.\nInterface RootGraph<J>; // Hibernate extension to the JPA EntityGraph contract.\nInterface SubGraph<J>; // Hibernate extension to the JPA entity-graph Subgraph contract.\nClass EntityGraphs; // A collection of EntityGraph utilities.\nClass GraphParser; // Parser for string representations of JPA EntityGraph (RootGraph) and Subgraph (SubGraph), using a simple syntax defined by the `graph.g` Antlr grammar.\nEnum GraphSemantic; // JPA defines 2 distinct semantics for applying an EntityGraph.\nClass CannotBecomeEntityGraphException; // Indicates an illegal attempt to make a Graph become an EntityGraph via Graph.makeRootGraph(String, boolean).\nClass CannotContainSubGraphException; // Indicates an attempt was made to add a (key)? sub-graph to an attribute type that does not support (key)? sub-graphs.\nClass InvalidGraphException; // Thrown by GraphParser to indicate textual entity graph representation parsing errors.\n", "des": "Hibernate's (extended) support for JPA's entity graphs"}
{"index": 3456, "repo": "hibernate-core-5.6.15.Final", "code": "package id;\n\npackage id.persistent; // Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values.\nInterface AbstractMultiTableBulkIdStrategyImpl.PreparationContext;\nInterface IdTableInfo;\nInterface IdTableSupport;\nInterface MultiTableBulkIdStrategy; // Generalized strategy contract for handling multi-table bulk HQL operations.\nInterface MultiTableBulkIdStrategy.DeleteHandler; // Handler for dealing with multi-table HQL bulk delete statements.\nInterface MultiTableBulkIdStrategy.UpdateHandler; // Handler for dealing with multi-table HQL bulk update statements.\nClass AbstractIdsBulkIdHandler; // Base class for all strategies that select the ids to be updated/deleted prior to executing the update/delete operation.\nClass AbstractMultiTableBulkIdStrategyImpl<TT extends IdTableInfo,​CT extends AbstractMultiTableBulkIdStrategyImpl.PreparationContext>; // Convenience base class for MultiTableBulkIdStrategy implementations.\nClass AbstractTableBasedBulkIdHandler; // Convenience base class for MultiTableBulkIdStrategy.UpdateHandler and MultiTableBulkIdStrategy.DeleteHandler implementations through TableBasedUpdateHandlerImpl and TableBasedDeleteHandlerImpl respectively.\nClass AbstractTableBasedBulkIdHandler.ProcessedWhereClause;\nClass IdTableHelper;\nClass IdTableSupportStandardImpl;\nClass TableBasedDeleteHandlerImpl;\nClass TableBasedUpdateHandlerImpl;\n", "des": "Support for multi-table update and delete statements via id-tables."}
{"index": 3457, "repo": "hibernate-core-5.6.15.Final", "code": "package persistent;\n\nClass DeleteHandlerImpl;\nClass Helper;\nClass PersistentTableBulkIdStrategy; // This is a strategy that mimics temporary tables for databases which do not support temporary tables.\nClass UpdateHandlerImpl;\n", "des": "Package contains an implementation of MultiTableBulkIdStrategy based on the use of a persistent (ANSI SQL term) table to hold id values."}
{"index": 3458, "repo": "hibernate-core-5.6.15.Final", "code": "package enhanced;\n\nInterface AccessCallback; // Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.\nInterface DatabaseStructure; // Encapsulates definition of the underlying data structure backing a sequence-style generator.\nInterface InitialValueAwareOptimizer; // Marker interface for optimizer which wishes to know the user-specified initial value.\nInterface Optimizer; // Performs optimization on an optimizable identifier generator.\nClass AbstractOptimizer; // Common support for optimizer implementations.\nClass HiLoOptimizer; // Optimizer which applies a 'hilo' algorithm in memory to achieve optimization.\nClass LegacyHiLoAlgorithmOptimizer; // Slight variation from HiLoOptimizer, maintaining compatibility with the values generated by the legacy Hibernate hilo based generators.\nClass NoopOptimizer; // An optimizer that performs no optimization.\nClass OptimizerFactory; // Factory for Optimizer instances.\nClass PooledLoOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value.\nClass PooledLoThreadLocalOptimizer; // Variation of PooledOptimizer which interprets the incoming database value as the lo value, rather than the hi value, as well as using thread local to cache the generation state.\nClass PooledOptimizer; // Optimizer which uses a pool of values, storing the next low value of the range in the database.\nClass SequenceStructure; // Describes a sequence.\nClass SequenceStyleGenerator; // Generates identifier values based on a sequence-style database structure.\nClass TableGenerator; // An enhanced version of table-based id generation.\nClass TableStructure; // Describes a table used to mimic sequence behavior\nEnum StandardOptimizerDescriptor; // Enumeration of the standard Hibernate id generation optimizers.\n", "des": "Enhanced/improved versions of table and sequence based identifier generators targeting portability and unified configuration"}
{"index": 3459, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface Callback; // Represents a JPA event callback (the method).\nInterface CallbackBuilder;\nInterface CallbackBuilder.CallbackRegistrar;\nInterface CallbackDefinition;\nInterface CallbackRegistrar;\nInterface CallbackRegistry; // Registry of Callbacks by entity and type\nInterface CallbackRegistryConsumer; // Contract for injecting the registry of Callbacks into event listeners.\nEnum CallbackType;\n", "des": "The SPI contracts for supporting JPA lifecycle callbacks."}
{"index": 3460, "repo": "hibernate-core-5.6.15.Final", "code": "package plan;\n\nClass AbstractBatchingEntityLoaderBuilder; // Base class for LoadPlan-based BatchingEntityLoaderBuilder implementations.\nClass AbstractLoadPlanBasedEntityLoader; // A UniqueEntityLoader implementation based on using LoadPlans\nClass BatchingEntityLoader; // The base contract for UniqueEntityLoader implementations capable of performing batch-fetch loading of entities using multiple primary key values in the SQL WHERE clause.\nClass DynamicBatchingEntityLoader; // Batching entity loader using dynamic where-clause\nClass DynamicBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances capable of dynamically building its batch-fetch SQL based on the actual number of entity ids waiting to be batch fetched.\nClass EntityLoader; // UniqueEntityLoader implementation that is the main functionality for LoadPlan-based Entity loading.\nClass EntityLoader.Builder;\nClass LegacyBatchingEntityLoaderBuilder; // LoadPlan-based implementation of the legacy batch loading strategy\nClass LegacyBatchingEntityLoaderBuilder.LegacyBatchingEntityLoader;\nClass MultiEntityLoadingSupport;\nClass PaddedBatchingEntityLoader; // Batching entity loader using padded where-clause\nClass PaddedBatchingEntityLoaderBuilder; // A walking/plan based BatchingEntityLoaderBuilder that builds entity-loader instances building its batch-fetch SQL based on padding - using a set number of parameters, but setting \"unneeded ones\" to null.\n", "des": "Support for entity loaders built on top of the org.hibernate.loader.plan API to apply entity-graphs"}
{"index": 3461, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface ExpandingCollectionQuerySpace; // Describes a collection query space that allows adding joins with other query spaces; used while building a CollectionQuerySpace.\nInterface ExpandingCompositeQuerySpace; // Describes a composite query space that allows adding joins with other query spaces; used while building a CompositeQuerySpace.\nInterface ExpandingEntityIdentifierDescription; // Describes an entity identifier description that allows adding fetches; used while building a EntityIdentifierDescription.\nInterface ExpandingEntityQuerySpace; // Describes an entity query space that allows adding joins with other query spaces; used while building an EntityQuerySpace.\nInterface ExpandingFetchSource; // Describes the internal contract for things which can contain fetches.\nInterface ExpandingQuerySpace; // Describes a query space that allows adding joins with other query spaces; used while building a QuerySpace.\nInterface ExpandingQuerySpaces; // Models a collection of QuerySpace references and exposes the ability to create an ExpandingQuerySpace for \"returns\" and fetches; used when building a load plan.\nInterface LoadPlanBuildingAssociationVisitationStrategy; // Specialized AssociationVisitationStrategy implementation for building LoadPlan instances.\nInterface LoadPlanBuildingContext; // Provides access to context needed in building a LoadPlan.\nClass LoadPlanTreePrinter; // Prints a LoadPlan graph and its QuerySpaces graph as tree structures.\nClass MetamodelDrivenLoadPlanBuilder; // A metadata-driven builder of LoadPlans.\nClass QuerySpaceTreePrinter; // Prints a QuerySpaces graph as a tree structure.\nClass ReturnGraphTreePrinter; // Prints a Return graph as a tree structure.\nClass TreePrinterHelper; // A singleton helper class for printing tree structures using indentation.\n", "des": "Defines the SPI for building a metamodel-driven LoadPlan"}
{"index": 3462, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface NamedParameterContext; // The context for named parameters.\nInterface QueryBuildingParameters; // Provides values for all options that impact the built query.\n", "des": "Defines the SPI for obtaining values for options that impact the load query."}
{"index": 3463, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface AliasResolutionContext; // Provides aliases that are used by load queries and ResultSet processors.\nInterface CollectionReferenceAliases;\nInterface EntityReferenceAliases; // Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?\nInterface LoadQueryDetails;\nInterface LockModeResolver;\n", "des": "Defines the SPI for the load query generated for the LoadPlan and the ResultSet processor."}
{"index": 3464, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface AnyAttributeFetch; // Models the requested fetching of an \"any\" attribute.\nInterface AttributeFetch; // Models a Fetch that is specifically for an attribute.\nInterface BidirectionalEntityReference; // Represents the circular side of a bi-directional entity association.\nInterface CollectionAttributeFetch; // Models the requested fetching of a persistent collection attribute.\nInterface CollectionFetchableElement; // A collection element which is a FetchSource.\nInterface CollectionFetchableIndex; // A collection index which is a FetchSource.\nInterface CollectionQuerySpace; // Models a QuerySpace for a persistent collection.\nInterface CollectionReference; // Represents a reference to a persistent collection either as a Return or as a CollectionAttributeFetch.\nInterface CollectionReturn; // Models the a persistent collection as root Return.\nInterface CompositeAttributeFetch; // Models the requested fetching of a composite attribute.\nInterface CompositeFetch; // Models the requested fetching of a composition (component/embeddable), which may or may not be an attribute.\nInterface CompositeQuerySpace; // Models a QuerySpace for a composition (component/embeddable).\nInterface EntityFetch; // Models the requested fetching of an entity attribute.\nInterface EntityIdentifierDescription; // Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).\nInterface EntityQuerySpace; // Models a QuerySpace specific to an entity (EntityPersister).\nInterface EntityReference; // Represents a reference to an entity either as a return, fetch, or collection element or index.\nInterface EntityReturn; // Models the an entity as root Return.\nInterface Fetch; // Contract for associations that are being fetched.\nInterface FetchSource; // Contract for a FetchSource (aka, the thing that owns the fetched attribute).\nInterface Join; // Represents a join in the QuerySpace-sense.\nInterface JoinDefinedByMetadata; // Specialization of a Join that is defined by the metadata.\nInterface LoadPlan; // Describes a plan for performing a load of results.\nInterface QuerySpace; // Defines a persister reference (either entity or collection) or a composite reference.\nInterface QuerySpaces; // Models a collection of QuerySpace references and exposes the ability to find a QuerySpace by its UID\nInterface Return; // Represents a return value in the query results.\n", "des": "Defines the SPI for the building blocks that make up a LoadPlan."}
{"index": 3465, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface Getter; // The contract for getting value for a persistent property from its container/owner\nInterface PropertyAccess; // Describes access to a particular persistent property in terms of getting and setting values.\nInterface PropertyAccessStrategy; // Describes a strategy for persistent property access (field, JavaBean-style property, etc).\nInterface PropertyAccessStrategyResolver; // Contract for resolving the PropertyAccessStrategy to use.\nInterface Setter; // The contract for setting a persistent property value into its container/owner\nClass EnhancedGetterMethodImpl;\nClass EnhancedSetterImpl; // A specialized Setter implementation for handling setting values into a bytecode-enhanced Class.\nClass GetterFieldImpl; // Field-based implementation of Getter\nClass GetterMethodImpl;\nClass SetterFieldImpl; // Field-based implementation of Setter\nClass SetterMethodImpl;\nEnum BuiltInPropertyAccessStrategies; // Describes the built-in externally-nameable PropertyAccessStrategy implementations.\nClass PropertyAccessBuildingException; // Indicates a problem while building a PropertyAccess\nClass PropertyAccessException; // Indicates a problem reading or writing value from/to a persistent property.\nClass PropertyAccessSerializationException;\n", "des": "Defines strategies for accessing the persistent properties of an entity or composite."}
{"index": 3466, "repo": "hibernate-core-5.6.15.Final", "code": "package transaction;\n\npackage transaction.spi; // Extended SPI contracts for the resource-level transaction capabilities of Hibernate.\nClass LocalSynchronizationException; // Wraps an exception thrown from a \"local synchronization\" (one registered in the SynchronizationRegistry).\nClass NullSynchronizationException; // Indicates an attempt to register a null synchronization.\nClass TransactionRequiredForJoinException; // Indicates a call to TransactionCoordinator.explicitJoin() that requires an active transaction where there currently is none.\n", "des": "Defines the resource-level transaction capabilities of Hibernate, which revolves around the TransactionCoordinator contract."}
{"index": 3467, "repo": "hibernate-core-5.6.15.Final", "code": "package spi;\n\nInterface DdlTransactionIsolator; // Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands\nInterface SynchronizationRegistry; // Manages a registry of (local) JTA Synchronization instances\nInterface SynchronizationRegistryImplementor; // SPI contract for SynchronizationRegistry implementors.\nInterface TransactionCoordinator; // Models the coordination of all transaction related flows.\nInterface TransactionCoordinator.TransactionDriver; // Provides the means for \"local transactions\" (as transaction drivers) to control the underlying \"physical transaction\" currently associated with the TransactionCoordinator.\nInterface TransactionCoordinatorBuilder; // Builder for TransactionCoordinator instances\nInterface TransactionCoordinatorBuilder.Options; // Access to options to are specific to each TransactionCoordinator instance\nInterface TransactionCoordinatorOwner; // Models an owner of a TransactionCoordinator.\nEnum TransactionStatus; // Enumeration of statuses in which a transaction facade (Transaction) might be.\n", "des": "Extended SPI contracts for the resource-level transaction capabilities of Hibernate."}
{"index": 3468, "repo": "hibernate-core-5.6.15.Final", "code": "package converter;\n\nClass AttributeConverterMutabilityPlanImpl<T>; // The standard approach for defining a MutabilityPlan for converted (AttributeConverter) values is to always assume that they are immutable to make sure that dirty checking, deep copying and second-level caching all work properly no matter what.\nClass AttributeConverterSqlTypeDescriptorAdapter; // Adapter for incorporating JPA AttributeConverter handling into the SqlTypeDescriptor contract.\nClass AttributeConverterTypeAdapter<T>; // Adapts the Hibernate Type contract to incorporate JPA AttributeConverter calls.\n", "des": "Support for handling JPA AttributeConverter instances as part of the Hibernate Type system."}
{"index": 3469, "repo": "hibernate-core-5.6.15.Final", "code": "package sql;\n\nInterface SqlTypeDescriptor; // Descriptor for the SQL/JDBC side of a value mapping.\nClass BasicBinder<J>; // Convenience base implementation of ValueBinder\nClass BasicExtractor<J>; // Convenience base implementation of ValueExtractor\nClass BigIntTypeDescriptor; // Descriptor for BIGINT handling.\nClass BinaryTypeDescriptor; // Descriptor for BINARY handling.\nClass BitTypeDescriptor; // Descriptor for BIT handling.\nClass BlobTypeDescriptor; // Descriptor for BLOB handling.\nClass BooleanTypeDescriptor; // Descriptor for BOOLEAN handling.\nClass CharTypeDescriptor; // Descriptor for CHAR handling.\nClass ClobTypeDescriptor; // Descriptor for CLOB handling.\nClass DateTypeDescriptor; // Descriptor for DATE handling.\nClass DecimalTypeDescriptor; // Descriptor for DECIMAL handling.\nClass DoubleTypeDescriptor; // Descriptor for DOUBLE handling.\nClass FloatTypeDescriptor; // Descriptor for FLOAT handling.\nClass IntegerTypeDescriptor; // Descriptor for INTEGER handling.\nClass JdbcTypeFamilyInformation; // Information pertaining to JDBC type families.\nClass JdbcTypeJavaClassMappings; // Maintains the JDBC recommended mappings for JDBC type-code to/from Java Class as defined in _Appendix B : Data Type Conversion Tables_ of the _JDBC 4.0 Specification_ Eventually, the plan is to have Dialect and DatabaseMetaData.getTypeInfo() contribute this information.\nClass LobTypeMappings;\nClass LongNVarcharTypeDescriptor; // Descriptor for LONGNVARCHAR handling.\nClass LongVarbinaryTypeDescriptor; // Descriptor for LONGVARBINARY handling.\nClass LongVarcharTypeDescriptor; // Descriptor for LONGVARCHAR handling.\nClass NationalizedTypeMappings; // Manages a mapping between nationalized and non-nationalized variants of JDBC types.\nClass NCharTypeDescriptor; // Descriptor for NCHAR handling.\nClass NClobTypeDescriptor; // Descriptor for NCLOB handling.\nClass NumericTypeDescriptor; // Descriptor for NUMERIC handling.\nClass NVarcharTypeDescriptor; // Descriptor for NVARCHAR handling.\nClass RealTypeDescriptor; // Descriptor for REAL handling.\nClass SmallIntTypeDescriptor; // Descriptor for SMALLINT handling.\nClass SqlTypeDescriptorRegistry;\nClass SqlTypeDescriptorRegistry.ObjectSqlTypeDescriptor;\nClass TimestampTypeDescriptor; // Descriptor for TIMESTAMP handling.\nClass TimeTypeDescriptor; // Descriptor for TIME handling.\n", "des": "Defines handling of the standard JDBC-defined types."}
{"index": 3470, "repo": "poi-ooxml-5.2.3", "code": "package binary;\n\nInterface XSSFBSheetHandler.SheetContentsHandler; // You need to implement this to handle the results of the sheet parsing.\nClass XSSFBCommentsTable;\nClass XSSFBHyperlinksTable;\nClass XSSFBParser; // Experimental parser for Microsoft's ooxml xlsb format.\nClass XSSFBRelation; // Need to have this mirror class of XSSFRelation because of conflicts with regular ooxml relations.\nClass XSSFBSharedStringsTable;\nClass XSSFBSheetHandler;\nClass XSSFBStylesTable; // This is a very thin shim to gather number formats from styles.bin files.\nClass XSSFBUtils;\nClass XSSFHyperlinkRecord; // This is a read only record that maintains information about a hyperlink.\nEnum XSSFBRecordType;\nClass XSSFBParseException; // Parse exception while reading an xssfb.\n", "des": "The org.apache.poi.xssf.binary package includes necessary underlying components for streaming/read-only processing of xlsb files."}
{"index": 3471, "repo": "tomcat-jspapi-10.1", "code": "package jsp;\n\npackage jsp.el; // Classes and interfaces for the JSP 2.0 Expression Language API.\npackage jsp.tagext; // Classes and interfaces for the definition of JavaServer Pages Tag Libraries.\nInterface HttpJspPage; // The HttpJspPage interface describes the interaction that a JSP Page Implementation Class must satisfy when using the HTTP protocol.\nInterface JspApplicationContext; // Stores application-scoped information for the JSP container.\nInterface JspPage; // The JspPage interface describes the generic interaction that a JSP Page Implementation class must satisfy; pages that use the HTTP protocol are described by the HttpJspPage interface.\nClass ErrorData; // Contains information about an error, for error pages.\nClass JspContext; // JspContext serves as the base class for the PageContext class and abstracts all information that is not specific to servlets.\nClass JspEngineInfo; // The JspEngineInfo is an abstract class that provides information on the current JSP engine.\nClass JspFactory; // The JspFactory is an abstract class that defines a number of factory methods available to a JSP page at runtime for the purposes of creating instances of various interfaces and classes used to support the JSP implementation.\nClass JspWriter; // The actions and template data in a JSP page is written using the JspWriter object that is referenced by the implicit variable out which is initialized automatically using methods in the PageContext object.\nClass PageContext; // PageContext extends JspContext to provide useful context information for when JSP technology is used in a Servlet environment.\nClass JspException; // A generic exception known to the JSP engine; uncaught JspExceptions will result in an invocation of the errorpage machinery.\nClass JspTagException; // Exception to be used by a Tag Handler to indicate some unrecoverable error.\nClass SkipPageException; // Exception to indicate the calling page must cease evaluation.\n", "des": "Classes and interfaces for the Core JSP 2.0 API."}
{"index": 3472, "repo": "tomcat-jspapi-10.1", "code": "package el;\n\nInterface FunctionMapper;\nInterface VariableResolver;\nClass Expression;\nClass ExpressionEvaluator;\nClass ImplicitObjectELResolver; // Provides resolution in EL for the implicit variables of a JSP page.\nClass ImportELResolver; // Providers resolution of imports and static imports in the Jakarta Server Pages ELResolver chain.\nClass NotFoundELResolver; // The final resolver of the Jakarta Server Pages ELResolver chain.\nClass ScopedAttributeELResolver; // An ELResolver for working with JSP scoped attributes which may have page, request, session or application scope.\nClass ELException;\nClass ELParseException;\n", "des": "Classes and interfaces for the JSP 2.0 Expression Language API."}
{"index": 3473, "repo": "tomcat-jspapi-10.1", "code": "package tagext;\n\nInterface BodyTag; // The BodyTag interface extends IterationTag by defining additional methods that let a tag handler manipulate the content of evaluating its body.\nInterface DynamicAttributes; // For a tag to declare that it accepts dynamic attributes, it must implement this interface.\nInterface IterationTag; // The IterationTag interface extends Tag by defining one additional method that controls the reevaluation of its body.\nInterface JspIdConsumer; // Interface that allows tag handlers to be provided with a unique (within the scope of the web application) ID.\nInterface JspTag; // Serves as a base class for Tag and SimpleTag.\nInterface SimpleTag; // Interface for defining Simple Tag Handlers.\nInterface Tag; // The interface of a classic tag handler that does not want to manipulate its body.\nInterface TryCatchFinally; // The auxiliary interface of a Tag, IterationTag or BodyTag tag handler that wants additional hooks for managing resources.\nClass BodyContent; // An encapsulation of the evaluation of the body of an action so it is available to a tag handler.\nClass BodyTagSupport; // A base class for defining tag handlers implementing BodyTag.\nClass FunctionInfo; // Information for a function in a Tag Library.\nClass JspFragment; // Encapsulates a portion of JSP code in an object that can be invoked as many times as needed.\nClass PageData; // Translation-time information on a JSP page.\nClass SimpleTagSupport; // A base class for defining tag handlers implementing SimpleTag.\nClass TagAdapter; // Wraps any SimpleTag and exposes it using a Tag interface.\nClass TagAttributeInfo; // Information on the attributes of a Tag, available at translation time.\nClass TagData; // The (translation-time only) attribute/value information for a tag instance.\nClass TagExtraInfo; // Optional class provided by the tag library author to describe additional translation-time information not described in the TLD.\nClass TagFileInfo; // Tag information for a tag file in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.\nClass TagInfo; // Tag information for a tag in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.\n", "des": "Classes and interfaces for the definition of JavaServer Pages Tag Libraries."}
{"index": 3474, "repo": "hilt-android-2.47", "code": "package android;\n\npackage android.components; // This package contains Hilt's built-in Components for Android.\npackage android.flags; // Runtime flags to control Hilt behavior for rollout of changes.\npackage android.lifecycle; // This package contains Hilt APIs for Android applications.\npackage android.migration; // This package contains Android APIs to help migrating a codebase to Hilt.\npackage android.qualifiers; // This package contains Hilt's built-in Android Qualifier annotations.\npackage android.scopes; // This package contains Hilt's built-in Android Scope annotations.\nInterface ActivityRetainedLifecycle; // A ActivityRetainedLifecycle class is associated with the lifecycle of the ActivityRetainedComponent.\nInterface ActivityRetainedLifecycle.OnClearedListener; // Listener for receiving a callback for when the ActivityRetainedComponent will no longer be used and destroyed.\nInterface ViewModelLifecycle; // A class for registering listeners on the ViewModel lifecycle.\nClass EarlyEntryPoints; // Static utility methods for accessing entry points annotated with EarlyEntryPoint.\nAnnotation Type AndroidEntryPoint; // Marks an Android component class to be setup for injection with the standard Hilt Dagger Android components.\nAnnotation Type EarlyEntryPoint; // An escape hatch for when a Hilt entry point usage needs to be called before the singleton component is available in a Hilt test.\nAnnotation Type HiltAndroidApp; // Annotation for marking the Application class where the Dagger components should be generated.\nAnnotation Type WithFragmentBindings; // Makes a View annotated with AndroidEntryPoint have access to fragment bindings.\n", "des": "This package contains Hilt APIs for Android applications."}
{"index": 3475, "repo": "hilt-android-2.47", "code": "package components;\n\nInterface ActivityComponent; // A Hilt component that has the lifetime of the activity.\nInterface ActivityRetainedComponent; // A Hilt component that has the lifetime of a configuration surviving activity.\nInterface FragmentComponent; // A Hilt component that has the lifetime of the fragment.\nInterface ServiceComponent; // A Hilt component that has the lifetime of the service.\nInterface ViewComponent; // A Hilt component that has the lifetime of the view.\nInterface ViewModelComponent; // A Hilt component that has the lifetime of a single ViewModel.\nInterface ViewWithFragmentComponent; // A Hilt component that has the lifetime of the view.\n", "des": "This package contains Hilt's built-in Components for Android."}
{"index": 3476, "repo": "hilt-android-2.47", "code": "package flags;\n\nInterface FragmentGetContextFix.FragmentGetContextFixEntryPoint; // Entry point for getting the flag.\nClass FragmentGetContextFix; // Runtime flag for the Fragment.getContext() fix.\nAnnotation Type FragmentGetContextFix.DisableFragmentGetContextFix; // Qualifier annotation to bind disable the Fragment.getContext() fix at runtime.\n", "des": "Runtime flags to control Hilt behavior for rollout of changes."}
{"index": 3477, "repo": "hilt-android-2.47", "code": "package lifecycle;\n\nInterface RetainedLifecycle; // A class for registered listeners on a retained lifecycle (generally backed up by a ViewModel).\nInterface RetainedLifecycle.OnClearedListener; // Listener for when the retained lifecycle is cleared.\nAnnotation Type HiltViewModel; // Identifies a ViewModel for construction injection.\n", "des": "This package contains Hilt APIs for Android applications."}
{"index": 3478, "repo": "hilt-android-2.47", "code": "package migration;\n\nClass CustomInjection; // Utility methods for injecting the application when using CustomInject.\nClass OptionalInjectCheck; // Utility methods for validating if an AndroidEntryPoint-annotated class that is also annotated with OptionalInject was injected by Hilt.\nAnnotation Type CustomInject; // When used on a HiltAndroidApp-annotated application, this causes the application to no longer inject itself in onCreate and instead allows it to be injected at some other time.\nAnnotation Type OptionalInject; // When placed on an AndroidEntryPoint-annotated activity / fragment / view / etc, allows injection to occur optionally based on whether or not the application is using Hilt.\n", "des": "This package contains Android APIs to help migrating a codebase to Hilt."}
{"index": 3479, "repo": "hilt-android-2.47", "code": "package qualifiers;\n\nAnnotation Type ActivityContext; // Annotation for a Context that corresponds to the activity.\nAnnotation Type ApplicationContext; // Annotation for an Application Context dependency.\n", "des": "This package contains Hilt's built-in Android Qualifier annotations."}
{"index": 3480, "repo": "hilt-android-2.47", "code": "package scopes;\n\nAnnotation Type ActivityRetainedScoped; // Scope annotation for bindings that should exist for the life of an activity, surviving configuration.\nAnnotation Type ActivityScoped; // Scope annotation for bindings that should exist for the life of an activity.\nAnnotation Type FragmentScoped; // Scope annotation for bindings that should exist for the life of a fragment.\nAnnotation Type ServiceScoped; // Scope annotation for bindings that should exist for the life of a service.\nAnnotation Type ViewModelScoped; // Scope annotation for bindings that should exist for the life of a a single ViewModel.\nAnnotation Type ViewScoped; // Scope annotation for bindings that should exist for the life of a View.\n", "des": "This package contains Hilt's built-in Android Scope annotations."}
{"index": 3481, "repo": "dagger-producers-2.47", "code": "package producers;\n\npackage producers.monitoring; // This package provides hooks for monitoring producers.\nInterface Producer<T>; // An interface that represents the production of a type T.\nClass Produced<T>; // An interface that represents the result of a production of type T, or an exception that was thrown during that production.\nClass Producers; // Utility methods to create Producers.\nEnum CancellationPolicy.Propagation; // Enumeration of the options for what happens to a parent component when one of its child components is cancelled.\nAnnotation Type CancellationPolicy; // Annotates a production component or subcomponent to specify its policy when a child component is cancelled.\nAnnotation Type ProducerModule; // Annotates a class that contributes Produces bindings to the production component.\nAnnotation Type Produces; // Annotates methods of a producer module to create a production binding.\nAnnotation Type Production; // Qualifies a type that will be provided to the framework for use internally.\nAnnotation Type ProductionComponent; // Annotates an interface or abstract class for which a fully-formed, dependency-injected implementation is to be generated from a set of modules.\nAnnotation Type ProductionComponent.Builder; // A builder for a production component.\nAnnotation Type ProductionComponent.Factory; // A factory for a production component.\nAnnotation Type ProductionScope; // A scope annotation for provision bindings that are tied to the lifetime of a ProductionComponent or ProductionSubcomponent.\nAnnotation Type ProductionSubcomponent; // A subcomponent that inherits the bindings from a parent Component, Subcomponent, ProductionComponent, or ProductionSubcomponent.\nAnnotation Type ProductionSubcomponent.Builder; // A builder for a production subcomponent.\nAnnotation Type ProductionSubcomponent.Factory; // A factory for a production subcomponent.\n", "des": "This package contains the public API for Dagger 2's producer functionality."}
{"index": 3482, "repo": "dagger-producers-2.47", "code": "package monitoring;\n\nInterface ProductionComponentTimingRecorder; // A hook for recording timing of the execution of production components.\nInterface ProductionComponentTimingRecorder.Factory;\nClass ProducerMonitor; // A hook for monitoring the execution of individual producer methods.\nClass ProducerTimingRecorder; // A hook for recording the timing of the execution of individual producer methods.\nClass ProducerToken; // A token that represents an individual producer method.\nClass ProductionComponentMonitor; // A hook for monitoring execution of production components.\nClass ProductionComponentMonitor.Factory;\nClass TimingProductionComponentMonitor; // A monitor that measures the timing of the execution of a production component, and logs those timings with the given recorder.\nClass TimingProductionComponentMonitor.Factory;\nClass TimingRecorders; // Utility methods relating to timing.\n", "des": "This package provides hooks for monitoring producers."}
{"index": 3483, "repo": "opennlp-uima-2.2.0", "code": "package chunker;\n\nInterface ChunkerModelResource;\nClass Chunker; // OpenNLP Chunker annotator.\nClass ChunkerModelResourceImpl;\n", "des": "Package related to finding non-recursive syntactic annotation such as noun phrase chunks."}
{"index": 3484, "repo": "opennlp-uima-2.2.0", "code": "package namefind;\n\nInterface TokenNameFinderModelResource;\nClass DictionaryNameFinder;\nClass NameFinder; // OpenNLP Name annotator.\nClass TokenNameFinderModelResourceImpl;\n", "des": "Package related to finding proper names and numeric amounts."}
{"index": 3485, "repo": "opennlp-uima-2.2.0", "code": "package postag;\n\nInterface POSModelResource;\nClass POSModelResourceImpl;\nClass POSTagger; // OpenNLP Part Of Speech annotator.\n", "des": "Package related to part-of-speech tagging."}
{"index": 3486, "repo": "opennlp-uima-2.2.0", "code": "package sentdetect;\n\nInterface SentenceModelResource;\nClass AbstractSentenceDetector;\nClass SentenceDetector; // OpenNLP Sentence annotator.\nClass SentenceModelResourceImpl;\n", "des": "Package related to identifying sentence boundaries."}
{"index": 3487, "repo": "opennlp-uima-2.2.0", "code": "package tokenize;\n\nInterface TokenizerModelResource; // A TokenizerModel which can be shared between AnalysisEngines and loaded via the UIMA resource model.\nClass AbstractTokenizer;\nClass SimpleTokenizer; // OpenNLP Simple Tokenizer annotator.\nClass Tokenizer; // OpenNLP Tokenizer annotator.\nClass TokenizerModelResourceImpl;\nClass WhitespaceTokenizer; // OpenNLP Whitespace Tokenizer annotator.\n", "des": "Package related to finding tokens or word segments."}
{"index": 3488, "repo": "poi-5.2.3", "code": "package ddf;\n\nInterface EscherRecordFactory; // The escher record factory interface allows for the creation of escher records from a pointer into a data array.\nInterface EscherSerializationListener; // Interface for listening to escher serialization events.\nClass AbstractEscherOptRecord; // Common abstract class for EscherOptRecord and EscherTertiaryOptRecord\nClass DefaultEscherRecordFactory; // Generates escher records when provided the byte array containing those records.\nClass EscherArrayProperty; // Escher array properties are the most weird construction ever invented with all sorts of special cases.\nClass EscherBitmapBlip;\nClass EscherBlipRecord;\nClass EscherBoolProperty; // Represents a boolean property.\nClass EscherBSERecord; // The BSE record is related closely to the EscherBlipRecord and stores extra information about the blip.\nClass EscherChildAnchorRecord; // The escher child anchor record is used to specify the position of a shape under an existing group.\nClass EscherClientAnchorRecord; // The escher client anchor specifies which rows and cells the shape is bound to as well as the offsets within those cells.\nClass EscherClientDataRecord; // The EscherClientDataRecord is used to store client specific data about the position of a shape within a container.\nClass EscherColorRef; // An OfficeArtCOLORREF structure entry which also handles color extension opid data\nClass EscherComplexProperty; // A complex property differs from a simple property in that the data can not fit inside a 32 bit integer.\nClass EscherContainerRecord; // Escher container records store other escher records as children.\nClass EscherDggRecord; // This record defines the drawing groups used for a particular sheet.\nClass EscherDggRecord.FileIdCluster;\nClass EscherDgRecord; // This record simply holds the number of shapes in the drawing group and the last shape id used for this drawing group.\nClass EscherDump; // Used to dump the contents of escher records to a PrintStream.\nClass EscherMetafileBlip;\nClass EscherOptRecord; // The opt record is used to store property values for a shape.\nClass EscherProperty; // This is the abstract base class for all escher properties.\n", "des": "This package contains classes for decoding the Microsoft Office Drawing format otherwise known as escher henceforth known in POI as the Dreadful Drawing Format."}
{"index": 3489, "repo": "poi-5.2.3", "code": "package hpsf;\n\npackage hpsf.wellknown; // Specific support for DocumentSummaryInformation, SummaryInformation types.\nClass Array;\nClass Blob;\nClass ClassID; // Represents a class ID (16 bytes).\nClass ClipboardData;\nClass CodePageString;\nClass Currency;\nClass CustomProperties; // Maintains the instances of CustomProperty that belong to a DocumentSummaryInformation.\nClass CustomProperty; // This class represents custom properties in the document summary information stream.\nClass Date;\nClass Decimal;\nClass DocumentSummaryInformation; // Convenience class representing a DocumentSummary Information stream in a Microsoft Office document.\nClass Filetime; // The Windows FILETIME structure holds a date and time associated with a file.\nClass GUID;\nClass HPSFPropertiesOnlyDocument; // A version of POIDocument which allows access to the HPSF Properties, but no other document contents.\nClass IndirectPropertyName;\nClass Property; // A property in a Section of a PropertySet.\nClass PropertySet; // Represents a property set in the Horrible Property Set Format (HPSF).\nClass PropertySetFactory; // Factory class to create instances of SummaryInformation, DocumentSummaryInformation and PropertySet.\nClass Section; // Represents a section in a PropertySet.\nClass SummaryInformation; // Convenience class representing a Summary Information stream in a Microsoft Office document.\nClass Thumbnail; // Class to manipulate data in the Clipboard Variant (VT_CF) format.\nClass TypedPropertyValue;\nClass UnicodeString;\nClass Variant; // The Variant types as defined by Microsoft's COM.\nClass VariantBool;\nClass VariantSupport; // Supports reading and writing of variant data.\nClass Vector; // Holder for vector-type properties\nClass VersionedStream;\nEnum ClassIDPredefined;\nClass HPSFException; // This exception is the superclass of all other checked exceptions thrown in this package.\nClass HPSFRuntimeException; // This exception is the superclass of all other unchecked exceptions thrown in this package.\nClass IllegalPropertySetDataException; // This exception is thrown when there is an illegal value set in a PropertySet.\nClass IllegalVariantTypeException; // This exception is thrown if HPSF encounters a variant type that is illegal in the current context.\n", "des": "Processes streams in the Horrible Property Set Format (HPSF) in POI filesystems."}
{"index": 3490, "repo": "poi-5.2.3", "code": "package wellknown;\n\nClass PropertyIDMap; // This is a dictionary which maps property ID values to property ID strings.\n", "des": "Specific support for DocumentSummaryInformation, SummaryInformation types."}
{"index": 3491, "repo": "poi-5.2.3", "code": "package hssf;\n\npackage hssf.eventusermodel; // HSSF eventmodel Package provides an event-based API for reading HSSF files.\npackage hssf.model; // Provides low level API structures for reading, writing, modifying XLS files.\npackage hssf.record; // Record package contains class representations for XLS binary strutures.\npackage hssf.usermodel; // The usermodel package maps HSSF low level structures to familiar workbook/sheet model\npackage hssf.util; // The util package contains tools needed for writing HSSF files that are not necesarily \"real\" HSSF concepts.\nClass OldExcelFormatException;\n", "des": "Horrible SpreadSheet Format API's for reading/writting Excel files using pure Java."}
{"index": 3492, "repo": "poi-5.2.3", "code": "package eventusermodel;\n\nInterface HSSFListener; // Interface for use with the HSSFRequest and HSSFEventFactory.\nClass AbortableHSSFListener; // Abstract class for use with the HSSFRequest and HSSFEventFactory, which allows for the halting of processing.\nClass EventWorkbookBuilder; // When working with the EventUserModel, if you want to process formulas, you need an instance of InternalWorkbook to pass to a HSSFWorkbook, to finally give to HSSFFormulaParser, and this will build you stub ones.\nClass EventWorkbookBuilder.SheetRecordCollectingListener; // A wrapping HSSFListener which will collect BoundSheetRecords and ExternSheetRecords as they go past, so you can create a Stub InternalWorkbook from them once required.\nClass FormatTrackingHSSFListener; // A proxy HSSFListener that keeps track of the document formatting records, and provides an easy way to look up the format strings used by cells from their ids.\nClass HSSFEventFactory; // Low level event based HSSF reader.\nClass HSSFRequest; // An HSSFRequest object should be constructed registering an instance or multiple instances of HSSFListener with each Record.sid you wish to listen for.\nClass MissingRecordAwareHSSFListener; // A HSSFListener which tracks rows and columns, and will trigger your HSSFListener for all rows and cells, even the ones that aren't actually stored in the file.\nClass HSSFUserException; // This exception is provided as a way for API users to throw exceptions from their event handling code.\n", "des": "HSSF eventmodel Package provides an event-based API for reading HSSF files."}
{"index": 3493, "repo": "poi-5.2.3", "code": "package model;\n\nClass ConvertAnchor;\nClass DrawingManager2; // Provides utilities to manage drawing groups.\nClass HSSFFormulaParser; // HSSF wrapper for the FormulaParser and FormulaRenderer\nClass InternalSheet; // Low level model implementation of a Sheet (one workbook contains many sheets) This file contains the low level binary records starting at the sheets BOF and ending with the sheets EOF.\nClass InternalWorkbook; // Low level model implementation of a Workbook.\nClass RecordStream; // Simplifies iteration over a sequence of Record objects.\nClass RowBlocksReader; // Segregates the 'Row Blocks' section of a single sheet into plain row/cell records and shared formula records.\nClass WorkbookRecordList;\nClass InternalSheet.UnsupportedBOFType;\n", "des": "Provides low level API structures for reading, writing, modifying XLS files."}
{"index": 3494, "repo": "poi-5.2.3", "code": "package record;\n\npackage record.aggregates; // The record aggregates are not real \"records\" but collections of records that act as a single record.\nInterface BiffHeaderInput;\nInterface CellValueRecordInterface; // The cell value record interface is implemented by all classes of type Record that contain cell values.\nInterface CFRuleBase.ComparisonOperator;\nInterface HSSFRecordTypes.RecordConstructor<T extends Record>;\nInterface Margin; // The margin interface is a parent used to define left, right, top and bottom margins.\nInterface SubRecord.SubRecordTypes.RecordConstructor<T extends SubRecord>;\nClass AbstractEscherHolderRecord; // The escher container record is used to hold escher records.\nClass ArrayRecord; // ARRAY (0x0221)\nClass AutoFilterInfoRecord; // The AutoFilterInfo record specifies the number of columns that have AutoFilter enabled and indicates the beginning of the collection of AutoFilter records.\nClass BackupRecord; // Boolean specifying whether the GUI should store a backup of the file.\nClass BlankRecord; // Represents a column in a row with no value but with styling.\nClass BOFRecord; // Somewhat of a misnomer, its used for the beginning of a set of records that have a particular purpose or subject.\nClass BookBoolRecord; // Contains a flag specifying whether the Gui should save externally linked values from other workbooks.\nClass BoolErrRecord; // Creates new BoolErrRecord.\nClass BottomMarginRecord; // Record for the bottom margin.\nClass BoundSheetRecord; // Defines a sheet within a workbook.\nClass CalcCountRecord; // Specifies the maximum times the gui should perform a formula recalculation.\nClass CalcModeRecord; // Tells the gui whether to calculate formulas automatically, manually or automatically except for tables.\nClass CellRecord; // Base class for all cell value records (implementors of CellValueRecordInterface).\nClass CFHeader12Record; // Conditional Formatting Header v12 record CFHEADER12 (0x0879), for conditional formattings introduced in Excel 2007 and newer.\nClass CFHeaderBase; // Parent of Conditional Formatting Header records, CFHeaderRecord and CFHeader12Record.\nClass CFHeaderRecord; // Conditional Formatting Header record CFHEADER (0x01B0).\n", "des": "Record package contains class representations for XLS binary strutures."}
{"index": 3495, "repo": "poi-5.2.3", "code": "package aggregates;\n\nInterface RecordAggregate.RecordVisitor;\nClass CFRecordsAggregate; // CFRecordsAggregate - aggregates Conditional Formatting records CFHeaderRecord and number of up CFRuleRecord records together to simplify access to them.\nClass ChartSubstreamRecordAggregate; // Manages the all the records associated with a chart sub-stream.\nClass ColumnInfoRecordsAggregate;\nClass ConditionalFormattingTable; // Holds all the conditional formatting for a workbook sheet.\nClass CustomViewSettingsRecordAggregate; // Manages the all the records associated with a 'Custom View Settings' sub-stream.\nClass DataValidityTable; // Manages the DVALRecord and DVRecords for a single sheet\nClass FormulaRecordAggregate; // The formula record aggregate is used to join together the formula record and it's (optional) string record and (optional) Shared Formula Record (template reads, excel optimization).\nClass MergedCellsTable;\nClass PageSettingsBlock; // Groups the page settings records for a worksheet.\nClass RecordAggregate; // RecordAggregates are groups of of BIFF Records that are typically stored together and/or updated together.\nClass RecordAggregate.PositionTrackingVisitor; // A wrapper for RecordAggregate.RecordVisitor which accumulates the sizes of all records visited.\nClass RowRecordsAggregate;\nClass SharedValueManager; // Manages various auxiliary records while constructing a RowRecordsAggregate: SharedFormulaRecords ArrayRecords TableRecords\nClass ValueRecordsAggregate; // Aggregate value records together.\nClass WorksheetProtectionBlock; // Groups the sheet protection records for a worksheet.\n", "des": "The record aggregates are not real \"records\" but collections of records that act as a single record."}
{"index": 3496, "repo": "poi-5.2.3", "code": "package usermodel;\n\nInterface HSSFShapeContainer; // An interface that indicates whether a class can contain children.\nInterface HSSFShapeTypes;\nClass DVConstraint; // Data Validation Constraint\nClass EscherGraphics; // Translates Graphics calls into escher calls.\nClass EscherGraphics2d; // Translates Graphics2d calls into escher calls.\nClass FontDetails; // Stores width and height details about a font.\nClass HeaderFooter; // Common class for HSSFHeader and HSSFFooter.\nClass HSSFAnchor; // An anchor is what specifics the position of a shape within a client object or within another containing shape.\nClass HSSFAutoFilter; // Represents autofiltering for the specified worksheet.\nClass HSSFBorderFormatting; // High level representation for Border Formatting component of Conditional Formatting settings\nClass HSSFCell; // High level representation of a cell in a row of a spreadsheet.\nClass HSSFCellStyle; // High level representation of the style of a cell in a sheet of a workbook.\nClass HSSFChart; // Has methods for construction of a chart object.\nClass HSSFChart.HSSFSeries; // A series in a chart\nClass HSSFChildAnchor;\nClass HSSFClientAnchor; // A client anchor is attached to an excel worksheet.\nClass HSSFColorScaleFormatting; // High level representation for Color Scale / Color Gradient Formatting component of Conditional Formatting settings\nClass HSSFCombobox;\nClass HSSFComment; // Represents a cell comment - a sticky note associated with a cell.\nClass HSSFConditionalFormatting; // HSSFConditionalFormatting class encapsulates all settings of Conditional Formatting.\nClass HSSFConditionalFormattingRule; // High level representation of Conditional Formatting Rule.\nClass HSSFConditionalFormattingThreshold; // High level representation for Icon / Multi-State / Databar / Colour Scale change thresholds\nClass HSSFCreationHelper;\nClass HSSFDataBarFormatting; // High level representation for DataBar / Data-Bar Formatting component of Conditional Formatting settings\nClass HSSFDataFormat; // Identifies both built-in and user defined formats within a workbook.\n", "des": "The usermodel package maps HSSF low level structures to familiar workbook/sheet model"}
{"index": 3497, "repo": "poi-5.2.3", "code": "package util;\n\nClass CellRangeAddress8Bit; // See OOO documentation: excelfileformat.pdf sec 2.5.14 - 'Cell Range Address'\nClass HSSFColor; // Intends to provide support for the very evil index to triplet issue and will likely replace the color constants interface for HSSF 2.0.\nClass LazilyConcatenatedByteArray; // Utility for delaying the concatenation of multiple byte arrays.\nClass RKUtil; // Utility class for helping convert RK numbers.\nEnum HSSFColor.HSSFColorPredefined; // Predefined HSSFColors with their given palette index (and an optional 2nd index)\n", "des": "The util package contains tools needed for writing HSSF files that are not necesarily \"real\" HSSF concepts."}
{"index": 3498, "repo": "poi-5.2.3", "code": "package common;\n\nInterface POIFSConstants; // A repository for constants shared by POI classes.\nClass POIFSBigBlockSize; // A class describing attributes of the Big Block Size\n", "des": "common package contains constants and other classes shared across all POIFS subpackages"}
{"index": 3499, "repo": "poi-5.2.3", "code": "package crypt;\n\nInterface EncryptionInfoBuilder;\nClass ChunkedCipherInputStream;\nClass ChunkedCipherOutputStream;\nClass CryptoFunctions; // Helper functions used for standard and agile encryption\nClass DataSpaceMapUtils;\nClass DataSpaceMapUtils.DataSpaceDefinition;\nClass DataSpaceMapUtils.DataSpaceMap;\nClass DataSpaceMapUtils.DataSpaceMapEntry;\nClass DataSpaceMapUtils.DataSpaceVersionInfo;\nClass DataSpaceMapUtils.IRMDSTransformInfo;\nClass DataSpaceMapUtils.TransformInfoHeader;\nClass Decryptor;\nClass EncryptionHeader; // Reads and processes OOXML Encryption Headers The constants are largely based on ZIP constants.\nClass EncryptionInfo; // Wrapper for the EncryptionInfo node of encrypted documents\nClass EncryptionVerifier; // Used when checking if a key is valid for a document\nClass Encryptor;\nEnum ChainingMode;\nEnum CipherAlgorithm;\nEnum CipherProvider;\nEnum EncryptionMode; // Office supports various encryption modes.\nEnum HashAlgorithm;\n", "des": "Implementation of the ECMA-376 and MS-propritary document encryptions"}
{"index": 3500, "repo": "poi-5.2.3", "code": "package dev;\n\nInterface POIFSViewable; // Interface for a drill-down viewable object.\nClass POIFSDump; // Dump internal structure of a OLE2 file into file system\nClass POIFSLister; // A lister of the entries in POIFS files.\nClass POIFSViewEngine; // This class contains methods used to inspect POIFSViewable objects\nClass POIFSViewer; // A simple viewer for POIFS files\n", "des": "DEV package serves two purposes."}
{"index": 3501, "repo": "poi-5.2.3", "code": "package eventfilesystem;\n\nInterface POIFSReaderListener; // Interface POIFSReaderListener\nClass POIFSReader; // An event-driven reader for POIFS file systems.\nClass POIFSReaderEvent; // Class POIFSReaderEvent\n", "des": "The eventfilesystem is an efficient method for reading OLE 2 CDF files."}
{"index": 3502, "repo": "poi-5.2.3", "code": "package filesystem;\n\nInterface BATManaged; // This interface defines behaviors for objects managed by the Block Allocation Table (BAT).\nInterface DirectoryEntry; // This interface defines methods specific to Directory objects managed by a Filesystem instance.\nInterface DocumentEntry; // This interface defines methods specific to Document objects managed by a Filesystem instance.\nInterface Entry; // This interface provides access to an object managed by a Filesystem instance.\nInterface POIFSWriterListener; // Interface POIFSWriterListener\nClass BlockStore; // This abstract class describes a way to read, store, chain and free a series of blocks (be they Big or Small ones)\nClass DirectoryNode; // Simple implementation of DirectoryEntry\nClass DocumentDescriptor; // Class DocumentDescriptor\nClass DocumentFactoryHelper; // A small base class for the various factories, e.g.\nClass DocumentInputStream; // This class provides methods to read a DocumentEntry managed by a POIFSFileSystem instance.\nClass DocumentNode; // Simple implementation of DocumentEntry for OPOIFS\nClass DocumentOutputStream; // This class provides methods to write a DocumentEntry managed by a POIFSFileSystem instance.\nClass EntryNode; // Abstract implementation of Entry Extending classes should override isDocument() or isDirectory(), as appropriate Extending classes must override isDeleteOK()\nClass EntryUtils;\nClass FilteringDirectoryNode; // A DirectoryEntry filter, which exposes another DirectoryEntry less certain parts.\nClass Ole10Native; // Represents an Ole10Native record which is wrapped around certain binary files being embedded in OLE2 documents.\nClass POIFSDocument; // This class manages a document in the NIO POIFS filesystem.\nClass POIFSDocumentPath; // Class POIFSDocumentPath\nClass POIFSFileSystem; // This is the main class of the POIFS system; it manages the entire life cycle of the filesystem.\nClass POIFSMiniStore; // This class handles the MiniStream (small block store) in the NIO case for POIFSFileSystem\nClass POIFSStream; // This handles reading and writing a stream within a POIFSFileSystem.\nClass POIFSWriterEvent; // Class POIFSWriterEvent\nClass TempFilePOIFSFileSystem; // An experimental POIFSFileSystem to support the encryption of large files\nEnum FileMagic; // The file magic number, i.e.\n", "des": "filesystem package maps OLE 2 Compound document files to a more familiar filesystem interface."}
{"index": 3503, "repo": "poi-5.2.3", "code": "package property;\n\nInterface Child; // This interface defines methods for finding and setting sibling Property instances\nInterface Parent; // Behavior for parent (directory) properties\nInterface PropertyConstants; // Interface PropertyConstants\nClass DirectoryProperty; // Directory property\nClass DirectoryProperty.PropertyComparator;\nClass DocumentProperty; // Trivial extension of Property for POIFSDocuments\nClass Property; // This abstract base class is the ancestor of all classes implementing POIFS Property behavior.\nClass PropertyTable; // This class embodies the Property Table for a POIFSFileSystem; this is basically the directory for all of the documents in the filesystem and looks up entries in the filesystem to their chain of blocks.\nClass RootProperty; // Root property\n", "des": "property package contains high and low level Property structures for POIFS."}
{"index": 3504, "repo": "poi-5.2.3", "code": "package storage;\n\nInterface BlockWritable; // An interface for persisting block storage of POIFS components.\nInterface HeaderBlockConstants; // Constants used in reading/writing the Header block\nClass BATBlock; // A block of block allocation table entries.\nClass BATBlock.BATBlockAndIndex;\nClass HeaderBlock; // The block containing the archive header\n", "des": "storage package contains low level binary structures for POIFS's implementation of the OLE 2 Compound Document Format."}
{"index": 3505, "repo": "poi-5.2.3", "code": "package format;\n\nClass CellDateFormatter; // Formats a date value.\nClass CellElapsedFormatter; // This class implements printing out an elapsed time format.\nClass CellFormat; // Format a value according to the standard Excel behavior.\nClass CellFormatCondition; // This object represents a condition in a cell format.\nClass CellFormatPart; // Objects of this class represent a single part of a cell format expression.\nClass CellFormatResult; // This object contains the result of applying a cell format or cell format part to a value.\nClass CellFormatter; // This is the abstract supertype for the various cell formatters.\nClass CellGeneralFormatter; // A formatter for the default \"General\" cell format.\nClass CellNumberFormatter; // This class implements printing out a value using a number format.\nClass CellNumberPartHandler; // Internal helper class for CellNumberFormatter\nClass CellNumberStringMod; // Internal helper class for CellNumberFormatter This class represents a single modification to a result string.\nClass CellTextFormatter; // This class implements printing out text.\nClass SimpleFraction;\nEnum CellFormatType; // The different kinds of formats that the formatter understands.\n", "des": "This package contains classes that implement cell formatting"}
{"index": 3506, "repo": "poi-5.2.3", "code": "package formula;\n\npackage formula.ptg; // The formula package contains binary PTG structures used in Formulas\nInterface EvaluationCell; // Abstracts a cell for the purpose of formula evaluation.\nInterface EvaluationName; // Abstracts a name record for formula evaluation.\nInterface EvaluationSheet; // Abstracts a sheet for the purpose of formula evaluation.\nInterface EvaluationWorkbook; // Abstracts a workbook for the purpose of formula evaluation.\nInterface ExternSheetReferenceToken; // Should be implemented by any Ptg subclass that needs has an extern sheet index For POI internal use only\nInterface FormulaParsingWorkbook; // Abstracts a workbook for the purpose of formula parsing. For POI internal use only\nInterface FormulaRenderingWorkbook; // Abstracts a workbook for the purpose of converting formula to text.\nInterface IStabilityClassifier; // Used to help optimise cell evaluation result caching by allowing applications to specify which parts of a workbook are final. The term final is introduced here to denote immutability or 'having constant definition'.\nInterface SheetRange;\nInterface ThreeDEval; // Optional Extension to the likes of AreaEval and AreaEvalBase, which allows for looking up 3D (sheet+row+column) evaluations\nInterface TwoDEval; // Common interface of AreaEval and AreaEvalBase, for 2D (row+column) evaluations\nInterface WorkbookDependentFormula; // Should be implemented by any Ptg subclass that needs a workbook to render its formula.\nInterface WorkbookEvaluatorProvider; // Provides access to a WorkbookEvaluator, eg for use with CollaboratingWorkbooksEnvironment\nClass BaseFormulaEvaluator; // Common functionality across file formats for evaluating formula cells.\nClass CacheAreaEval; // Provides holding structure for temporary values in arrays during the evaluation process.\nClass CollaboratingWorkbooksEnvironment; // Manages a collection of WorkbookEvaluators, in order to support evaluation of formulas across spreadsheets.\nClass ConditionalFormattingEvaluator; // Evaluates Conditional Formatting constraints.\nClass DataValidationEvaluator; // Evaluates Data Validation constraints.\nClass DataValidationEvaluator.DataValidationContext; // This class organizes and encapsulates all the pieces of information related to a single data validation configuration for a single cell.\nClass EvaluationConditionalFormatRule; // Abstracted and cached version of a Conditional Format rule for use with a ConditionalFormattingEvaluator.\n", "des": "This package contains common internal POI code for manipulating formulas."}
{"index": 3507, "repo": "poi-5.2.3", "code": "package ptg;\n\nInterface AreaI; // Common interface for AreaPtg and Area3DPtg, and their child classes.\nInterface Pxg; // An XSSF only special kind of Ptg, which stores the sheet / book reference in string form.\nInterface Pxg3D; // An XSSF only special kind of Ptg, which stores a range of sheet / book references in string form.\nClass AbstractFunctionPtg; // This class provides the base functionality for Excel sheet functions There are two kinds of function Ptgs - tFunc and tFuncVar Therefore, this class will have ONLY two subclasses\nClass AddPtg; // Addition operator PTG the \"+\" binomial operator.\nClass Area2DPtgBase; // Common superclass of 2-D area refs\nClass Area3DPtg; // Area 3D Ptg - 3D reference (Sheet + Area)\nClass Area3DPxg; // XSSF Area 3D Reference (Sheet + Area)\nClass AreaErrPtg; // AreaErr - handles deleted cell area references.\nClass AreaI.OffsetArea;\nClass AreaNPtg; // Specifies a rectangular area of cells A1:A4 for instance.\nClass AreaPtg; // Specifies a rectangular area of cells A1:A4 for instance.\nClass AreaPtgBase; // Specifies a rectangular area of cells A1:A4 for instance.\nClass ArrayPtg; // ArrayPtg - handles arrays The ArrayPtg is a little weird, the size of the Ptg when parsing initially only includes the Ptg sid and the reserved bytes.\nClass AttrPtg; // \"Special Attributes\"\nClass AttrPtg.SpaceType;\nClass BoolPtg; // Boolean (boolean) Stores a (java) boolean value in a formula.\nClass ConcatPtg;\nClass ControlPtg;\nClass Deleted3DPxg; // An XSSF only representation of a reference to a deleted area\nClass DeletedArea3DPtg; // Deleted Area 3D Ptg - 3D referecnce (Sheet + Area)\nClass DeletedRef3DPtg; // Deleted Reference 3D Ptg\nClass DividePtg; // This PTG implements the standard binomial divide \"/\"\nClass EqualPtg;\n", "des": "The formula package contains binary PTG structures used in Formulas"}
{"index": 3508, "repo": "poi-5.2.3", "code": "package util;\n\nInterface DelayableLittleEndianOutput; // Implementors of this interface allow client code to 'delay' writing to a certain section of a data output stream. A typical application is for writing BIFF records when the size is not known until well after the header has been written.\nInterface FixedField; // behavior of a field at a fixed location within a byte array\nInterface GenericRecordJsonWriter.GenericRecordHandler;\nInterface GenericRecordXmlWriter.GenericRecordHandler;\nInterface LittleEndianConsts; // a repository for constants shared by classes within this package\nInterface LittleEndianInput;\nInterface LittleEndianOutput;\nInterface TempFileCreationStrategy; // Interface used by the TempFile utility class to create temporary files.\nClass ArrayUtil; // Utility classes for dealing with arrays.\nClass BitField; // Manage operations dealing with bit-mapped fields.\nClass BitFieldFactory; // Returns immutable Bitfield instances.\nClass ByteField; // representation of a byte (8-bit) field at a fixed location within a byte array\nClass CodePageUtil; // Utilities for working with Microsoft CodePages.\nClass CodepointsUtil;\nClass Configurator; // Helper for fetching int values from system properties\nClass DefaultTempFileCreationStrategy; // Default implementation of the TempFileCreationStrategy used by TempFile: Files are collected into one directory and by default are deleted on exit from the VM.\nClass Dimension2DDouble;\nClass DrawingDump; // Dump out the aggregated escher records\nClass FontMetricsDumper;\nClass GenericRecordJsonWriter;\nClass GenericRecordUtil;\nClass GenericRecordUtil.AnnotatedFlag;\nClass GenericRecordXmlWriter;\nClass HexDump; // dump data in hexadecimal format\nClass HexRead; // Utilities to read hex from files.\nClass IntegerField; // representation of an integer (32-bit) field at a fixed location within a byte array\n", "des": "Top-level util package are classes that are useful throughout the project."}
{"index": 3509, "repo": "opennlp-tools-2.2.0", "code": "package chunker;\n\nInterface Chunker; // The interface for chunkers which provide chunk tags for a sequence of tokens.\nInterface ChunkerContextGenerator; // Interface for a BeamSearchContextGenerator used in syntactic chunking.\nInterface ChunkerEvaluationMonitor; // A marker interface for evaluating chunkers.\nClass ChunkerCrossValidator; // Cross validator for Chunker.\nClass ChunkerEvaluator; // The ChunkerEvaluator measures the performance of the given Chunker with the provided reference samples.\nClass ChunkerEventStream; // Class for creating an event stream out of data files for training a Chunker.\nClass ChunkerFactory;\nClass ChunkerME; // The class represents a maximum-entropy-based Chunker.\nClass ChunkerModel; // The ChunkerModel is the model used by a learnable Chunker.\nClass ChunkSample; // Class for holding chunks for a single unit of text.\nClass ChunkSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass ChunkSampleStream; // Parses the conll 2000 shared task shallow parser training data.\nClass DefaultChunkerContextGenerator; // Features based on chunking model described in Fei Sha and Fernando Pereira.\nClass DefaultChunkerSequenceValidator; // The default chunker SequenceValidator implementation.\n", "des": "Package related to finding non-recursive syntactic annotation such as noun phrase chunks."}
{"index": 3510, "repo": "opennlp-tools-2.2.0", "code": "package lemmatizer;\n\nClass LemmaEvaluationErrorListener; // A default implementation of EvaluationMonitor that prints to an output stream.\nClass LemmatizerEvaluatorTool; // A default LemmaSample-centric implementation of AbstractEvaluatorTool that prints to an output stream.\nClass LemmatizerFineGrainedReportListener; // Generates a detailed report for the Lemmatizer.\nClass LemmatizerMETool;\nClass LemmatizerModelLoader; // Loads a LemmatizerModel for the command line tools.\nClass LemmatizerTrainerTool;\n", "des": "Classes giving access to the opennlp.tools.lemmatizer functionalities."}
{"index": 3511, "repo": "opennlp-tools-2.2.0", "code": "package commons;\n\nInterface Sample; // Represents a generic type of processable elements.\nInterface Trainer; // Represents a common base for training implementations.\nAnnotation Type Internal; // Classes, fields, or methods annotated &#64;Internal are for OpenNLP internal use only.\nAnnotation Type ThreadSafe; // Classes, fields, or methods annotated &#64;ThreadSafe are safe to use in multithreading contexts.\n", "des": "Package related to common interfaces used in different contexts."}
{"index": 3512, "repo": "opennlp-tools-2.2.0", "code": "package dictionary;\n\nClass Dictionary; // An iterable and serializable dictionary implementation.\nClass Index; // This classes indexes string lists.\n", "des": "Package related to parsing and storing dictionaries."}
{"index": 3513, "repo": "opennlp-tools-2.2.0", "code": "package doccat;\n\nInterface DoccatEvaluationMonitor; // A marker interface for evaluating doccat.\nInterface DocumentCategorizer; // Interface for classes which categorize documents.\nInterface FeatureGenerator; // Interface for generating features for document categorization.\nClass BagOfWordsFeatureGenerator; // Generates a feature for each word in a document.\nClass DoccatCrossValidator; // Cross validator for DocumentCategorizer.\nClass DoccatFactory; // The factory that provides Doccat default implementations and resources.\nClass DoccatModel; // A model for document categorization\nClass DocumentCategorizerEvaluator; // The DocumentCategorizerEvaluator measures the performance of the given DocumentCategorizer with the provided reference samples.\nClass DocumentCategorizerEventStream; // Iterator-like class for modeling document classification events.\nClass DocumentCategorizerME; // A Max-Ent based implementation of DocumentCategorizer.\nClass DocumentSample; // Class which holds a classified document and its category.\nClass DocumentSampleStream; // Reads in string encoded training samples, parses them and outputs DocumentSample objects.\nClass NGramFeatureGenerator; // Generates ngram features for a document.\n", "des": "Package for classifying a document into a category."}
{"index": 3514, "repo": "opennlp-tools-2.2.0", "code": "package entitylinker;\n\nInterface EntityLinker<T extends Span>; // EntityLinkers establish connections with external data to enrich extracted entities.\nClass BaseLink; // Represents a minimal tuple of information.\nClass EntityLinkerFactory; // Generates a EntityLinker instances via a properties file configuration.\nClass EntityLinkerProperties; // Properties wrapper for EntityLinker implementations.\nClass LinkedSpan<T extends BaseLink>; // A default, extended Span that holds additional information about a Span.\n", "des": "Package related to linking entities to external data sources."}
{"index": 3515, "repo": "opennlp-tools-2.2.0", "code": "package formats;\n\npackage formats.ad; // Experimental package related to the Arvores Deitadas corpus format.\npackage formats.brat; // Experimental package related to the corpus format used by the \"brat rapid annotation tool\" (brat).\npackage formats.conllu; // Experimental package related to the CoNNL-U format.\npackage formats.frenchtreebank; // Experimental package related to the French Treebank format.\npackage formats.irishsentencebank; // Experimental package related to the Irish Sentence Bank format.\npackage formats.leipzig; // Experimental package related to the Leipzig corpus format.\npackage formats.letsmt; // Experimental package related to the letsmt corpus format.\npackage formats.masc; // Experimental package related to the MASC corpus format.\npackage formats.muc; // Experimental package related to the MUC corpus format.\npackage formats.nkjp; // Experimental package related to the National corpus of Polish NKJP format.\npackage formats.ontonotes; // Experimental package related to the OntoNotes 4.0 format.\nInterface NameSampleDataStreamFactory.Parameters;\nInterface ParseSampleStreamFactory.Parameters;\nInterface WordTagSampleStreamFactory.Parameters;\nClass AbstractSampleStreamFactory<T,​P>; // Base class for sample stream factories.\nClass BioNLP2004NameSampleStream; // A sample stream for the training files of the BioNLP/NLPBA 2004 shared task.\nClass BioNLP2004NameSampleStreamFactory<P>;\nClass ChunkerSampleStreamFactory<P>; // Factory producing OpenNLP ChunkSampleStreams.\nClass Conll02NameSampleStream; // Parser for the Dutch and Spanish ner training files of the CONLL 2002 shared task.\nClass Conll02NameSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass Conll03NameSampleStream; // An import stream which can parse the CONLL03 data.\nClass Conll03NameSampleStreamFactory<P>;\nClass ConllXPOSSampleStream; // Parses the data from the CONLL 06 shared task into POS Samples.\n", "des": "Experimental package related to converting various corpora to OpenNLP Format."}
{"index": 3516, "repo": "opennlp-tools-2.2.0", "code": "package ad;\n\nClass ADChunkSampleStream; // Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese Chunker training.\nClass ADChunkSampleStreamFactory<P>; // A Factory to create a Arvores Deitadas ChunkStream from the command line utility.\nClass ADNameSampleStream; // Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.\nClass ADNameSampleStreamFactory<P>; // A Factory to create a Arvores Deitadas NameSampleDataStream from the command line utility.\nClass ADPOSSampleStream; // Note: Do not use this class, internal use only!\nClass ADPOSSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ADSentenceSampleStream; // Note: Do not use this class, internal use only!\nClass ADSentenceSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ADSentenceStream; // Stream filter which merges text lines into sentences, following the Arvores Deitadas syntax.\nClass ADSentenceStream.Sentence;\nClass ADSentenceStream.SentenceParser; // Parses a sample of AD corpus.\nClass ADSentenceStream.SentenceParser.Leaf; // Represents the AD leaf\nClass ADSentenceStream.SentenceParser.Node; // Represents the AD node\nClass ADSentenceStream.SentenceParser.TreeElement; // Represents a tree element, Node or Leaf\nClass ADTokenSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass PortugueseContractionUtility; // Utility class to handle Portuguese contractions.\n", "des": "Experimental package related to the Arvores Deitadas corpus format."}
{"index": 3517, "repo": "opennlp-tools-2.2.0", "code": "package brat;\n\nClass AnnotationConfiguration;\nClass AnnotatorNoteAnnotation;\nClass AttributeAnnotation;\nClass BratAnnotation;\nClass BratAnnotationStream; // Reads the annotations from the brat .ann annotation file.\nClass BratDocument; // Brat (brat rapid annotation tool) is based on the stav visualiser which was originally made in order to visualise BioNLP'11 Shared Task data.\nClass BratDocumentParser;\nClass BratDocumentStream;\nClass BratNameSampleStream; // Generates Name Sample objects for a Brat Document object.\nClass BratNameSampleStreamFactory;\nClass EventAnnotation;\nClass RelationAnnotation;\nClass SegmenterObjectStream<S,​T>;\nClass SpanAnnotation;\n", "des": "Experimental package related to the corpus format used by the \"brat rapid annotation tool\" (brat)."}
{"index": 3518, "repo": "opennlp-tools-2.2.0", "code": "package conllu;\n\nClass ConlluLemmaSampleStream;\nClass ConlluLemmaSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluPOSSampleStream;\nClass ConlluPOSSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluSentence;\nClass ConlluSentenceSampleStream;\nClass ConlluSentenceSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluStream; // The CoNNL-U Format is specified here.\nClass ConlluTokenSampleStream;\nClass ConlluTokenSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\nClass ConlluWordLine;\nEnum ConlluTagset;\n", "des": "Experimental package related to the CoNNL-U format."}
{"index": 3519, "repo": "opennlp-tools-2.2.0", "code": "package frenchtreebank;\n\nClass ConstitParseSampleStream;\nClass ConstitParseSampleStreamFactory; // Note: Do not use this class, internal use only!\n", "des": "Experimental package related to the French Treebank format."}
{"index": 3520, "repo": "opennlp-tools-2.2.0", "code": "package irishsentencebank;\n\nClass IrishSentenceBankDocument; // A structure to hold an Irish Sentence Bank document, which is a collection of tokenized sentences.\nClass IrishSentenceBankDocument.IrishSentenceBankFlex;\nClass IrishSentenceBankDocument.IrishSentenceBankSentence;\nClass IrishSentenceBankSentenceStreamFactory<P>;\nClass IrishSentenceBankTokenSampleStreamFactory<P>;\n", "des": "Experimental package related to the Irish Sentence Bank format."}
{"index": 3521, "repo": "opennlp-tools-2.2.0", "code": "package leipzig;\n\nClass LeipzigLanguageSampleStream;\nClass LeipzigLanguageSampleStreamFactory<P>; // Note: Do not use this class, internal use only!\n", "des": "Experimental package related to the Leipzig corpus format."}
{"index": 3522, "repo": "opennlp-tools-2.2.0", "code": "package letsmt;\n\nClass DetokenizeSentenceSampleStream;\nClass LetsmtDocument; // A structure to hold the letsmt document.\nClass LetsmtDocument.LetsmtDocumentHandler; // A content handler to receive and process SAX events.\nClass LetsmtDocument.LetsmtSentence;\nClass LetsmtSentenceStreamFactory<P>;\n", "des": "Experimental package related to the letsmt corpus format."}
{"index": 3523, "repo": "opennlp-tools-2.2.0", "code": "package masc;\n\nClass MascDocument;\nClass MascDocumentStream;\nClass MascNamedEntityParser; // A class to process the MASC Named entity stand-off annotation file\nClass MascNamedEntitySampleStream;\nClass MascNamedEntitySampleStreamFactory<P>;\nClass MascPennTagParser; // A class for parsing MASC's Penn tagging/tokenization stand-off annotation\nClass MascPOSSampleStream;\nClass MascPOSSampleStreamFactory<P>;\nClass MascSentence;\nClass MascSentenceSampleStream;\nClass MascSentenceSampleStreamFactory<P>;\nClass MascToken; // A specialized Span to express tokens in documents.\nClass MascTokenSampleStream;\nClass MascTokenSampleStreamFactory<P>;\nClass MascWord;\n", "des": "Experimental package related to the MASC corpus format."}
{"index": 3524, "repo": "opennlp-tools-2.2.0", "code": "package muc;\n\nClass Muc6NameSampleStreamFactory;\nClass MucNameContentHandler;\nClass MucNameSampleStream;\nClass SgmlParser; // SAX style SGML parser.\nClass SgmlParser.ContentHandler;\n", "des": "Experimental package related to the MUC corpus format."}
{"index": 3525, "repo": "opennlp-tools-2.2.0", "code": "package nkjp;\n\nClass NKJPSegmentationDocument;\nClass NKJPSegmentationDocument.Pointer;\nClass NKJPSentenceSampleStream;\nClass NKJPSentenceSampleStreamFactory<P>;\nClass NKJPTextDocument; // The National corpus of Polish (NKJP) format.\n", "des": "Experimental package related to the National corpus of Polish NKJP format."}
{"index": 3526, "repo": "opennlp-tools-2.2.0", "code": "package ontonotes;\n\nInterface OntoNotesFormatParameters;\nClass DocumentToLineStream; // Reads a plain text file and return each line as a String object.\nClass OntoNotesNameSampleStream; // Name Sample Stream parser for the OntoNotes 4.0 corpus.\nClass OntoNotesNameSampleStreamFactory;\nClass OntoNotesParseSampleStream;\nClass OntoNotesParseSampleStreamFactory;\nClass OntoNotesPOSSampleStreamFactory;\n", "des": "Experimental package related to the OntoNotes 4.0 format."}
{"index": 3527, "repo": "opennlp-tools-2.2.0", "code": "package langdetect;\n\nInterface LanguageDetector; // The interface for LanguageDetector which predicts the Language for a context.\nInterface LanguageDetectorContextGenerator; // A context generator interface for LanguageDetector.\nInterface LanguageDetectorEvaluationMonitor; // A marker interface for evaluating language detectors.\nClass DefaultLanguageDetectorContextGenerator; // A context generator for language detector.\nClass Language; // Class for holding the document language and its confidence\nClass LanguageDetectorConfig;\nClass LanguageDetectorCrossValidator; // Cross validator for LanguageDetector.\nClass LanguageDetectorEvaluator; // The LanguageDetectorEvaluator measures the performance of the given LanguageDetector with the provided reference LanguageSamples.\nClass LanguageDetectorEventStream; // Iterator-like class for modeling an event stream of samples.\nClass LanguageDetectorFactory; // Default factory used by LanguageDetector.\nClass LanguageDetectorME; // Implements a learnable LanguageDetector.\nClass LanguageDetectorModel; // The LanguageDetectorModel is the model used by a learnable LanguageDetector.\nClass LanguageDetectorSampleStream; // This class reads in string encoded training samples, parses them and outputs LanguageSample objects.\nClass LanguageSample; // Holds a classified document and its Language.\nClass ProbingLanguageDetectionResult; // A data container encapsulating language detection results.\n", "des": "Package related to predicting languages from samples of text."}
{"index": 3528, "repo": "opennlp-tools-2.2.0", "code": "package languagemodel;\n\nInterface LanguageModel; // A language model can calculate the probability p (between 0 and 1) of a certain sequence of tokens, given its underlying vocabulary.\nClass NGramLanguageModel; // A LanguageModel based on a NGramModel using Stupid Backoff to get the probabilities of the ngrams.\n", "des": "Package related to language models"}
{"index": 3529, "repo": "opennlp-tools-2.2.0", "code": "package lemmatizer;\n\nInterface Lemmatizer; // The common interface for lemmatizers.\nInterface LemmatizerContextGenerator; // Interface for the context generator used for probabilistic Lemmatizer.\nInterface LemmatizerEvaluationMonitor; // A marker interface for evaluating lemmatizers.\nClass DefaultLemmatizerContextGenerator; // Simple feature generator for learning statistical lemmatizers.\nClass DefaultLemmatizerSequenceValidator; // The default lemmatizer SequenceValidator implementation.\nClass DictionaryLemmatizer; // A Lemmatizer implementation that works by simple dictionary lookup into a Map built from a file containing, for each line:\nClass LemmaSample; // Represents a lemmatized sentence.\nClass LemmaSampleEventStream; // Class for creating an event stream out of data files for training a probabilistic Lemmatizer.\nClass LemmaSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass LemmaSampleStream; // Reads data for training and testing the Lemmatizer.\nClass LemmatizerEvaluator; // The LemmatizerEvaluator measures the performance of the given Lemmatizer with the provided reference samples.\nClass LemmatizerFactory; // The factory that provides Lemmatizer default implementation and resources.\nClass LemmatizerME; // A probabilistic Lemmatizer implementation.\nClass LemmatizerModel; // The LemmatizerModel is the model used by a learnable Lemmatizer.\n", "des": "Package related to the lemmatizer functionality."}
{"index": 3530, "repo": "opennlp-tools-2.2.0", "code": "package log;\n\nClass LogPrintStream; // This class serves as an adapter for a Logger used within a PrintStream.\n", "des": "Package contains a PrintStream adapter for internal use only."}
{"index": 3531, "repo": "opennlp-tools-2.2.0", "code": "package ml;\n\npackage ml.maxent; // Package related to ML by means of the Maximum Entropy (ME) algorithm.\npackage ml.model; // Package related to ML models and feature selection techniques.\npackage ml.naivebayes; // Package related to ML by means of the Naive Bayes algorithm.\npackage ml.perceptron; // Package related to ML by means of the perceptron algorithm.\nInterface EventModelSequenceTrainer<T>; // A specialized Trainer that is based on a 'EventModelSequence' approach.\nInterface EventTrainer; // A specialized Trainer that is based on an Event approach.\nInterface SequenceTrainer;\nClass AbstractEventModelSequenceTrainer; // A basic EventModelSequenceTrainer implementation that processes events.\nClass AbstractEventTrainer; // A basic EventTrainer implementation.\nClass AbstractTrainer;\nClass ArrayMath; // Utility class for simple vector arithmetic.\nClass BeamSearch<T>; // Performs k-best search over a sequence.\nClass TrainerFactory; // A factory to initialize Trainer instances depending on a trainer type configured via TrainingParameters.\nEnum TrainerFactory.TrainerType;\n", "des": "Package related to Machine Learning (ML) features of OpenNLP, the related ML models, and trainers."}
{"index": 3532, "repo": "opennlp-tools-2.2.0", "code": "package maxent;\n\npackage maxent.io; // Package related to the I/O functionality of the maxent package including reading and writing models in several formats.\npackage maxent.quasinewton; // Package related to ML by means of the Quasi Newton (QN) algorithm.\nInterface ContextGenerator<T>; // Represents a generator of contexts for maxent decisions.\nInterface DataStream; // An interface for objects which can deliver a stream of training data to be supplied to an EventStream.\nClass BasicContextGenerator; // A ContextGenerator implementation for maxent decisions, assuming that the input given to the BasicContextGenerator.getContext(String) method is a String containing contextual predicates separated by spaces, for instance:\nClass GISModel; // A maximum entropy model which has been trained using the Generalized Iterative Scaling (GIS) procedure.\nClass GISTrainer; // An implementation of Generalized Iterative Scaling (GIS).\nClass RealBasicEventStream; // Class for real-valued events as an event stream.\n", "des": "Package related to ML by means of the Maximum Entropy (ME) algorithm."}
{"index": 3533, "repo": "opennlp-tools-2.2.0", "code": "package io;\n\nClass BinaryGISModelReader; // A GISModelReader that reads models from a binary format.\nClass BinaryGISModelWriter; // A GISModelWriter that writes models in a binary format.\nClass BinaryQNModelReader; // A QNModelReader that reads models from a binary format.\nClass BinaryQNModelWriter; // A QNModelWriter that writes models in a binary format.\nClass GISModelReader; // The base class for readers of GIS models.\nClass GISModelWriter; // The base class for writers of GIS models.\nClass QNModelReader; // The base class for readers of QN models.\nClass QNModelWriter; // The base class for writers of models.\n", "des": "Package related to the I/O functionality of the maxent package including reading and writing models in several formats."}
{"index": 3534, "repo": "opennlp-tools-2.2.0", "code": "package quasinewton;\n\nInterface Function; // Interface for a function.\nInterface QNMinimizer.Evaluator; // Evaluate quality of training parameters.\nClass ArrayMath;\nClass LineSearch; // Class that performs line search to find minimum.\nClass LineSearch.LineSearchResult; // Represents a LineSearch result.\nClass NegLogLikelihood; // Evaluate negative log-likelihood and its gradient from DataIndexer.\nClass ParallelNegLogLikelihood; // Evaluate negative log-likelihood and its gradient in parallel\nClass QNMinimizer; // Implementation of L-BFGS which supports L1-, L2-regularization and Elastic Net for solving convex optimization problems.\nClass QNMinimizer.L2RegFunction; // L2-regularized objective Function.\nClass QNModel; // A maximum entropy model which has been trained using the Quasi Newton (QN) algorithm.\nClass QNTrainer; // A Maxent model Trainer using L-BFGS algorithm.\n", "des": "Package related to ML by means of the Quasi Newton (QN) algorithm."}
{"index": 3535, "repo": "opennlp-tools-2.2.0", "code": "package model;\n\nInterface DataIndexer; // Represents an indexer which compresses events in memory and performs feature selection.\nInterface DataReader; // Describes generic ways to read data from a DataInputStream.\nInterface MaxentModel; // Interface for maximum entropy models.\nInterface Prior; // This interface allows one to implement a prior distribution for use in maximum entropy model training.\nInterface SequenceClassificationModel<T>; // A classification model that can label an input Sequence.\nInterface SequenceStream<S>; // Interface for streams of sequences used to train sequence models.\nClass AbstractDataIndexer; // Abstract DataIndexer implementation for collecting event and context counts used in training.\nClass AbstractModel; // A basic MaxentModel implementation.\nClass AbstractModelReader; // An abstract, basic implementation of a model reader.\nClass AbstractModelWriter; // An abstract, basic implementation of a model writer.\nClass BinaryFileDataReader; // A DataReader that reads files from a binary format.\nClass ComparableEvent; // A maxent event representation which we can use to sort based on the predicates indexes contained in the events.\nClass ComparablePredicate; // A maxent predicate representation which we can use to sort based on the outcomes.\nClass Context; // Class which associates a real valued parameter or expected value with a particular contextual predicate or feature.\nClass DataIndexerFactory; // A factory that produces DataIndexer instances.\nClass DynamicEvalParameters;\nClass EvalParameters; // This class encapsulates the variables used in producing probabilities from a model and facilitates passing these variables to the eval method.\nClass Event; // The context of a decision point during training.\nClass FileEventStream; // Class for using a file of events as an event stream.\nClass GenericModelReader; // An generic AbstractModelReader implementation.\nClass GenericModelWriter; // An generic AbstractModelWriter implementation.\nClass HashSumEventStream; // A hash sum based AbstractObjectStream implementation.\nClass ModelParameterChunker; // A helper class that handles Strings with more than 64k (65535 bytes) in length.\nClass MutableContext; // An extension of Context used to store parameters or expected values associated with this context which can be updated or assigned.\nClass ObjectDataReader; // A DataReader implementation based on ObjectInputStream.\n", "des": "Package related to ML models and feature selection techniques."}
{"index": 3536, "repo": "opennlp-tools-2.2.0", "code": "package naivebayes;\n\nClass BinaryNaiveBayesModelReader; // A NaiveBayesModelReader that reads models from a binary format.\nClass BinaryNaiveBayesModelWriter; // A NaiveBayesModelWriter that writes models in a binary format.\nClass LogProbabilities<T>; // Class implementing the probability distribution over labels returned by a classifier as a log of probabilities.\nClass LogProbability<T>; // A class implementing the logarithmic Probability for a label.\nClass NaiveBayesEvalParameters; // Specialized parameters for the evaluation of a naive bayes classifier\nClass NaiveBayesModel; // A MaxentModel implementation of the multinomial Naive Bayes classifier model.\nClass NaiveBayesModelReader; // The base class for readers of models.\nClass NaiveBayesModelWriter; // The base class for NaiveBayesModel writers.\nClass NaiveBayesTrainer; // Trains models using the combination of EM algorithm and Naive Bayes classifier which is described in:\nClass PlainTextNaiveBayesModelReader; // A NaiveBayesModelReader that reads models from a plain text format.\nClass PlainTextNaiveBayesModelWriter; // A NaiveBayesModelWriter that writes models in a plain text format.\nClass Probabilities<T>; // Class implementing the probability distribution over labels returned by a classifier.\nClass Probability<T>; // Class implementing the probability for a label.\n", "des": "Package related to ML by means of the Naive Bayes algorithm."}
{"index": 3537, "repo": "opennlp-tools-2.2.0", "code": "package perceptron;\n\nClass BinaryPerceptronModelReader; // A PerceptronModelReader that reads models from a binary format.\nClass BinaryPerceptronModelWriter; // A PerceptronModelWriter that writes models in a binary format.\nClass PerceptronModel; // A model implementation based one the perceptron algorithm.\nClass PerceptronModelReader; // The base class for readers of models.\nClass PerceptronModelWriter; // The base class for PerceptronModel writers.\nClass PerceptronTrainer; // Trains models using the perceptron algorithm.\nClass SimplePerceptronSequenceTrainer; // Trains models with sequences using the perceptron algorithm.\n", "des": "Package related to ML by means of the perceptron algorithm."}
{"index": 3538, "repo": "opennlp-tools-2.2.0", "code": "package namefind;\n\nInterface DocumentNameFinder; // Interface for processing an entire document allowing a TokenNameFinder to use context from the entire document.\nInterface NameContextGenerator; // Interface for generating the context for a name finder by specifying a set of feature generators.\nInterface RegexNameFinderFactory.RegexAble;\nInterface TokenNameFinder; // The interface for name finders which provide name tags for a sequence of tokens.\nInterface TokenNameFinderEvaluationMonitor; // A marker interface for evaluating name finders.\nClass BilouCodec; // The default SequenceCodec implementation according to the BILOU scheme.\nClass BilouNameFinderSequenceValidator; // A SequenceValidator implementation for the BilouCodec.\nClass BioCodec; // The default SequenceCodec implementation according to the BIO scheme: B: 'beginning' of a NE I: 'inside', the word is inside a NE O: 'outside', the word is a regular word outside a NE See also the paper by Roth D.\nClass DefaultNameContextGenerator; // A NameContextGenerator implementation for determining contextual features for a tag-chunk style named-entity recognizer.\nClass DictionaryNameFinder; // This is a Dictionary based name finder.\nClass NameFinderEventStream; // Class for creating an event stream out of data files for training an TokenNameFinder.\nClass NameFinderME; // A maximum-entropy-based name finder implementation.\nClass NameFinderSequenceValidator; // The default name finder SequenceValidator implementation.\nClass NameSample; // Encapsulates names for a single unit of text.\nClass NameSampleDataStream; // The NameSampleDataStream class converts tagged strings provided by a DataStream to NameSample objects.\nClass NameSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass NameSampleTypeFilter; // A stream which removes name samples which do not have a certain type.\nClass RegexNameFinder; // A TokenNameFinder implementation based on a series of regular expressions.\nClass RegexNameFinderFactory; // Returns a RegexNameFinder based on a selection of defaults or a configuration and a selection of defaults.\nClass TokenNameFinderCrossValidator; // Cross validator for TokenNameFinder.\nClass TokenNameFinderEvaluator; // The TokenNameFinderEvaluator measures the performance of the given TokenNameFinder with the provided reference samples.\nClass TokenNameFinderFactory; // The factory that provides TokenNameFinder default implementations and resources.\n", "des": "Package related to finding proper names and numeric amounts."}
{"index": 3539, "repo": "opennlp-tools-2.2.0", "code": "package ngram;\n\nClass NGramCharModel; // The NGramCharModel can be used to create character ngrams.\nClass NGramGenerator; // Generates an nGram, via an optional separator, and returns the grams as a list of strings\nClass NGramModel; // The NGramModel can be used to crate ngrams and character ngrams.\nClass NGramUtils; // Utility class for ngrams.\n", "des": "Package related to computing and storing n-gram frequencies."}
{"index": 3540, "repo": "opennlp-tools-2.2.0", "code": "package parser;\n\npackage parser.chunking; // Package containing code for performing full syntactic parsing using shift/reduce-style decisions.\npackage parser.treeinsert; // Package containing experimental code for performing full syntactic parsing using attachment decisions.\nInterface GapLabeler; // Represents a labeler for nodes which contain traces so that these traces can be predicted by a Parser.\nInterface HeadRules; // Encoder for head rules associated with parsing.\nInterface Parser; // Defines common methods for full-syntactic parsers.\nInterface ParserEvaluationMonitor; // A marker interface for evaluating parsers.\nClass AbstractBottomUpParser; // Abstract class which contains code to tag and chunk parses for bottom up parsing and leaves implementation of advancing parses and completing parses to extend class.\nClass AbstractContextGenerator; // Abstract class containing many of the methods used to generate contexts for parsing.\nClass AbstractParserEventStream; // Abstract class extended by parser event streams which perform tagging and chunking.\nClass ChunkContextGenerator; // Creates predictive context for the pre-chunking phases of parsing.\nClass ChunkSampleStream;\nClass Cons; // Holds feature information about a specific Parse node.\nClass Constituent; // Holds constituents when reading parses.\nClass Parse; // Data structure for holding parse constituents.\nClass ParserChunkerFactory;\nClass ParserChunkerSequenceValidator; // The parser chunker SequenceValidator implementation.\nClass ParserCrossValidator; // Cross validator for a Parser.\nClass ParserEvaluator; // This implementation of Evaluator behaves like EVALB with no exceptions, e.g, without removing punctuation tags, or equality between ADVP and PRT, as in COLLINS convention.\nClass ParserFactory;\nClass ParserModel; // This is the default ParserModel implementation.\nClass ParseSampleStream;\nClass PosSampleStream;\nEnum ParserEventTypeEnum; // Enumeration of event types for a Parser.\nEnum ParserType; // Enumeration of supported Parser types.\n", "des": "Package containing common code for performing full syntactic parsing."}
{"index": 3541, "repo": "opennlp-tools-2.2.0", "code": "package chunking;\n\nClass BuildContextGenerator; // Generates predictive contexts for deciding how constituents should be combined.\nClass CheckContextGenerator; // Generates predictive context for deciding when a constituent is complete.\nClass Parser; // A shift reduce style Parser implementation based on Adwait Ratnaparkhi's 1998 thesis.\nClass ParserEventStream; // Wrapper class for one of four shift-reduce parser event streams.\n", "des": "Package containing code for performing full syntactic parsing using shift/reduce-style decisions."}
{"index": 3542, "repo": "opennlp-tools-2.2.0", "code": "package treeinsert;\n\nClass AttachContextGenerator; // Generates predictive contexts for deciding how constituents should be attached.\nClass BuildContextGenerator; // Creates the features or contexts for the building phase of parsing.\nClass CheckContextGenerator; // Generates predictive context for deciding when a constituent is complete.\nClass Parser; // A built-attach Parser implementation.\nClass ParserEventStream; // Wrapper class for one of four built-attach parser event streams.\n", "des": "Package containing experimental code for performing full syntactic parsing using attachment decisions."}
{"index": 3543, "repo": "opennlp-tools-2.2.0", "code": "package postag;\n\nInterface MutableTagDictionary; // Interface that allows TagDictionary entries to be added and removed.\nInterface POSContextGenerator; // Interface for a BeamSearchContextGenerator used in POS tagging.\nInterface POSTagger; // The interface for part of speech taggers.\nInterface POSTaggerEvaluationMonitor; // A marker interface for evaluating pos taggers.\nInterface TagDictionary; // Interface to determine which tags are valid for a particular word based on a tag dictionary.\nClass ConfigurablePOSContextGenerator; // A configurable context generator for a POSTagger.\nClass DefaultPOSContextGenerator; // A default context generator for a POSTagger.\nClass DefaultPOSSequenceValidator; // The default POS tagger SequenceValidator implementation.\nClass POSDictionary; // Provides a means of determining which tags are valid for a particular word based on a TagDictionary read from a file.\nClass POSEvaluator; // The POSEvaluator measures the performance of the given POSTagger with the provided reference samples.\nClass POSModel; // The POSModel is the model used by a learnable POSTagger.\nClass POSSample; // Represents an pos-tagged sentence.\nClass POSSampleEventStream; // Reads the samples from an Iterator and converts those samples into events which can be used by the maxent library for training.\nClass POSSampleSequenceStream; // A SequenceStream implementation encapsulating samples.\nClass POSTaggerCrossValidator;\nClass POSTaggerFactory; // The factory that provides POSTagger default implementations and resources.\nClass POSTaggerFactory.POSDictionarySerializer;\nClass POSTaggerME; // A part-of-speech tagger that uses maximum entropy.\nClass WordTagSampleStream; // A stream filter which reads a sentence per line which contains words and tags in word_tag format and outputs a POSSample objects.\n", "des": "Package related to part-of-speech tagging."}
{"index": 3544, "repo": "opennlp-tools-2.2.0", "code": "package sentdetect;\n\nInterface EndOfSentenceScanner; // Scans CharSequence, StringBuffer, and char[] for the offsets of sentence ending characters.\nInterface SDContextGenerator; // Interface for SentenceDetectorME context generators.\nInterface SentenceDetector; // The interface for sentence detectors, which find the sentence boundaries in a text.\nInterface SentenceDetectorEvaluationMonitor;\nClass DefaultEndOfSentenceScanner; // Default implementation of the EndOfSentenceScanner.\nClass DefaultSDContextGenerator; // Generate event contexts for maxent decisions for sentence detection.\nClass EmptyLinePreprocessorStream; // ObjectStream to clean up empty lines for empty line separated document streams. - Skips empty line at training data start - Transforms multiple empty lines in a row into one - Replaces white space lines with empty lines - TODO: Terminates last document with empty line if it is missing This stream should be used by the components that mark empty lines to mark document boundaries.\nClass NewlineSentenceDetector; // The Newline SentenceDetector assumes that sentences are line delimited and recognizes one sentence per non-empty line.\nClass SDCrossValidator; // A cross validator for sentence detectors.\nClass SDEventStream;\nClass SentenceDetectorEvaluator; // The SentenceDetectorEvaluator measures the performance of the given SentenceDetector with the provided reference SentenceSamples.\nClass SentenceDetectorFactory; // The factory that provides SentenceDetector default implementations and resources\nClass SentenceDetectorME; // A sentence detector for splitting up raw text into sentences.\nClass SentenceModel; // The SentenceModel is the model used by a learnable SentenceDetector.\nClass SentenceSample; // A SentenceSample contains a document with begin indexes of the individual sentences.\nClass SentenceSampleStream; // This class is a stream filter which reads a sentence by line samples from an ObjectStream and converts them into SentenceSample objects.\n", "des": "Package related to identifying sentence boundaries."}
{"index": 3545, "repo": "opennlp-tools-2.2.0", "code": "package th;\n\nClass SentenceContextGenerator; // Creates contexts/features for end-of-sentence detection in Thai text.\n", "des": "Package related to the processing of Thai data."}
{"index": 3546, "repo": "opennlp-tools-2.2.0", "code": "package tokenize;\n\nInterface Detokenizer; // A Detokenizer merges tokens back to their detokenized representation.\nInterface TokenContextGenerator; // Interface for context generators required for TokenizerME.\nInterface Tokenizer; // The interface for tokenizers, which segment a string into its tokens.\nInterface TokenizerEvaluationMonitor; // A marker interface for evaluating tokenizers.\nClass DefaultTokenContextGenerator; // A default TokenContextGenerator which produces events for maxent decisions for tokenization.\nClass DetokenizationDictionary;\nClass DetokenizerEvaluator; // The DetokenizerEvaluator measures the performance of the given Detokenizer with the provided reference samples.\nClass DictionaryDetokenizer; // A rule based detokenizer.\nClass SimpleTokenizer; // A basic Tokenizer implementation which performs tokenization using character classes.\nClass TokenizerCrossValidator; // A cross validator for tokenizers.\nClass TokenizerEvaluator; // The TokenizerEvaluator measures the performance of the given Tokenizer with the provided reference samples.\nClass TokenizerFactory; // The factory that provides Tokenizer default implementation and resources.\nClass TokenizerME; // A Tokenizer for converting raw text into separated tokens.\nClass TokenizerModel; // The TokenizerModel is the model used by a learnable Tokenizer.\nClass TokenizerStream; // The TokenizerStream uses a Tokenizer to tokenize the input string and output samples.\nClass TokenSample; // A TokenSample is text with token spans.\nClass TokenSampleStream; // This class is a stream filter which reads in string encoded samples and creates samples out of them.\nClass TokSpanEventStream; // This class reads the samples via an Iterator and converts the samples into events which can be used by the maxent library for training.\nClass WhitespaceTokenizer; // A basic Tokenizer implementation which performs tokenization using white spaces.\nClass WhitespaceTokenStream; // This stream formats ObjectStream of samples into whitespace separated token strings.\nClass WordpieceTokenizer; // A Tokenizer implementation which performs tokenization using word pieces.\nEnum DetokenizationDictionary.Operation;\nEnum Detokenizer.DetokenizationOperation; // This enum contains an operation for every token to merge the tokens together to their detokenized form.\n", "des": "Contains classes related to finding token or words in a string."}
{"index": 3547, "repo": "opennlp-tools-2.2.0", "code": "package util;\n\npackage util.ext; // Package containing extension loading code.\npackage util.featuregen; // This package contains classes for generating sequence features.\nInterface BeamSearchContextGenerator<T>; // Interface for context generators used with a sequence beam search.\nInterface InputStreamFactory; // Allows repeated reads through a stream for certain model building types.\nInterface ObjectStream<T>; // Reads objects from a stream.\nInterface ResetableIterator<E>; // This interface makes an Iterator resettable.\nInterface SequenceCodec<T>; // A codec for sequences of type SequenceCodec.\nInterface SequenceValidator<T>;\nClass AbstractEventStream<T>; // A base ObjectStream implementation for events.\nClass AbstractObjectStream<T>; // A base ObjectStream implementation.\nClass BaseToolFactory; // Base class for all tool factories.\nClass Cache<K,​V>; // Provides fixed size, pre-allocated, least recently used replacement cache.\nClass CollectionObjectStream<E>; // An ObjectStream implementation that works on a Collection of CollectionObjectStream as source for elements.\nClass DownloadUtil; // This class facilitates the downloading of pretrained OpenNLP models.\nClass EventTraceStream;\nClass FilterObjectStream<S,​T>; // Abstract base class for filtering streams.\nClass MarkableFileInputStreamFactory; // A factory that creates MarkableFileInputStream from a File\nClass MutableInt; // This is a non-thread safe mutable int.\nClass ObjectStreamUtils;\nClass ParagraphStream; // A FilterObjectStream which merges text lines into paragraphs.\nClass PlainTextByLineStream; // Reads a plain text file and returns each line as a String object.\nClass ReverseListIterator<T>; // An iterator for a list which returns values in the opposite order as the typical list iterator.\nClass Sequence; // Represents a weighted sequence of outcomes.\nClass Span; // Class for storing start and end integer offsets.\nClass StringList; // A StringList is an immutable list of Strings.\nClass StringUtil;\nClass TokenTag;\nClass TrainingParameters; // Declares and handles default parameters used for or during training models.\nClass Version; // The Version class represents the OpenNLP Tools library version.\nClass XmlUtil;\nEnum DownloadUtil.ModelType; // The type of model.\n", "des": "Package containing utility data structures and algorithms used by multiple other packages."}
{"index": 3548, "repo": "opennlp-tools-2.2.0", "code": "package ext;\n\nClass ExtensionLoader; // The ExtensionLoader is responsible to load extensions to the OpenNLP library.\nClass ExtensionServiceKeys;\nClass ExtensionNotLoadedException; // Exception indicates that an OpenNLP extension could not be loaded.\n", "des": "Package containing extension loading code."}
{"index": 3549, "repo": "opennlp-tools-2.2.0", "code": "package featuregen;\n\nInterface AdaptiveFeatureGenerator; // An interface for generating features for name entity identification and for updating document level contexts.\nInterface ArtifactToSerializerMapper;\nInterface FeatureGeneratorResourceProvider; // The FeatureGeneratorResourceProvider provides access to the resources available in the model.\nClass AdditionalContextFeatureGenerator; // The AdditionalContextFeatureGenerator generates the context from the passed in additional context.\nClass AggregatedFeatureGenerator; // The AggregatedFeatureGenerator aggregates a set of AdaptiveFeatureGenerators and calls them to generate the features.\nClass AggregatedFeatureGeneratorFactory;\nClass BigramNameFeatureGenerator;\nClass BigramNameFeatureGeneratorFactory;\nClass BrownBigramFeatureGenerator; // Generates Brown cluster features for token bigrams.\nClass BrownCluster; // Class to load a Brown cluster document: word\\tword_class\\tprob\nClass BrownCluster.BrownClusterSerializer;\nClass BrownClusterBigramFeatureGeneratorFactory; // Generates Brown clustering features for token bigrams.\nClass BrownClusterTokenClassFeatureGeneratorFactory; // Generates Brown clustering features for token classes.\nClass BrownClusterTokenFeatureGeneratorFactory; // Generates Brown clustering features for current token.\nClass BrownTokenClasses; // Obtain the paths listed in the pathLengths array from the Brown class.\nClass BrownTokenClassFeatureGenerator; // Generates BrownCluster features for current token and token class.\nClass BrownTokenFeatureGenerator; // Generates BrownCluster features for current token.\nClass CachedFeatureGenerator; // Caches features of the aggregated generators.\nClass CachedFeatureGeneratorFactory;\nClass CharacterNgramFeatureGenerator; // The CharacterNgramFeatureGenerator uses character ngrams to generate features about each token.\nClass CharacterNgramFeatureGeneratorFactory;\nClass CustomFeatureGenerator;\nClass DefinitionFeatureGeneratorFactory;\nClass DictionaryFeatureGenerator; // The DictionaryFeatureGenerator uses the DictionaryNameFinder to generated features for detected names based on the InSpanGenerator.\nClass DictionaryFeatureGeneratorFactory;\nClass DocumentBeginFeatureGenerator;\nClass DocumentBeginFeatureGeneratorFactory;\nClass FeatureGeneratorUtil; // This class provide common utilities for feature generation.\nClass GeneratorFactory; // Creates a set of feature generators based on a provided XML descriptor.\nClass GeneratorFactory.AbstractXmlFeatureGeneratorFactory;\nClass InSpanGenerator; // Generates features if the tokens are recognized by the provided TokenNameFinder.\n", "des": "This package contains classes for generating sequence features."}
{"index": 3550, "repo": "guava-32.1.1-jre", "code": "package annotations;\n\nAnnotation Type Beta; // Signifies that a public API (public class, method or field) is subject to incompatible changes, or even removal, in a future release.\nAnnotation Type GwtCompatible; // The presence of this annotation on a type indicates that the type may be used with the Google Web Toolkit (GWT).\nAnnotation Type GwtIncompatible; // The presence of this annotation on an API indicates that the method may not be used with the Google Web Toolkit (GWT).\nAnnotation Type J2ktIncompatible; // The presence of this annotation on an API indicates that the method may not be used with J2kt.\nAnnotation Type VisibleForTesting; // Annotates a program element that exists, or is more widely visible than otherwise necessary, only for use in test code.\n", "des": "Annotation types."}
{"index": 3551, "repo": "guava-32.1.1-jre", "code": "package base;\n\nInterface FinalizableReference; // Implemented by references that have code to run after garbage collection of their referents.\nInterface Function<F extends @Nullable java.lang.Object,​T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Function.\nInterface Predicate<T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Predicate.\nInterface Supplier<T extends @Nullable java.lang.Object>; // Legacy version of java.util.function.Supplier.\nClass Ascii; // Static methods pertaining to ASCII characters (those in the range of values 0x00 through 0x7F), and to strings containing such characters.\nClass CharMatcher; // Determines a true or false value for any Java char value, just as Predicate does for any Object.\nClass Charsets; // Contains constant definitions for the six standard Charset instances, which are guaranteed to be supported by all Java platform implementations.\nClass Converter<A,​B>; // A function from A to B with an associated reverse function from B to A; used for converting back and forth between different representations of the same information.\nClass Defaults; // This class provides default values for all Java types, as defined by the JLS.\nClass Enums; // Utility methods for working with Enum instances.\nClass Equivalence<T>; // A strategy for determining whether two instances are considered equivalent, and for computing hash codes in a manner consistent with that equivalence.\nClass Equivalence.Wrapper<T extends @Nullable java.lang.Object>; // Wraps an object so that Equivalence.Wrapper.equals(Object) and Equivalence.Wrapper.hashCode() delegate to an Equivalence.\nClass FinalizablePhantomReference<T>; // Phantom reference with a finalizeReferent() method which a background thread invokes after the garbage collector reclaims the referent.\nClass FinalizableReferenceQueue; // A reference queue with an associated background thread that dequeues references and invokes FinalizableReference.finalizeReferent() on them.\nClass FinalizableSoftReference<T>; // Soft reference with a finalizeReferent() method which a background thread invokes after the garbage collector reclaims the referent.\n", "des": "Basic utility libraries and interfaces."}
{"index": 3552, "repo": "guava-32.1.1-jre", "code": "package cache;\n\nInterface AbstractCache.StatsCounter; // Accumulates statistics during the operation of a Cache for presentation by Cache.stats().\nInterface Cache<K,​V>; // A semi-persistent mapping from keys to values.\nInterface LoadingCache<K,​V>; // A semi-persistent mapping from keys to values.\nInterface RemovalListener<K,​V>; // An object that can receive a notification when an entry is removed from a cache.\nInterface Weigher<K,​V>; // Calculates the weights of cache entries.\nClass AbstractCache<K,​V>; // This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.\nClass AbstractCache.SimpleStatsCounter; // A thread-safe AbstractCache.StatsCounter implementation for use by Cache implementors.\nClass AbstractLoadingCache<K,​V>; // This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.\nClass CacheBuilder<K,​V>; // A builder of LoadingCache and Cache instances.\nClass CacheBuilderSpec; // A specification of a CacheBuilder configuration.\nClass CacheLoader<K,​V>; // Computes or retrieves values, based on a key, for use in populating a LoadingCache.\nClass CacheStats; // Statistics about the performance of a Cache.\nClass ForwardingCache<K,​V>; // A cache which forwards all its method calls to another cache.\nClass ForwardingCache.SimpleForwardingCache<K,​V>; // A simplified version of ForwardingCache where subclasses can pass in an already constructed Cache as the delegate.\nClass ForwardingLoadingCache<K,​V>; // A cache which forwards all its method calls to another cache.\nClass ForwardingLoadingCache.SimpleForwardingLoadingCache<K,​V>; // A simplified version of ForwardingLoadingCache where subclasses can pass in an already constructed LoadingCache as the delegate.\nClass RemovalListeners; // A collection of common removal listeners.\nClass RemovalNotification<K,​V>; // A notification of the removal of a single entry.\n", "des": "Discouraged (in favor of Caffeine) caching utilities."}
{"index": 3553, "repo": "guava-32.1.1-jre", "code": "package collect;\n\nInterface BiMap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A bimap (or \"bidirectional map\") is a map that preserves the uniqueness of its values as well as that of its keys.\nInterface ClassToInstanceMap<B extends @Nullable java.lang.Object>; // A map, each entry of which maps a Java raw type to an instance of that type.\nInterface Interner<E>; // Provides similar behavior to String.intern() for any immutable type.\nInterface ListMultimap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A Multimap that can hold duplicate key-value pairs and that maintains the insertion ordering of values for a given key.\nInterface MapDifference<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // An object representing the differences between two maps.\nInterface MapDifference.ValueDifference<V extends @Nullable java.lang.Object>; // A difference between the mappings from two maps with the same key.\nInterface Maps.EntryTransformer<K extends @Nullable java.lang.Object,​V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object>; // A transformation of the value of a key-value pair, using both key and value as inputs.\nInterface Multimap<K extends @Nullable java.lang.Object,​V extends @Nullable java.lang.Object>; // A collection that maps keys to values, similar to Map, but in which each key may be associated with multiple values.\nInterface Multiset<E extends @Nullable java.lang.Object>; // A collection that supports order-independent equality, like Set, but may have duplicate elements.\nInterface Multiset.Entry<E extends @Nullable java.lang.Object>; // An unmodifiable element-count pair for a multiset.\nInterface PeekingIterator<E extends @Nullable java.lang.Object>; // An iterator that supports a one-element lookahead while iterating.\nInterface RangeMap<K extends java.lang.Comparable,​V>; // A mapping from disjoint nonempty ranges to non-null values.\n", "des": "Collection interfaces and implementations, and other utilities for collections."}
{"index": 3554, "repo": "guava-32.1.1-jre", "code": "package escape;\n\nClass ArrayBasedCharEscaper; // A CharEscaper that uses an array to quickly look up replacement characters for a given char value.\nClass ArrayBasedEscaperMap; // An implementation-specific parameter class suitable for initializing ArrayBasedCharEscaper or ArrayBasedUnicodeEscaper instances.\nClass ArrayBasedUnicodeEscaper; // A UnicodeEscaper that uses an array to quickly look up replacement characters for a given code point.\nClass CharEscaper; // An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\nClass CharEscaperBuilder; // Simple helper class to build a \"sparse\" array of objects based on the indexes that were added to it.\nClass Escaper; // An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\nClass Escapers; // Static utility methods pertaining to Escaper instances.\nClass Escapers.Builder; // A builder for simple, fast escapers.\nClass UnicodeEscaper; // An Escaper that converts literal text into a format safe for inclusion in a particular context (such as an XML document).\n", "des": "Interfaces, utilities, and simple implementations of escapers and encoders."}
{"index": 3555, "repo": "guava-32.1.1-jre", "code": "package eventbus;\n\nInterface SubscriberExceptionHandler; // Handler for exceptions thrown by event subscribers.\nClass AsyncEventBus; // An EventBus that takes the Executor of your choice and uses it to dispatch events, allowing dispatch to occur asynchronously.\nClass DeadEvent; // Wraps an event that was posted, but which had no subscribers and thus could not be delivered.\nClass EventBus; // Dispatches events to listeners, and provides ways for listeners to register themselves.\nClass SubscriberExceptionContext; // Context for an exception thrown by a subscriber.\nAnnotation Type AllowConcurrentEvents; // Marks an event subscriber method as being thread-safe.\nAnnotation Type Subscribe; // Marks a method as an event subscriber.\n", "des": "Discouraged in favor of dependency injection and concurrency frameworks, EventBus allows publish-subscribe-style communication."}
{"index": 3556, "repo": "guava-32.1.1-jre", "code": "package graph;\n\nInterface Graph<N>; // An interface for graph-structured data, whose edges are anonymous entities with no identity or information of their own.\nInterface MutableGraph<N>; // A subinterface of Graph which adds mutation methods.\nInterface MutableNetwork<N,​E>; // A subinterface of Network which adds mutation methods.\nInterface MutableValueGraph<N,​V>; // A subinterface of ValueGraph which adds mutation methods.\nInterface Network<N,​E>; // An interface for graph-structured data, whose edges are unique objects.\nInterface PredecessorsFunction<N>; // A functional interface for graph-structured data.\nInterface SuccessorsFunction<N>; // A functional interface for graph-structured data.\nInterface ValueGraph<N,​V>; // An interface for graph-structured data, whose edges have associated non-unique values.\nClass AbstractGraph<N>; // This class provides a skeletal implementation of Graph.\nClass AbstractNetwork<N,​E>; // This class provides a skeletal implementation of Network.\nClass AbstractValueGraph<N,​V>; // This class provides a skeletal implementation of ValueGraph.\nClass ElementOrder<T>; // Used to represent the order of elements in a data structure that supports different options for iteration order guarantees.\nClass EndpointPair<N>; // An immutable pair representing the two endpoints of an edge in a graph.\nClass GraphBuilder<N>; // A builder for constructing instances of MutableGraph or ImmutableGraph with user-defined properties.\nClass Graphs; // Static utility methods for Graph, ValueGraph, and Network instances.\nClass ImmutableGraph<N>; // A Graph whose elements and structural relationships will never change.\nClass ImmutableGraph.Builder<N>; // A builder for creating ImmutableGraph instances, especially static final graphs.\nClass ImmutableNetwork<N,​E>; // A Network whose elements and structural relationships will never change.\nClass ImmutableNetwork.Builder<N,​E>; // A builder for creating ImmutableNetwork instances, especially static final networks.\nClass ImmutableValueGraph<N,​V>; // A ValueGraph whose elements and structural relationships will never change.\n", "des": "An API for representing graph (node and edge) data."}
{"index": 3557, "repo": "guava-32.1.1-jre", "code": "package hash;\n\nInterface Funnel<T extends @Nullable java.lang.Object>; // An object which can send data from an object of type T into a PrimitiveSink.\nInterface Hasher; // A PrimitiveSink that can compute a hash code after reading the input.\nInterface HashFunction; // A hash function is a collision-averse pure function that maps an arbitrary block of data to a number called a hash code.\nInterface PrimitiveSink; // An object which can receive a stream of primitive values.\nClass BloomFilter<T extends @Nullable java.lang.Object>; // A Bloom filter for instances of T.\nClass Funnels; // Funnels for common types.\nClass HashCode; // An immutable hash code of arbitrary bit length.\nClass Hashing; // Static methods to obtain HashFunction instances, and other static hashing-related utilities.\nClass HashingInputStream; // An InputStream that maintains a hash of the data read from it.\nClass HashingOutputStream; // An OutputStream that maintains a hash of the data written to it.\n", "des": "Hash functions and related structures."}
{"index": 3558, "repo": "guava-32.1.1-jre", "code": "package html;\n\nClass HtmlEscapers; // Escaper instances suitable for strings to be included in HTML attribute values and most elements' text contents.\n", "des": "Escapers for HTML."}
{"index": 3559, "repo": "guava-32.1.1-jre", "code": "package io;\n\nInterface ByteArrayDataInput; // An extension of DataInput for reading from in-memory byte arrays; its methods offer identical functionality but do not throw IOException.\nInterface ByteArrayDataOutput; // An extension of DataOutput for writing to in-memory byte arrays; its methods offer identical functionality but do not throw IOException.\nInterface ByteProcessor<T extends @Nullable java.lang.Object>; // A callback interface to process bytes from a stream.\nInterface LineProcessor<T extends @Nullable java.lang.Object>; // A callback to be used with the streaming readLines methods.\nClass BaseEncoding; // A binary encoding scheme for reversibly translating between byte sequences and printable ASCII strings.\nClass ByteSink; // A destination to which bytes can be written, such as a file.\nClass ByteSource; // A readable source of bytes, such as a file.\nClass ByteStreams; // Provides utility methods for working with byte arrays and I/O streams.\nClass CharSink; // A destination to which characters can be written, such as a text file.\nClass CharSource; // A readable source of characters, such as a text file.\nClass CharStreams; // Provides utility methods for working with character streams.\nClass Closeables; // Utility methods for working with Closeable objects.\nClass Closer; // A Closeable that collects Closeable resources and closes them all when it is closed.\nClass CountingInputStream; // An InputStream that counts the number of bytes read.\nClass CountingOutputStream; // An OutputStream that counts the number of bytes written.\nClass FileBackedOutputStream; // An OutputStream that starts buffering to a byte array, but switches to file buffering once the data reaches a configurable size.\nClass Files; // Provides utility methods for working with files.\nClass Flushables; // Utility methods for working with Flushable objects.\nClass LineReader; // A class for reading lines of text.\nClass LittleEndianDataInputStream; // An implementation of DataInput that uses little-endian byte ordering for reading short, int, float, double, and long values.\nClass LittleEndianDataOutputStream; // An implementation of DataOutput that uses little-endian byte ordering for writing char, short, int, float, double, and long values.\nClass MoreFiles; // Static utilities for use with Path instances, intended to complement Files.\nClass PatternFilenameFilter; // File name filter that only accepts files matching a regular expression.\n", "des": "Utility methods and classes for I/O; for example input streams, output streams, readers, writers, and files."}
{"index": 3560, "repo": "guava-32.1.1-jre", "code": "package math;\n\nClass BigDecimalMath; // A class for arithmetic on BigDecimal that is not covered by its built-in methods.\nClass BigIntegerMath; // A class for arithmetic on values of type BigInteger.\nClass DoubleMath; // A class for arithmetic on doubles that is not covered by Math.\nClass IntMath; // A class for arithmetic on values of type int.\nClass LinearTransformation; // The representation of a linear transformation between real numbers x and y.\nClass LinearTransformation.LinearTransformationBuilder; // This is an intermediate stage in the construction process.\nClass LongMath; // A class for arithmetic on values of type long.\nClass PairedStats; // An immutable value object capturing some basic statistics about a collection of paired double values (e.g.\nClass PairedStatsAccumulator; // A mutable object which accumulates paired double values (e.g.\nClass Quantiles; // Provides a fluent API for calculating quantiles.\nClass Quantiles.Scale; // Describes the point in a fluent API chain where only the scale (i.e.\nClass Quantiles.ScaleAndIndex; // Describes the point in a fluent API chain where the scale and a single quantile index (i.e.\nClass Quantiles.ScaleAndIndexes; // Describes the point in a fluent API chain where the scale and a multiple quantile indexes (i.e.\nClass Stats; // A bundle of statistical summary values -- sum, count, mean/average, min and max, and several forms of variance -- that were computed from a single set of zero or more floating-point values.\nClass StatsAccumulator; // A mutable object which accumulates double values and tracks some basic statistics over all the values added so far.\n", "des": "Arithmetic functions operating on primitive values and on BigInteger and BigDecimal instances."}
{"index": 3561, "repo": "guava-32.1.1-jre", "code": "package net;\n\nClass HostAndPort; // An immutable representation of a host and port.\nClass HostSpecifier; // A syntactically valid host specifier, suitable for use in a URI.\nClass HttpHeaders; // Contains constant definitions for the HTTP header field names.\nClass HttpHeaders.ReferrerPolicyValues; // Values for the Referrer-Policy header.\nClass InetAddresses; // Static utility methods pertaining to InetAddress instances.\nClass InetAddresses.TeredoInfo; // A simple immutable data class to encapsulate the information to be found in a Teredo address.\nClass InternetDomainName; // An immutable well-formed internet domain name, such as com or foo.co.uk.\nClass MediaType; // Represents an Internet Media Type (also known as a MIME Type or Content Type).\nClass PercentEscaper; // A UnicodeEscaper that escapes some set of Java characters using a UTF-8 based percent encoding scheme.\nClass UrlEscapers; // Escaper instances suitable for strings to be included in particular sections of URLs.\n", "des": "Utility methods and classes for networking (such as IP addresses and domain names)."}
{"index": 3562, "repo": "guava-32.1.1-jre", "code": "package primitives;\n\nClass Booleans; // Static utility methods pertaining to boolean primitives, that are not already found in either Boolean or Arrays.\nClass Bytes; // Static utility methods pertaining to byte primitives, that are not already found in either Byte or Arrays, and interpret bytes as neither signed nor unsigned.\nClass Chars; // Static utility methods pertaining to char primitives, that are not already found in either Character or Arrays.\nClass Doubles; // Static utility methods pertaining to double primitives, that are not already found in either Double or Arrays.\nClass Floats; // Static utility methods pertaining to float primitives, that are not already found in either Float or Arrays.\nClass ImmutableDoubleArray; // An immutable array of double values, with an API resembling List.\nClass ImmutableDoubleArray.Builder; // A builder for ImmutableDoubleArray instances; obtained using ImmutableDoubleArray.builder(int).\nClass ImmutableIntArray; // An immutable array of int values, with an API resembling List.\nClass ImmutableIntArray.Builder; // A builder for ImmutableIntArray instances; obtained using ImmutableIntArray.builder(int).\nClass ImmutableLongArray; // An immutable array of long values, with an API resembling List.\nClass ImmutableLongArray.Builder; // A builder for ImmutableLongArray instances; obtained using ImmutableLongArray.builder(int).\nClass Ints; // Static utility methods pertaining to int primitives, that are not already found in either Integer or Arrays.\nClass Longs; // Static utility methods pertaining to long primitives, that are not already found in either Long or Arrays.\nClass Primitives; // Contains static utility methods pertaining to primitive types and their corresponding wrapper types.\nClass Shorts; // Static utility methods pertaining to short primitives, that are not already found in either Short or Arrays.\nClass SignedBytes; // Static utility methods pertaining to byte primitives that interpret values as signed.\nClass UnsignedBytes; // Static utility methods pertaining to byte primitives that interpret values as unsigned (that is, any negative value b is treated as the positive value 256 + b).\nClass UnsignedInteger; // A wrapper class for unsigned int values, supporting arithmetic operations.\nClass UnsignedInts; // Static utility methods pertaining to int primitives that interpret values as unsigned (that is, any negative value x is treated as the positive value 2^32 + x).\n", "des": "Static utilities for the eight primitive types and void, and value types for treating them as unsigned or storing them in immutable arrays."}
{"index": 3563, "repo": "guava-32.1.1-jre", "code": "package reflect;\n\nInterface TypeToInstanceMap<B extends @Nullable java.lang.Object>; // A map, each entry of which maps a TypeToken to an instance of that type.\nClass AbstractInvocationHandler; // Abstract implementation of InvocationHandler that handles Object.equals(java.lang.Object), Object.hashCode() and Object.toString().\nClass ClassPath; // Scans the source of a ClassLoader and finds all loadable classes and resources.\nClass ClassPath.ClassInfo; // Represents a class that can be loaded through ClassPath.ClassInfo.load().\nClass ClassPath.ResourceInfo; // Represents a class path resource that can be either a class file or any other resource file loadable from the class path.\nClass ImmutableTypeToInstanceMap<B>; // A type-to-instance map backed by an ImmutableMap.\nClass ImmutableTypeToInstanceMap.Builder<B>; // A builder for creating immutable type-to-instance maps.\nClass Invokable<T,​R>; // Wrapper around either a Method or a Constructor.\nClass MutableTypeToInstanceMap<B extends @Nullable java.lang.Object>; // A mutable type-to-instance map.\nClass Parameter; // Represents a method or constructor parameter.\nClass Reflection; // Static utilities relating to Java reflection.\nClass TypeParameter<T>; // Captures a free type variable that can be used in TypeToken.where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>).\nClass TypeResolver; // An object of this class encapsulates type mappings from type variables.\nClass TypeToken<T>; // A Type with generics.\n", "des": "Utilities for reflection."}
{"index": 3564, "repo": "guava-32.1.1-jre", "code": "package concurrent;\n\nInterface AsyncCallable<V extends @Nullable java.lang.Object>; // Computes a value, possibly asynchronously.\nInterface AsyncFunction<I extends @Nullable java.lang.Object,​O extends @Nullable java.lang.Object>; // Transforms a value, possibly asynchronously.\nInterface ClosingFuture.AsyncClosingCallable<V extends @Nullable java.lang.Object>; // An operation that computes a ClosingFuture of a result.\nInterface ClosingFuture.AsyncClosingFunction<T extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function from an input to a ClosingFuture of a result.\nInterface ClosingFuture.ClosingCallable<V extends @Nullable java.lang.Object>; // An operation that computes a result.\nInterface ClosingFuture.ClosingFunction<T extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function from an input to a result.\nInterface ClosingFuture.Combiner.AsyncCombiningCallable<V extends @Nullable java.lang.Object>; // An operation that returns a ClosingFuture result and may throw an exception.\nInterface ClosingFuture.Combiner.CombiningCallable<V extends @Nullable java.lang.Object>; // An operation that returns a result and may throw an exception.\nInterface ClosingFuture.Combiner2.AsyncClosingFunction2<V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function that returns a ClosingFuture when applied to the values of the two futures passed to ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture).\nInterface ClosingFuture.Combiner2.ClosingFunction2<V1 extends @Nullable java.lang.Object,​V2 extends @Nullable java.lang.Object,​U extends @Nullable java.lang.Object>; // A function that returns a value when applied to the values of the two futures passed to ClosingFuture.whenAllSucceed(ClosingFuture, ClosingFuture).\n", "des": "Concurrency utilities."}
{"index": 3565, "repo": "guava-32.1.1-jre", "code": "package xml;\n\nClass XmlEscapers; // Escaper instances suitable for strings to be included in XML attribute values and elements' text contents.\n", "des": "Escapers for XML."}
{"index": 3566, "repo": "lucene-codecs-9.7.0", "code": "package blockterms;\n\nClass BlockTermsReader; // Handles a terms dict, but decouples all details of doc/freqs/positions reading to an instance of PostingsReaderBase.\nClass BlockTermsWriter; // Writes terms dict, block-encoding (column stride) each term's metadata for each set of terms between two index terms.\nClass FixedGapTermsIndexReader; // TermsIndexReader for simple every Nth terms indexes.\nClass FixedGapTermsIndexWriter; // Selects every Nth term as and index term, and hold term bytes (mostly) fully expanded in memory.\nClass TermsIndexReaderBase; // BlockTermsReader interacts with an instance of this class to manage its terms index.\nClass TermsIndexReaderBase.FieldIndexEnum; // Similar to TermsEnum, except, the only \"metadata\" it reports for a given indexed term is the long fileOffset into the main terms dictionary file.\nClass TermsIndexWriterBase; // Base class for terms index implementations to plug into BlockTermsWriter.\nClass VariableGapTermsIndexReader; // See VariableGapTermsIndexWriter\nClass VariableGapTermsIndexWriter; // Selects index terms according to provided pluggable VariableGapTermsIndexWriter.IndexTermSelector, and stores them in a prefix trie that's loaded entirely in RAM stored as an FST.\nClass VariableGapTermsIndexWriter.EveryNOrDocFreqTermSelector; // Sets an index term when docFreq >= docFreqThresh, or every interval terms.\nClass VariableGapTermsIndexWriter.EveryNTermSelector; // Same policy as FixedGapTermsIndexWriter\nClass VariableGapTermsIndexWriter.IndexTermSelector; // Hook for selecting which terms should be placed in the terms index.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 3567, "repo": "lucene-codecs-9.7.0", "code": "package blocktreeords;\n\nClass BlockTreeOrdsPostingsFormat; // Uses OrdsBlockTreeTermsWriter with Lucene90PostingsWriter.\nClass OrdsBlockTreeTermsReader; // See OrdsBlockTreeTermsWriter.\nClass OrdsBlockTreeTermsWriter; // This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version.\nClass OrdsSegmentTermsEnum; // Iterates through terms in this field.\n", "des": "Same postings format as Lucene50, except the terms dictionary also supports ords, i.e."}
{"index": 3568, "repo": "lucene-codecs-9.7.0", "code": "package bloom;\n\nClass BloomFilterFactory; // Class used to create index-time FuzzySet appropriately configured for each field.\nClass BloomFilteringPostingsFormat; // A PostingsFormat useful for low doc-frequency fields such as primary keys.\nClass DefaultBloomFilterFactory; // Default policy is to allocate a bitset with 10% saturation given a unique term per document.\nClass FuzzySet; // A class used to represent a set of many, potentially large, values (e.g.\nClass HashFunction; // Base class for hashing functions that can be referred to by name.\nClass MurmurHash64; // This is a very fast, non-cryptographic hash suitable for general hash-based lookup.\nEnum FuzzySet.ContainsResult; // Result from FuzzySet.contains(BytesRef): can never return definitively YES (always MAYBE), but can sometimes definitely return NO.\n", "des": "Codec PostingsFormat for fast access to low-frequency terms such as primary key fields."}
{"index": 3569, "repo": "lucene-codecs-9.7.0", "code": "package memory;\n\nClass DirectPostingsFormat; // Wraps Lucene90PostingsFormat format for on-disk storage, but then at read time loads and stores all terms and postings directly in RAM as byte[], int[].\nClass FSTPostingsFormat; // FST term dict + Lucene50PBF\nClass FSTTermsReader; // FST-based terms dictionary reader.\nClass FSTTermsWriter; // FST-based term dict, using metadata as FST output.\n", "des": "Term dictionary, DocValues or Postings formats that are read entirely into memory."}
{"index": 3570, "repo": "lucene-codecs-9.7.0", "code": "package simpletext;\n\nClass SimpleTextCodec; // plain text index format.\nClass SimpleTextCompoundFormat; // plain text compound format.\nClass SimpleTextFieldInfosFormat; // plaintext field infos format\nClass SimpleTextKnnVectorsFormat; // For debugging, curiosity, transparency only!! Do not use this codec in production.\nClass SimpleTextKnnVectorsReader; // Reads vector values from a simple text format.\nClass SimpleTextKnnVectorsWriter; // Writes vector-valued fields in a plain text format\nClass SimpleTextLiveDocsFormat; // reads/writes plaintext live docs\nClass SimpleTextNormsFormat; // plain-text norms format.\nClass SimpleTextNormsFormat.SimpleTextNormsConsumer; // Writes plain-text norms.\nClass SimpleTextNormsFormat.SimpleTextNormsProducer; // Reads plain-text norms.\nClass SimpleTextPointsFormat; // For debugging, curiosity, transparency only!! Do not use this codec in production.\nClass SimpleTextSegmentInfoFormat; // plain text segments file format.\nClass SimpleTextStoredFieldsFormat; // plain text stored fields format.\nClass SimpleTextStoredFieldsReader; // reads plaintext stored fields\nClass SimpleTextStoredFieldsWriter; // Writes plain-text stored fields.\nClass SimpleTextTermVectorsFormat; // plain text term vectors format.\nClass SimpleTextTermVectorsReader; // Reads plain-text term vectors.\nClass SimpleTextTermVectorsWriter; // Writes plain-text term vectors.\n", "des": "Simpletext Codec: writes human readable postings."}
{"index": 3571, "repo": "lucene-codecs-9.7.0", "code": "package uniformsplit;\n\npackage uniformsplit.sharedterms; // Pluggable term index / block terms dictionary implementations.\nInterface BlockDecoder; // Decodes the raw bytes of a block when the index is read, according to the BlockEncoder used during the writing of the index.\nInterface BlockEncoder; // Encodes the raw bytes of a block when the index is written.\nInterface BlockEncoder.WritableBytes; // Writable byte buffer.\nInterface IndexDictionary; // Immutable stateless index dictionary kept in RAM.\nInterface IndexDictionary.Browser; // Stateful IndexDictionary.Browser to seek a term in this IndexDictionary and get its corresponding block file pointer in the block file.\nInterface IndexDictionary.BrowserSupplier; // Supplier for a new stateful IndexDictionary.Browser created on the immutable IndexDictionary.\nInterface IndexDictionary.Builder; // Builds an immutable IndexDictionary.\nClass BlockHeader; // Block header containing block metadata.\nClass BlockHeader.Serializer; // Reads/writes block header.\nClass BlockLine; // One term block line.\nClass BlockLine.Serializer; // Reads/writes block lines with terms encoded incrementally inside a block.\nClass BlockReader; // Seeks the block corresponding to a given term, read the block bytes, and scans the block terms.\nClass BlockWriter; // Writes blocks in the block file.\nClass DeltaBaseTermStateSerializer; // TermState serializer which encodes each file pointer as a delta relative to a base file pointer.\nClass FieldMetadata; // Metadata and stats for one field in the index.\nClass FieldMetadata.Serializer; // Reads/writes field metadata.\nClass FSTDictionary; // Immutable stateless FST-based index dictionary kept in memory.\nClass FSTDictionary.BrowserSupplier; // Provides stateful FSTDictionary.Browser to seek in the FSTDictionary.\nClass FSTDictionary.Builder; // Builds an immutable FSTDictionary.\nClass IntersectBlockReader; // The \"intersect\" TermsEnum response to UniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.\nClass RamUsageUtil; // Utility methods to estimate the RAM usage of objects.\nClass TermBytes; // Term of a block line.\nClass UniformSplitPostingsFormat; // PostingsFormat based on the Uniform Split technique.\nClass UniformSplitTerms; // Terms based on the Uniform Split technique.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 3572, "repo": "lucene-codecs-9.7.0", "code": "package sharedterms;\n\nClass FieldMetadataTermState; // Pair of FieldMetadata and BlockTermState for a specific field.\nClass STBlockLine; // Represents a term and its details stored in the BlockTermState.\nClass STBlockLine.Serializer; // Reads block lines encoded incrementally, with all fields corresponding to the term of the line.\nClass STBlockReader; // Reads terms blocks with the Shared Terms format.\nClass STBlockWriter; // Writes terms blocks with the Shared Terms format.\nClass STIntersectBlockReader; // The \"intersect\" TermsEnum response to STUniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.\nClass STMergingBlockReader; // TermsEnum used when merging segments, to enumerate the terms of an input segment and get all the fields TermStates of each term.\nClass STUniformSplitPostingsFormat; // PostingsFormat based on the Uniform Split technique and supporting Shared Terms.\nClass STUniformSplitTerms; // Extends UniformSplitTerms for a shared-terms dictionary, with all the fields of a term in the same block line.\nClass STUniformSplitTermsReader; // A block-based terms index and dictionary based on the Uniform Split technique, and sharing all the fields terms in the same dictionary, with all the fields of a term in the same block line.\nClass STUniformSplitTermsWriter; // Extends UniformSplitTermsWriter by sharing all the fields terms in the same dictionary and by writing all the fields of a term in the same block line.\nClass UnionFieldMetadataBuilder; // Builds a FieldMetadata that is the union of multiple FieldMetadata.\n", "des": "Pluggable term index / block terms dictionary implementations."}
{"index": 3573, "repo": "lucene-sandbox-9.7.0", "code": "package payloads;\n\nClass PayloadSpanCollector; // SpanCollector for collecting payloads\nClass PayloadSpanUtil; // Experimental class to get set of payloads for most standard Lucene queries.\n", "des": "Experimental classes for interacting with payloads"}
{"index": 3574, "repo": "lucene-sandbox-9.7.0", "code": "package idversion;\n\nClass IDVersionPostingsFormat; // A PostingsFormat optimized for primary-key (ID) fields that also record a version (long) for each ID, delivered as a payload created by IDVersionPostingsFormat.longToBytes(long, org.apache.lucene.util.BytesRef) during indexing.\nClass IDVersionSegmentTermsEnum; // Iterates through terms in this field; this class is public so users can cast it to call IDVersionSegmentTermsEnum.seekExact(BytesRef, long) for optimistic-concurrency, and also IDVersionSegmentTermsEnum.getVersion() to get the version of the currently seek'd term.\nClass VersionBlockTreeTermsReader; // See VersionBlockTreeTermsWriter.\nClass VersionBlockTreeTermsWriter; // This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version.\n", "des": "A primary-key postings format that associates a version (long) with each term and can provide fail-fast lookups by ID and version."}
{"index": 3575, "repo": "lucene-sandbox-9.7.0", "code": "package document;\n\nClass BigIntegerPoint; // An indexed 128-bit BigInteger field.\nClass DoublePointMultiRangeBuilder; // Builder for multi range queries for DoublePoints\nClass FloatPointMultiRangeBuilder; // Builder for multi range queries for FloatPoints\nClass FloatPointNearestNeighbor; // KNN search on top of N dimensional indexed float points.\nClass HalfFloatPoint; // An indexed half-float field for fast range filters.\nClass IntPointMultiRangeBuilder; // Builder for multi range queries for IntPoints\nClass LatLonBoundingBox; // An indexed 2-Dimension Bounding Box field for the Geospatial Lat/Lon Coordinate system\nClass LongPointMultiRangeBuilder; // Builder for multi range queries for LongPoints\n", "des": "This package contains several point types: BigIntegerPoint for 128-bit integers LatLonPoint for latitude/longitude geospatial points"}
{"index": 3576, "repo": "lucene-sandbox-9.7.0", "code": "package index;\n\nClass MergeOnFlushMergePolicy; // A simple extension to wrap MergePolicy to merge all tiny segments (or at least segments smaller than specified in MergeOnFlushMergePolicy.setSmallSegmentThresholdMB(double) into one segment on commit.\n", "des": "Experimental index-related classes"}
{"index": 3577, "repo": "lucene-sandbox-9.7.0", "code": "package queries;\n\nClass FuzzyLikeThisQuery; // Fuzzifies ALL terms provided as strings and then picks the best n differentiating terms.\n", "des": "Additional queries (some may have caveats or limitations)"}
{"index": 3578, "repo": "lucene-sandbox-9.7.0", "code": "package search;\n\nClass CombinedFieldQuery; // A Query that treats multiple fields as a single stream and scores terms as if you had indexed them as a single term in a single field.\nClass CombinedFieldQuery.Builder; // A builder for CombinedFieldQuery.\nClass CoveringQuery; // A Query that allows to have a configurable number or required matches per document.\nClass LargeNumHitsTopDocsCollector; // Optimized collector for large number of hits.\nClass LatLonPointPrototypeQueries; // Holder class for prototype sandboxed queries\nClass MultiRangeQuery; // Abstract class for range queries involving multiple ranges against physical points such as IntPoints All ranges are logically ORed together\nClass MultiRangeQuery.Builder; // A builder for multirange queries.\nClass MultiRangeQuery.RangeClause; // Representation of a single clause in a MultiRangeQuery\nClass PhraseWildcardQuery; // A generalized version of PhraseQuery, built with one or more MultiTermQuery that provides term expansions for multi-terms (one of the expanded terms must match).\nClass PhraseWildcardQuery.Builder; // Builds a PhraseWildcardQuery.\nClass PhraseWildcardQuery.MultiTerm; // Phrase term with expansions.\nClass PhraseWildcardQuery.PhraseTerm; // All PhraseWildcardQuery.PhraseTerm are light and immutable.\nClass PhraseWildcardQuery.SingleTerm; // Phrase term with no expansion.\nClass PhraseWildcardQuery.TermBytesTermState; // Holds a pair of term bytes - term state.\nClass PhraseWildcardQuery.TermData; // Holds the TermState for all the collected Term, for a specific phrase term, for all segments.\nClass PhraseWildcardQuery.TermsData; // Holds the TermState and TermStatistics for all the matched and collected Term, for all phrase terms, for all segments.\nClass PhraseWildcardQuery.TermStats; // Accumulates the doc freq and total term freq.\nClass PhraseWildcardQuery.TestCounters; // Test counters incremented when assertions are enabled.\nClass ProfilerCollector; // This class wraps a Collector and times the execution of: - setScorer() - collect() - doSetNextReader() - needsScores()\nClass ProfilerCollectorResult; // Public class for profiled timings of the Collectors used in the search.\n", "des": "This package contains a flexible graph-based proximity query, TermAutomatonQuery, and geospatial queries."}
{"index": 3579, "repo": "lucene-test-framework-9.7.0", "code": "package analysis;\n\npackage analysis.standard; // Classes to support StandardAnalyzer component testing.\nInterface BaseTokenStreamTestCase.CheckClearAttributesAttribute; // Attribute that records if it was cleared or not.\nClass BaseTokenStreamFactoryTestCase; // Base class for testing tokenstream factories.\nClass BaseTokenStreamTestCase; // Base class for all Lucene unit tests that use TokenStreams.\nClass BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl; // Attribute that records if it was cleared or not.\nClass CannedBinaryTokenStream; // TokenStream from a canned list of binary (BytesRef-based) tokens.\nClass CannedBinaryTokenStream.BinaryToken; // Represents a binary token.\nClass CannedTokenStream; // TokenStream from a canned list of Tokens.\nClass CollationTestBase; // Base test class for testing Unicode collation.\nClass CrankyTokenFilter; // Throws IOException from random Tokenstream methods.\nClass LookaheadTokenFilter<T extends LookaheadTokenFilter.Position>; // An abstract TokenFilter to make it easier to build graph token filters requiring some lookahead.\nClass LookaheadTokenFilter.Position; // Holds all state for a single position; subclass this to record other state at each position.\nClass MockAnalyzer; // Analyzer for testing\nClass MockBytesAnalyzer; // Analyzer for testing that encodes terms as UTF-16 bytes.\nClass MockCharFilter; // the purpose of this charfilter is to send offsets out of bounds if the analyzer doesn't use correctOffset or does incorrect offset math.\nClass MockFixedLengthPayloadFilter; // TokenFilter that adds random fixed-length payloads.\nClass MockGraphTokenFilter; // Randomly inserts overlapped (posInc=0) tokens with posLength sometimes > 1.\nClass MockHoleInjectingTokenFilter; // Randomly injects holes (similar to what a stopfilter would do)\nClass MockLowerCaseFilter; // A lowercasing TokenFilter.\nClass MockPayloadAnalyzer; // Wraps a whitespace tokenizer with a filter that sets the first token, and odd tokens to posinc=1, and all others to 0, encoding the position as pos: XXX in the payload.\nClass MockRandomLookaheadTokenFilter; // Uses LookaheadTokenFilter to randomly peek at future tokens.\n", "des": "Support for testing analysis components."}
{"index": 3580, "repo": "lucene-test-framework-9.7.0", "code": "package standard;\n\nClass EmojiTokenizationTestUnicode_12_1; // This class was automatically generated by generateEmojiTokenizationTest.pl.\nClass WordBreakTestUnicode_12_1_0; // This class was automatically generated by generateJavaUnicodeWordBreakTest.pl from: http://www.unicode.org/Public/12.1.0/ucd/auxiliary/WordBreakTest.txt\n", "des": "Classes to support StandardAnalyzer component testing."}
{"index": 3581, "repo": "lucene-test-framework-9.7.0", "code": "package asserting;\n\nClass AssertingCodec; // Acts like the default codec but with additional asserts.\nClass AssertingDocValuesFormat; // Just like the default but with additional asserts.\nClass AssertingKnnVectorsFormat; // Wraps the default KnnVectorsFormat and provides additional assertions.\nClass AssertingLiveDocsFormat; // Just like the default live docs format but with additional asserts.\nClass AssertingNormsFormat; // Just like the default but with additional asserts.\nClass AssertingPointsFormat; // Just like the default point format but with additional asserts.\nClass AssertingPostingsFormat; // Just like the default postings format but with additional asserts.\nClass AssertingStoredFieldsFormat; // Just like the default stored fields format but with additional asserts.\nClass AssertingTermVectorsFormat; // Just like the default vectors format but with additional asserts.\n", "des": "Codec for testing that asserts various contracts of the codec apis."}
{"index": 3582, "repo": "lucene-test-framework-9.7.0", "code": "package blockterms;\n\nClass LuceneFixedGap; // Customized version of Lucene90PostingsFormat that uses FixedGapTermsIndexWriter.\nClass LuceneVarGapDocFreqInterval; // Customized version of Lucene90PostingsFormat that uses VariableGapTermsIndexWriter with a fixed interval, but forcing high docfreq terms to be indexed terms.\nClass LuceneVarGapFixedInterval; // Customized version of Lucene90PostingsFormat that uses VariableGapTermsIndexWriter with a fixed interval.\n", "des": "Codecs for testing that support org.apache.lucene.codecs.blockterms."}
{"index": 3583, "repo": "lucene-test-framework-9.7.0", "code": "package bloom;\n\nClass TestBloomFilteredLucenePostings; // A class used for testing BloomFilteringPostingsFormat with a concrete delegate (Lucene41).\n", "des": "Support for generating test indexes using the BloomFilteringPostingsFormat."}
{"index": 3584, "repo": "lucene-test-framework-9.7.0", "code": "package cheapbastard;\n\nClass CheapBastardCodec; // Codec that tries to use as little ram as possible because he spent all his money on beer\n", "des": "Codec that unreasonably tries to use as little RAM as possible."}
{"index": 3585, "repo": "lucene-test-framework-9.7.0", "code": "package compressing;\n\npackage compressing.dummy; // Dummy CompressingCodec implementation used for testing.\nClass CompressingCodec; // A codec that uses Lucene90CompressingStoredFieldsFormat for its stored fields and delegates to the default codec for everything else.\nClass DeflateWithPresetCompressingCodec; // CompressionCodec that uses DeflateWithPresetDictCompressionMode.\nClass FastCompressingCodec; // CompressionCodec that uses CompressionMode.FAST\nClass FastDecompressionCompressingCodec; // CompressionCodec that uses CompressionMode.FAST_DECOMPRESSION\nClass HighCompressionCompressingCodec; // CompressionCodec that uses CompressionMode.HIGH_COMPRESSION\nClass LZ4WithPresetCompressingCodec; // CompressionCodec that uses LZ4WithPresetDictCompressionMode.\n", "des": "Support for testing Lucene90CompressingStoredFieldsFormat."}
{"index": 3586, "repo": "lucene-test-framework-9.7.0", "code": "package dummy;\n\nClass DummyCompressingCodec; // CompressionCodec that does not compress data, useful for testing.\n", "des": "Dummy CompressingCodec implementation used for testing."}
{"index": 3587, "repo": "lucene-test-framework-9.7.0", "code": "package cranky;\n\nClass CrankyCodec; // Codec for testing that throws random IOExceptions\n", "des": "Codec for testing that throws random IOExceptions"}
{"index": 3588, "repo": "lucene-test-framework-9.7.0", "code": "package mockrandom;\n\nClass MockRandomPostingsFormat; // Randomly combines terms index impl w/ postings impls.\n", "des": "Frankenstein codec for testing that pieces together random components."}
{"index": 3589, "repo": "lucene-test-framework-9.7.0", "code": "package ramonly;\n\nClass RAMOnlyPostingsFormat; // Stores all postings data in RAM, but writes a small token (header + single int) to identify which \"slot\" the index is using in RAM HashMap.\n", "des": "Codec for testing that never writes to disk."}
{"index": 3590, "repo": "lucene-test-framework-9.7.0", "code": "package uniformsplit;\n\npackage uniformsplit.sharedterms; // Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit.sharedterms with block encryption using basic ROT13.\nClass Rot13CypherTestUtil; // Test utility for simple ROT13 cipher (https://en.wikipedia.org/wiki/ROT13).\nClass UniformSplitRot13PostingsFormat; // UniformSplitPostingsFormat with block encoding using ROT13 cypher.\n", "des": "Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit with block encryption using basic ROT13."}
{"index": 3591, "repo": "lucene-test-framework-9.7.0", "code": "package sharedterms;\n\nClass STUniformSplitRot13PostingsFormat; // STUniformSplitPostingsFormat with block encoding using ROT13 cypher.\n", "des": "Test PostingsFormat for testing org.apache.lucene.codecs.uniformsplit.sharedterms with block encryption using basic ROT13."}
{"index": 3592, "repo": "lucene-test-framework-9.7.0", "code": "package vector;\n\nClass ConfigurableMCodec; // This codec allows customization of the number of connections made for an hnsw index.\n", "des": "Codecs for testing different vector formats."}
{"index": 3593, "repo": "lucene-test-framework-9.7.0", "code": "package geo;\n\nClass BaseGeoPointTestCase; // Abstract class to do basic tests for a geospatial impl (high level fields and queries) NOTE: This test focuses on geospatial (distance queries, polygon queries, etc) indexing and search, not any underlying storage format or encoding: it merely supplies two hooks for the encoding so that tests can be exact.\nClass BaseXYPointTestCase; // Abstract class to do basic tests for a xy spatial impl (high level fields and queries)\nClass EarthDebugger; // Draws shapes on the earth surface and renders using the very cool http://www.webglearth.org.\nClass GeoTestUtil; // static methods for testing geo\nClass ShapeTestUtil; // generates random cartesian geometry; heavy reuse of GeoTestUtil\n", "des": "Reusable geo test utilities."}
{"index": 3594, "repo": "lucene-test-framework-9.7.0", "code": "package index;\n\nInterface RandomIndexWriter.TestPoint; // Simple interface that is executed for each TP InfoStream component message.\nClass AlcoholicMergePolicy; // Merge policy for testing, it is like an alcoholic.\nClass AllDeletedFilterReader; // Filters the incoming reader and makes all documents appear deleted.\nClass AssertingDirectoryReader; // A DirectoryReader that wraps all its subreaders with AssertingLeafReader\nClass AssertingLeafReader; // A FilterLeafReader that can be used to apply additional checks for tests.\nClass AssertingLeafReader.AssertingBinaryDocValues; // Wraps a BinaryDocValues but with additional asserts\nClass AssertingLeafReader.AssertingBits; // Wraps a Bits but with additional asserts\nClass AssertingLeafReader.AssertingFields; // Wraps a Fields but with additional asserts\nClass AssertingLeafReader.AssertingImpactsEnum; // Wraps a ImpactsEnum with additional checks\nClass AssertingLeafReader.AssertingNumericDocValues; // Wraps a NumericDocValues but with additional asserts\nClass AssertingLeafReader.AssertingPointValues; // Wraps a SortedSetDocValues but with additional asserts\nClass AssertingLeafReader.AssertingPostingsEnum; // Wraps a docsenum with additional checks\nClass AssertingLeafReader.AssertingSortedDocValues; // Wraps a SortedDocValues but with additional asserts\nClass AssertingLeafReader.AssertingSortedNumericDocValues; // Wraps a SortedNumericDocValues but with additional asserts\nClass AssertingLeafReader.AssertingSortedSetDocValues; // Wraps a SortedSetDocValues but with additional asserts\nClass AssertingLeafReader.AssertingStoredFields; // Wraps a StoredFields but with additional asserts\nClass AssertingLeafReader.AssertingTerms; // Wraps a Terms but with additional asserts\nClass AssertingLeafReader.AssertingTermVectors; // Wraps a TermVectors but with additional asserts\nClass BaseCompoundFormatTestCase; // Abstract class to do basic tests for a compound format.\nClass BaseCompressingDocValuesFormatTestCase; // Extends BaseDocValuesFormatTestCase to add compression checks.\nClass BaseDocValuesFormatTestCase; // Abstract class to do basic tests for a docvalues format.\nClass BaseFieldInfoFormatTestCase; // Abstract class to do basic tests for fis format.\n", "des": "Support for testing of indexes."}
{"index": 3595, "repo": "lucene-test-framework-9.7.0", "code": "package mockfile;\n\nClass DisableFsyncFS; // Disables actual calls to fsync.\nClass ExtrasFS; // Adds extra files/subdirectories when directories are created.\nClass FilterAsynchronousFileChannel; // A FilterAsynchronousFileChannel contains another AsynchronousFileChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterDirectoryStream; // A FilterDirectoryStream contains another DirectoryStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileChannel; // A FilterFileChannel contains another FileChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileStore; // A FilterFileStore contains another FileStore, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileSystem; // A FilterFileSystem contains another FileSystem, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterFileSystemProvider; // A FilterFileSystemProvider contains another FileSystemProvider, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterInputStream2; // A FilterInputStream2 contains another InputStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterOutputStream2; // A FilterOutputStream2 contains another OutputStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterPath; // A FilterPath contains another Path, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass FilterSeekableByteChannel; // A FilterSeekableByteChannel contains another SeekableByteChannel, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.\nClass HandleLimitFS; // FileSystem that throws exception if file handles in use exceeds a specified limit.\nClass HandleTrackingFS; // Base class for tracking file handles.\nClass LeakFS; // FileSystem that tracks open handles.\nClass MockFileSystemTestCase; // Base class for testing mockfilesystems.\n", "des": "Support for testing/debugging with virtual filesystems"}
{"index": 3596, "repo": "lucene-test-framework-9.7.0", "code": "package search;\n\npackage search.similarities; // Support for testing similarities.\nClass AssertingIndexSearcher; // Helper class that adds some extra checks to ensure correct usage of IndexSearcher and Weight.\nClass AssertingMatches; // An implementation of Matches with additional consistency checks.\nClass AssertingQuery; // Assertion-enabled query.\nClass AssertingScorable; // Wraps another Scorable and asserts that scores are reasonable and only called when positioned\nClass AssertingScorer; // Wraps a Scorer with additional checks\nClass BaseExplanationTestCase; // Tests primitive queries (ie: that rewrite to themselves) to insure they match the expected set of docs, and that the score of each match is equal to the value of the scores explanation.\nClass BaseRangeFieldQueryTestCase; // Abstract class to do basic tests for a RangeField query.\nClass BaseRangeFieldQueryTestCase.Range; // base class for range verification\nClass BlockScoreQueryWrapper; // Query wrapper that reduces the size of max-score blocks to more easily detect problems with the max-score logic.\nClass BulkScorerWrapperScorer; // A BulkScorer-backed scorer.\nClass CheckHits; // Utility class for asserting expected hits in tests.\nClass CheckHits.ExplanationAsserter; // Asserts that the score explanation for every document matching a query corresponds with the true score.\nClass CheckHits.ExplanationAssertingSearcher; // an IndexSearcher that implicitly checks hte explanation of every match whenever it executes a search.\nClass CheckHits.MatchesAsserter; // Asserts that the Matches from a query is non-null whenever the document its created for is a hit.\nClass CheckHits.SetCollector; // Just collects document ids into a set.\nClass DummyTotalHitCountCollector; // A dummy version of TotalHitCountCollector that doesn't shortcut using Weight.count(org.apache.lucene.index.LeafReaderContext).\nClass FixedBitSetCollector; // Collector that accumulates matching docs in a FixedBitSet\nClass MatchesTestBase; // Base class for tests checking the Weight.matches(LeafReaderContext, int) implementations\nClass MatchesTestBase.TermMatch; // Encapsulates a term position, start and end offset\nClass QueryUtils; // Utility class for sanity-checking queries.\n", "des": "Support for testing search components."}
{"index": 3597, "repo": "lucene-test-framework-9.7.0", "code": "package similarities;\n\nClass AssertingSimilarity; // wraps a similarity with checks for testing\nClass BaseSimilarityTestCase; // Abstract class to do basic tests for a similarity.\nClass RandomSimilarity; // Similarity implementation that randomizes Similarity implementations per-field.\n", "des": "Support for testing similarities."}
{"index": 3598, "repo": "lucene-test-framework-9.7.0", "code": "package store;\n\nClass BaseChunkedDirectoryTestCase; // Base class for Directories that \"chunk\" the input into blocks.\nClass BaseDirectoryTestCase; // Base class for Directory implementations.\nClass BaseDirectoryWrapper; // Calls check index on close.\nClass BaseLockFactoryTestCase; // Base class for per-LockFactory tests.\nClass CorruptingIndexOutput; // Corrupts on bit of a file after close\nClass MockDirectoryWrapper; // This is a Directory Wrapper that adds methods intended to be used only by unit tests.\nClass MockDirectoryWrapper.Failure; // Objects that represent fail-able conditions.\nClass MockIndexInputWrapper; // Used by MockDirectoryWrapper to create an input stream that keeps track of when it's been closed.\nClass MockIndexOutputWrapper; // Used to create an output stream that will throw an IOException on fake disk full, track max disk space actually used, and maybe throw random IOExceptions.\nClass RawDirectoryWrapper; // Delegates all operations, even optional ones, to the wrapped directory.\nEnum MockDirectoryWrapper.Throttling; // Enum for controlling hard disk throttling.\nClass MockDirectoryWrapper.FakeIOException; // Use this when throwing fake IOException, e.g.\n", "des": "Support for testing store mechanisms."}
{"index": 3599, "repo": "lucene-test-framework-9.7.0", "code": "package util;\n\npackage util.automaton; // Support for testing automata.\npackage util.fst; // Support for FST testing.\nInterface LuceneTestCase.ThrowingConsumer<T>; // A Consumer that can throw any checked exception.\nInterface LuceneTestCase.ThrowingRunnable; // A runnable that can throw any checked exception.\nInterface TestRuleIgnoreTestSuites.NestedTestSuite; // Marker interface for nested suites that should be ignored if executed in stand-alone mode.\nClass BaseBitSetTestCase<T extends BitSet>; // Base test case for BitSets.\nClass BaseDocIdSetTestCase<T extends DocIdSet>; // Base test class for DocIdSets.\nClass English; // Converts numbers to english strings for testing.\nClass FailOnNonBulkMergesInfoStream; // Hackidy-Häck-Hack to cause a test to fail on non-bulk merges\nClass FailureMarker; // A RunListener that detects suite/ test failures.\nClass LineFileDocs; // Minimal port of benchmark's LneDocSource + DocMaker, so tests can enum docs from a line file created by benchmark's WriteLineDoc task\nClass LuceneJUnit3MethodProvider; // Backwards compatible test* method provider (public, non-static).\nClass LuceneTestCase; // Base class for all Lucene unit tests, Junit3 or Junit4 variant.\nClass NullInfoStream; // Prints nothing.\nClass QuickPatchThreadsFilter; // Last minute patches.\nClass RamUsageTester; // Crawls object graph to collect RAM usage for testing\nClass RamUsageTester.Accumulator; // An accumulator of object references.\nClass Rethrow; // Sneaky: rethrowing checked exceptions as unchecked ones.\nClass RunListenerPrintReproduceInfo; // A suite listener printing a \"reproduce string\".\nClass StringMockResourceLoader; // Fake resource loader for tests: works if you want to fake reading a single file\nClass TestRuleAssertionsRequired; // Require assertions for Lucene/Solr packages.\nClass TestRuleIgnoreAfterMaxFailures; // This rule keeps a count of failed tests (suites) and will result in an AssumptionViolatedException after a given number of failures for all tests following this condition.\n", "des": "General test support."}
{"index": 3600, "repo": "lucene-test-framework-9.7.0", "code": "package automaton;\n\nClass AutomatonTestUtil; // Utilities for testing automata.\nClass AutomatonTestUtil.RandomAcceptedStrings; // Lets you retrieve random strings accepted by an Automaton.\n", "des": "Support for testing automata."}
{"index": 3601, "repo": "lucene-test-framework-9.7.0", "code": "package fst;\n\nClass FSTTester<T>; // Helper class to test FSTs.\nClass FSTTester.InputOutput<T>; // Holds one input/output pair.\n", "des": "Support for FST testing."}
{"index": 3602, "repo": "lucene-queries-9.7.0", "code": "package queries;\n\npackage queries.function; // Queries that compute score based upon a function.\npackage queries.intervals; // Intervals queries\npackage queries.mlt; // Document similarity query generators.\npackage queries.payloads; // The payloads package provides Query mechanisms for finding and using payloads.\npackage queries.spans; // The calculus of spans.\nClass CommonTermsQuery; // A query that executes high-frequency terms in a optional sub-query to prevent slow queries due to \"common\" terms like stopwords.\n", "des": "Filters and Queries that add to core Lucene."}
{"index": 3603, "repo": "lucene-queries-9.7.0", "code": "package function;\n\npackage function.docvalues; // FunctionValues for different data types.\npackage function.valuesource; // A variety of functions to use with FunctionQuery.\nClass FunctionMatchQuery; // A query that retrieves all documents with a DoubleValues value matching a predicate\nClass FunctionQuery; // Returns a score for each document based on a ValueSource, often some function of the value of a field.\nClass FunctionRangeQuery; // A Query wrapping a ValueSource that matches docs in which the values in the value source match a configured range.\nClass FunctionScoreQuery; // A query that wraps another query, and uses a DoubleValuesSource to replace or modify the wrapped query's score\nClass FunctionValues; // Represents field values as different types.\nClass FunctionValues.ValueFiller; // Abstraction of the logic required to fill the value of a specified doc into a reusable MutableValue.\nClass IndexReaderFunctions; // Class exposing static helper methods for generating DoubleValuesSource instances over some IndexReader statistics\nClass ValueSource; // Instantiates FunctionValues for a particular reader.\nClass ValueSourceScorer; // Scorer which returns the result of FunctionValues.floatVal(int) as the score for a document, and which filters out documents that don't match ValueSourceScorer.matches(int).\n", "des": "Queries that compute score based upon a function."}
{"index": 3604, "repo": "lucene-queries-9.7.0", "code": "package docvalues;\n\nClass BoolDocValues; // Abstract FunctionValues implementation which supports retrieving boolean values.\nClass DocTermsIndexDocValues; // Serves as base class for FunctionValues based on DocTermsIndex.\nClass DoubleDocValues; // Abstract FunctionValues implementation which supports retrieving double values.\nClass FloatDocValues; // Abstract FunctionValues implementation which supports retrieving float values.\nClass IntDocValues; // Abstract FunctionValues implementation which supports retrieving int values.\nClass LongDocValues; // Abstract FunctionValues implementation which supports retrieving long values.\nClass StrDocValues; // Abstract FunctionValues implementation which supports retrieving String values.\nClass DocTermsIndexDocValues.DocTermsIndexException; // Custom Exception to be thrown when the DocTermsIndex for a field cannot be generated\n", "des": "FunctionValues for different data types."}
{"index": 3605, "repo": "lucene-queries-9.7.0", "code": "package valuesource;\n\nClass BoolFunction; // Abstract parent class for those ValueSource implementations which apply boolean logic to their values\nClass ByteKnnVectorFieldSource; // An implementation for retrieving FunctionValues instances for byte knn vectors fields.\nClass BytesRefFieldSource; // An implementation for retrieving FunctionValues instances for string based fields.\nClass ByteVectorSimilarityFunction; // ByteVectorSimilarityFunction returns a similarity function between two knn vectors with byte elements.\nClass ComparisonBoolFunction; // Base class for comparison operators useful within an \"if\"/conditional.\nClass ConstKnnByteVectorValueSource; // Function that returns a constant byte vector value for every document.\nClass ConstKnnFloatValueSource; // Function that returns a constant float vector value for every document.\nClass ConstNumberSource; // ConstNumberSource is the base class for all constant numbers\nClass ConstValueSource; // ConstValueSource returns a constant for all documents\nClass DefFunction; // ValueSource implementation which only returns the values from the provided ValueSources which are available for a particular docId.\nClass DivFloatFunction; // Function to divide \"a\" by \"b\"\nClass DocFreqValueSource; // DocFreqValueSource returns the number of documents containing the term.\nClass DoubleConstValueSource; // Function that returns a constant double value for every document.\nClass DoubleFieldSource; // Obtains double field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass DualFloatFunction; // Abstract ValueSource implementation which wraps two ValueSources and applies an extendible float function to their values.\nClass EnumFieldSource; // Obtains int field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass FieldCacheSource; // A base class for ValueSource implementations that retrieve values for a single field from DocValues.\nClass FloatFieldSource; // Obtains float field values from LeafReader.getNumericDocValues(java.lang.String) and makes those values available as other numeric types, casting as needed.\nClass FloatKnnVectorFieldSource; // An implementation for retrieving FunctionValues instances for float knn vectors fields.\nClass FloatVectorSimilarityFunction; // FloatVectorSimilarityFunction returns a similarity function between two knn vectors with float elements.\n", "des": "A variety of functions to use with FunctionQuery."}
{"index": 3606, "repo": "lucene-queries-9.7.0", "code": "package intervals;\n\nInterface IntervalMatchesIterator; // An extension of MatchesIterator that allows it to be treated as an IntervalIterator\nClass FilteredIntervalsSource; // An IntervalsSource that filters the intervals from another IntervalsSource\nClass IntervalFilter; // Wraps an IntervalIterator and passes through those intervals that match the IntervalFilter.accept() function\nClass IntervalIterator; // A DocIdSetIterator that also allows iteration over matching intervals in a document.\nClass IntervalQuery; // A query that retrieves documents containing intervals returned from an IntervalsSource\nClass Intervals; // Factory functions for creating interval sources.\nClass IntervalsSource; // A helper class for IntervalQuery that provides an IntervalIterator for a given field and segment\n", "des": "Intervals queries"}
{"index": 3607, "repo": "lucene-queries-9.7.0", "code": "package mlt;\n\nClass MoreLikeThis; // Generate \"more like this\" similarity queries.\nClass MoreLikeThisQuery; // A simple wrapper for MoreLikeThis for use in scenarios where a Query object is required eg in custom QueryParser extensions.\n", "des": "Document similarity query generators."}
{"index": 3608, "repo": "lucene-queries-9.7.0", "code": "package payloads;\n\nInterface PayloadDecoder; // Defines a way of converting payloads to float values, for use by PayloadScoreQuery\nInterface PayloadMatcher; // Defines an interface for testing if two payloads should be consider to match\nClass AveragePayloadFunction; // Calculate the final score as the average score of all payloads seen.\nClass MaxPayloadFunction; // Returns the maximum payload score seen, else 1 if there are no payloads on the doc.\nClass MinPayloadFunction; // Calculates the minimum payload seen\nClass PayloadFunction; // An abstract class that defines a way for PayloadScoreQuery instances to transform the cumulative effects of payload scores for a document.\nClass PayloadMatcherFactory; // Creates a payload matcher object based on a payload type and an operation.\nClass PayloadScoreQuery; // A Query class that uses a PayloadFunction to modify the score of a wrapped SpanQuery\nClass SpanPayloadCheckQuery; // Only return those matches that have a specific payload at the given position.\nClass SumPayloadFunction; // Calculate the final score as the sum of scores of all payloads seen.\nEnum SpanPayloadCheckQuery.MatchOperation; // The payload type.\nEnum SpanPayloadCheckQuery.PayloadType; // The payload type.\n", "des": "The payloads package provides Query mechanisms for finding and using payloads."}
{"index": 3609, "repo": "lucene-queries-9.7.0", "code": "package spans;\n\nInterface SpanCollector; // An interface defining the collection of postings information from the leaves of a Spans\nClass FieldMaskingSpanQuery; // Wrapper to allow SpanQuery objects participate in composite single-field SpanQueries by 'lying' about their search field.\nClass FilterSpans; // A Spans implementation wrapping another spans instance, allowing to filter spans matches easily by implementing FilterSpans.accept(org.apache.lucene.queries.spans.Spans)\nClass NearSpansOrdered; // A Spans that is formed from the ordered subspans of a SpanNearQuery where the subspans do not overlap and have a maximum slop between them.\nClass NearSpansUnordered; // Similar to NearSpansOrdered, but for the unordered case.\nClass SpanContainingQuery; // Keep matches that contain another SpanScorer.\nClass SpanDisiWrapper; // Wrapper used in SpanDisiPriorityQueue.\nClass SpanFirstQuery; // Matches spans near the beginning of a field.\nClass SpanMultiTermQueryWrapper<Q extends MultiTermQuery>; // Wraps any MultiTermQuery as a SpanQuery, so it can be nested within other SpanQuery classes.\nClass SpanMultiTermQueryWrapper.SpanRewriteMethod; // Abstract class that defines how the query is rewritten.\nClass SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite; // A rewrite method that first translates each term into a SpanTermQuery in a BooleanClause.Occur.SHOULD clause in a BooleanQuery, and keeps the scores as computed by the query.\nClass SpanNearQuery; // Matches spans which are near one another.\nClass SpanNearQuery.Builder; // A builder for SpanNearQueries\nClass SpanNotQuery; // Removes matches which overlap with another SpanQuery or which are within x tokens before or y tokens after another SpanQuery.\nClass SpanOrQuery; // Matches the union of its clauses.\nClass SpanPositionCheckQuery; // Base class for filtering a SpanQuery based on the position of a match.\nClass SpanPositionRangeQuery; // Checks to see if the SpanPositionCheckQuery.getMatch() lies between a start and end position\nClass SpanQuery; // Base class for span-based queries.\nClass Spans; // Iterates through combinations of start/end positions per-doc.\nClass SpanScorer; // A basic Scorer over Spans.\n", "des": "The calculus of spans."}
{"index": 3610, "repo": "lucene-suggest-9.7.0", "code": "package spell;\n\nInterface Dictionary; // A simple interface representing a Dictionary.\nInterface StringDistance; // Interface for string distances.\nClass CombineSuggestion; // A suggestion generated by combining one or more original query terms\nClass DirectSpellChecker; // Simple automaton-based spellchecker.\nClass DirectSpellChecker.ScoreTerm; // Holds a spelling correction for internal usage inside DirectSpellChecker.\nClass HighFrequencyDictionary; // HighFrequencyDictionary: terms taken from the given field of a Lucene index, which appear in a number of documents above a given threshold.\nClass JaroWinklerDistance; // Similarity measure for short strings such as person names.\nClass LevenshteinDistance; // Levenshtein edit distance class.\nClass LuceneDictionary; // Lucene Dictionary: terms taken from the given field of a Lucene index.\nClass LuceneLevenshteinDistance; // Damerau-Levenshtein (optimal string alignment) implemented in a consistent way as Lucene's FuzzyTermsEnum with the transpositions option enabled.\nClass NGramDistance; // N-Gram version of edit distance based on paper by Grzegorz Kondrak, \"N-gram similarity and distance\".\nClass PlainTextDictionary; // Dictionary represented by a text file.\nClass SpellChecker; // Spell Checker class (Main class). (initially inspired by the David Spencer code).\nClass SuggestWord; // SuggestWord, used in suggestSimilar method in SpellChecker class.\nClass SuggestWordFrequencyComparator; // Frequency first, then score.\nClass SuggestWordQueue; // Sorts SuggestWord instances\nClass SuggestWordScoreComparator; // Score first, then frequency\nClass WordBreakSpellChecker; // A spell checker whose sole function is to offer suggestions by combining multiple terms into one word and/or breaking terms into multiple words.\nEnum SuggestMode; // Set of strategies for suggesting related terms\nEnum WordBreakSpellChecker.BreakSuggestionSortMethod; // Determines the order to list word break suggestions\n", "des": "Suggest alternate spellings for words."}
{"index": 3611, "repo": "lucene-suggest-9.7.0", "code": "package suggest;\n\npackage suggest.analyzing; // Analyzer based autosuggest.\npackage suggest.document; // Support for document suggestion\npackage suggest.fst; // Finite-state based autosuggest.\npackage suggest.tst; // Ternary Search Tree based autosuggest.\nInterface InputIterator; // Interface for enumerating term,weight,payload triples for suggester consumption; currently only AnalyzingSuggester, FuzzySuggester and AnalyzingInfixSuggester support payloads.\nClass BitsProducer; // A producer of Bits per segment.\nClass BufferedInputIterator; // This wrapper buffers incoming elements.\nClass DocumentDictionary; // Dictionary with terms, weights, payload (optional) and contexts (optional) information taken from stored/indexed fields in a Lucene index.\nClass DocumentValueSourceDictionary; // Dictionary with terms and optionally payload and optionally contexts information taken from stored fields in a Lucene index.\nClass FileDictionary; // Dictionary represented by a text file.\nClass InMemorySorter; // An BytesRefSorter that keeps all the entries in memory.\nClass InputIterator.InputIteratorWrapper; // Wraps a BytesRefIterator as a suggester InputIterator, with all weights set to 1 and carries no payload\nClass Lookup; // Simple Lookup interface for CharSequence suggestions.\nClass Lookup.LookupPriorityQueue; // A PriorityQueue collecting a fixed size of high priority Lookup.LookupResult\nClass Lookup.LookupResult; // Result of a lookup.\nClass SortedInputIterator; // This wrapper buffers incoming elements and makes sure they are sorted based on given comparator.\nClass UnsortedInputIterator; // This wrapper buffers the incoming elements and makes sure they are in random order.\n", "des": "Support for Autocomplete/Autosuggest"}
{"index": 3612, "repo": "lucene-suggest-9.7.0", "code": "package analyzing;\n\nClass AnalyzingInfixSuggester; // Analyzes the input text and then suggests matches based on prefix matches to any tokens in the indexed text.\nClass AnalyzingSuggester; // Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time.\nClass BlendedInfixSuggester; // Extension of the AnalyzingInfixSuggester which transforms the weight after search to take into account the position of the searched term into the indexed text.\nClass FreeTextSuggester; // Builds an ngram model from the text sent to FreeTextSuggester.build(org.apache.lucene.search.suggest.InputIterator) and predicts based on the last grams-1 tokens in the request sent to FreeTextSuggester.lookup(java.lang.CharSequence, boolean, int).\nClass FSTUtil; // Exposes a utility method to enumerate all paths intersecting an Automaton with an FST.\nClass FSTUtil.Path<T>; // Holds a pair (automaton, fst) of states and accumulated output in the intersected machine.\nClass FuzzySuggester; // Implements a fuzzy AnalyzingSuggester.\nClass SuggestStopFilter; // Like StopFilter except it will not remove the last token if that token was not followed by some token separator.\nClass SuggestStopFilterFactory; // Factory for SuggestStopFilter.\nEnum BlendedInfixSuggester.BlenderType; // The different types of blender.\n", "des": "Analyzer based autosuggest."}
{"index": 3613, "repo": "lucene-suggest-9.7.0", "code": "package document;\n\nClass Completion50PostingsFormat; // CompletionPostingsFormat for org.apache.lucene.backward_codecs.lucene50.Lucene50PostingsFormat.\nClass Completion84PostingsFormat; // CompletionPostingsFormat for org.apache.lucene.backward_codecs.lucene84.Lucene84PostingsFormat.\nClass Completion90PostingsFormat; // CompletionPostingsFormat for Lucene90PostingsFormat\nClass CompletionAnalyzer; // Wraps an Analyzer to provide additional completion-only tuning (e.g.\nClass CompletionPostingsFormat; // A PostingsFormat which supports document suggestion based on indexed SuggestFields.\nClass CompletionQuery; // Abstract Query that match documents containing terms with a specified prefix filtered by BitsProducer.\nClass CompletionScorer; // Expert: Responsible for executing the query against an appropriate suggester and collecting the results via a collector.\nClass CompletionsTermsReader; // Holder for suggester and field-level info for a suggest field\nClass CompletionTerms; // Wrapped Terms used by SuggestField and ContextSuggestField to access corresponding suggester and their attributes\nClass CompletionTokenStream; // A ConcatenateGraphFilter but we can set the payload and provide access to config options.\nClass CompletionWeight; // Expert: the Weight for CompletionQuery, used to score and explain these queries.\nClass ContextQuery; // A CompletionQuery that matches documents specified by a wrapped CompletionQuery supporting boosting and/or filtering by specified contexts.\nClass ContextSuggestField; // SuggestField which additionally takes in a set of contexts.\nClass FuzzyCompletionQuery; // A CompletionQuery that match documents containing terms within an edit distance of the specified prefix.\nClass NRTSuggester; // NRTSuggester executes Top N search on a weighted FST specified by a CompletionScorer\nClass PrefixCompletionQuery; // A CompletionQuery which takes an Analyzer to analyze the prefix of the query term.\nClass RegexCompletionQuery; // A CompletionQuery which takes a regular expression as the prefix of the query term.\nClass SuggestField; // Field that indexes a string value and a weight as a weighted completion against a named suggester.\nClass SuggestIndexSearcher; // Adds document suggest capabilities to IndexSearcher.\n", "des": "Support for document suggestion"}
{"index": 3614, "repo": "lucene-suggest-9.7.0", "code": "package fst;\n\nInterface BytesRefSorter; // Collects BytesRef and then allows one to iterate over their sorted order.\nClass ExternalRefSorter; // An implementation of a BytesRefSorter that allows appending BytesRefs to an OfflineSorter and returns a Closeable ExternalRefSorter.ByteSequenceIterator that iterates over sequences stored on disk.\nClass ExternalRefSorter.ByteSequenceIterator; // Iterates over BytesRefs in a file, closes the reader when the iterator is exhausted.\nClass FSTCompletion; // Finite state automata based implementation of \"autocomplete\" functionality.\nClass FSTCompletion.Completion; // A single completion for a given key.\nClass FSTCompletionBuilder; // Finite state automata based implementation of \"autocomplete\" functionality.\nClass FSTCompletionLookup; // An adapter from Lookup API to FSTCompletion.\nClass WFSTCompletionLookup; // Suggester based on a weighted FST: it first traverses the prefix, then walks the n shortest paths to retrieve top-ranked suggestions.\n", "des": "Finite-state based autosuggest."}
{"index": 3615, "repo": "lucene-suggest-9.7.0", "code": "package tst;\n\nClass TernaryTreeNode; // The class creates a TST node.\nClass TSTAutocomplete; // Ternary Search Trie implementation.\nClass TSTLookup; // Suggest implementation based on a Ternary Search Tree\n", "des": "Ternary Search Tree based autosuggest."}
{"index": 3616, "repo": "solr-test-framework-9.3.0", "code": "package solr;\n\npackage solr.analysis; // Factories for Mock analysis classes that can be used in test configurations.\npackage solr.cloud; // Base classes and utilities for creating and testing Solr Cloud clusters.\npackage solr.core; // Factories for Mock classes that can be used in test configurations\npackage solr.embedded; // Classes for running embedded Solr Jetty Servers in tests.\npackage solr.handler; // Concrete implementations of org.apache.solr.request.SolrRequestHandler\npackage solr.search; // Mock classes for testing search.\npackage solr.spelling; // Mock classes for testing spelling.\npackage solr.util; // Misc utilities useful when implementing test cases.\nClass BaseDistributedSearchTestCase; // Helper base class for distributed search test cases\nClass BaseDistributedSearchTestCase.RandDate;\nClass BaseDistributedSearchTestCase.RandVal;\nClass EmbeddedSolrServerTestBase;\nClass JSONTestUtil;\nClass SolrIgnoredThreadsFilter; // This ignores those threads in Solr for which there is no way to clean up after a suite.\nClass SolrJettyTestBase;\nClass SolrTestCase; // All Solr test cases should derive from this class eventually.\nClass SolrTestCaseHS;\nClass SolrTestCaseHS.Client;\nClass SolrTestCaseHS.Client.Tester;\nClass SolrTestCaseHS.ClientProvider;\nClass SolrTestCaseHS.SolrInstance;\nClass SolrTestCaseHS.SolrInstances;\nClass SolrTestCaseJ4; // A junit4 Solr test harness that extends SolrTestCase and, by extension, LuceneTestCase.\nClass SolrTestCaseJ4.BVal;\nClass SolrTestCaseJ4.Doc;\nClass SolrTestCaseJ4.Fld;\nClass SolrTestCaseJ4.FldType;\nClass SolrTestCaseJ4.FVal;\nClass SolrTestCaseJ4.IRange;\nClass SolrTestCaseJ4.IVals;\nClass SolrTestCaseJ4.IValsPercent;\nClass SolrTestCaseJ4.RandomizingCloudHttp2SolrClientBuilder; // A variant of CloudHttp2SolrClient.Builder that will randomize some internal settings.\nClass SolrTestCaseJ4.RandomizingCloudSolrClientBuilder;\nClass SolrTestCaseJ4.SVal;\nClass SolrTestCaseJ4.Vals;\n", "des": "Common base classes for implementing tests."}
{"index": 3617, "repo": "solr-test-framework-9.3.0", "code": "package analysis;\n\nClass MockCharFilterFactory; // Factory for MockCharFilter for testing purposes.\nClass MockTokenFilterFactory; // Factory for MockTokenFilter for testing purposes.\nClass MockTokenizerFactory; // Factory for MockTokenizer for testing purposes.\n", "des": "Factories for Mock analysis classes that can be used in test configurations."}
{"index": 3618, "repo": "solr-test-framework-9.3.0", "code": "package cloud;\n\nClass AbstractBasicDistributedZk2TestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractBasicDistributedZkTestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractChaosMonkeyNothingIsSafeTestBase;\nClass AbstractChaosMonkeySafeLeaderTestBase;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.AllAndReadonlyCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.AllCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.ConnectWithReadonlyCredsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.NoCredentialZkCredentialsInjector;\nClass AbstractDigestZkACLAndCredentialsProvidersTestBase.WrongAllCredentialZkCredentialsInjector;\nClass AbstractDistribZkTestBase;\nClass AbstractFullDistribZkTestBase; // TODO: we should still test this works as a custom update chain as well as what we test now - the default update chain\nClass AbstractFullDistribZkTestBase.CloudJettyRunner;\nClass AbstractFullDistribZkTestBase.CloudSolrServerClient;\nClass AbstractMoveReplicaTestBase;\nClass AbstractRecoveryZkTestBase;\nClass AbstractRestartWhileUpdatingTestBase;\nClass AbstractSyncSliceTestBase; // Test sync phase that occurs when Leader goes down and a new Leader is elected.\nClass AbstractTlogReplayBufferedWhileIndexingTestBase;\nClass AbstractUnloadDistributedZkTestBase; // This test simply does a bunch of basic things in solrcloud mode and asserts things work as expected.\nClass AbstractZkTestCase; // Base test class for ZooKeeper tests.\nClass ChaosMonkey; // The monkey can stop random or specific jetties used with SolrCloud.\nClass CloudInspectUtil;\nClass ConfigRequest; // A class for making a request to the config handler.\nClass IpTables; // To use, tests must be able to run iptables, eg sudo chmod u+s iptables\nClass MiniSolrCloudCluster; // \"Mini\" SolrCloud cluster to be used for testing\n", "des": "Base classes and utilities for creating and testing Solr Cloud clusters."}
{"index": 3619, "repo": "solr-test-framework-9.3.0", "code": "package placement;\n\nClass AttributeFetcherForTest;\nClass Builders; // Builder classes to make tests using different cluster and node configurations easier to write and to read.\nClass Builders.ClusterBuilder;\nClass Builders.CollectionBuilder;\nClass Builders.NodeBuilder;\nClass Builders.ReplicaBuilder;\nClass Builders.ShardBuilder;\n", "des": "Utility classes to test placement plugins."}
{"index": 3620, "repo": "solr-test-framework-9.3.0", "code": "package core;\n\nClass AbstractBadConfigTestBase;\nClass MockDirectoryFactory; // Opens a directory with LuceneTestCase.newDirectory()\nClass MockFSDirectoryFactory; // Opens a directory with LuceneTestCase.newFSDirectory(Path)\nClass MockQuerySenderListenerReqHandler;\nClass TrackingBackupRepository;\n", "des": "Factories for Mock classes that can be used in test configurations"}
{"index": 3621, "repo": "solr-test-framework-9.3.0", "code": "package embedded;\n\nClass JettyConfig;\nClass JettyConfig.Builder;\nClass JettySolrRunner; // Run solr using jetty\nClass JettySolrRunner.DebugFilter;\nClass JettySolrRunner.Servlet404; // This is a stupid hack to give jetty something to attach to\n", "des": "Classes for running embedded Solr Jetty Servers in tests."}
{"index": 3622, "repo": "solr-test-framework-9.3.0", "code": "package handler;\n\npackage handler.component; // Class for tracking shard requests\nClass BackupRestoreUtils;\nClass BackupStatusChecker; // Helper class for validating when the replication handler has finished a backup.\nClass TestRestoreCoreUtil;\n", "des": "Concrete implementations of org.apache.solr.request.SolrRequestHandler"}
{"index": 3623, "repo": "solr-test-framework-9.3.0", "code": "package component;\n\nClass DummyCustomParamSpellChecker; // A Dummy SpellChecker for testing purposes\nClass TrackingShardHandlerFactory; // A ShardHandlerFactory that extends HttpShardHandlerFactory and tracks requests made to nodes/shards such that interested parties can watch such requests and make assertions inside tests\nClass TrackingShardHandlerFactory.RequestTrackingQueue; // A queue having helper methods to select requests by shard and purpose.\nClass TrackingShardHandlerFactory.ShardRequestAndParams;\n", "des": "Class for tracking shard requests"}
{"index": 3624, "repo": "solr-test-framework-9.3.0", "code": "package search;\n\nClass FooQParserPlugin;\n", "des": "Mock classes for testing search."}
{"index": 3625, "repo": "solr-test-framework-9.3.0", "code": "package spelling;\n\nClass SampleComparator; // Comparator for testing purposes\n", "des": "Mock classes for testing spelling."}
{"index": 3626, "repo": "solr-test-framework-9.3.0", "code": "package processor;\n\nClass BufferingRequestProcessor;\nClass RecordingUpdateProcessorFactory; // This Factory can optionally save references to the commands it receives in BlockingQueues that tests can poll from to observe that the expected commands are executed.\nClass TrackingUpdateProcessorFactory; // This Factory is similar to RecordingUpdateProcessorFactory, but with the goal of tracking requests across multiple collections/shards/replicas in a SolrCloudTestCase.\nClass UpdateProcessorTestBase;\n", "des": "Mock classes for testing Update Processor chains."}
{"index": 3627, "repo": "solr-test-framework-9.3.0", "code": "package util;\n\nInterface RESTfulServerProvider;\nClass BadZookeeperThreadsFilter;\nClass BaseTestHarness;\nClass DirectoryUtil;\nClass DOMUtilTestBase;\nClass EmbeddedSolrServerTestRule; // Provides an EmbeddedSolrServer for tests.\nClass ErrorLogMuter; // Helper code for \"Muting\" ERROR log messages that you expect as a result of the things you are testing, so they aren't a distraction in test logs.\nClass ExternalPaths; // Some tests need to reach outside the classpath to get certain resources (e.g.\nClass LogLevel.Configurer;\nClass LogListener; // Helper code to listen for LogEvent messages (via a Queue) that you expect as a result of the things you are testing, So you can make assertions about when a particular action should/shouldn't cause Solr to produce a particular Log message\nClass MockCoreContainer;\nClass MockCoreContainer.MockCoreDescriptor;\nClass NotSecurePseudoRandomSpi; // A mocked up instance of SecureRandom that just uses Random under the covers.\nClass QueryMatchers;\nClass RandomForceMergePolicy; // A MergePolicy with a no-arg constructor that proxies to a ForceMergePolicy wrapped instance retrieved from LuceneTestCase.newMergePolicy(java.util.Random).\nClass RandomForceMergePolicyFactory; // A MergePolicyFactory for RandomForceMergePolicy.\nClass RandomizeSSL.SSLRandomizer; // A simple data structure for encapsulating the effective values to be used when randomizing SSL in a test, based on the configured values in the RandomizeSSL annotation.\nClass RandomMergePolicy; // A MergePolicy with a no-arg constructor that proxies to an instance retrieved from LuceneTestCase.newMergePolicy(java.util.Random).\nClass RandomMergePolicyFactory; // A MergePolicyFactory for RandomMergePolicy.\nClass ReadOnlyCoresLocator;\nClass RestTestBase;\nClass RestTestHarness; // Facilitates testing Solr's REST API via a provided embedded Jetty\nClass RevertDefaultThreadHandlerRule;\nClass SolrClientTestRule; // Provides access to a SolrClient instance and a running Solr in tests.\nClass SolrTestNonSecureRandomProvider;\n", "des": "Misc utilities useful when implementing test cases."}
{"index": 3628, "repo": "lucene-misc-9.7.0", "code": "package misc;\n\npackage misc.document; // Misc extensions of the Document/Field API.\npackage misc.index; // Misc index tools and index support.\npackage misc.search; // Misc search implementations.\npackage misc.store; // Misc Directory implementations.\npackage misc.util; // Memory Tracker interface which allows defining custom collector level memory trackers\nClass CollectorMemoryTracker; // Default implementation of MemoryTracker that tracks allocations and allows setting a memory limit per collector\nClass GetTermInfo; // Utility to get document frequency and total number of occurrences (sum of the tf for each doc) of a term.\nClass HighFreqTerms; // HighFreqTerms class extracts the top n most frequent terms (by document frequency) from an existing Lucene index and reports their document frequency.\nClass HighFreqTerms.DocFreqComparator; // Compares terms by docTermFreq\nClass HighFreqTerms.TotalTermFreqComparator; // Compares terms by totalTermFreq\nClass IndexMergeTool; // Merges indices specified on the command line into the index specified as the first command line argument.\nClass SweetSpotSimilarity; // A similarity with a lengthNorm that provides for a \"plateau\" of equally good lengths, and tf helper functions.\nClass TermStats; // Holder for a term along with its statistics (TermStats.docFreq and TermStats.totalTermFreq).\n", "des": "Miscellaneous Lucene utilities that don't really fit anywhere else."}
{"index": 3629, "repo": "lucene-misc-9.7.0", "code": "package document;\n\nClass LazyDocument; // Defers actually loading a field's value until you ask for it.\n", "des": "Misc extensions of the Document/Field API."}
{"index": 3630, "repo": "lucene-misc-9.7.0", "code": "package index;\n\nInterface IndexRearranger.DocumentSelector; // Select document within a CodecReader\nClass BinaryDocValueSelector; // Select documents using binary doc values\nClass IndexRearranger; // Copy and rearrange index according to document selectors, from input dir to output dir.\nClass IndexSplitter; // Command-line tool that enables listing segments in an index, copying specific segments to another index, and deleting segments from an index.\nClass MultiPassIndexSplitter; // This tool splits input index into multiple equal parts.\nClass PKIndexSplitter; // Split an index based on a Query.\n", "des": "Misc index tools and index support."}
{"index": 3631, "repo": "lucene-misc-9.7.0", "code": "package search;\n\nClass DiversifiedTopDocsCollector; // A TopDocsCollector that controls diversity in results by ensuring no more than maxHitsPerKey results from a common source are collected in the final results.\nClass DiversifiedTopDocsCollector.ScoreDocKey; // An extension to ScoreDoc that includes a key used for grouping purposes\nClass DocValuesStats<T>; // Holds statistics for a DocValues field.\nClass DocValuesStats.DoubleDocValuesStats; // Holds DocValues statistics for a numeric field storing double values.\nClass DocValuesStats.LongDocValuesStats; // Holds DocValues statistics for a numeric field storing long values.\nClass DocValuesStats.NumericDocValuesStats<T extends Number>; // Holds statistics for a numeric DocValues field.\nClass DocValuesStats.SortedDocValuesStats; // Holds statistics for a sorted DocValues field.\nClass DocValuesStats.SortedDoubleDocValuesStats; // Holds DocValues statistics for a sorted-numeric field storing double values.\nClass DocValuesStats.SortedLongDocValuesStats; // Holds DocValues statistics for a sorted-numeric field storing long values.\nClass DocValuesStats.SortedNumericDocValuesStats<T extends Number>; // Holds statistics for a sorted-numeric DocValues field.\nClass DocValuesStats.SortedSetDocValuesStats; // Holds statistics for a sorted-set DocValues field.\nClass DocValuesStatsCollector; // A Collector which computes statistics for a DocValues field.\nClass MemoryAccountingBitsetCollector; // Bitset collector which supports memory tracking\n", "des": "Misc search implementations."}
{"index": 3632, "repo": "lucene-misc-9.7.0", "code": "package store;\n\nClass ByteTrackingIndexOutput; // An IndexOutput that wraps another instance and tracks the number of bytes written\nClass ByteWritesTrackingDirectoryWrapper; // FilterDirectory that tracks write amplification factor\nClass DirectIODirectory; // A Directory implementation for all Unixes and Windows that uses DIRECT I/O to bypass OS level IO caching during merging.\nClass HardlinkCopyDirectoryWrapper; // This directory wrapper overrides Directory.copyFrom(Directory, String, String, IOContext) in order to optionally use a hard-link instead of a full byte by byte file copy if applicable.\nClass RAFDirectory; // A straightforward implementation of FSDirectory using java.io.RandomAccessFile.\n", "des": "Misc Directory implementations."}
{"index": 3633, "repo": "lucene-misc-9.7.0", "code": "package util;\n\npackage util.fst; // Misc FST classes.\nInterface MemoryTracker; // Tracks dynamic allocations/deallocations of memory for transient objects\n", "des": "Memory Tracker interface which allows defining custom collector level memory trackers"}
{"index": 3634, "repo": "lucene-misc-9.7.0", "code": "package fst;\n\nClass ListOfOutputs<T>; // Wraps another Outputs implementation and encodes one or more of its output values.\nClass UpToTwoPositiveIntOutputs; // An FST Outputs implementation where each output is one or two non-negative long values.\nClass UpToTwoPositiveIntOutputs.TwoLongs; // Holds two long outputs.\n", "des": "Misc FST classes."}
{"index": 3635, "repo": "solr-core-9.3.0", "code": "package analysis;\n\nClass LowerCaseTokenizer;\nClass LowerCaseTokenizerFactory;\nClass ReversedWildcardFilter; // This class produces a special form of reversed tokens, suitable for better handling of leading wildcards.\nClass ReversedWildcardFilterFactory; // Factory for ReversedWildcardFilter-s.\nClass SolrAnalyzer;\nClass TokenizerChain; // An analyzer that uses a tokenizer and a list of token filters to create a TokenStream.\n", "des": "Factories and classes specific to text analysis and the creation of TokenStreams"}
{"index": 3636, "repo": "solr-core-9.3.0", "code": "package api;\n\nInterface ApiSupport; // The interface that is implemented by a request handler to support the V2 end point\nInterface ConfigurablePlugin<T extends org.apache.solr.common.MapWriter>; // Implement this interface if your plugin needs to accept some configuration\nInterface ContainerPluginsRegistry.PluginRegistryListener; // Listener for notifications about added / deleted / modified plugins.\nClass AnnotatedApi; // This class implements an Api just from an annotated java class The class must have an annotation EndPoint Each method must have an annotation Command The methods that implement a command should have the first 2 parameters SolrQueryRequest and SolrQueryResponse or it may optionally have a third parameter which could be a java class annotated with jackson annotations.\nClass Api; // Every version 2 API must extend the this class.\nClass ApiBag;\nClass ApiBag.IntrospectApi;\nClass ApiBag.LazyLoadedApi;\nClass ApiBag.ReqHandlerToApi;\nClass ContainerPluginsRegistry; // This class manages the container-level plugins and their Api-s.\nClass CoordinatorV2HttpSolrCall;\nClass JerseyResource; // A marker parent type for all Jersey \"resource\" classes.\nClass PayloadObj<T>; // Holds the deserialized object for each command and also holds request , response objects\nClass V2HttpCall;\nClass V2HttpCall.CompositeApi;\nEnum ContainerPluginsRegistry.Diff;\nClass ApiBag.ExceptionWithErrObject;\nAnnotation Type Command;\nAnnotation Type EndPoint;\n", "des": "Commonly used classes for Solr V2 API."}
{"index": 3637, "repo": "solr-core-9.3.0", "code": "package cli;\n\nInterface CLIO;\nInterface Tool;\nClass ApiTool;\nClass AssertTool; // Asserts various conditions and exists with error code if fails, else continues with no output\nClass AuthTool;\nClass ConfigSetDownloadTool;\nClass ConfigSetUploadTool;\nClass ConfigTool; // Sends a POST to the Config API to perform a specified action.\nClass CreateCollectionTool; // Supports create_collection command in the bin/solr script.\nClass CreateCoreTool;\nClass CreateTool;\nClass DeleteTool;\nClass ExportTool;\nClass ExportTool.Info;\nClass HealthcheckTool;\nClass PackageTool;\nClass RunExampleTool; // Supports an interactive session with the user to launch (or relaunch the -e cloud example)\nClass SimplePostTool; // A simple utility class for posting raw updates to a Solr server.\nClass SimplePostTool.BAOS;\nClass SimplePostTool.PageFetcherResult; // Utility class to hold the result form a page fetch\nClass SolrCLI; // Command-line utility for working with Solr.\nClass SolrLogPostTool; // A command line tool for indexing Solr logs in the out-of-the-box log format.\nClass SolrLogPostTool.LogRecordReader;\nClass StatusTool;\nClass ToolBase;\nClass ZkCpTool;\nClass ZkLsTool;\nClass ZkMkrootTool;\nClass ZkMvTool;\nClass ZkRmTool;\nClass SolrCLI.AssertionFailureException;\n", "des": "Solr Command Line Interface classes"}
{"index": 3638, "repo": "solr-core-9.3.0", "code": "package embedded;\n\nClass EmbeddedSolrServer; // SolrClient that connects directly to a CoreContainer.\nEnum EmbeddedSolrServer.RequestWriterSupplier;\n", "des": "SolrJ client implementations for embedded solr access."}
{"index": 3639, "repo": "solr-core-9.3.0", "code": "package cloud;\n\npackage cloud.overseer; // Classes for updating cluster state in SolrCloud mode.\nInterface ClusterSingleton; // Intended for components that should be enabled only one instance per cluster.\nInterface DistributedCollectionLockFactory;\nInterface DistributedConfigSetLockFactory;\nInterface DistributedLock; // A lock that can be used across cluster nodes.\nInterface Overseer.Message;\nInterface OverseerMessageHandler; // Interface for processing messages received by an OverseerTaskProcessor\nInterface OverseerMessageHandler.Lock;\nInterface OverseerTaskProcessor.OverseerMessageHandlerSelector; // An interface to determine which OverseerMessageHandler handles a given message.\nInterface RecoveryStrategy.RecoveryListener;\nClass ActionThrottle;\nClass ActiveReplicaWatcher; // Watch for replicas to become Replica.State.ACTIVE.\nClass CloudDescriptor; // SolrCloud metadata attached to a CoreDescriptor.\nClass CloudUtil;\nClass ConfigSetApiLockFactory; // This class implements a higher level locking abstraction for the Config Set API using lower level read and write locks.\nClass ConfigSetCmds; // This class contains methods dealing with Config Sets and called for Config Set API execution, called from the OverseerConfigSetMessageHandler or from DistributedCollectionConfigSetCommandRunner.runConfigSetCommand(org.apache.solr.response.SolrQueryResponse, org.apache.solr.common.params.ConfigSetParams.ConfigSetAction, java.util.Map<java.lang.String, java.lang.Object>, long) depending on whether Collection and Config Set APIs are Overseer based or distributed.\nClass DistributedApiAsyncTracker; // Class holding the implementation required for tracking asynchronous Collection API (or other) tasks when the Collection API is distributed.\nClass DistributedClusterStateUpdater; // Gives access to distributed cluster state update methods and allows code to inquire whether distributed state update is enabled.\nClass DistributedClusterStateUpdater.StateChangeRecorder; // Class handling the distributed updates of collection's Zookeeper files state.json based on multiple updates applied to a single collection (as is sometimes done by *Cmd classes implementing the Collection API commands).\nClass DistributedMap; // A distributed map.\nClass DistributedMultiLock; // A lock as acquired for running a single API command (Collection or Config Set or anything else in the future).\nClass ElectionContext;\nClass LeaderElector; // Leader Election process.\n", "des": "Classes for dealing with ZooKeeper when operating in SolrCloud mode."}
{"index": 3640, "repo": "solr-core-9.3.0", "code": "package collections;\n\nInterface Assign.AssignStrategy; // Strategy for assigning replicas to nodes.\nInterface CollApiCmds.CollectionApiCommand; // Interface implemented by all Collection API commands.\nInterface CollectionCommandContext; // Data passed to Collection API command execution, to allow calls from either the OverseerCollectionMessageHandler when commands are executed on the Overseer, or - in a future change - allow Collection API commands to be executed in a distributed way, unrelated to and not depending upon Overseer abstractions (including overseer collection message handling).\nClass AddReplicaCmd;\nClass AddReplicaCmd.CreateReplica; // A data structure to keep all information required to create a new replica in one place.\nClass Assign;\nClass Assign.AssignRequest;\nClass Assign.AssignRequestBuilder;\nClass BackupCmd;\nClass BalanceReplicasCmd;\nClass CategoryRoutedAlias;\nClass CollApiCmds; // This class contains \"smaller\" Collection API commands implementation, the interface implemented by all commands and the class mapping a collection action to the actual command.\nClass CollApiCmds.AddReplicaPropCmd;\nClass CollApiCmds.BalanceShardsUniqueCmd;\nClass CollApiCmds.CommandMap; // Map CollectionParams.CollectionAction to instances of CollApiCmds.CollectionApiCommand and being usable by both OverseerCollectionMessageHandler and DistributedCollectionConfigSetCommandRunner so that the mappings do not have to be maintained in two places.\nClass CollApiCmds.DeleteReplicaPropCmd;\nClass CollApiCmds.MockOperationCmd;\nClass CollApiCmds.ModifyCollectionCmd;\nClass CollApiCmds.RebalanceLeadersCmd;\nClass CollApiCmds.ReloadCollectionCmd;\nClass CollectionApiLockFactory; // This class implements a higher level locking abstraction for the Collection API using lower level read and write locks.\nClass CollectionHandlingUtils; // This class contains helper methods used by commands of the Collection API.\nClass CollectionHandlingUtils.ShardRequestTracker;\nClass CreateAliasCmd;\nClass CreateCollectionCmd;\nClass CreateShardCmd;\nClass CreateSnapshotCmd; // This class implements the functionality of creating a collection level snapshot.\nClass DeleteAliasCmd;\nClass DeleteBackupCmd; // An overseer command used to delete files associated with incremental backups.\nClass DeleteCollectionCmd;\nClass DeleteNodeCmd;\nClass DeleteReplicaCmd;\n", "des": "Package related to internal implementations of the SolrCloud collections api"}
{"index": 3641, "repo": "solr-core-9.3.0", "code": "package overseer;\n\nInterface ZkStateWriter.ZkWriteCallback;\nClass ClusterStateMutator;\nClass CollectionMutator;\nClass NodeMutator;\nClass ReplicaMutator;\nClass SliceMutator;\nClass ZkStateWriter; // ZkStateWriter is responsible for writing updates to the cluster state stored in ZooKeeper for collections each of which gets their own individual state.json in ZK.\nClass ZkWriteCommand;\nEnum OverseerAction; // Enum of actions supported by the overseer only.\n", "des": "Classes for updating cluster state in SolrCloud mode."}
{"index": 3642, "repo": "solr-core-9.3.0", "code": "package cluster;\n\npackage cluster.events; // Interfaces defining support for cluster-level event generation and processing.\npackage cluster.placement; // This package contains interfaces visible by plugins (i.e.\nInterface Cluster; // A representation of the SolrCloud cluster state, providing information on which nodes and collections are part of the cluster and a way to get to more detailed info.\nInterface Node; // Representation of a SolrCloud node or server in the SolrCloud cluster.\nInterface Replica; // An instantiation (or one of the copies) of a given Shard of a given SolrCollection.\nInterface Shard; // Shard in a SolrCollection, i.e.\nInterface SolrCollection; // Represents a Collection in SolrCloud (unrelated to Collection that uses the nicer name).\nEnum Replica.ReplicaState;\nEnum Replica.ReplicaType; // The order of this enum is important from the most to least \"important\" replica type.\nEnum Shard.ShardState;\n", "des": "This package contains the interfaces giving access to cluster state, including nodes, collections and the structure of the collections (shards and replicas)."}
{"index": 3643, "repo": "solr-core-9.3.0", "code": "package events;\n\npackage events.impl; // Default implementation of ClusterEventProducer.\nInterface ClusterEvent; // Cluster-level event.\nInterface ClusterEventListener; // Components that want to be notified of cluster-wide events should use this.\nInterface ClusterEventProducer; // Component that produces ClusterEvent instances.\nInterface ClusterPropertiesChangedEvent; // Event generated when ZkStateReader.CLUSTER_PROPS is modified.\nInterface CollectionsAddedEvent; // Event generated when some collections have been added.\nInterface CollectionsRemovedEvent; // Event generated when some collections have been removed.\nInterface NodesDownEvent; // Event generated when some nodes went down.\nInterface NodesUpEvent; // Event generated when some nodes went up.\nClass ClusterEventProducerBase; // Base class for implementing ClusterEventProducer.\nClass NoOpProducer; // No-op implementation of ClusterEventProducer.\nEnum ClusterEvent.EventType;\n", "des": "Interfaces defining support for cluster-level event generation and processing."}
{"index": 3644, "repo": "solr-core-9.3.0", "code": "package impl;\n\nClass ClusterEventProducerFactory; // This class helps in handling the initial registration of plugin-based listeners, when both the final ClusterEventProducer implementation and listeners are configured using plugins.\nClass CollectionsRepairEventListener; // This is an illustration how to re-implement the combination of Solr 8x NodeLostTrigger and AutoAddReplicasPlanAction to maintain the collection's replicas when nodes are lost.\nClass DefaultClusterEventProducer; // Implementation of ClusterEventProducer.\nClass DelegatingClusterEventProducer; // This implementation allows Solr to dynamically change the underlying implementation of ClusterEventProducer in response to the changed plugin configuration.\n", "des": "Default implementation of ClusterEventProducer."}
{"index": 3645, "repo": "solr-core-9.3.0", "code": "package placement;\n\npackage placement.impl; // Implementation classes (not visible to plugins, subject to change at any time) for the interfaces in org.apache.solr.cluster.placement and to make them work with the rest of Solr.\npackage placement.plugins; // Sample plugin implementations.\nInterface AttributeFetcher; // Instances of this interface are used to fetch various attributes from nodes (and other sources) in the cluster.\nInterface AttributeValues;\nInterface BalancePlan; // A fully specified plan or instructions for replica balancing to be applied to the cluster.\nInterface BalancePlanFactory; // Allows plugins to create BalancePlans telling the Solr layer how to balance replicas following the processing of a BalanceRequest.\nInterface BalanceRequest; // A cluster related placement request that Solr asks a PlacementPlugin to resolve and compute replica balancing plan for replicas that already exist across a set of Nodes.\nInterface CollectionMetrics; // Collection-level metrics.\nInterface DeleteCollectionRequest; // Delete collection request.\nInterface DeleteReplicasRequest; // Delete replicas request.\nInterface DeleteShardsRequest; // Delete shards request.\nInterface Metric<T>; // Metric-related attribute of a node or replica.\nInterface ModificationRequest; // Collection modification request.\nInterface NodeMetric<T>; // Node metric identifier, corresponding to a node-level metric registry and the internal metric name.\nInterface PlacementContext; // Placement context makes it easier to pass around and access main placement-related components.\nInterface PlacementPlan; // A fully specified plan or instructions for placement, deletion or move to be applied to the cluster.\nInterface PlacementPlanFactory; // Allows plugins to create PlacementPlans telling the Solr layer where to create replicas following the processing of a PlacementRequest.\nInterface PlacementPlugin; // Implemented by external plugins to control replica placement and movement on the search cluster (as well as other things such as cluster elasticity?) when cluster changes are required (initiated elsewhere, most likely following a Collection API call).\nInterface PlacementPluginConfig; // Configuration beans should use this interface to define public (mutable) configuration properties.\nInterface PlacementPluginFactory<T extends PlacementPluginConfig>; // Factory implemented by client code and configured in container plugins (see ContainerPluginsApi.editAPI) allowing the creation of instances of PlacementPlugin to be used for replica placement computation.\n", "des": "This package contains interfaces visible by plugins (i.e."}
{"index": 3646, "repo": "solr-core-9.3.0", "code": "package impl;\n\nClass AttributeFetcherImpl; // Implementation of AttributeFetcher that uses SolrCloudManager to access Solr cluster details.\nClass AttributeValuesImpl; // Implementation of AttributeValues used by AttributeFetcherImpl.\nClass BalancePlanFactoryImpl; // Simple implementation of BalancePlanFactory.\nClass BalanceRequestImpl;\nClass CollectionMetricsBuilder; // Builder class for constructing instances of CollectionMetrics.\nClass CollectionMetricsBuilder.ReplicaMetricsBuilder;\nClass CollectionMetricsBuilder.ShardMetricsBuilder;\nClass DelegatingPlacementPluginFactory; // Helper class to support dynamic reloading of plugin implementations.\nClass MetricImpl<T>; // Base class for Metric implementations.\nClass ModificationRequestImpl; // Helper class to create modification request instances.\nClass NodeMetricImpl<T>; // Node metric identifier, corresponding to a node-level metric registry and the internal metric name.\nClass PlacementPlanFactoryImpl; // Simple implementation of PlacementPlanFactory.\nClass PlacementPluginAssignStrategy; // This assign strategy delegates placement computation to \"plugin\" code.\nClass PlacementPluginFactoryLoader; // Utility class to load the configured PlacementPluginFactory plugin and then keep it up to date as the plugin configuration changes.\nClass PlacementRequestImpl;\nClass ReplicaMetricImpl<T>; // Replica metric identifier, corresponding to one of the internal replica-level metric names (as reported in solr.core.[collection].[replica] registry)\nClass SimplePlacementContextImpl; // Implementation of PlacementContext that uses SimpleClusterAbstractionsImpl to create components necessary for the placement plugins to use.\n", "des": "Implementation classes (not visible to plugins, subject to change at any time) for the interfaces in org.apache.solr.cluster.placement and to make them work with the rest of Solr."}
{"index": 3647, "repo": "solr-core-9.3.0", "code": "package plugins;\n\nClass AffinityPlacementConfig; // Configuration bean for AffinityPlacementFactory.\nClass AffinityPlacementFactory; // This factory is instantiated by config from its class name.\nClass MinimizeCoresPlacementFactory; // Factory for creating MinimizeCoresPlacementFactory.MinimizeCoresPlacementPlugin, a Placement plugin implementing placing replicas to minimize number of cores per Node, while not placing two replicas of the same shard on the same node.\nClass OrderedNodePlacementPlugin;\nClass OrderedNodePlacementPlugin.WeightedNode; // A class that determines the weight of a given node and the replicas that reside on it.\nClass RandomPlacementFactory; // Factory for creating RandomPlacementFactory.RandomPlacementPlugin, a placement plugin implementing random placement for new collection creation while preventing two replicas of same shard from being placed on same node..\nClass RandomPlacementFactory.RandomPlacementPlugin;\nClass SimplePlacementFactory; // Factory for creating SimplePlacementFactory.SimplePlacementPlugin, a placement plugin implementing the logic from the old LegacyAssignStrategy.\nClass SimplePlacementFactory.SimplePlacementPlugin;\n", "des": "Sample plugin implementations."}
{"index": 3648, "repo": "solr-core-9.3.0", "code": "package core;\n\npackage core.backup; // Core classes for Solr's Backup/Restore functionality\npackage core.snapshots; // Core classes for Solr's persistent snapshots functionality\nInterface BlobRepository.Decoder<T>;\nInterface CachingDirectoryFactory.CloseListener;\nInterface CloseHook; // Used to request notification when the core is closed.\nInterface ConfigSetService.ConfigResource;\nInterface CoresLocator; // Manage the discovery and persistence of core definitions across Solr restarts\nInterface Diagnostics.Callable;\nInterface ShutdownAwareDirectory; // CachingDirectoryFactory will call this method rather than Directory.close() on shutdown if a Directory implements this interface.\nInterface SolrCore.RawWriter;\nInterface SolrEventListener;\nInterface SolrInfoBean; // Interface for getting various ui friendly strings for use by objects which are 'pluggable' to make server administration easier.\nClass AbstractSolrEventListener;\nClass BlobRepository; // The purpose of this class is to store the Jars loaded in memory and to keep only one copy of the Jar in a single node.\nClass BlobRepository.BlobContent<T>;\nClass BlobRepository.BlobContentRef<T>;\nClass ByteBuffersDirectoryFactory; // Factory to instantiate ByteBuffersDirectory\nClass CachingDirectoryFactory; // A DirectoryFactory impl base class for caching Directory instances per path.\nClass CachingDirectoryFactory.CacheValue;\nClass CancellableQueryTracker; // Tracks metadata for active queries and provides methods for access\nClass CloudConfig;\nClass CloudConfig.CloudConfigBuilder;\nClass ClusterSingletons; // Helper class to manage the initial registration of ClusterSingleton plugins and to track the changes in loaded plugins in ContainerPluginsRegistry.\nClass CodecFactory; // Factory for plugging in a custom Codec\nClass ConfigOverlay; // This class encapsulates the config overlay json file.\nClass ConfigSet; // Stores a core's configuration in the form of a SolrConfig and IndexSchema.\nClass ConfigSetProperties; // Utility methods for reading configSet properties.\nClass ConfigSetService; // Service class used by the CoreContainer to load ConfigSets for use in SolrCore creation.\nClass CoreContainer;\nClass CoreContainer.CoreLoadFailure;\nClass CoreDescriptor; // Metadata about a SolrCore.\nClass CorePropertiesLocator; // Persists CoreDescriptors as properties files\n", "des": "Core classes implementing Solr internals and the management of SolrCores"}
{"index": 3649, "repo": "solr-core-9.3.0", "code": "package backup;\n\npackage backup.repository; // BackupRepository Providing backup/restore repository interfaces to plug different storage systems\nClass AggregateBackupStats; // Aggregate stats from multiple ShardBackupMetadata\nClass BackupFilePaths; // Utility class for getting paths related to backups, or parsing information out of those paths.\nClass BackupId; // Represents the ID of a particular backup.\nClass BackupManager; // This class implements functionality to create a backup with extension points provided to integrate with different types of file-systems.\nClass BackupProperties; // Represents a backup[-*].properties file, responsible for holding whole-collection and whole-backup metadata.\nClass Checksum; // Represents checksum information for an index file being backed up.\nClass ShardBackupId; // Represents the ID of a particular backup point for a particular shard.\nClass ShardBackupMetadata; // Represents the shard-backup metadata file.\nClass ShardBackupMetadata.BackedFile;\n", "des": "Core classes for Solr's Backup/Restore functionality"}
{"index": 3650, "repo": "solr-core-9.3.0", "code": "package repository;\n\nInterface BackupRepository; // This interface defines the functionality required to backup/restore Solr indexes to an arbitrary storage system.\nClass BackupRepositoryFactory;\nClass LocalFileSystemRepository; // A concrete implementation of BackupRepository interface supporting backup/restore of Solr indexes to a local file-system.\nEnum BackupRepository.PathType; // This enumeration defines the type of a given path.\n", "des": "BackupRepository Providing backup/restore repository interfaces to plug different storage systems"}
{"index": 3651, "repo": "solr-core-9.3.0", "code": "package snapshots;\n\nClass CollectionSnapshotMetaData; // This class defines the meta-data about a collection level snapshot\nClass CollectionSnapshotMetaData.CoreSnapshotMetaData;\nClass SolrSnapshotManager; // This class provides functionality required to handle the data files corresponding to Solr snapshots.\nClass SolrSnapshotMetaDataManager; // This class is responsible to manage the persistent snapshots meta-data for the Solr indexes.\nClass SolrSnapshotMetaDataManager.SnapshotMetaData; // A class defining the meta-data for a specific snapshot.\nEnum CollectionSnapshotMetaData.SnapshotStatus;\n", "des": "Core classes for Solr's persistent snapshots functionality"}
{"index": 3652, "repo": "solr-core-9.3.0", "code": "package filestore;\n\nInterface PackageStore; // The interface to be implemented by any package store provider * @lucene.experimental\nInterface PackageStore.FileDetails;\nClass DistribPackageStore;\nClass PackageStore.FileEntry;\nClass PackageStoreAPI;\nClass PackageStoreAPI.MetaData;\nEnum PackageStore.FileType;\n", "des": "Implementation of Package Store."}
{"index": 3653, "repo": "solr-core-9.3.0", "code": "package handler;\n\npackage handler.admin; // SolrRequestHandler implementations for powering he Solr Admin UI\npackage handler.api; // V2 utilities useful for all API implementations.\npackage handler.component; // SearchComponent implementations for use in SearchHandler\npackage handler.configsets; // V2 API classes for performing CRUD operations on configsets.\npackage handler.designer; // The SchemaDesignerAPI and supporting classes.\npackage handler.export; // Solr's Export Handler Functionality\npackage handler.loader; // ContentStreamLoader implementations for use in ContentStreamHandlerBase implementations\npackage handler.tagger; // The TaggerRequestHandler and supporting classes.\nInterface AnalysisRequestHandlerBase.TokenTrackingAttribute; // This is an Attribute used to track the positions of tokens in the analysis chain.\nInterface NestedRequestHandler; // An interface for RequestHandlers need to handle all paths under its registered path\nInterface ReplicationHandler.PollListener;\nClass AnalysisRequestHandlerBase; // A base class for all analysis request handlers.\nClass AnalysisRequestHandlerBase.AnalysisContext; // Serves as the context of an analysis process.\nClass AnalysisRequestHandlerBase.ListBasedTokenStream; // TokenStream that iterates over a list of pre-existing Tokens\nClass AnalysisRequestHandlerBase.TokenTrackingAttributeImpl; // Implementation of AnalysisRequestHandlerBase.TokenTrackingAttribute.\nClass AnalyzeEvaluator;\nClass BlobHandler;\nClass CatStream;\nClass CatStream.CrawlFile;\nClass ClassifyStream; // The classify expression retrieves a model trained by the train expression and uses it to classify documents from a stream Syntax: classif(model(...), anyStream(...), field=\"body\")\nClass ClusterAPI; // All V2 APIs that have a prefix of /api/cluster/\nClass ClusterAPI.RoleInfo;\nClass ContentStreamHandlerBase; // Shares common code between various handlers that manipulate ContentStream objects.\nClass DocumentAnalysisRequestHandler; // An analysis handler that provides a breakdown of the analysis process of provided documents.\nClass DumpRequestHandler;\nClass ExportHandler;\nClass ExportHandler.ExportHandlerStreamFactory;\nClass FieldAnalysisRequestHandler; // Provides the ability to specify multiple field types and field names in the same request.\nClass GraphHandler; // Solr Request Handler for graph traversal with streaming functions that responds with GraphML markup.\nClass GraphHandler.DummyErrorStream;\nClass GraphHandler.TimerStream;\nClass HaversineMetersEvaluator;\n", "des": "Concrete implementations of SolrRequestHandler"}
{"index": 3654, "repo": "solr-core-9.3.0", "code": "package admin;\n\npackage admin.api; // V2 API implementations for \"admin\" APIs.\nInterface BaseHandlerApiSupport.ApiCommand;\nInterface CoreAdminHandler.CoreAdminOp;\nClass AdminHandlersProxy; // Static methods to proxy calls to an Admin (GET) API to other nodes in the cluster and return a combined response\nClass BaseHandlerApiSupport; // This is a utility class to provide an easy mapping of request handlers which support multiple commands to the V2 API format (core admin api, collections api).\nClass ClusterStatus;\nClass CollectionsHandler;\nClass ColStatus; // Report low-level details of collection.\nClass ConfigSetsHandler; // A SolrRequestHandler for ConfigSets API requests.\nClass ContainerPluginsApi; // API to maintain container-level plugin configurations.\nClass CoreAdminHandler;\nClass CoreAdminHandler.CallInfo;\nClass CoreAdminHandler.CoreAdminAsyncTracker;\nClass CoreAdminHandler.CoreAdminAsyncTracker.TaskObject; // Helper class to manage the tasks to be tracked.\nClass HealthCheckHandler; // Health Check Handler for reporting the health of a specific node.\nClass IndexSizeEstimator; // Estimates the raw size of all uncompressed indexed data by scanning term, docValues and stored fields data.\nClass IndexSizeEstimator.Estimate;\nClass IndexSizeEstimator.Item;\nClass IndexSizeEstimator.ItemPriorityQueue;\nClass IndexSizeEstimator.MapWriterSummaryStatistics;\nClass InfoHandler;\nClass InstallCoreDataOp; // v1 shim implementation of the \"Install Core Data\" API, a core-admin API used to implement the \"Install Shard Data\" Collection-Admin functionality\nClass LoggingHandler; // A request handler to show which loggers are registered and allows you to set them\nClass LukeRequestHandler; // Exposes the internal lucene index.\nClass MetricsCollectorHandler; // Handler to collect and aggregate metric reports.\nClass MetricsHandler; // Request handler to return metrics\nClass PluginInfoHandler;\nClass PropertiesRequestHandler;\nClass SecurityConfHandler;\nClass SecurityConfHandler.SecurityConfig; // Object to hold security.json as nested Map<String,Object> and optionally its version.\nClass SecurityConfHandlerLocal; // Security Configuration Handler which works on standalone local files\nClass SecurityConfHandlerZk; // Security Configuration Handler which works with Zookeeper\nClass SegmentsInfoRequestHandler; // This handler exposes information about last commit generation segments\n", "des": "SolrRequestHandler implementations for powering he Solr Admin UI"}
{"index": 3655, "repo": "solr-core-9.3.0", "code": "package api;\n\nClass AddReplicaPropertyAPI; // V2 API for adding a property to a collection replica\nClass AddReplicaPropertyAPI.AddReplicaPropertyRequestBody;\nClass AdminAPIBase; // A common parent for \"admin\" (i.e.\nClass AliasPropertyAPI; // V2 APIs for managing and inspecting properties for collection aliases\nClass AliasPropertyAPI.GetAliasPropertyResponse;\nClass AliasPropertyAPI.GetAllAliasPropertiesResponse;\nClass AliasPropertyAPI.UpdateAliasPropertiesRequestBody;\nClass AliasPropertyAPI.UpdateAliasPropertyRequestBody;\nClass AllCoresStatusAPI; // V2 API for retrieving status information for all cores on the receiving node.\nClass BackupAPIBase; // Base class that facilitates reuse of common validation logic for collection-backup APIs.\nClass BalanceReplicasAPI; // V2 API for balancing the replicas that already exist across a set of nodes.\nClass BalanceReplicasAPI.BalanceReplicasRequestBody;\nClass BalanceShardUniqueAPI; // V2 API for insuring that a particular property is distributed evenly amongst the physical nodes comprising a collection.\nClass BalanceShardUniqueAPI.BalanceShardUniqueRequestBody;\nClass CancelTaskAPI; // V2 API for cancelling a currently running \"task\".\nClass CollectionPropertyAPI; // V2 API for modifying collection-level properties.\nClass CollectionPropertyAPI.UpdateCollectionPropertyRequestBody;\nClass CollectionStatusAPI; // V2 API for displaying basic information about a single collection.\nClass CoreAdminAPIBase; // A common parent for admin Core Jersey-based APIs.\nClass CoreReplicationAPI; // V2 APIs for inspecting and replicating indices\nClass CoreReplicationAPI.FileListResponse; // Response for CoreReplicationAPI.fetchFileList(long).\nClass CoreReplicationAPI.FileMetaData; // Contained in CoreReplicationAPI.FileListResponse, this holds metadata from a file for an index\nClass CoreReplicationAPI.IndexVersionResponse; // Response for CoreReplicationAPI.fetchIndexVersion().\nClass CoreSnapshotAPI; // V2 API for Creating, Listing, and Deleting Core Snapshots.\nClass CoreSnapshotAPI.CreateSnapshotResponse; // The Response for CoreSnapshotAPI's CoreSnapshotAPI.createSnapshot(String, String, String)\nClass CoreSnapshotAPI.DeleteSnapshotResponse; // The Response for CoreSnapshotAPI's CoreSnapshotAPI.deleteSnapshot(String, String, String)\n", "des": "V2 API implementations for \"admin\" APIs."}
{"index": 3656, "repo": "solr-core-9.3.0", "code": "package api;\n\nClass V2ApiUtils; // Utilities helpful for common V2 API declaration tasks.\n", "des": "V2 utilities useful for all API implementations."}
{"index": 3657, "repo": "solr-core-9.3.0", "code": "package component;\n\nInterface MergeStrategy; // The MergeStrategy class defines custom merge logic for distributed searches.\nInterface QueryElevationComponent.ElevationProvider; // Provides the elevations defined for queries.\nInterface StatsValues; // StatsValue defines the interface for the collection of statistical values about fields and facets.\nClass ActiveTasksListComponent; // List the active tasks that can be cancelled\nClass ActiveTasksListHandler; // Handles request for listing all active cancellable tasks\nClass DebugComponent; // Adds debugging information to a request.\nClass ExpandComponent; // The ExpandComponent is designed to work with the CollapsingPostFilter.\nClass FacetComponent; // Computes facets -- aggregations with counts of terms or ranges over the whole search results.\nClass FacetComponent.DistribFieldFacet; // This API is experimental and subject to change\nClass FacetComponent.FacetBase; // This API is experimental and subject to change\nClass FacetComponent.FacetContext; // Encapsulates facet ranges and facet queries such that their parameters are parsed and cached for efficient re-use.\nClass FacetComponent.FacetInfo; // This class is used exclusively for merging results from each shard in a distributed facet request.\nClass FacetComponent.FieldFacet; // This API is experimental and subject to change\nClass FacetComponent.QueryFacet; // This API is experimental and subject to change\nClass FacetComponent.ShardFacetCount; // This API is experimental and subject to change\nClass FieldFacetStats; // FieldFacetStats is a utility to accumulate statistics on a set of values in one field, for facet values present in another field.\nClass HighlightComponent; // Highlights query words in the search results.\nClass HttpShardHandler;\nClass HttpShardHandlerFactory;\nClass IterativeMergeStrategy;\nClass MoreLikeThisComponent; // TODO!\nClass PhrasesIdentificationComponent; // A component that can be used in isolation, or in conjunction with QueryComponent to identify & score \"phrases\" found in the input string, based on shingles in indexed fields.\nClass PhrasesIdentificationComponent.Phrase; // Model the data known about a single (candidate) Phrase -- which may or may not be indexed\nClass PhrasesIdentificationComponent.PhrasesContextData; // Simple container for all request options and data this component needs to store in the Request Context\n", "des": "SearchComponent implementations for use in SearchHandler"}
{"index": 3658, "repo": "solr-core-9.3.0", "code": "package configsets;\n\nClass ConfigSetAPIBase; // Parent class for all APIs that manipulate configsets\nClass CreateConfigSetAPI; // V2 API for creating a new configset as a copy of an existing one.\nClass DeleteConfigSetAPI; // V2 API for deleting an existing configset\nClass ListConfigSetsAPI; // V2 API for adding or updating a single file within a configset.\nClass ListConfigSetsAPI.ListConfigsetsResponse; // Response body POJO for the ListConfigSetsAPI resource.\nClass UploadConfigSetAPI; // V2 API for uploading a new configset (or overwriting an existing one).\nClass UploadConfigSetFileAPI; // V2 API for adding or updating a single file within a configset.\n", "des": "V2 API classes for performing CRUD operations on configsets."}
{"index": 3659, "repo": "solr-core-9.3.0", "code": "package designer;\n\nInterface SampleDocumentsLoader;\nInterface SchemaDesignerConstants;\nInterface SchemaSuggester;\nClass DefaultSampleDocumentsLoader;\nClass DefaultSchemaSuggester;\nClass ManagedSchemaDiff; // Utility methods for comparing managed index schemas\nClass SampleDocuments;\nClass SchemaDesignerAPI; // All V2 APIs that have a prefix of /api/schema-designer/\n", "des": "The SchemaDesignerAPI and supporting classes."}
{"index": 3660, "repo": "solr-core-9.3.0", "code": "package export;\n\nInterface IntComp;\nClass ExportWriter; // Prepares and writes the documents requested by /export requests\nClass ExportWriterStream; // Stream implementation that helps supporting 'expr' streaming in export writer.\nClass IntComp.IntAsc;\nClass IntComp.IntDesc;\nClass IntValue;\nClass LongValue;\nClass ExportWriter.IgnoreException;\n", "des": "Solr's Export Handler Functionality"}
{"index": 3661, "repo": "solr-core-9.3.0", "code": "package loader;\n\nClass CborLoader; // This class can load a single document or a stream of documents in CBOR format this is equivalent of loading a single json documet or an array of json documents\nClass ContentStreamLoader; // Load a ContentStream into Solr\nClass CSVLoader;\nClass CSVLoaderBase;\nClass JavabinLoader; // Update handler which uses the JavaBin format\nClass JsonLoader;\nClass XMLLoader;\n", "des": "ContentStreamLoader implementations for use in ContentStreamHandlerBase implementations"}
{"index": 3662, "repo": "solr-core-9.3.0", "code": "package tagger;\n\nInterface TagClusterReducer;\nInterface TaggingAttribute; // Attribute used by the Tagger to decide if a token can start a new tag.\nClass OffsetCorrector;\nClass Tagger; // Tags maximum string of words in a corpus.\nClass TaggerRequestHandler; // Scans posted text, looking for matching strings in the Solr index.\nClass TaggingAttributeImpl; // Implementation of the TaggingAttribute\nClass TagLL; // This is a Tag -- a startOffset, endOffset and value.\nClass XmlOffsetCorrector; // Corrects offsets to adjust for XML formatted data.\n", "des": "The TaggerRequestHandler and supporting classes."}
{"index": 3663, "repo": "solr-core-9.3.0", "code": "package highlight;\n\nInterface SolrEncoder;\nInterface SolrFormatter;\nInterface SolrFragListBuilder;\nInterface SolrFragmenter;\nClass BreakIteratorBoundaryScanner;\nClass DefaultEncoder; // Use the DefaultEncoder\nClass DefaultSolrHighlighter;\nClass DefaultSolrHighlighter.FvhContainer;\nClass GapFragmenter;\nClass HighlightingPluginBase;\nClass HtmlEncoder; // Use the SimpleHTMLEncoder\nClass HtmlFormatter; // Use the SimpleHTMLFormatter\nClass RegexFragmenter; // Fragmenter that tries to produce snippets that \"look\" like a regular expression.\nClass ScoreOrderFragmentsBuilder;\nClass SimpleBoundaryScanner;\nClass SimpleFragListBuilder;\nClass SimpleFragmentsBuilder;\nClass SingleFragListBuilder;\nClass SolrBoundaryScanner;\nClass SolrFragmentsBuilder;\nClass SolrHighlighter;\nClass UnifiedSolrHighlighter; // Highlighter impl that uses UnifiedHighlighter\nClass UnifiedSolrHighlighter.SolrExtendedUnifiedHighlighter; // From UnifiedSolrHighlighter.getHighlighter(org.apache.solr.request.SolrQueryRequest).\nClass WeightedFragListBuilder;\n", "des": "SolrHighlighter API and related implementations and utilities"}
{"index": 3664, "repo": "solr-core-9.3.0", "code": "package index;\n\nClass DefaultMergePolicyFactory; // A MergePolicyFactory for the default MergePolicy.\nClass LogByteSizeMergePolicyFactory; // A MergePolicyFactory for LogByteSizeMergePolicy objects.\nClass LogDocMergePolicyFactory; // A MergePolicyFactory for LogDocMergePolicy objects.\nClass MergePolicyFactory; // A factory for creating a MergePolicy.\nClass MergePolicyFactoryArgs;\nClass NoMergePolicyFactory;\nClass SimpleMergePolicyFactory; // A MergePolicyFactory for simple MergePolicy objects.\nClass SlowCompositeReaderWrapper; // This class forces a composite reader (eg a MultiReader or DirectoryReader) to emulate a LeafReader.\nClass SortingMergePolicy;\nClass SortingMergePolicyFactory; // A MergePolicyFactory for SortingMergePolicy objects.\nClass TieredMergePolicyFactory; // A MergePolicyFactory for TieredMergePolicy objects.\nClass UpgradeIndexMergePolicyFactory; // A MergePolicyFactory for UpgradeIndexMergePolicy objects.\nClass WrapperMergePolicyFactory; // A MergePolicyFactory for wrapping additional factories.\n", "des": "Indexing related classes."}
{"index": 3665, "repo": "solr-core-9.3.0", "code": "package csv;\n\nClass CharBuffer; // A simple StringBuffer replacement that aims to reduce copying as much as possible.\nClass CSVParser; // Parses CSV files according to the specified configuration.\nClass CSVPrinter; // Print values as a comma separated list.\nClass CSVStrategy; // CSVStrategy\nClass CSVUtils; // Utility methods for dealing with CSV files\n", "des": "Internal classes used for reading/writing CSV"}
{"index": 3666, "repo": "solr-core-9.3.0", "code": "package jersey;\n\npackage jersey.container; // Adapter code used to convert the native Jetty request/response abstractions into the objects required by Jersey\nInterface JacksonReflectMapWriter; // A MapWriter implementation that relies on Jackson's JsonProperty annotation.\nInterface RequestContextKeys; // Keys used to store and retrieve values from the Jersey request context.\nClass AsyncJerseyResponse;\nClass CatchAllExceptionMapper; // Flattens the exception and sets on a SolrJerseyResponse.\nClass ErrorInfo; // A value type representing an error.\nClass ErrorInfo.ErrorMetadata;\nClass ExperimentalResponse; // SolrJerseyResponse implementation with a warning field indicating that the format may change\nClass InjectionFactories;\nClass InjectionFactories.RequestContextBasedFactory; // Allows access to a ContainerRequestContext via a ServiceLocator\nClass InjectionFactories.ReuseFromContextIndexSchemaFactory;\nClass InjectionFactories.ReuseFromContextSolrCoreFactory; // Fetch the (existing) SolrCore from the request context\nClass InjectionFactories.ReuseFromContextSolrParamsFactory;\nClass InjectionFactories.SingletonFactory<T>;\nClass InjectionFactories.SolrQueryRequestFactory;\nClass InjectionFactories.SolrQueryResponseFactory;\nClass JerseyAppHandlerCache; // Stores Jersey 'ApplicationHandler' instances by an ID or hash derived from their ConfigSet.\nClass JerseyApplications; // JAX-RS \"application\" configurations for Solr's CoreContainer and SolrCore instances\nClass JerseyApplications.CoreContainerApp;\nClass JerseyApplications.SolrCoreApp;\nClass MediaTypeOverridingFilter; // Overrides the content-type of the response based on an optional user-provided 'wt' parameter\nClass MessageBodyReaders; // A collection point for various MessageBodyReader implementations.\nClass MessageBodyReaders.CachingDelegatingMessageBodyReader; // Caches the deserialized request body in the ContainerRequestContext for use later in the request lifecycle.\nClass MessageBodyReaders.CachingJsonMessageBodyReader; // A JSON MessageBodyReader that caches request bodies for use later in the request lifecycle.\nClass MessageBodyWriters; // A collection of thin Jersey shims around Solr's existing QueryResponseWriter interface\nClass MessageBodyWriters.BaseMessageBodyWriter;\nClass MessageBodyWriters.CsvMessageBodyWriter;\n", "des": "Jersey integration code"}
{"index": 3667, "repo": "solr-core-9.3.0", "code": "package container;\n\nClass ContainerRequestUtils; // Utility methods for creating and populating a ContainerRequest for use with Jersey ApplicationHandlers\nClass JettyBridgeResponseWriter; // A ResponseWriter which copies that output of JAX-RS computation over to HttpServletResponse object used by the Jetty server.\n", "des": "Adapter code used to convert the native Jetty request/response abstractions into the objects required by Jersey"}
{"index": 3668, "repo": "solr-core-9.3.0", "code": "package legacy;\n\nInterface LegacyNumericTokenStream.LegacyNumericTermAttribute; // Expert: Use this attribute to get the details of the currently generated token.\nClass BBoxStrategy;\nClass LegacyDoubleField;\nClass LegacyField;\nClass LegacyFieldType;\nClass LegacyFloatField;\nClass LegacyIntField;\nClass LegacyLongField;\nClass LegacyNumericRangeQuery<T extends Number>;\nClass LegacyNumericTokenStream;\nClass LegacyNumericTokenStream.LegacyNumericTermAttributeImpl; // Implementation of LegacyNumericTokenStream.LegacyNumericTermAttribute.\nClass LegacyNumericUtils;\nClass LegacyNumericUtils.IntRangeBuilder; // Callback for LegacyNumericUtils.splitIntRange(org.apache.solr.legacy.LegacyNumericUtils.IntRangeBuilder, int, int, int).\nClass LegacyNumericUtils.LongRangeBuilder; // Callback for LegacyNumericUtils.splitLongRange(org.apache.solr.legacy.LegacyNumericUtils.LongRangeBuilder, int, long, long).\nEnum LegacyNumericType;\n", "des": "Deprecated stuff!"}
{"index": 3669, "repo": "solr-core-9.3.0", "code": "package logging;\n\npackage logging.jul; // JUL based implementation of LogWatcher\npackage logging.log4j2; // LOG4J2 based implementation of LogWatcher\nClass CircularList<T>; // FIFO Circular List.\nClass DeprecationLog; // Utility to log a deprecation.\nClass ListenerConfig;\nClass LoggerInfo; // Wrapper class for Logger implementations\nClass LogWatcher<E>; // A Class to monitor Logging events and hold N events in memory\nClass LogWatcherConfig; // Defines the configuration of a LogWatcher\nClass MDCLoggingContext; // Set's per thread context info for logging.\nClass MDCSnapshot; // Takes a 'snapshot' of the current MDC context map which is restored on (auto) close.\n", "des": "APIs related to capturing log event info in the LoggingHandler"}
{"index": 3670, "repo": "solr-core-9.3.0", "code": "package jul;\n\nClass JulInfo;\nClass JulWatcher;\nClass RecordHandler;\n", "des": "JUL based implementation of LogWatcher"}
{"index": 3671, "repo": "solr-core-9.3.0", "code": "package log4j2;\n\nClass Log4j2Watcher;\nClass Log4j2Watcher.Log4j2Appender;\nClass Log4j2Watcher.Log4j2Info;\n", "des": "LOG4J2 based implementation of LogWatcher"}
{"index": 3672, "repo": "solr-core-9.3.0", "code": "package metrics;\n\npackage metrics.reporters; // This package houses 'pluggable' metric reporters that inherit from the SolrMetricReporter class.\nInterface MetricSuppliers.NoOpMetric; // Marker interface for all no-op metrics.\nInterface SolrMetricProducer; // Used by objects that expose metrics through SolrMetricManager.\nClass AggregateMetric; // This class is used for keeping several partial named values and providing useful statistics over them.\nClass AggregateMetric.Update; // Simple class to represent current value and how many times it was set.\nClass AltBufferPoolMetricSet; // This is an alternative implementation of BufferPoolMetricSet that doesn't need an MBean server.\nClass DelegateRegistryCounter; // A counter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryHistogram; // A meter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryMeter; // A meter implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass DelegateRegistryTimer; // A timer implementation that is aware of both primary and delegate metrics belonging to different registries and able to update metrics in multiple registries\nClass FilteringSolrMetricReporter; // A SolrMetricReporter that supports (prefix) filters.\nClass MetricsMap; // Dynamically constructed map of metrics, intentionally different from MetricSet where each metric had to be known in advance and registered separately in MetricRegistry.\nClass MetricSuppliers; // Helper class for constructing instances of MetricRegistry.MetricSupplier based on plugin configuration.\nClass MetricSuppliers.DefaultCounterSupplier; // Default Counter supplier.\nClass MetricSuppliers.DefaultHistogramSupplier; // Default supplier of Histogram instances, with configurable reservoir.\nClass MetricSuppliers.DefaultMeterSupplier; // Default Meter supplier.\nClass MetricSuppliers.DefaultTimerSupplier; // Default supplier of Timer instances, with configurable clock and reservoir.\nClass MetricSuppliers.NoOpCounterSupplier; // No-op implementation of Counter supplier.\nClass MetricSuppliers.NoOpGauge; // No-op implementation of Gauge.\nClass MetricSuppliers.NoOpHistogramSupplier; // No-op implementation of Histogram supplier.\n", "des": "The SolrCoreMetricManager is responsible for collecting metrics from SolrMetricProducer's and exposing metrics to SolrMetricReporter's."}
{"index": 3673, "repo": "solr-core-9.3.0", "code": "package reporters;\n\npackage reporters.jmx; // This package contains components that support SolrJmxReporter.\npackage reporters.solr; // This package contains SolrMetricReporter implementations specific to SolrCloud reporting.\nInterface ReporterClientCache.ClientProvider<T>; // Provide an instance of service client.\nClass ReporterClientCache<T>; // Simple cache for reusable service clients used by some implementations of SolrMetricReporter.\nClass SolrGraphiteReporter; // Metrics reporter that wraps GraphiteReporter.\nClass SolrJmxReporter; // A SolrMetricReporter that finds (or creates) a MBeanServer from the given configuration and registers metrics to it with JMX.\nClass SolrSlf4jReporter; // Metrics reporter that wraps Slf4jReporter.\n", "des": "This package houses 'pluggable' metric reporters that inherit from the SolrMetricReporter class."}
{"index": 3674, "repo": "solr-core-9.3.0", "code": "package jmx;\n\nInterface JmxMetricsReporter.JmxCounterMBean;\nInterface JmxMetricsReporter.JmxGaugeMBean;\nInterface JmxMetricsReporter.JmxHistogramMBean;\nInterface JmxMetricsReporter.JmxMeterMBean;\nInterface JmxMetricsReporter.JmxTimerMBean;\nInterface JmxMetricsReporter.MetricMBean;\nClass JmxMetricsReporter; // This is a modified copy of Dropwizard's JmxReporter and classes that it internally uses, with a few important differences: this class knows that it can directly use MetricsMap as a dynamic MBean.\nClass JmxMetricsReporter.Builder; // Builder for the JmxMetricsReporter class.\nClass JmxObjectNameFactory; // Factory to create MBean names for a given metric.\n", "des": "This package contains components that support SolrJmxReporter."}
{"index": 3675, "repo": "solr-core-9.3.0", "code": "package solr;\n\nClass SolrReporter; // Implementation of ScheduledReporter that reports metrics from selected registries and sends them periodically as update requests to a selected Solr collection and to a configured handler.\nClass SolrReporter.Builder; // Builder for the SolrReporter class.\nClass SolrReporter.Report; // Specification of what registries and what metrics to send.\n", "des": "This package contains SolrMetricReporter implementations specific to SolrCloud reporting."}
{"index": 3676, "repo": "solr-core-9.3.0", "code": "package packagemanager;\n\nClass DefaultPackageRepository; // This is a serializable bean (for the JSON that is stored in /repository.json) representing a repository of Solr packages.\nClass PackageManager; // Handles most of the management of packages that are already installed in Solr.\nClass PackageRepository; // Abstract class for a repository, holding SolrPackage items.\nClass PackageUtils;\nClass RepositoryManager; // Handles most of the management of repositories and packages present in external repositories.\nClass SolrPackage; // Describes a package (along with all released versions) as it appears in a repository.\nClass SolrPackage.Artifact;\nClass SolrPackage.Command;\nClass SolrPackage.Manifest;\nClass SolrPackage.Plugin;\nClass SolrPackage.SolrPackageRelease;\nClass SolrPackageInstance; // Describes one instance of a package as it exists in Solr when installed.\n", "des": "This package contains Package Manager (CLI) implementation"}
{"index": 3677, "repo": "solr-core-9.3.0", "code": "package parser;\n\nInterface QueryParserConstants; // Token literal values and constants.\nClass QueryParser;\nClass QueryParserTokenManager; // Token Manager.\nClass SolrQueryParserBase; // This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.\nClass SolrQueryParserBase.RawQuery;\nClass Token; // Describes the input token stream.\nEnum QueryParser.Operator; // The default operator for parsing queries.\nEnum SolrQueryParserBase.MagicFieldName; // Identifies the list of all known \"magic fields\" that trigger special parsing behavior\nEnum SolrQueryParserBase.SynonymQueryStyle; // Query strategy when analyzed query terms overlap the same position (ie synonyms) consider if pants and khakis are query time synonyms\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Solr native variant of the Lucene Classic QueryParser"}
{"index": 3678, "repo": "solr-core-9.3.0", "code": "package pkg;\n\nInterface PackageListeners.Listener;\nClass PackageAPI; // This implements the public end points (/api/cluster/package) of package API.\nClass PackageAPI.Packages;\nClass PackageAPI.PkgVersion;\nClass PackageListeners;\nClass PackageListeners.Listener.Ctx;\nClass PackageListeningClassLoader; // A SolrClassLoader that is designed to listen to a set of packages.\nClass PackagePluginHolder<T>;\nClass SolrPackageLoader; // The class that holds a mapping of various packages and classloaders\n", "des": "Package management implementation"}
{"index": 3679, "repo": "solr-core-9.3.0", "code": "package query;\n\nClass FilterQuery; // A filtered query wrapped around another query similar to BooleanClause.Occur.FILTER -- it scores as 0.\nClass SolrRangeQuery;\n", "des": "Solr Queries"}
{"index": 3680, "repo": "solr-core-9.3.0", "code": "package request;\n\npackage request.json; // JSON related classes\npackage request.macro; // Parameter substitution / macro expansion.\nInterface SolrQueryRequest; // Container for a request to execute a query.\nInterface SolrRequestHandler; // Implementations of SolrRequestHandler are called to handle query requests.\nClass DelegatingSolrQueryRequest; // A SolrQueryRequest implementation that defers to a delegate in all cases.\nClass DocValuesFacets; // Computes term facets for docvalues field (single or multivalued).\nClass DocValuesStats; // Computes term stats for docvalues field (single or multivalued).\nClass IntervalFacets; // Computes interval facets for docvalues field (single or multivalued).\nClass IntervalFacets.FacetInterval; // Helper class to match and count of documents in specified intervals\nClass LocalSolrQueryRequest;\nClass RegexBytesRefFilter; // An implementation of Predicate which returns true if the BytesRef matches the supplied regular expression.\nClass SimpleFacets; // A class that generates simple Facet information for a request.\nClass SimpleFacets.CountPair<K extends Comparable<? super K>,​V extends Comparable<? super V>>; // A simple key=>val pair whose natural order is such that higher vals come before lower vals.\nClass SimpleFacets.ParsedParams;\nClass SolrQueryRequestBase; // Base implementation of SolrQueryRequest that provides some convenience methods for accessing parameters, and manages an IndexSearcher reference.\nClass SolrRequestInfo; // Information about the Solr request/response held in a ThreadLocal.\nClass SubstringBytesRefFilter; // An implementation of Predicate which returns true if the BytesRef contains a given substring.\n", "des": "APIs and classes for dealing with Solr requests"}
{"index": 3681, "repo": "solr-core-9.3.0", "code": "package json;\n\nClass JSONUtil;\nClass ObjectUtil;\nClass ObjectUtil.ConflictHandler;\nClass RequestUtil;\n", "des": "JSON related classes"}
{"index": 3682, "repo": "solr-core-9.3.0", "code": "package macro;\n\nClass MacroExpander;\n", "des": "Parameter substitution / macro expansion."}
{"index": 3683, "repo": "solr-core-9.3.0", "code": "package response;\n\npackage response.transform; // APIs and implementations of DocTransformer for modifying documents in Solr request responses\nInterface BinaryQueryResponseWriter; // Implementations of BinaryQueryResponseWriter are used to write response in binary format.\nInterface QueryResponseWriter; // Implementations of QueryResponseWriter are used to format responses to query requests.\nClass BasicResultContext;\nClass BinaryResponseWriter;\nClass BinaryResponseWriter.Resolver;\nClass CborResponseWriter; // A response writer impl that can write results in CBOR (cbor.io) format when wt=cbor.\nClass CSVResponseWriter; // Response writer for csv data\nClass DocsStreamer; // This streams SolrDocuments from a DocList and applies transformer\nClass GeoJSONResponseWriter; // Extend the standard JSONResponseWriter to support GeoJSON.\nClass GraphMLResponseWriter;\nClass JacksonJsonWriter; // A JSON ResponseWriter that uses jackson.\nClass JacksonJsonWriter.WriterImpl;\nClass JSONResponseWriter;\nClass JSONWriter;\nClass PHPResponseWriter;\nClass PHPSerializedResponseWriter; // A description of the PHP serialization format can be found here: http://www.hurring.com/scott/code/perl/serialize/\nClass PythonResponseWriter;\nClass QueryResponseWriterUtil; // Static utility methods relating to QueryResponseWriters\nClass RawResponseWriter; // Writes a ContentStream directly to the output.\nClass ResultContext; // A class to hold the QueryResult and the Query\nClass RubyResponseWriter;\nClass SchemaXmlResponseWriter;\nClass SchemaXmlWriter;\nClass SmileResponseWriter;\nClass SmileResponseWriter.SmileWriter;\nClass SolrQueryResponse; // SolrQueryResponse is used by a query handler to return the response to a query request.\nClass TabularResponseWriter; // Base response writer for table-oriented data\nClass TextResponseWriter; // Base class for text-oriented response writers.\nClass XMLResponseWriter;\nClass XMLWriter;\n", "des": "API and implementations of QueryResponseWriter for formatting Solr request responses"}
{"index": 3684, "repo": "solr-core-9.3.0", "code": "package transform;\n\nInterface TransformerFactory.FieldRenamer; // The TransformerFactory.FieldRenamer interface should be implemented by any TransformerFactory capable of generating transformers that might rename fields, and should implement TransformerFactory.FieldRenamer.create(String, SolrParams, SolrQueryRequest, Map, Set) in place of TransformerFactory.create(String, SolrParams, SolrQueryRequest) (with the latter method overridden to throw UnsupportedOperationException).\nClass BaseEditorialTransformer;\nClass ChildDocTransformerFactory; // Attaches all descendants (child documents) to each parent document.\nClass CoreAugmenterFactory;\nClass DocIdAugmenterFactory; // Augments the document with a [docid] integer containing it's current (internal) id in the lucene index.\nClass DocTransformer; // A DocTransformer can add, remove or alter a Document before it is written out to the Response.\nClass DocTransformer.NoopFieldTransformer; // Trivial Impl that ensure that the specified field is requested as an \"extra\" field, but then does nothing during the transformation phase.\nClass DocTransformers; // Transform a document before it gets sent out\nClass ElevatedMarkerFactory; // Used to mark whether a document has been elevated or not\nClass ExcludedMarkerFactory;\nClass ExplainAugmenterFactory;\nClass GeoTransformerFactory; // This DocumentTransformer will write a Shape to the SolrDocument using the requested format.\nClass RawValueTransformerFactory;\nClass RenameFieldTransformer; // Return a field with a name that is different that what is indexed\nClass ScoreAugmenter; // Simple Augmenter that adds the score\nClass ShardAugmenterFactory;\nClass SubQueryAugmenterFactory; // This transformer executes subquery per every result document.\nClass TransformerFactory; // New instance for each request\nClass ValueAugmenterFactory;\nClass ValueSourceAugmenter; // Add values from a ValueSource (function query etc)\nEnum ExplainAugmenterFactory.Style;\nEnum ShardAugmenterFactory.Style;\n", "des": "APIs and implementations of DocTransformer for modifying documents in Solr request responses"}
{"index": 3685, "repo": "solr-core-9.3.0", "code": "package rest;\n\npackage rest.schema; // Provides RESTful API access to managed resources in the Solr Schema.\nInterface ManagedResource.ChildResourceSupport; // Marker interface to indicate a ManagedResource implementation class also supports managing child resources at path: /<resource>/{child}\nInterface ManagedResourceObserver; // Allows a Solr component to register as an observer of important ManagedResource events, such as when the managed data is loaded.\nInterface ManagedResourceStorage.StorageIO; // Hides the underlying storage implementation for data being managed by a ManagedResource.\nClass BaseSolrResource; // Base class for delegating REST-oriented requests to ManagedResources.\nClass ManagedResource; // Supports Solr components that have external data that needs to be managed using the REST API.\nClass ManagedResourceStorage; // Abstract base class that provides most of the functionality needed to store arbitrary data for managed resources.\nClass ManagedResourceStorage.FileStorageIO; // Local file-based storage implementation.\nClass ManagedResourceStorage.InMemoryStorageIO; // Memory-backed storage IO; not really intended for storage large amounts of data in production, but useful for testing and other transient workloads.\nClass ManagedResourceStorage.JsonStorage; // Default storage implementation that uses JSON as the storage format for managed data.\nClass ManagedResourceStorage.ZooKeeperStorageIO; // ZooKeeper based storage implementation that uses the SolrZkClient provided by the CoreContainer.\nClass RestManager; // Supports runtime mapping of REST API endpoints to ManagedResource implementations; endpoints can be registered at either the /schema or /config base paths, depending on which base path is more appropriate for the type of managed resource.\nClass RestManager.ManagedEndpoint; // Request handling needs a lightweight object to delegate a request to.\nClass RestManager.Registry; // Per-core registry of ManagedResources found during core initialization.\n", "des": "Solr RESTful APIs."}
{"index": 3686, "repo": "solr-core-9.3.0", "code": "package schema;\n\npackage schema.analysis; // Analysis-related functionality for RESTful API access to managed resources related to the schema, such as stopwords, protected words, and synonyms.\nClass FieldTypeXmlAdapter; // Utility class for converting a JSON definition of a FieldType into the XML format expected by the FieldTypePluginLoader.\n", "des": "Provides RESTful API access to managed resources in the Solr Schema."}
{"index": 3687, "repo": "solr-core-9.3.0", "code": "package analysis;\n\nClass BaseManagedTokenFilterFactory; // Abstract based class for implementing TokenFilterFactory objects that are managed by the REST API.\nClass ManagedStopFilterFactory; // TokenFilterFactory that uses the ManagedWordSetResource implementation for managing stop words using the REST API.\nClass ManagedSynonymFilterFactory;\nClass ManagedSynonymFilterFactory.SynonymManager; // ManagedResource implementation for synonyms, which are so specialized that it makes sense to implement this class as an inner class as it has little application outside the SynonymFilterFactory use cases.\nClass ManagedSynonymGraphFilterFactory; // TokenFilterFactory and ManagedResource implementation for doing CRUD on synonyms using the REST API.\nClass ManagedSynonymGraphFilterFactory.SynonymManager; // ManagedResource implementation for synonyms, which are so specialized that it makes sense to implement this class as an inner class as it has little application outside the SynonymFilterFactory use cases.\nClass ManagedWordSetResource; // ManagedResource implementation for managing a set of words using the REST API; useful for managing stop words and/or protected words for analysis components like the KeywordMarkerFilter.\n", "des": "Analysis-related functionality for RESTful API access to managed resources related to the schema, such as stopwords, protected words, and synonyms."}
{"index": 3688, "repo": "solr-core-9.3.0", "code": "package schema;\n\nInterface DateValueFieldType; // Marker interface for Date-valued field types.\nInterface DoubleValueFieldType; // Marker interface for double-valued field types.\nInterface ExchangeRateProvider; // Interface for providing pluggable exchange rate providers to @CurrencyField\nInterface FloatValueFieldType; // Marker interface for float-valued field types.\nInterface HasImplicitIndexAnalyzer; // Marker interface for field types that have an implicit (non-user-configurable) index-time schema.\nInterface IntValueFieldType; // Marker interface for int-valued field types.\nInterface LongValueFieldType; // Marker interface for long-valued field types.\nInterface NumericValueFieldType; // Marker interface for numeric-valued field types.\nInterface PreAnalyzedField.PreAnalyzedParser; // Parse the input and return the stored part and the tokens with attributes.\nInterface SchemaAware; // An interface that can be extended to provide a callback mechanism for informing an IndexSchema instance of changes to it, dynamically performed at runtime.\nInterface SpatialQueryable; // Indicate that the implementing class is capable of generating a Query against spatial resources.\nClass AbstractEnumField; // Abstract Field type for support of string values with custom sort order.\nClass AbstractEnumField.EnumMapping; // Models all the info contained in an enums config XML file\nClass AbstractSpatialFieldType<T extends org.apache.lucene.spatial.SpatialStrategy>; // Abstract base class for Solr FieldTypes based on a Lucene 4 SpatialStrategy.\nClass AbstractSpatialPrefixTreeFieldType<T extends org.apache.lucene.spatial.prefix.PrefixTreeStrategy>;\nClass AbstractSubTypeFieldType; // An abstract base class for FieldTypes that delegate work to another FieldType.\nClass BBoxField;\nClass BinaryField;\nClass BoolField;\nClass ClassicIndexSchemaFactory;\nClass CollationField; // Field for collated sort keys.\nClass CoordinateFieldType; // A CoordinateFieldType is the base class for FieldTypes that have semantics related to items in a coordinate system.\nClass CopyField; // CopyField contains all the information of a valid copy fields in an index.\nClass CurrencyField;\nClass CurrencyFieldType; // Field type for support of monetary values.\nClass CurrencyValue; // Represents a Currency field value, which includes a long amount and ISO currency code.\n", "des": "IndexSchema and FieldType implementations for powering schema.xml"}
{"index": 3689, "repo": "solr-core-9.3.0", "code": "package search;\n\npackage search.facet; // APIs and classes for the JSON Facet API.\npackage search.function; // Solr implementations of ValueSource for function queries.\npackage search.grouping; // APIs and classes for implementing result grouping\npackage search.join; // Classes related to joins.\npackage search.mlt; // APIs and classes for implementing MoreLikeThis (mlt) QueryParser.\npackage search.neural; // APIs and classes for implementing Neural (Dense Retrieval) QueryParsers.\npackage search.similarities; // Factories for various built-in Lucene ranking models.\npackage search.stats; // APIs and Classes implementing the Stats component used for document frequency calculations.\nInterface CacheRegenerator; // Implementations of CacheRegenerator are used in autowarming to populate a new cache based on an old cache.\nInterface DocIterator; // Simple Iterator of document Ids which may include score information.\nInterface DocList; // DocList represents the result of a query: an ordered list of document ids with optional score.\nInterface DocSetProducer;\nInterface ExtendedQuery; // The ExtendedQuery interface provides extra metadata to a query.\nInterface PostFilter; // The PostFilter interface provides a mechanism to further filter documents after they have already gone through the main query and other filters.\nInterface SolrCache<K,​V>; // Primary API for dealing with Solr's internal caches.\nClass AbstractReRankQuery;\nClass AnalyticsQuery; // Note: This API is experimental and may change in non backward-compatible ways in the future\nClass BitDocSet; // A FixedBitSet based implementation of a DocSet.\nClass BitsFilteredPostingsEnum;\nClass BoolQParserPlugin; // Create a boolean query from sub queries.\nClass BoostQParserPlugin; // Create a boosted query from the input value.\nClass CacheConfig; // Contains the knowledge of how cache config is stored in the solrconfig.xml file, and implements a factory to create caches.\nClass CaffeineCache<K,​V>; // A SolrCache backed by the Caffeine caching library [1].\nClass CancellableCollector; // Allows a query to be cancelled\nClass CollapsingQParserPlugin; // The CollapsingQParserPlugin is a PostFilter that performs field collapsing.\n", "des": "APIs and classes for parsing and processing search requests"}
{"index": 3690, "repo": "solr-core-9.3.0", "code": "package facet;\n\nInterface FieldUtil.OrdFunc; // The following ord visitors and wrappers are a work in progress and experimental\nInterface UnInvertedField.Callback;\nClass AggUtil;\nClass AggValueSource;\nClass AvgAgg;\nClass BlockJoin;\nClass Constants; // constants used in facets package\nClass CountAgg;\nClass CountValsAgg; // AggValueSource to count values for given ValueSource\nClass DocValuesAcc; // Accumulates stats separated by slot number for the fields with DocValues\nClass FacetBucket;\nClass FacetContext;\nClass FacetDebugInfo;\nClass FacetField;\nClass FacetFieldMerger;\nClass FacetHeatmap; // JSON Facet API request for a 2D spatial summary of a rectangular region.\nClass FacetMerger;\nClass FacetMerger.Context;\nClass FacetModule;\nClass FacetProcessor<T extends FacetRequest>; // Base abstraction for a class that computes facets.\nClass FacetQuery;\nClass FacetRange;\nClass FacetRangeMerger;\nClass FacetRequest; // A request to do facets/stats that might itself be composed of sub-FacetRequests.\nClass FacetRequest.Domain;\nClass FacetRequest.Domain.GraphField; // Are we doing a query time graph across other documents\nClass FacetRequest.Domain.JoinField; // Are we doing a query time join across other documents\nClass FacetRequest.FacetSort; // Simple structure for encapsulating a sort variable and a direction\nClass FieldUtil;\nClass FieldUtil.DVOrdValues;\nClass FieldUtil.FCOrdValues;\nClass FieldUtil.OrdValues;\nClass HLLAgg;\nClass HLLAgg.HLLFactory;\nClass LegacyFacet;\nClass LegacyFacet.Subfacet;\nClass MinMaxAgg;\nClass MissingAgg; // AggValueSource to compute missing counts for given ValueSource\nClass PercentileAgg;\nClass PercentileAgg.Parser;\nClass RelatednessAgg; // An aggregation function designed to be nested under other (possibly deeply nested) facets for the purposes of computing the \"relatedness\" of facet buckets relative to \"foreground\" and \"background\" sets -- primarily for the purpose of building \"Semantic Knowledge Graphs\"\nClass SimpleAggValueSource;\nClass SlotAcc; // Accumulates statistics separated by a slot number.\n", "des": "APIs and classes for the JSON Facet API."}
{"index": 3691, "repo": "solr-core-9.3.0", "code": "package function;\n\npackage function.distance; // Solr implementations of ValueSource for distance based function queries.\nInterface SolrComparisonBoolFunction.Compare;\nClass CollapseScoreFunction;\nClass CollapseScoreFunction.CollapseScoreFunctionValues;\nClass ConcatStringFunction; // ConcatStringFunction concatenates the string values of its components in the order given.\nClass DualDoubleFunction; // Abstract ValueSource implementation which wraps two ValueSources and applies an extendible double function to their values.\nClass EqualFunction; // Compares two values for equality.\nClass FieldNameValueSource; // Placeholder value source.\nClass FileFloatSource; // Obtains float field values from an external file.\nClass FileFloatSource.ReloadCacheRequestHandler;\nClass MultiStringFunction; // Abstract ValueSource implementation which wraps multiple ValueSources and applies an extendible string function to their values.\nClass OrdFieldSource; // Obtains the ordinal of the field value from LeafReader.getSortedDocValues(java.lang.String).\nClass ReverseOrdFieldSource; // Obtains the ordinal of the field value from LeafReader.getSortedDocValues(java.lang.String) and reverses the order.\nClass SolrComparisonBoolFunction; // Refines ComparisonBoolFunction to compare based on a 'long' or 'double' depending on if the any of the FunctionValues are LongDocValues.\nClass ValueSourceRangeFilter; // RangeFilter over a ValueSource.\n", "des": "Solr implementations of ValueSource for function queries."}
{"index": 3692, "repo": "solr-core-9.3.0", "code": "package distance;\n\nClass GeoDistValueSourceParser; // Parses \"geodist\" creating HaversineConstFunction or HaversineFunction or calling SpatialStrategy.makeDistanceValueSource(org.locationtech.spatial4j.shape.Point,double).\nClass GeohashFunction;\nClass GeohashHaversineFunction;\nClass HaversineConstFunction; // Haversine function with one point constant\nClass HaversineFunction; // Calculate the Haversine formula (distance) between any two points on a sphere Takes in four value sources: (latA, lonA); (latB, lonB).\nClass SquaredEuclideanFunction; // While not strictly a distance, the Sq.\nClass StringDistanceFunction;\nClass VectorDistanceFunction; // Calculate the p-norm for a Vector.\n", "des": "Solr implementations of ValueSource for distance based function queries."}
{"index": 3693, "repo": "solr-core-9.3.0", "code": "package grouping;\n\npackage grouping.collector; // Grouping related Collectors\npackage grouping.distributed; // Internal classes used to implement distributed result grouping\npackage grouping.endresulttransformer; // APIs and classes for transforming result grouping results into the appropriate response format\nInterface Command<T>; // Defines a grouping command.\nClass CommandHandler; // Responsible for executing a search with a number of Command instances.\nClass CommandHandler.Builder;\nClass GroupingSpecification; // Encapsulates the grouping options like fields group sort and more specified by clients.\n", "des": "APIs and classes for implementing result grouping"}
{"index": 3694, "repo": "solr-core-9.3.0", "code": "package collector;\n\nClass FilterCollector; // A collector that filters incoming doc ids that are not in the filter.\n", "des": "Grouping related Collectors"}
{"index": 3695, "repo": "solr-core-9.3.0", "code": "package distributed;\n\npackage distributed.command; // Internal classes used to implement distributed result grouping\npackage distributed.requestfactory; // Internal classes used to implement distributed result grouping\npackage distributed.responseprocessor; // Internal classes used to implement distributed result grouping\npackage distributed.shardresultserializer; // Internal classes used to implement distributed result grouping\nInterface ShardRequestFactory; // Responsible for creating shard requests to the shards in the cluster to perform distributed grouping.\nInterface ShardResponseProcessor; // Responsible for processing shard responses.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 3696, "repo": "solr-core-9.3.0", "code": "package command;\n\nClass QueryCommand;\nClass QueryCommand.Builder;\nClass QueryCommandResult; // Encapsulates TopDocs and the number of matches.\nClass SearchGroupsFieldCommand; // Creates all the collectors needed for the first phase and how to handle the results.\nClass SearchGroupsFieldCommand.Builder;\nClass SearchGroupsFieldCommandResult; // Encapsulates the result of a SearchGroupsFieldCommand command\nClass TopGroupsFieldCommand; // Defines all collectors for retrieving the second phase and how to handle the collector result.\nClass TopGroupsFieldCommand.Builder;\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 3697, "repo": "solr-core-9.3.0", "code": "package requestfactory;\n\nClass SearchGroupsRequestFactory; // Concrete implementation of ShardRequestFactory that creates ShardRequest instances for getting the search groups from all shards.\nClass StoredFieldsShardRequestFactory;\nClass TopGroupsShardRequestFactory; // Concrete implementation of ShardRequestFactory that creates ShardRequest instances for getting the top groups from all shards.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 3698, "repo": "solr-core-9.3.0", "code": "package responseprocessor;\n\nClass SearchGroupShardResponseProcessor; // Concrete implementation for merging SearchGroup instances from shard responses.\nClass StoredFieldsShardResponseProcessor; // Concrete implementation for processing the stored field values from shard responses.\nClass TopGroupsShardResponseProcessor; // Concrete implementation for merging TopGroups instances from shard responses.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 3699, "repo": "solr-core-9.3.0", "code": "package shardresultserializer;\n\nInterface ShardResultTransformer<T,​R>; // A ShardResultTransformer is responsible for transforming a grouped shard result into group related structures (such as TopGroups and SearchGroup) and visa versa.\nClass SearchGroupsResultTransformer; // Implementation for transforming SearchGroup into a NamedList structure and visa versa.\nClass TopGroupsResultTransformer; // Implementation for transforming TopGroups and TopDocs into a NamedList structure and vice versa.\n", "des": "Internal classes used to implement distributed result grouping"}
{"index": 3700, "repo": "solr-core-9.3.0", "code": "package endresulttransformer;\n\nInterface EndResultTransformer; // Responsible for transforming the grouped result into the final format for displaying purposes.\nInterface EndResultTransformer.SolrDocumentSource; // Abstracts the source for SolrDocument instances.\nClass GroupedEndResultTransformer; // Implementation of EndResultTransformer that keeps each grouped result separate in the final response.\nClass MainEndResultTransformer; // Implementation of EndResultTransformer that transforms the grouped result into the main result list in the response.\nClass SimpleEndResultTransformer; // Implementation of EndResultTransformer that transforms the grouped result into a single flat list.\n", "des": "APIs and classes for transforming result grouping results into the appropriate response format"}
{"index": 3701, "repo": "solr-core-9.3.0", "code": "package join;\n\nClass BlockJoinChildQParser;\nClass BlockJoinChildQParserPlugin; // Usage: {!child of=\"PARENT:true\"}PARENT_PRICE:10\nClass BlockJoinParentQParser;\nClass BlockJoinParentQParserPlugin; // Usage: {!parent which=\"PARENT:true\"}CHILD_PRICE:10 supports optional score parameter with one of ScoreMode values: None,Avg,Total,Min,Max.\nClass ChildFieldValueSourceParser;\nClass CrossCollectionJoinQParser;\nClass CrossCollectionJoinQuery;\nClass FiltersQParser;\nClass FiltersQParserPlugin;\nClass GraphPointsCollector;\nClass GraphQParserPlugin; // Query parser plugin for solr to wrap the graph query parser.\nClass GraphQuery; // GraphQuery - search for nodes and traverse edges in an index.\nClass GraphQueryParser; // Solr query parser that will handle parsing graph query requests.\nClass HashRangeQParser;\nClass HashRangeQParserPlugin; // Matches documents where the specified field hashes to a value within the given range.\nClass HashRangeQuery;\nClass MultiValueTermOrdinalCollector; // Populates a bitset of (top-level) ordinals based on field values in a multi-valued field.\nClass ScoreJoinQParserPlugin; // Create a query-time join query with scoring.\n", "des": "Classes related to joins."}
{"index": 3702, "repo": "solr-core-9.3.0", "code": "package mlt;\n\nClass CloudMLTQParser;\nClass MLTContentQParserPlugin;\nClass MLTQParserPlugin; // Usage: {!mlt qf=queryField1,queryField2}uniqueId\nClass SimpleMLTQParser;\n", "des": "APIs and classes for implementing MoreLikeThis (mlt) QueryParser."}
{"index": 3703, "repo": "solr-core-9.3.0", "code": "package neural;\n\nClass KnnQParser;\nClass KnnQParserPlugin; // A neural query parser to run K-nearest neighbors search on Dense Vector fields.\n", "des": "APIs and classes for implementing Neural (Dense Retrieval) QueryParsers."}
{"index": 3704, "repo": "solr-core-9.3.0", "code": "package similarities;\n\nClass BM25SimilarityFactory; // Factory for BM25Similarity.\nClass BooleanSimilarityFactory; // Factory for BooleanSimilarity\nClass ClassicSimilarityFactory; // Factory for ClassicSimilarity\nClass DFISimilarityFactory; // Factory for DFISimilarity\nClass DFRSimilarityFactory; // Factory for DFRSimilarity\nClass IBSimilarityFactory; // Factory for IBSimilarity\nClass LMDirichletSimilarityFactory; // Factory for LMDirichletSimilarity\nClass LMJelinekMercerSimilarityFactory; // Factory for LMJelinekMercerSimilarity\nClass SchemaSimilarityFactory; // SimilarityFactory that returns a global PerFieldSimilarityWrapper that delegates to the field type, if it's configured.\nClass SweetSpotSimilarityFactory; // Factory for SweetSpotSimilarity.\n", "des": "Factories for various built-in Lucene ranking models."}
{"index": 3705, "repo": "solr-core-9.3.0", "code": "package stats;\n\nClass CollectionStats; // Modifiable version of CollectionStatistics useful for aggregation of per-shard stats.\nClass ExactSharedStatsCache; // This class implements exact caching of statistics.\nClass ExactStatsCache; // This class implements exact caching of statistics.\nClass ExactStatsCache.ExactStatsSource;\nClass LocalStatsCache; // Default implementation that simply ignores global term statistics, and always uses local term statistics.\nClass LocalStatsSource; // Convenience class that wraps a local SolrIndexSearcher to provide local statistics.\nClass LRUStatsCache; // Unlike ExactStatsCache this implementation preserves term stats across queries in a set of LRU caches (with the same life-cycle as SolrIndexSearcher), and based on surface features of a query it determines the need to send additional requests to retrieve local term and collection statistics from shards.\nClass StatsCache; // This class represents a cache of global document frequency information for selected terms.\nClass StatsCache.StatsCacheMetrics;\nClass StatsSource; // The purpose of this class is only to provide two pieces of information necessary to create Weight from a Query, that is TermStatistics for a term and CollectionStatistics for the whole collection.\nClass StatsUtil; // Various utilities for de/serialization of term stats and collection stats.\nClass TermStats; // Modifiable version of TermStatistics useful for aggregation of per-shard stats.\n", "des": "APIs and Classes implementing the Stats component used for document frequency calculations."}
{"index": 3706, "repo": "solr-core-9.3.0", "code": "package security;\n\nInterface AuditLoggerPlugin.AuditEventFormatter; // Interface for formatting the event\nInterface AuditLoggerPlugin.MuteRule;\nInterface AuthorizationPlugin; // Authorization interface that needs to be implemented to write an authorization plugin.\nInterface BasicAuthPlugin.AuthenticationProvider;\nInterface ConfigEditablePlugin; // An interface to be implemented by a Plugin whose Configuration is runtime editable\nInterface HttpClientBuilderPlugin; // Plugin interface for configuring internal HttpClients.\nInterface PermissionNameProvider; // A requestHandler should implement this interface to provide the well known permission at request time\nInterface VerifiedUserRoles; // Interface used to pass verified user roles in a Principal object.\nClass AllowListUrlChecker; // Validates URLs based on an allow list or a ClusterState in SolrCloud.\nClass AuditEvent; // Audit event that takes request and auth context as input to be able to audit log custom things.\nClass AuditLoggerPlugin; // Base class for Audit logger plugins.\nClass AuditLoggerPlugin.JSONAuditEventFormatter; // Event formatter that returns event as JSON string\nClass AuthenticationPlugin;\nClass AuthorizationContext; // Request context for Solr to be used by Authorization plugin.\nClass AuthorizationContext.CollectionRequest;\nClass AuthorizationResponse;\nClass AuthorizationUtils;\nClass AuthorizationUtils.AuthorizationFailure;\nClass BasicAuthPlugin;\nClass CertAuthPlugin; // An authentication plugin that sets principal based on the certificate subject\nClass ExternalRoleRuleBasedAuthorizationPlugin; // Rule Based Authz plugin implementation which reads user roles from the request.\nClass HttpServletAuthorizationContext; // An AuthorizationContext implementation that delegates many methods to an underlying HttpServletRequest\nClass MultiAuthPlugin; // Authentication plugin that supports multiple Authorization schemes, such as Bearer and Basic.\nClass MultiAuthRuleBasedAuthorizationPlugin; // Authorization plugin designed to work with the MultiAuthPlugin to support different AuthorizationPlugin per scheme.\nClass MultiDestinationAuditLogger; // Audit logger that chains other loggers.\nClass PKIAuthenticationPlugin;\nClass PKIAuthenticationPlugin.PKIHeaderData;\nClass PrintWriterWrapper; // Wrapper for PrintWriter that delegates to constructor arg\nClass PublicKeyAPI; // V2 API for fetching the public key of the receiving node.\nClass PublicKeyAPI.PublicKeyResponse;\nClass PublicKeyHandler;\nClass RuleBasedAuthorizationPlugin; // Original implementation of Rule Based Authz plugin which configures user/role mapping in the security.json configuration\nClass RuleBasedAuthorizationPluginBase; // Base class for rule based authorization plugins\n", "des": "Commonly used classes for Solr security framework."}
{"index": 3707, "repo": "solr-core-9.3.0", "code": "package servlet;\n\npackage servlet.cache; // Caching related classes used in the Solr HTTP API\nInterface PathExcluder; // Denotes an object, usually a servlet that denies access to some paths based on the supplied patterns.\nInterface SolrDispatchFilter.HttpSolrCallFactory; // internal API\nClass CoordinatorHttpSolrCall;\nClass CoordinatorHttpSolrCall.Factory;\nClass CoreContainerProvider; // A service that can provide access to solr cores.\nClass DirectSolrConnection; // DirectSolrConnection provides an interface to Solr that is similar to the HTTP interface, but does not require an HTTP connection.\nClass HttpSolrCall; // This class represents a call made to Solr\nClass LoadAdminUiServlet; // A simple servlet to load the Solr Admin UI\nClass QueryRateLimiter; // Implementation of RequestRateLimiter specific to query request types.\nClass RateLimitManager; // This class is responsible for managing rate limiting per request type.\nClass RateLimitManager.Builder;\nClass RedirectServlet; // A Simple redirection servlet to help us deprecate old UI elements\nClass RequestRateLimiter; // Handles rate limiting for a specific request type.\nClass ResponseUtils; // Response helper methods.\nClass ServletInputStreamWrapper; // Provides a convenient extension of the ServletInputStream class that can be subclassed by developers wishing to adapt the behavior of a Stream.\nClass ServletOutputStreamWrapper; // Provides a convenient extension of the ServletOutputStream class that can be subclassed by developers wishing to adapt the behavior of a Stream.\nClass ServletUtils; // Various Util methods for interaction on servlet level, i.e.\nClass ServletUtils.ClosedServletInputStream;\nClass ServletUtils.ClosedServletOutputStream;\nClass SolrDispatchFilter; // This filter looks at the incoming URL maps them to handlers defined in solrconfig.xml\nClass SolrRequestParsers;\nEnum SolrDispatchFilter.Action; // Enum to define action that needs to be processed.\nClass ExceptionWhileTracing;\nClass SolrAuthenticationException;\n", "des": "Servlet related classes for powering the Solr HTTP API"}
{"index": 3708, "repo": "solr-core-9.3.0", "code": "package cache;\n\nClass HttpCacheHeaderUtil;\nEnum Method;\n", "des": "Caching related classes used in the Solr HTTP API"}
{"index": 3709, "repo": "solr-core-9.3.0", "code": "package spelling;\n\npackage spelling.suggest; // APIs and classes used by the SpellCheckComponent\nClass AbstractLuceneSpellChecker; // Abstract base class for all Lucene-based spell checking implementations.\nClass ConjunctionSolrSpellChecker; // This class lets a query be run through multiple spell checkers.\nClass DirectSolrSpellChecker; // Spellchecker implementation that uses DirectSpellChecker\nClass FileBasedSpellChecker; // A spell checker implementation that loads words from a text file (one word per line).\nClass IndexBasedSpellChecker; // A spell checker implementation that loads words from Solr as well as arbitrary Lucene indices.\nClass PossibilityIterator; // Given a list of possible Spelling Corrections for multiple mis-spelled words in a query, This iterator returns Possible Correction combinations ordered by reasonable probability that such a combination will return actual hits if re-queried.\nClass PossibilityIterator.RankedSpellPossibility;\nClass QueryConverter; // The QueryConverter is an abstract base class defining a method for converting input \"raw\" queries into a set of tokens for spell checking.\nClass ResultEntry;\nClass SolrSpellChecker; // Refer to https://solr.apache.org/guide/solr/latest/query-guide/spell-checking.html for more details.\nClass SpellCheckCollation;\nClass SpellCheckCollator;\nClass SpellCheckCorrection;\nClass SpellingOptions;\nClass SpellingQueryConverter; // Converts the query string to a Collection of Lucene tokens using a regular expression.\nClass SpellingResult; // Implementations of SolrSpellChecker must return suggestions as SpellResult instance.\nClass SuggestQueryConverter; // Passes the entire query string to the configured analyzer as-is.\nClass Token;\nClass WordBreakSolrSpellChecker; // A spellchecker that breaks and combines words.\nEnum WordBreakSolrSpellChecker.BreakSuggestionTieBreaker; // Specify a value on the \"breakSugestionTieBreaker\" parameter.\n", "des": "APIs and classes used by the SpellCheckComponent"}
{"index": 3710, "repo": "solr-core-9.3.0", "code": "package suggest;\n\npackage suggest.fst; // Factories for FST and Analyzing based Suggesters\npackage suggest.jaspell; // Factories for JaSpell based Suggesters\npackage suggest.tst; // Factories for TST based Suggesters\nInterface SuggesterParams;\nClass DictionaryFactory; // Encapsulates shared fields for all types of dictionaryFactory classes\nClass DocumentDictionaryFactory; // Factory for DocumentDictionary\nClass DocumentExpressionDictionaryFactory; // Factory for DocumentValueSourceDictionary\nClass FileDictionaryFactory; // Factory for FileDictionary\nClass HighFrequencyDictionaryFactory; // Factory for HighFrequencyDictionary\nClass LookupFactory; // Suggester factory for creating Lookup instances.\nClass SolrSuggester; // Responsible for loading the lookup and dictionary Implementations specified by the SolrConfig.\nClass Suggester;\nClass SuggesterOptions; // Encapsulates the inputs required to be passed on to the underlying suggester in SolrSuggester\nClass SuggesterResult; // Encapsulates the results returned by the suggester in SolrSuggester\n", "des": "APIs and classes used by the SpellCheckComponent"}
{"index": 3711, "repo": "solr-core-9.3.0", "code": "package fst;\n\nClass AnalyzingInfixLookupFactory; // Factory for AnalyzingInfixSuggester\nClass AnalyzingLookupFactory; // Factory for AnalyzingSuggester\nClass BlendedInfixLookupFactory; // Factory for BlendedInfixLookupFactory\nClass FreeTextLookupFactory; // LookupFactory implementation for FreeTextSuggester\nClass FSTLookupFactory; // Factory for FSTCompletionLookup\nClass FuzzyLookupFactory; // Factory for FuzzySuggester\nClass WFSTLookupFactory; // Factory for WFSTCompletionLookup\n", "des": "Factories for FST and Analyzing based Suggesters"}
{"index": 3712, "repo": "solr-core-9.3.0", "code": "package jaspell;\n\nClass JaspellLookup;\nClass JaspellLookupFactory; // Factory for JaspellLookup Note: This Suggester is not very RAM efficient.\nClass JaspellTernarySearchTrie;\nClass JaspellTernarySearchTrie.TSTNode; // An inner class of Ternary Search Trie that represents a node in the trie.\n", "des": "Factories for JaSpell based Suggesters"}
{"index": 3713, "repo": "solr-core-9.3.0", "code": "package tst;\n\nClass TSTLookupFactory; // Factory for TSTLookup\n", "des": "Factories for TST based Suggesters"}
{"index": 3714, "repo": "solr-core-9.3.0", "code": "package uninverting;\n\nInterface FieldCache; // Expert: Maintains caches of term values.\nInterface FieldCache.Parser; // interface to all parsers.\nClass DocTermOrds; // This class enables fast access to multiple term ords for a specified field across all docIDs.\nClass FieldCache.CacheEntry; // EXPERT: A unique Identifier/Description for each item in the FieldCache.\nClass FieldCache.CreationPlaceholder; // Placeholder indicating creation of this cache is currently in-progress.\nClass FieldCache.PointParser; // Base class for points parsers.\nClass FieldCacheImpl; // Expert: The default cache implementation, storing all values in memory.\nClass FieldCacheImpl.BinaryDocValuesImpl;\nClass FieldCacheImpl.LongsFromArray;\nClass FieldCacheImpl.SortedDocValuesImpl;\nClass UninvertingReader; // A FilterReader that exposes indexed values as if they also had docvalues.\nClass UninvertingReader.FieldCacheStats; // Return information about the backing cache\nEnum UninvertingReader.Type; // Specifies the type of uninversion to apply for the field.\n", "des": "Support for creating docvalues on-the-fly from the inverted index at runtime."}
{"index": 3715, "repo": "solr-core-9.3.0", "code": "package update;\n\npackage update.processor; // UpdateRequestProcessorFactory APIs and implementations for use in UpdateRequestProcessorChains\nInterface SolrCoreState.IndexWriterCloser;\nInterface VersionBucket.CheckedFunction<T,​R>;\nClass AddUpdateCommand; // An UpdateCommand for adding or updating one document.\nClass CommitTracker; // Helper class for tracking autoCommit state.\nClass CommitUpdateCommand; // A commit index command encapsulated in an object.\nClass DefaultSolrCoreState;\nClass DeleteUpdateCommand;\nClass DirectUpdateHandler2; // DirectUpdateHandler2 implements an UpdateHandler where documents are added directly to the main Lucene index as opposed to adding to a separate smaller index.\nClass DocumentBuilder; // Builds a Lucene Document from a SolrInputDocument.\nClass IndexFingerprint;\nClass LoggingInfoStream; // An InfoStream implementation which passes messages on to Solr's logging.\nClass MemOutputStream;\nClass MergeIndexesCommand; // A merge indexes command encapsulated in an object.\nClass PeerSync; // This class is useful for performing peer to peer synchronization of recently indexed update commands during recovery process.\nClass PeerSync.MissedUpdatesFinder; // Helper class for doing comparison ourUpdates and other replicas's updates to find the updates that we missed\nClass PeerSync.MissedUpdatesRequest; // Result of PeerSync.MissedUpdatesFinder\nClass PeerSync.PeerSyncResult;\nClass PeerSyncWithLeader;\nClass PeerSyncWithLeader.MissedUpdatesFinder; // Helper class for doing comparison ourUpdates and other replicas's updates to find the updates that we missed\nClass RollbackUpdateCommand;\nClass SolrCmdDistributor; // Used for distributing commands from a shard leader to its replicas.\nClass SolrCmdDistributor.ForwardNode;\nClass SolrCmdDistributor.Node;\nClass SolrCmdDistributor.Req;\nClass SolrCmdDistributor.Response;\nClass SolrCmdDistributor.SolrError;\nClass SolrCmdDistributor.StdNode;\nClass SolrCoreState; // The state in this class can be easily shared between SolrCores across SolrCore reloads.\nClass SolrIndexConfig; // This config object encapsulates IndexWriter config params, defined in the <indexConfig> section of solrconfig.xml\nClass SolrIndexSplitter;\nClass SolrIndexWriter; // An IndexWriter that is configured via Solr config mechanisms.\n", "des": "APIs and classes for managing index updates"}
{"index": 3716, "repo": "solr-core-9.3.0", "code": "package processor;\n\nInterface DistributingUpdateProcessorFactory; // A marker interface for denoting that a factory is responsible for handling distributed communication of updates across a SolrCloud cluster.\nInterface FieldMutatingUpdateProcessor.FieldNameSelector; // Interface for identifying which fields should be mutated\nInterface UpdateRequestProcessorFactory.RunAlways; // A marker interface for UpdateRequestProcessorFactory implementations indicating that the factory should be used even if the update.distrib parameter would otherwise cause it to not be run.\nClass AbstractDefaultValueUpdateProcessorFactory; // Base class that can be extended by any UpdateRequestProcessorFactory designed to add a default value to the document in an AddUpdateCommand when that field is not already specified.\nClass AddSchemaFieldsUpdateProcessorFactory; // This processor will dynamically add fields to the schema if an input document contains one or more fields that don't match any field or dynamic field in the schema.\nClass AllValuesOrNoneFieldMutatingUpdateProcessor; // Abstract subclass of FieldMutatingUpdateProcessor for implementing UpdateProcessors that will mutate all individual values of a selected field independently.\nClass AtomicUpdateDocumentMerger;\nClass AtomicUpdateProcessorFactory; // An update processor that will convert conventional field-value document to atomic update document\nClass ClassificationUpdateProcessorFactory; // This class implements an UpdateProcessorFactory for the Classification Update Processor.\nClass ClassificationUpdateProcessorParams;\nClass CloneFieldUpdateProcessorFactory; // Clones the values found in any matching source field into a configured dest field.\nClass ConcatFieldUpdateProcessorFactory; // Concatenates multiple values for fields matching the specified conditions using a configurable delimiter which defaults to \", \".\nClass CountFieldValuesUpdateProcessorFactory; // Replaces any list of values for a field matching the specified conditions with the count of the number of values for that field.\nClass DefaultValueUpdateProcessorFactory; // An update processor that adds a constant default value to any document being added that does not already have a value in the specified field.\nClass DistributedUpdateProcessor;\nClass DistributedUpdateProcessor.LeaderRequestReplicationTracker;\nClass DistributedUpdateProcessor.RollupRequestReplicationTracker;\nClass DistributedUpdateProcessorFactory; // Factory for DistributedUpdateProcessor.\nClass DistributedZkUpdateProcessor;\nClass DocBasedVersionConstraintsProcessor;\n", "des": "UpdateRequestProcessorFactory APIs and implementations for use in UpdateRequestProcessorChains"}
{"index": 3717, "repo": "solr-core-9.3.0", "code": "package util;\n\npackage util.circuitbreaker; // Support for triggering exceptions on excessive resource usage\npackage util.configuration; // Common Util APIs related to Solr configuration.\npackage util.hll; // A fork of Java-HyperLogLog package tweaked not to depend on fastutil and with cleanups to make it lean and clean.\npackage util.plugin; // Common APIs related to implementing Solr plugins\npackage util.stats; // Utilities for collecting statistics\npackage util.tracing; // Tracing related utilities\npackage util.vector; // Utilities for dense vector search\nInterface ConcurrentLRUCache.EvictionListener<K,​V>;\nInterface DynamicMap; // An efficient map for storing keys as integer in range from 0..n with n can be estimated up-front.\nInterface FloatConsumer; // Represents an operation that accepts a single float-valued argument and returns no result.\nInterface IOFunction<T,​R>; // A Function that may throw an IOException\nInterface LongIterator; // A long-based iterator.\nInterface RTimer.TimerImpl;\nInterface TestInjection.Hook;\nClass AdjustableSemaphore;\nClass BoundedTreeSet<E>; // A TreeSet that ensures it never grows beyond a max size.\nClass ConcurrentLRUCache<K,​V>; // A LRU cache implementation based upon ConcurrentHashMap and other techniques to reduce contention and synchronization overhead to utilize multiple CPU cores more effectively.\nClass ConcurrentLRUCache.CacheEntry<K,​V>;\nClass ConcurrentLRUCache.Stats;\nClass CryptoKeys; // A utility class with helpers for various signature and certificate tasks\nClass CryptoKeys.RSAKeyPair;\nClass DataConfigNode; // ConfigNode impl that copies and maintains data internally from DOM\nClass DateMathParser; // A Simple Utility class for parsing \"math\" like strings relating to Dates.\nClass DistanceUnits; // Used with a spatial field type for all distance measurements.\nClass DOMConfigNode; // Read using DOM\nClass FileUtils;\nClass IdUtils; // Helper class for generating unique ID-s.\nClass IntFloatDynamicMap;\nClass IntIntDynamicMap;\nClass IntLongDynamicMap;\nClass JmxUtil; // Utility methods to find a MBeanServer.\nClass LocaleUtils;\n", "des": "Common utility classes used throughout Solr"}
{"index": 3718, "repo": "solr-core-9.3.0", "code": "package circuitbreaker;\n\nClass CircuitBreaker; // Default class to define circuit breakers for Solr.\nClass CircuitBreaker.CircuitBreakerConfig;\nClass CircuitBreakerManager; // Manages all registered circuit breaker instances.\nClass CPUCircuitBreaker; // Tracks current CPU usage and triggers if the specified threshold is breached.\nClass MemoryCircuitBreaker; // Tracks the current JVM heap usage and triggers if it exceeds the defined percentage of the maximum heap size allocated to the JVM.\n", "des": "Support for triggering exceptions on excessive resource usage"}
{"index": 3719, "repo": "solr-core-9.3.0", "code": "package configuration;\n\npackage configuration.providers; // TODO\nInterface SSLCredentialProvider; // Interface for different source of SSL configurations.\nClass SSLConfigurations; // Dedicated object to handle Solr configurations\nClass SSLConfigurations.SysProps;\nClass SSLConfigurationsFactory;\nClass SSLCredentialProviderFactory; // Class responsible to build SSL credential providers\nEnum SSLCredentialProvider.CredentialType;\n", "des": "Common Util APIs related to Solr configuration."}
{"index": 3720, "repo": "solr-core-9.3.0", "code": "package providers;\n\nClass AbstractSSLCredentialProvider; // Abstract provider with default implementation\nClass EnvSSLCredentialProvider; // Environment variable based SSL configuration provider\nClass EnvSSLCredentialProvider.EnvVars;\nClass SysPropSSLCredentialProvider; // System property based SSL configuration provider\n", "des": "TODO"}
{"index": 3721, "repo": "solr-core-9.3.0", "code": "package hll;\n\nInterface ISchemaVersion; // A serialization schema for HLLs.\nInterface IWordDeserializer; // Reads 'words' of a fixed width, in sequence, from a byte array.\nClass HLL; // A probabilistic set of hashed long elements.\nEnum HLLType; // The types of algorithm/data structure that HLL can utilize.\n", "des": "A fork of Java-HyperLogLog package tweaked not to depend on fastutil and with cleanups to make it lean and clean."}
{"index": 3722, "repo": "solr-core-9.3.0", "code": "package plugin;\n\nInterface MapInitializedPlugin; // A plugin that can be initialized with a Map<String,String>\nInterface NamedListInitializedPlugin; // A plugin that can be initialized with a NamedList\nInterface PluginInfoInitialized; // A plugin that can be initialized with a PluginInfo\nInterface SolrCoreAware;\nClass AbstractPluginLoader<T>; // An abstract super class that manages standard solr-style plugin configuration.\nClass MapPluginLoader<T extends MapInitializedPlugin>;\nClass NamedListPluginLoader<T extends NamedListInitializedPlugin>;\n", "des": "Common APIs related to implementing Solr plugins"}
{"index": 3723, "repo": "solr-core-9.3.0", "code": "package stats;\n\nInterface HttpClientMetricNameStrategy; // Strategy for creating metric names for HttpClient Copied from metrics-httpclient library\nInterface InstrumentedHttpListenerFactory.NameStrategy;\nClass InstrumentedHttpListenerFactory; // A HttpListenerFactory tracks metrics interesting to solr Inspired and partially copied from dropwizard httpclient library\nClass InstrumentedHttpRequestExecutor; // Sub-class of HttpRequestExecutor which tracks metrics interesting to solr Inspired and partially copied from dropwizard httpclient library\nClass InstrumentedPoolingHttpClientConnectionManager; // Sub-class of PoolingHttpClientConnectionManager which tracks metrics interesting to Solr.\nClass MetricUtils; // Metrics specific utility functions.\n", "des": "Utilities for collecting statistics"}
{"index": 3724, "repo": "solr-core-9.3.0", "code": "package tracing;\n\nClass HttpServletCarrier; // A Carrier for extract Span context out of request headers\nClass SolrRequestCarrier; // An OpenTracing Carrier for injecting Span context through SolrRequest\nClass TraceUtils; // Utilities for distributed tracing.\n", "des": "Tracing related utilities"}
{"index": 3725, "repo": "solr-core-9.3.0", "code": "package vector;\n\nClass ByteDenseVectorParser;\nClass DenseVectorParser;\nClass FloatDenseVectorParser;\nEnum DenseVectorParser.BuilderPhase;\n", "des": "Utilities for dense vector search"}
{"index": 3726, "repo": "lucene-queryparser-9.7.0", "code": "package charstream;\n\nInterface CharStream; // This interface describes a character stream that maintains line and column number positions of the characters.\nClass FastCharStream; // An efficient implementation of JavaCC's CharStream interface.\n", "des": "This package contains reusable parts for javacc-generated grammars (query parsers)."}
{"index": 3727, "repo": "lucene-queryparser-9.7.0", "code": "package classic;\n\nInterface QueryParserConstants; // Token literal values and constants.\nClass MultiFieldQueryParser; // A QueryParser which constructs queries to search multiple fields.\nClass QueryParser; // This class is generated by JavaCC.\nClass QueryParserBase; // This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.\nClass QueryParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nEnum QueryParser.Operator; // The default operator for parsing queries.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "A simple query parser implemented with JavaCC."}
{"index": 3728, "repo": "lucene-queryparser-9.7.0", "code": "package complexPhrase;\n\nClass ComplexPhraseQueryParser; // QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\".\n", "des": "QueryParser which permits complex phrase query syntax eg \"(john jon jonathan~) peters*\""}
{"index": 3729, "repo": "lucene-queryparser-9.7.0", "code": "package ext;\n\nClass ExtendableQueryParser; // The ExtendableQueryParser enables arbitrary query parser extension based on a customizable field naming scheme.\nClass ExtensionQuery; // ExtensionQuery holds all query components extracted from the original query string like the query field and the extension query string.\nClass Extensions; // The Extensions class represents an extension mapping to associate ParserExtension instances with extension keys.\nClass Extensions.Pair<Cur,​Cud>; // This class represents a generic pair.\nClass ParserExtension; // This class represents an extension base class to the Lucene standard QueryParser.\n", "des": "Extendable QueryParser provides a simple and flexible extension mechanism by overloading query field names."}
{"index": 3730, "repo": "lucene-queryparser-9.7.0", "code": "package core;\n\npackage core.builders; // Necessary classes to implement query builders.\npackage core.config; // Base classes used to configure the query processing.\npackage core.messages; // Messages usually used by query parser implementations.\npackage core.nodes; // Query nodes commonly used by query parser implementations.\npackage core.parser; // Necessary interfaces to implement text parsers.\npackage core.processors; // Interfaces and implementations used by query node processors\npackage core.util; // Utility classes to used with the Query Parser.\nClass QueryParserHelper; // This class is a helper for the query parser framework, it does all the three query parser phrases at once: text parsing, query processing and query building.\nClass QueryNodeException; // This exception should be thrown if something wrong happens when dealing with QueryNodes.\nClass QueryNodeParseException; // This should be thrown when an exception happens during the query parsing from string to the query node tree.\nClass QueryNodeError; // Error class with NLS support\n", "des": "Core classes of the flexible query parser framework."}
{"index": 3731, "repo": "lucene-queryparser-9.7.0", "code": "package builders;\n\nInterface QueryBuilder; // This interface is used by implementors classes that builds some kind of object from a query tree.\nClass QueryTreeBuilder; // This class should be used when there is a builder for each type of node.\n", "des": "Necessary classes to implement query builders."}
{"index": 3732, "repo": "lucene-queryparser-9.7.0", "code": "package config;\n\nInterface FieldConfigListener; // This interface should be implemented by classes that wants to listen for field configuration requests.\nClass AbstractQueryConfig; // This class is the base of QueryConfigHandler and FieldConfig.\nClass ConfigurationKey<T>; // An instance of this class represents a key that is used to retrieve a value from AbstractQueryConfig.\nClass FieldConfig; // This class represents a field configuration.\nClass QueryConfigHandler; // This class can be used to hold any query configuration and no field configuration.\n", "des": "Base classes used to configure the query processing."}
{"index": 3733, "repo": "lucene-queryparser-9.7.0", "code": "package messages;\n\nClass QueryParserMessages; // Flexible Query Parser message bundle class\n", "des": "Messages usually used by query parser implementations."}
{"index": 3734, "repo": "lucene-queryparser-9.7.0", "code": "package nodes;\n\nInterface FieldableNode; // A query node implements FieldableNode interface to indicate that its children and itself are associated to a specific field.\nInterface FieldValuePairQueryNode<T>; // This interface should be implemented by QueryNode that holds a field and an arbitrary value.\nInterface QueryNode; // A QueryNode is a interface implemented by all nodes on a QueryNode tree.\nInterface RangeQueryNode<T extends FieldValuePairQueryNode<?>>; // This interface should be implemented by a QueryNode that represents some kind of range query.\nInterface TextableQueryNode; // Interface for a node that has text as a CharSequence\nInterface ValueQueryNode<T>; // This interface should be implemented by QueryNode that holds an arbitrary value.\nClass AndQueryNode; // A AndQueryNode represents an AND boolean operation performed on a list of nodes.\nClass AnyQueryNode; // A AnyQueryNode represents an ANY operator performed on a list of nodes.\nClass BooleanQueryNode; // A BooleanQueryNode represents a list of elements which do not have an explicit boolean operator defined between them.\nClass BoostQueryNode; // A BoostQueryNode boosts the QueryNode tree which is under this node.\nClass DeletedQueryNode; // A DeletedQueryNode represents a node that was deleted from the query node tree.\nClass FieldQueryNode; // A FieldQueryNode represents a element that contains field/text tuple\nClass FuzzyQueryNode; // A FuzzyQueryNode represents a element that contains field/text/similarity tuple\nClass GroupQueryNode; // A GroupQueryNode represents a location where the original user typed real parenthesis on the query string.\nClass MatchAllDocsQueryNode; // A MatchAllDocsQueryNode indicates that a query node tree or subtree will match all documents if executed in the index.\nClass MatchNoDocsQueryNode; // A MatchNoDocsQueryNode indicates that a query node tree or subtree will not match any documents if executed in the index.\nClass ModifierQueryNode; // A ModifierQueryNode indicates the modifier value (+,-,?,NONE) for each term on the query string.\nClass NoTokenFoundQueryNode; // A NoTokenFoundQueryNode is used if a term is convert into no tokens by the tokenizer/lemmatizer/analyzer (null).\n", "des": "Query nodes commonly used by query parser implementations."}
{"index": 3735, "repo": "lucene-queryparser-9.7.0", "code": "package parser;\n\nInterface EscapeQuerySyntax; // A parser needs to implement EscapeQuerySyntax to allow the QueryNode to escape the queries, when the toQueryString method is called.\nInterface SyntaxParser; // A parser needs to implement SyntaxParser interface\nEnum EscapeQuerySyntax.Type; // Type of escaping: String for escaping syntax, NORMAL for escaping reserved words (like AND) in terms\n", "des": "Necessary interfaces to implement text parsers."}
{"index": 3736, "repo": "lucene-queryparser-9.7.0", "code": "package processors;\n\nInterface QueryNodeProcessor; // A QueryNodeProcessor is an interface for classes that process a QueryNode tree.\nClass NoChildOptimizationQueryNodeProcessor; // A NoChildOptimizationQueryNodeProcessor removes every BooleanQueryNode, BoostQueryNode, TokenizedPhraseQueryNode or ModifierQueryNode that do not have a valid children.\nClass QueryNodeProcessorImpl; // This is a default implementation for the QueryNodeProcessor interface, it's an abstract class, so it should be extended by classes that want to process a QueryNode tree.\nClass QueryNodeProcessorPipeline; // A QueryNodeProcessorPipeline class should be used to build a query node processor pipeline.\nClass RemoveDeletedQueryNodesProcessor; // A QueryNodeProcessorPipeline class removes every instance of DeletedQueryNode from a query node tree.\n", "des": "Interfaces and implementations used by query node processors"}
{"index": 3737, "repo": "lucene-queryparser-9.7.0", "code": "package util;\n\nClass QueryNodeOperation; // Allow joining 2 QueryNode Trees, into one.\nClass StringUtils; // String manipulation routines\nClass UnescapedCharSequence; // CharsSequence with escaped chars information.\n", "des": "Utility classes to used with the Query Parser."}
{"index": 3738, "repo": "lucene-queryparser-9.7.0", "code": "package messages;\n\nInterface Message; // Message Interface for a lazy loading.\nInterface NLSException; // Interface that exceptions should implement to support lazy loading of messages.\nClass MessageImpl; // Default implementation of Message interface.\nClass NLS; // MessageBundles classes extend this class, to implement a bundle.\n", "des": "For Native Language Support (NLS), system of software internationalization."}
{"index": 3739, "repo": "lucene-queryparser-9.7.0", "code": "package precedence;\n\npackage precedence.processors; // Lucene Precedence Query Parser Processors\nClass PrecedenceQueryParser; // This query parser works exactly as the standard query parser ( StandardQueryParser ), except that it respect the boolean precedence, so <a AND b OR c AND d> is parsed to <(+a +b) (+c +d)> instead of <+a +b +c +d>.\n", "des": "Precedence Query Parser Implementation"}
{"index": 3740, "repo": "lucene-queryparser-9.7.0", "code": "package processors;\n\nClass BooleanModifiersQueryNodeProcessor; // This processor is used to apply the correct ModifierQueryNode to BooleanQueryNodes children.\nClass PrecedenceQueryNodeProcessorPipeline; // This processor pipeline extends StandardQueryNodeProcessorPipeline and enables boolean precedence on it.\n", "des": "Lucene Precedence Query Parser Processors"}
{"index": 3741, "repo": "lucene-queryparser-9.7.0", "code": "package standard;\n\npackage standard.builders; // Standard Lucene Query Node Builders.\npackage standard.config; // Standard Lucene Query Configuration.\npackage standard.nodes; // Standard Lucene Query Nodes.\npackage standard.parser; // Lucene Query Parser\npackage standard.processors; // Lucene Query Node Processors.\nInterface CommonQueryParserConfiguration; // Configuration options common across queryparser implementations.\nClass QueryParserUtil; // This class defines utility methods to (help) parse query strings into Query objects.\nClass StandardQueryParser; // The StandardQueryParser is a pre-assembled query parser that supports most features of the classic Lucene query parser, allows dynamic configuration of some of its features (like multi-field expansion or wildcard query restrictions) and adds support for new query types and expressions.\n", "des": "Lucene Flexible Query Parser Implementation"}
{"index": 3742, "repo": "lucene-queryparser-9.7.0", "code": "package builders;\n\nInterface StandardQueryBuilder; // This interface should be implemented by every class that wants to build Query objects from QueryNode objects.\nClass AnyQueryNodeBuilder; // Builds a BooleanQuery of SHOULD clauses, possibly with some minimum number to match.\nClass BooleanQueryNodeBuilder; // Builds a BooleanQuery object from a BooleanQueryNode object.\nClass BoostQueryNodeBuilder; // This builder basically reads the Query object set on the BoostQueryNode child using QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID and applies the boost value defined in the BoostQueryNode.\nClass DummyQueryNodeBuilder; // This builder does nothing.\nClass FieldQueryNodeBuilder; // Builds a TermQuery object from a FieldQueryNode object.\nClass FuzzyQueryNodeBuilder; // Builds a FuzzyQuery object from a FuzzyQueryNode object.\nClass GroupQueryNodeBuilder; // Builds no object, it only returns the Query object set on the GroupQueryNode object using a QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID tag.\nClass IntervalQueryNodeBuilder; // Builds a Query from an IntervalQueryNode.\nClass MatchAllDocsQueryNodeBuilder; // Builds a MatchAllDocsQuery object from a MatchAllDocsQueryNode object.\nClass MatchNoDocsQueryNodeBuilder; // Builds a MatchNoDocsQuery object from a MatchNoDocsQueryNode object.\nClass MinShouldMatchNodeBuilder; // Builds a BooleanQuery from a MinShouldMatchNode.\nClass ModifierQueryNodeBuilder; // Builds no object, it only returns the Query object set on the ModifierQueryNode object using a QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID tag.\nClass MultiPhraseQueryNodeBuilder; // Builds a MultiPhraseQuery object from a MultiPhraseQueryNode object.\nClass PhraseQueryNodeBuilder; // Builds a PhraseQuery object from a TokenizedPhraseQueryNode object.\nClass PointRangeQueryNodeBuilder; // Builds PointValues range queries out of PointRangeQueryNodes.\nClass PrefixWildcardQueryNodeBuilder; // Builds a PrefixQuery object from a PrefixWildcardQueryNode object.\nClass RegexpQueryNodeBuilder; // Builds a RegexpQuery object from a RegexpQueryNode object.\n", "des": "Standard Lucene Query Node Builders."}
{"index": 3743, "repo": "lucene-queryparser-9.7.0", "code": "package config;\n\nClass FieldBoostMapFCListener; // This listener listens for every field configuration request and assign a StandardQueryConfigHandler.ConfigurationKeys.BOOST to the equivalent FieldConfig based on a defined map: fieldName -> boostValue stored in StandardQueryConfigHandler.ConfigurationKeys.FIELD_BOOST_MAP.\nClass FieldDateResolutionFCListener; // This listener listens for every field configuration request and assign a StandardQueryConfigHandler.ConfigurationKeys.DATE_RESOLUTION to the equivalent FieldConfig based on a defined map: fieldName -> DateTools.Resolution stored in StandardQueryConfigHandler.ConfigurationKeys.FIELD_DATE_RESOLUTION_MAP.\nClass FuzzyConfig; // Configuration parameters for FuzzyQuerys\nClass NumberDateFormat; // This Format parses Long into date strings and vice-versa.\nClass PointsConfig; // This class holds the configuration used to parse numeric queries and create PointValues queries.\nClass PointsConfigListener; // This listener is used to listen to FieldConfig requests in QueryConfigHandler and add StandardQueryConfigHandler.ConfigurationKeys.POINTS_CONFIG based on the StandardQueryConfigHandler.ConfigurationKeys.POINTS_CONFIG_MAP set in the QueryConfigHandler.\nClass StandardQueryConfigHandler; // This query configuration handler is used for almost every processor defined in the StandardQueryNodeProcessorPipeline processor pipeline.\nClass StandardQueryConfigHandler.ConfigurationKeys; // Class holding keys for StandardQueryNodeProcessorPipeline options.\nEnum StandardQueryConfigHandler.Operator; // Boolean Operator: AND or OR\n", "des": "Standard Lucene Query Configuration."}
{"index": 3744, "repo": "lucene-queryparser-9.7.0", "code": "package nodes;\n\npackage nodes.intervalfn; // This package contains classes that implement interval function support for the standard syntax parser.\nClass AbstractRangeQueryNode<T extends FieldValuePairQueryNode<?>>; // This class should be extended by nodes intending to represent range queries.\nClass BooleanModifierNode; // A BooleanModifierNode has the same behaviour as ModifierQueryNode, it only indicates that this modifier was added by BooleanQuery2ModifierNodeProcessor and not by the user.\nClass IntervalQueryNode; // Node that represents an interval function.\nClass MinShouldMatchNode; // Node that represents a minimum-should-match restriction on a GroupQueryNode.\nClass MultiPhraseQueryNode; // A MultiPhraseQueryNode indicates that its children should be used to build a MultiPhraseQuery instead of PhraseQuery.\nClass PointQueryNode; // This query node represents a field query that holds a point value.\nClass PointRangeQueryNode; // This query node represents a range query composed by PointQueryNode bounds, which means the bound values are Numbers.\nClass PrefixWildcardQueryNode; // A PrefixWildcardQueryNode represents wildcardquery that matches abc* or *.\nClass RegexpQueryNode; // A RegexpQueryNode represents RegexpQuery query Examples: /[a-z]|[0-9]/\nClass SynonymQueryNode; // QueryNode for clauses that are synonym of each other.\nClass TermRangeQueryNode; // This query node represents a range query composed by FieldQueryNode bounds, which means the bound values are strings.\nClass WildcardQueryNode; // A WildcardQueryNode represents wildcard query This does not apply to phrases.\n", "des": "Standard Lucene Query Nodes."}
{"index": 3745, "repo": "lucene-queryparser-9.7.0", "code": "package intervalfn;\n\nClass After; // Node that represents Intervals.after(IntervalsSource, IntervalsSource).\nClass AnalyzedText; // Node that represents Intervals.analyzedText(String, Analyzer, String, int, boolean).\nClass AtLeast; // Node that represents Intervals.atLeast(int, IntervalsSource...).\nClass Before; // Node that represents Intervals.before(IntervalsSource, IntervalsSource).\nClass ContainedBy; // Node that represents Intervals.containedBy(IntervalsSource, IntervalsSource).\nClass Containing; // Node that represents Intervals.containing(IntervalsSource, IntervalsSource).\nClass Extend; // Node that represents Intervals.extend(IntervalsSource, int, int).\nClass FuzzyTerm; // An interval function equivalent to FuzzyQuery.\nClass IntervalFunction; // Representation of an interval function that can be converted to IntervalsSource.\nClass MaxGaps; // Node that represents Intervals.maxgaps(int, IntervalsSource).\nClass MaxWidth; // Node that represents Intervals.maxwidth(int, IntervalsSource).\nClass NonOverlapping; // Node that represents Intervals.nonOverlapping(IntervalsSource, IntervalsSource) .\nClass NotContainedBy; // Node that represents Intervals.notContainedBy(IntervalsSource, IntervalsSource).\nClass NotContaining; // Node that represents Intervals.notContaining(IntervalsSource, IntervalsSource).\nClass NotWithin; // Node that represents Intervals.notWithin(IntervalsSource, int, IntervalsSource).\nClass Or; // Node that represents Intervals.or(IntervalsSource...).\nClass Ordered; // Node that represents Intervals.ordered(IntervalsSource...).\nClass Overlapping; // Node that represents Intervals.overlapping(IntervalsSource, IntervalsSource).\nClass Phrase; // Node that represents Intervals.phrase(String...).\nClass Unordered; // Node that represents Intervals.unordered(IntervalsSource...).\nClass UnorderedNoOverlaps; // Node that represents Intervals.unorderedNoOverlaps(IntervalsSource, IntervalsSource).\nClass Wildcard; // Node that represents Intervals.wildcard(BytesRef).\nClass Within; // Node that represents Intervals.within(IntervalsSource, int, IntervalsSource).\n", "des": "This package contains classes that implement interval function support for the standard syntax parser."}
{"index": 3746, "repo": "lucene-queryparser-9.7.0", "code": "package parser;\n\nInterface StandardSyntaxParserConstants; // Token literal values and constants.\nClass EscapeQuerySyntaxImpl; // Implementation of EscapeQuerySyntax for the standard lucene syntax.\nClass StandardSyntaxParser; // Parser for the standard Lucene syntax\nClass StandardSyntaxParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "Lucene Query Parser"}
{"index": 3747, "repo": "lucene-queryparser-9.7.0", "code": "package processors;\n\nClass AllowLeadingWildcardProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.ALLOW_LEADING_WILDCARD is defined in the QueryConfigHandler.\nClass AnalyzerQueryNodeProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.ANALYZER is defined in the QueryConfigHandler.\nClass BooleanQuery2ModifierNodeProcessor; // This processor is used to apply the correct ModifierQueryNode to BooleanQueryNodes children.\nClass BooleanSingleChildOptimizationQueryNodeProcessor; // This processor removes every BooleanQueryNode that contains only one child and returns this child.\nClass BoostQueryNodeProcessor; // This processor iterates the query node tree looking for every FieldableNode that has StandardQueryConfigHandler.ConfigurationKeys.BOOST in its config.\nClass DefaultPhraseSlopQueryNodeProcessor; // This processor verifies if StandardQueryConfigHandler.ConfigurationKeys.PHRASE_SLOP is defined in the QueryConfigHandler.\nClass FuzzyQueryNodeProcessor; // This processor iterates the query node tree looking for every FuzzyQueryNode, when this kind of node is found, it checks on the query configuration for StandardQueryConfigHandler.ConfigurationKeys.FUZZY_CONFIG, gets the fuzzy prefix length and default similarity from it and set to the fuzzy node.\nClass IntervalQueryNodeProcessor; // This processor makes sure that StandardQueryConfigHandler.ConfigurationKeys.ANALYZER is defined in the QueryConfigHandler and injects this analyzer into IntervalQueryNodes.\nClass MatchAllDocsQueryNodeProcessor; // This processor converts every WildcardQueryNode that is \"*:*\" to MatchAllDocsQueryNode.\nClass MultiFieldQueryNodeProcessor; // This processor is used to expand terms so the query looks for the same term in different fields.\nClass MultiTermRewriteMethodProcessor; // This processor instates the default MultiTermQuery.RewriteMethod, MultiTermQuery.CONSTANT_SCORE_BLENDED_REWRITE, for multi-term query nodes.\nClass OpenRangeQueryNodeProcessor; // Processes TermRangeQuerys with open ranges.\nClass PhraseSlopQueryNodeProcessor; // This processor removes invalid SlopQueryNode objects in the query node tree.\nClass PointQueryNodeProcessor; // This processor is used to convert FieldQueryNodes to PointRangeQueryNodes.\n", "des": "Lucene Query Node Processors."}
{"index": 3748, "repo": "lucene-queryparser-9.7.0", "code": "package simple;\n\nClass SimpleQueryParser; // SimpleQueryParser is used to parse human readable query syntax.\n", "des": "A simple query parser for human-entered queries."}
{"index": 3749, "repo": "lucene-queryparser-9.7.0", "code": "package parser;\n\nInterface QueryParserConstants; // Token literal values and constants.\nClass QueryParser; // This class is generated by JavaCC.\nClass QueryParserTokenManager; // Token Manager.\nClass Token; // Describes the input token stream.\nClass ParseException; // This exception is thrown when parse errors are encountered.\nClass TokenMgrError; // Token Manager Error.\n", "des": "This package contains the QueryParser.jj source file for the Surround parser."}
{"index": 3750, "repo": "lucene-queryparser-9.7.0", "code": "package query;\n\nInterface DistanceSubQuery; // Interface for queries that can be nested as subqueries into a span near.\nInterface SimpleTerm.MatchingTermVisitor; // Callback to visit each matching term during \"rewrite\" in SimpleTerm.MatchingTermVisitor.visitMatchingTerm(Term)\nClass AndQuery; // Factory for conjunctions\nClass BasicQueryFactory; // Factory for creating basic term queries\nClass ComposedQuery; // Base class for composite queries (such as AND/OR/NOT)\nClass DistanceQuery; // Factory for NEAR queries\nClass FieldsQuery; // Forms an OR query of the provided query across multiple fields.\nClass NotQuery; // Factory for prohibited clauses\nClass OrQuery; // Factory for disjunctions\nClass SimpleTerm; // Base class for queries that expand to sets of simple terms.\nClass SpanNearClauseFactory; // Factory for SpanOrQuery\nClass SrndPrefixQuery; // Query that matches String prefixes\nClass SrndQuery; // Lowest level base class for surround queries\nClass SrndTermQuery; // Simple single-term clause\nClass SrndTruncQuery; // Query that matches wildcards\nClass TooManyBasicQueries; // Exception thrown when BasicQueryFactory would exceed the limit of query clauses.\n", "des": "This package contains SrndQuery and its subclasses."}
{"index": 3751, "repo": "lucene-queryparser-9.7.0", "code": "package xml;\n\npackage xml.builders; // XML Parser factories for different Lucene Query/Filters.\nInterface QueryBuilder; // Implemented by objects that produce Lucene Query objects from XML streams.\nClass CoreParser; // Assembles a QueryBuilder which uses only core Lucene Query objects\nClass CorePlusExtensionsParser; // Assembles a QueryBuilder which uses Query objects from Lucene's sandbox and queries modules in addition to core queries.\nClass CorePlusQueriesParser; // Assembles a QueryBuilder which uses Query objects from Lucene's queries module in addition to core queries.\nClass DOMUtils; // Helper methods for parsing XML\nClass QueryBuilderFactory; // Factory for QueryBuilder\nClass ParserException; // Thrown when the xml queryparser encounters invalid syntax/configuration.\n", "des": "Parser that produces Lucene Query objects from XML streams."}
{"index": 3752, "repo": "lucene-queryparser-9.7.0", "code": "package builders;\n\nInterface SpanQueryBuilder; // Interface for retrieving a SpanQuery.\nClass BooleanQueryBuilder; // Builder for BooleanQuery\nClass BoostingTermBuilder; // Builder for PayloadScoreQuery\nClass ConstantScoreQueryBuilder; // Builder for ConstantScoreQuery\nClass DisjunctionMaxQueryBuilder; // Builder for DisjunctionMaxQuery\nClass FuzzyLikeThisQueryBuilder; // Builder for FuzzyLikeThisQuery\nClass LikeThisQueryBuilder; // Builder for MoreLikeThisQuery\nClass MatchAllDocsQueryBuilder; // Builder for MatchAllDocsQuery\nClass PointRangeQueryBuilder; // Creates a range query across 1D PointValues.\nClass RangeQueryBuilder; // Builder for TermRangeQuery\nClass SpanBuilderBase; // Base class for building SpanQuerys\nClass SpanFirstBuilder; // Builder for SpanFirstQuery\nClass SpanNearBuilder; // Builder for SpanNearQuery\nClass SpanNotBuilder; // Builder for SpanNotQuery\nClass SpanOrBuilder; // Builder for SpanOrQuery\nClass SpanOrTermsBuilder; // Builder that analyzes the text into a SpanOrQuery\nClass SpanPositionRangeBuilder; // Builder for SpanPositionRangeQuery\nClass SpanQueryBuilderFactory; // Factory for SpanQueryBuilders\nClass SpanTermBuilder; // Builder for SpanTermQuery\nClass TermQueryBuilder; // Builder for TermQuery\nClass TermsQueryBuilder; // Builds a BooleanQuery from all of the terms found in the XML element using the choice of analyzer\nClass UserInputQueryBuilder; // UserInputQueryBuilder uses 1 of 2 strategies for thread-safe parsing: 1) Synchronizing access to \"parse\" calls on a previously supplied QueryParser or..\n", "des": "XML Parser factories for different Lucene Query/Filters."}
{"index": 3753, "repo": "lucene-facet-9.7.0", "code": "package facet;\n\npackage facet.facetset; // Provides FacetSets faceting capabilities which allows users to facet on high dimensional field values.\npackage facet.range; // Provides range faceting capabilities.\npackage facet.rangeonrange; // Provides range on range faceting capabilities.\npackage facet.sortedset; // Provides faceting capabilities over facets that were indexed with SortedSetDocValuesFacetField.\npackage facet.taxonomy; // Taxonomy of Categories.\nClass DrillDownQuery; // A Query for drill-down over facet categories.\nClass DrillSideways; // Computes drill down and sideways counts for the provided DrillDownQuery.\nClass DrillSideways.ConcurrentDrillSidewaysResult<R>; // Result of a concurrent drill sideways search, including the Facets and TopDocs.\nClass DrillSideways.DrillSidewaysResult; // Result of a drill sideways search, including the Facets and TopDocs.\nClass FacetCountsWithFilterQuery; // Base class for facet counts.\nClass FacetField; // Add an instance of this to your Document for every facet label.\nClass FacetQuery; // A term Query over a FacetField.\nClass FacetResult; // Counts or aggregates for a single dimension.\nClass Facets; // Common base class for all facets implementations.\nClass FacetsCollector; // Collects hits for subsequent faceting.\nClass FacetsCollector.MatchingDocs; // Holds the documents that were matched in the LeafReaderContext.\nClass FacetsCollectorManager; // A CollectorManager implementation which produces FacetsCollector and produces a merged FacetsCollector.\nClass FacetsConfig; // Records per-dimension configuration.\nClass FacetsConfig.DimConfig; // Holds the configuration for one dimension\nClass FacetUtils; // Utility class with a single method for getting a DocIdSetIterator that skips deleted docs\nClass LabelAndValue; // Single label and its value, usually contained in a FacetResult.\nClass LongValueFacetCounts; // Facets implementation that computes counts for all unique long values, more efficiently counting small values (0-1023) using an int array, and switching to a HashMap for values above 1023.\nClass MultiDoubleValues; // Per-segment, per-document double values, which can be calculated at search-time.\n", "des": "Faceted search."}
{"index": 3754, "repo": "lucene-facet-9.7.0", "code": "package facetset;\n\nInterface FacetSetDecoder; // A functional interface for decoding facet set values into comparable `long` ones.\nClass DimRange; // Defines a single range in a FacetSet dimension.\nClass DoubleFacetSet; // A FacetSet which encodes double dimension values.\nClass ExactFacetSetMatcher; // A FacetSetMatcher which considers a set as a match only if all dimension values are equal to the given one.\nClass FacetSet; // Holds a set of facet dimension values.\nClass FacetSetMatcher; // Matches the encoded FacetSet that was indexed in FacetSetsField.\nClass FacetSetsField; // A BinaryDocValuesField which encodes a list of facet sets.\nClass FloatFacetSet; // A FacetSet which encodes float dimension values.\nClass IntFacetSet; // A FacetSet which encodes integer dimension values.\nClass LongFacetSet; // A FacetSet which encodes long dimension values.\nClass MatchingFacetSetsCounts; // Returns the counts for each given FacetSet\nClass RangeFacetSetMatcher; // A FacetSetMatcher which considers a set as a match if all dimensions fall within the given corresponding range.\n", "des": "Provides FacetSets faceting capabilities which allows users to facet on high dimensional field values."}
{"index": 3755, "repo": "lucene-facet-9.7.0", "code": "package range;\n\nClass DoubleRange; // Represents a range over double values.\nClass DoubleRangeFacetCounts; // Facets implementation that computes counts for dynamic double ranges.\nClass LongRange; // Represents a range over long values.\nClass LongRangeFacetCounts; // Facets implementation that computes counts for dynamic long ranges.\nClass Range; // Base class for a single labeled range.\n", "des": "Provides range faceting capabilities."}
{"index": 3756, "repo": "lucene-facet-9.7.0", "code": "package rangeonrange;\n\nClass DoubleRange; // Represents a double range for RangeOnRange faceting\nClass DoubleRangeOnRangeFacetCounts; // Represents counts for double range on range faceting.\nClass LongRange; // Represents a long range for RangeOnRange faceting\nClass LongRangeOnRangeFacetCounts; // Represents counts for long range on range faceting.\nClass Range; // Base class for a single labeled range.\n", "des": "Provides range on range faceting capabilities."}
{"index": 3757, "repo": "lucene-facet-9.7.0", "code": "package sortedset;\n\nClass ConcurrentSortedSetDocValuesFacetCounts; // Like SortedSetDocValuesFacetCounts, but aggregates counts concurrently across segments.\nClass DefaultSortedSetDocValuesReaderState; // Default implementation of SortedSetDocValuesFacetCounts.\nClass SortedSetDocValuesFacetCounts; // Compute facets counts from previously indexed SortedSetDocValuesFacetField, without require a separate taxonomy index.\nClass SortedSetDocValuesFacetField; // Add an instance of this to your Document for every facet label to be indexed via SortedSetDocValues.\nClass SortedSetDocValuesReaderState; // Wraps a IndexReader and resolves ords using existing SortedSetDocValues APIs without a separate taxonomy index.\nClass SortedSetDocValuesReaderState.DimTree; // Holds children and sibling information for a single dimension.\nClass SortedSetDocValuesReaderState.OrdRange; // Holds start/end range of ords, which maps to one dimension.\n", "des": "Provides faceting capabilities over facets that were indexed with SortedSetDocValuesFacetField."}
{"index": 3758, "repo": "lucene-facet-9.7.0", "code": "package taxonomy;\n\npackage taxonomy.directory; // Taxonomy index implementation using on top of a Directory.\npackage taxonomy.writercache; // Improves indexing time by caching a map of CategoryPath to their Ordinal.\nInterface TaxonomyWriter; // TaxonomyWriter is the interface which the faceted-search library uses to dynamically build the taxonomy at indexing time.\nClass AssociationAggregationFunction; // Specify aggregation logic used in TaxonomyFacetIntAssociations and TaxonomyFacetFloatAssociations.\nClass AssociationFacetField; // Add an instance of this to your Document to add a facet label associated with an arbitrary byte[].\nClass BackCompatSortedNumericDocValues;\nClass CachedOrdinalsReader;\nClass CachedOrdinalsReader.CachedOrds; // Holds the cached ordinals in two parallel int[] arrays.\nClass DocValuesOrdinalsReader;\nClass FacetLabel; // Holds a sequence of string components, specifying the hierarchical name of a category.\nClass FastTaxonomyFacetCounts; // Computes facets counts, assuming the default encoding into DocValues was used.\nClass FloatAssociationFacetField; // Add an instance of this to your Document to add a facet label associated with a float.\nClass FloatTaxonomyFacets;\nClass IntAssociationFacetField; // Add an instance of this to your Document to add a facet label associated with an int.\nClass IntTaxonomyFacets;\nClass LRUHashMap<K,​V>; // LRUHashMap is an extension of Java's HashMap, which has a bounded size(); When it reaches that size, each time a new element is added, the least recently used (LRU) entry is removed.\nClass OrdinalMappingLeafReader; // A FilterLeafReader for updating facets ordinal references, based on an ordinal map.\nClass OrdinalsReader;\nClass OrdinalsReader.OrdinalsSegmentReader; // Returns ordinals for documents in one segment.\nClass ParallelTaxonomyArrays; // Returns 3 arrays for traversing the taxonomy: parents: parents[i] denotes the parent of category ordinal i.\nClass PrintTaxonomyStats; // Prints how many ords are under each dimension.\nClass SearcherTaxonomyManager; // Manages near-real-time reopen of both an IndexSearcher and a TaxonomyReader.\n", "des": "Taxonomy of Categories."}
{"index": 3759, "repo": "lucene-facet-9.7.0", "code": "package directory;\n\nInterface DirectoryTaxonomyWriter.OrdinalMap; // Mapping from old ordinal to new ordinals, used when merging indexes with separate taxonomies.\nClass DirectoryTaxonomyReader; // A TaxonomyReader which retrieves stored taxonomy information from a Directory.\nClass DirectoryTaxonomyWriter; // TaxonomyWriter which uses a Directory to store the taxonomy information on disk, and keeps an additional in-memory cache of some or all categories.\nClass DirectoryTaxonomyWriter.DiskOrdinalMap; // DirectoryTaxonomyWriter.OrdinalMap maintained on file system\nClass DirectoryTaxonomyWriter.MemoryOrdinalMap; // DirectoryTaxonomyWriter.OrdinalMap maintained in memory\n", "des": "Taxonomy index implementation using on top of a Directory."}
{"index": 3760, "repo": "lucene-facet-9.7.0", "code": "package writercache;\n\nInterface TaxonomyWriterCache; // TaxonomyWriterCache is a relatively simple interface for a cache of category->ordinal mappings, used in TaxonomyWriter implementations (such as DirectoryTaxonomyWriter).\nClass LabelToOrdinal; // Abstract class for storing Label->Ordinal mappings in a taxonomy.\nClass LruTaxonomyWriterCache; // LRU TaxonomyWriterCache - good choice for huge taxonomies.\nClass NameHashIntCacheLRU; // An LRU cache of mapping from name to int.\nClass UTF8TaxonomyWriterCache;\nEnum LruTaxonomyWriterCache.LRUType; // Determines cache type.\n", "des": "Improves indexing time by caching a map of CategoryPath to their Ordinal."}
{"index": 3761, "repo": "lucene-analysis-common-9.7.0", "code": "package ar;\n\nClass ArabicAnalyzer; // Analyzer for Arabic.\nClass ArabicNormalizationFilter; // A TokenFilter that applies ArabicNormalizer to normalize the orthography.\nClass ArabicNormalizationFilterFactory; // Factory for ArabicNormalizationFilter.\nClass ArabicNormalizer; // Normalizer for Arabic.\nClass ArabicStemFilter; // A TokenFilter that applies ArabicStemmer to stem Arabic words..\nClass ArabicStemFilterFactory; // Factory for ArabicStemFilter.\nClass ArabicStemmer; // Stemmer for Arabic.\n", "des": "Analyzer for Arabic."}
{"index": 3762, "repo": "lucene-analysis-common-9.7.0", "code": "package bg;\n\nClass BulgarianAnalyzer; // Analyzer for Bulgarian.\nClass BulgarianStemFilter; // A TokenFilter that applies BulgarianStemmer to stem Bulgarian words.\nClass BulgarianStemFilterFactory; // Factory for BulgarianStemFilter.\nClass BulgarianStemmer; // Light Stemmer for Bulgarian.\n", "des": "Analyzer for Bulgarian."}
{"index": 3763, "repo": "lucene-analysis-common-9.7.0", "code": "package bn;\n\nClass BengaliAnalyzer; // Analyzer for Bengali.\nClass BengaliNormalizationFilter; // A TokenFilter that applies BengaliNormalizer to normalize the orthography.\nClass BengaliNormalizationFilterFactory; // Factory for BengaliNormalizationFilter.\nClass BengaliNormalizer; // Normalizer for Bengali.\nClass BengaliStemFilter; // A TokenFilter that applies BengaliStemmer to stem Bengali words.\nClass BengaliStemFilterFactory; // Factory for BengaliStemFilter.\nClass BengaliStemmer; // Stemmer for Bengali.\n", "des": "Analyzer for Bengali Language."}
{"index": 3764, "repo": "lucene-analysis-common-9.7.0", "code": "package boost;\n\nClass DelimitedBoostTokenFilter; // Characters before the delimiter are the \"token\", those after are the boost.\nClass DelimitedBoostTokenFilterFactory; // Factory for DelimitedBoostTokenFilter.\n", "des": "Provides various convenience classes for creating boosts on Tokens."}
{"index": 3765, "repo": "lucene-analysis-common-9.7.0", "code": "package br;\n\nClass BrazilianAnalyzer; // Analyzer for Brazilian Portuguese language.\nClass BrazilianStemFilter; // A TokenFilter that applies BrazilianStemmer.\nClass BrazilianStemFilterFactory; // Factory for BrazilianStemFilter.\nClass BrazilianStemmer; // A stemmer for Brazilian Portuguese words.\n", "des": "Analyzer for Brazilian Portuguese."}
{"index": 3766, "repo": "lucene-analysis-common-9.7.0", "code": "package ca;\n\nClass CatalanAnalyzer; // Analyzer for Catalan.\n", "des": "Analyzer for Catalan."}
{"index": 3767, "repo": "lucene-analysis-common-9.7.0", "code": "package charfilter;\n\nClass BaseCharFilter; // Base utility class for implementing a CharFilter.\nClass HTMLStripCharFilter; // A CharFilter that wraps another Reader and attempts to strip out HTML constructs.\nClass HTMLStripCharFilterFactory; // Factory for HTMLStripCharFilter.\nClass MappingCharFilter; // Simplistic CharFilter that applies the mappings contained in a NormalizeCharMap to the character stream, and correcting the resulting changes to the offsets.\nClass MappingCharFilterFactory; // Factory for MappingCharFilter.\nClass NormalizeCharMap; // Holds a map of String input to String output, to be used with MappingCharFilter.\nClass NormalizeCharMap.Builder; // Builds an NormalizeCharMap.\n", "des": "Normalization of text before the tokenizer."}
{"index": 3768, "repo": "lucene-analysis-common-9.7.0", "code": "package cjk;\n\nClass CJKAnalyzer; // An Analyzer that tokenizes text with StandardTokenizer, normalizes content with CJKWidthFilter, folds case with LowerCaseFilter, forms bigrams of CJK with CJKBigramFilter, and filters stopwords with StopFilter\nClass CJKBigramFilter; // Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.\nClass CJKBigramFilterFactory; // Factory for CJKBigramFilter.\nClass CJKWidthCharFilter; // A CharFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthCharFilterFactory; // Factory for CJKWidthCharFilter.\nClass CJKWidthFilter; // A TokenFilter that normalizes CJK width differences: Folds fullwidth ASCII variants into the equivalent basic latin Folds halfwidth Katakana variants into the equivalent kana\nClass CJKWidthFilterFactory; // Factory for CJKWidthFilter.\n", "des": "Analyzer for Chinese, Japanese, and Korean, which indexes bigrams."}
{"index": 3769, "repo": "lucene-analysis-common-9.7.0", "code": "package ckb;\n\nClass SoraniAnalyzer; // Analyzer for Sorani Kurdish.\nClass SoraniNormalizationFilter; // A TokenFilter that applies SoraniNormalizer to normalize the orthography.\nClass SoraniNormalizationFilterFactory; // Factory for SoraniNormalizationFilter.\nClass SoraniNormalizer; // Normalizes the Unicode representation of Sorani text.\nClass SoraniStemFilter; // A TokenFilter that applies SoraniStemmer to stem Sorani words.\nClass SoraniStemFilterFactory; // Factory for SoraniStemFilter.\nClass SoraniStemmer; // Light stemmer for Sorani\n", "des": "Analyzer for Sorani Kurdish."}
{"index": 3770, "repo": "lucene-analysis-common-9.7.0", "code": "package classic;\n\nClass ClassicAnalyzer; // Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.\nClass ClassicFilter; // Normalizes tokens extracted with ClassicTokenizer.\nClass ClassicFilterFactory; // Factory for ClassicFilter.\nClass ClassicTokenizer; // A grammar-based tokenizer constructed with JFlex\nClass ClassicTokenizerFactory; // Factory for ClassicTokenizer.\n", "des": "Fast, general-purpose grammar-based tokenizers."}
{"index": 3771, "repo": "lucene-analysis-common-9.7.0", "code": "package commongrams;\n\nClass CommonGramsFilter; // Construct bigrams for frequently occurring terms while indexing.\nClass CommonGramsFilterFactory; // Constructs a CommonGramsFilter.\nClass CommonGramsQueryFilter; // Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.\nClass CommonGramsQueryFilterFactory; // Construct CommonGramsQueryFilter.\n", "des": "Construct n-grams for frequently occurring terms and phrases."}
{"index": 3772, "repo": "lucene-analysis-common-9.7.0", "code": "package compound;\n\npackage compound.hyphenation; // Hyphenation code for the CompoundWordTokenFilter.\nClass CompoundWordTokenFilterBase; // Base class for decomposition token filters.\nClass DictionaryCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass DictionaryCompoundWordTokenFilterFactory; // Factory for DictionaryCompoundWordTokenFilter.\nClass HyphenationCompoundWordTokenFilter; // A TokenFilter that decomposes compound words found in many Germanic languages.\nClass HyphenationCompoundWordTokenFilterFactory; // Factory for HyphenationCompoundWordTokenFilter.\n", "des": "A filter that decomposes compound words you find in many Germanic languages into the word parts."}
{"index": 3773, "repo": "lucene-analysis-common-9.7.0", "code": "package hyphenation;\n\nInterface PatternConsumer; // This interface is used to connect the XML pattern file parser to the hyphenation tree.\nClass ByteVector; // This class implements a simple byte vector with access to the underlying array.\nClass CharVector; // This class implements a simple char vector with access to the underlying array.\nClass Hyphen; // This class represents a hyphen.\nClass Hyphenation; // This class represents a hyphenated word.\nClass HyphenationTree; // This tree structure stores the hyphenation patterns in an efficient way for fast lookup.\nClass PatternParser; // A SAX document handler to read and parse hyphenation patterns from a XML file.\nClass TernaryTree; // Ternary Search Tree.\n", "des": "Hyphenation code for the CompoundWordTokenFilter."}
{"index": 3774, "repo": "lucene-analysis-common-9.7.0", "code": "package core;\n\nClass DecimalDigitFilter; // Folds all Unicode digits in [:General_Category=Decimal_Number:] to Basic Latin digits (0-9).\nClass DecimalDigitFilterFactory; // Factory for DecimalDigitFilter.\nClass FlattenGraphFilter; // Converts an incoming graph token stream, such as one from SynonymGraphFilter, into a flat form so that all nodes form a single linear chain with no side paths.\nClass FlattenGraphFilterFactory; // Factory for FlattenGraphFilter.\nClass KeywordAnalyzer; // \"Tokenizes\" the entire stream as a single token.\nClass KeywordTokenizer; // Emits the entire input as a single token.\nClass KeywordTokenizerFactory; // Factory for KeywordTokenizer.\nClass LetterTokenizer; // A LetterTokenizer is a tokenizer that divides text at non-letters.\nClass LetterTokenizerFactory; // Factory for LetterTokenizer.\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass LowerCaseFilterFactory; // Factory for LowerCaseFilter.\nClass SimpleAnalyzer; // An Analyzer that filters LetterTokenizer with LowerCaseFilter\nClass StopAnalyzer; // Filters LetterTokenizer with LowerCaseFilter and StopFilter.\nClass StopFilter; // Removes stop words from a token stream.\nClass StopFilterFactory; // Factory for StopFilter.\nClass TypeTokenFilter; // Removes tokens whose types appear in a set of blocked types from a token stream.\nClass TypeTokenFilterFactory; // Factory class for TypeTokenFilter.\nClass UnicodeWhitespaceAnalyzer; // An Analyzer that uses UnicodeWhitespaceTokenizer.\nClass UnicodeWhitespaceTokenizer; // A UnicodeWhitespaceTokenizer is a tokenizer that divides text at whitespace.\nClass UpperCaseFilter; // Normalizes token text to UPPER CASE.\nClass UpperCaseFilterFactory; // Factory for UpperCaseFilter.\nClass WhitespaceAnalyzer; // An Analyzer that uses WhitespaceTokenizer.\nClass WhitespaceTokenizer; // A tokenizer that divides text at whitespace characters as defined by Character.isWhitespace(int).\nClass WhitespaceTokenizerFactory; // Factory for WhitespaceTokenizer.\n", "des": "Basic, general-purpose analysis components."}
{"index": 3775, "repo": "lucene-analysis-common-9.7.0", "code": "package custom;\n\nClass CustomAnalyzer; // A general-purpose Analyzer that can be created with a builder-style API.\nClass CustomAnalyzer.Builder; // Builder for CustomAnalyzer.\nClass CustomAnalyzer.ConditionBuilder; // Factory class for a ConditionalTokenFilter\n", "des": "A general-purpose Analyzer that can be created with a builder-style API."}
{"index": 3776, "repo": "lucene-analysis-common-9.7.0", "code": "package cz;\n\nClass CzechAnalyzer; // Analyzer for Czech language.\nClass CzechStemFilter; // A TokenFilter that applies CzechStemmer to stem Czech words.\nClass CzechStemFilterFactory; // Factory for CzechStemFilter.\nClass CzechStemmer; // Light Stemmer for Czech.\n", "des": "Analyzer for Czech."}
{"index": 3777, "repo": "lucene-analysis-common-9.7.0", "code": "package da;\n\nClass DanishAnalyzer; // Analyzer for Danish.\n", "des": "Analyzer for Danish."}
{"index": 3778, "repo": "lucene-analysis-common-9.7.0", "code": "package de;\n\nClass GermanAnalyzer; // Analyzer for German language.\nClass GermanLightStemFilter; // A TokenFilter that applies GermanLightStemmer to stem German words.\nClass GermanLightStemFilterFactory; // Factory for GermanLightStemFilter.\nClass GermanLightStemmer; // Light Stemmer for German.\nClass GermanMinimalStemFilter; // A TokenFilter that applies GermanMinimalStemmer to stem German words.\nClass GermanMinimalStemFilterFactory; // Factory for GermanMinimalStemFilter.\nClass GermanMinimalStemmer; // Minimal Stemmer for German.\nClass GermanNormalizationFilter; // Normalizes German characters according to the heuristics of the German2 snowball algorithm.\nClass GermanNormalizationFilterFactory; // Factory for GermanNormalizationFilter.\nClass GermanStemFilter; // A TokenFilter that stems German words.\nClass GermanStemFilterFactory; // Factory for GermanStemFilter.\nClass GermanStemmer; // A stemmer for German words.\n", "des": "Analyzer for German."}
{"index": 3779, "repo": "lucene-analysis-common-9.7.0", "code": "package el;\n\nClass GreekAnalyzer; // Analyzer for the Greek language.\nClass GreekLowerCaseFilter; // Normalizes token text to lower case, removes some Greek diacritics, and standardizes final sigma to sigma.\nClass GreekLowerCaseFilterFactory; // Factory for GreekLowerCaseFilter.\nClass GreekStemFilter; // A TokenFilter that applies GreekStemmer to stem Greek words.\nClass GreekStemFilterFactory; // Factory for GreekStemFilter.\nClass GreekStemmer; // A stemmer for Greek words, according to: Development of a Stemmer for the Greek Language. Georgios Ntais\n", "des": "Analyzer for Greek."}
{"index": 3780, "repo": "lucene-analysis-common-9.7.0", "code": "package email;\n\nClass UAX29URLEmailAnalyzer; // Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.\nClass UAX29URLEmailTokenizer; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\nClass UAX29URLEmailTokenizerFactory; // Factory for UAX29URLEmailTokenizer.\nClass UAX29URLEmailTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29 URLs and email addresses are also tokenized according to the relevant RFCs.\n", "des": "Fast, general-purpose URLs and email addresses tokenizers."}
{"index": 3781, "repo": "lucene-analysis-common-9.7.0", "code": "package en;\n\nClass AbstractWordsFileFilterFactory; // Abstract parent class for analysis factories that accept a stopwords file as input.\nClass EnglishAnalyzer; // Analyzer for English.\nClass EnglishMinimalStemFilter; // A TokenFilter that applies EnglishMinimalStemmer to stem English words.\nClass EnglishMinimalStemFilterFactory; // Factory for EnglishMinimalStemFilter.\nClass EnglishMinimalStemmer; // Minimal plural stemmer for English.\nClass EnglishPossessiveFilter; // TokenFilter that removes possessives (trailing 's) from words.\nClass EnglishPossessiveFilterFactory; // Factory for EnglishPossessiveFilter.\nClass KStemFilter; // A high-performance kstem filter for english.\nClass KStemFilterFactory; // Factory for KStemFilter.\nClass KStemmer; // This class implements the Kstem algorithm\nClass PorterStemFilter; // Transforms the token stream as per the Porter stemming algorithm.\nClass PorterStemFilterFactory; // Factory for PorterStemFilter.\n", "des": "Analyzer for English."}
{"index": 3782, "repo": "lucene-analysis-common-9.7.0", "code": "package es;\n\nClass SpanishAnalyzer; // Analyzer for Spanish.\nClass SpanishLightStemFilter; // A TokenFilter that applies SpanishLightStemmer to stem Spanish words.\nClass SpanishLightStemFilterFactory; // Factory for SpanishLightStemFilter.\nClass SpanishLightStemmer; // Light Stemmer for Spanish\nClass SpanishMinimalStemFilter;\nClass SpanishMinimalStemFilterFactory;\nClass SpanishMinimalStemmer;\nClass SpanishPluralStemFilter; // A TokenFilter that applies SpanishPluralStemmer to stem Spanish words.\nClass SpanishPluralStemFilterFactory; // Factory for SpanishPluralStemFilterFactory.\nClass SpanishPluralStemmer; // Plural Stemmer for Spanish\n", "des": "Analyzer for Spanish."}
{"index": 3783, "repo": "lucene-analysis-common-9.7.0", "code": "package et;\n\nClass EstonianAnalyzer; // Analyzer for Estonian.\n", "des": "Analyzer for Estonian."}
{"index": 3784, "repo": "lucene-analysis-common-9.7.0", "code": "package eu;\n\nClass BasqueAnalyzer; // Analyzer for Basque.\n", "des": "Analyzer for Basque."}
{"index": 3785, "repo": "lucene-analysis-common-9.7.0", "code": "package fa;\n\nClass PersianAnalyzer; // Analyzer for Persian.\nClass PersianCharFilter; // CharFilter that replaces instances of Zero-width non-joiner with an ordinary space.\nClass PersianCharFilterFactory; // Factory for PersianCharFilter.\nClass PersianNormalizationFilter; // A TokenFilter that applies PersianNormalizer to normalize the orthography.\nClass PersianNormalizationFilterFactory; // Factory for PersianNormalizationFilter.\nClass PersianNormalizer; // Normalizer for Persian.\nClass PersianStemFilter; // A TokenFilter that applies PersianStemmer to stem Persian words.\nClass PersianStemFilterFactory; // Factory for PersianStemFilter.\nClass PersianStemmer; // Stemmer for Persian.\n", "des": "Analyzer for Persian."}
{"index": 3786, "repo": "lucene-analysis-common-9.7.0", "code": "package fi;\n\nClass FinnishAnalyzer; // Analyzer for Finnish.\nClass FinnishLightStemFilter; // A TokenFilter that applies FinnishLightStemmer to stem Finnish words.\nClass FinnishLightStemFilterFactory; // Factory for FinnishLightStemFilter.\nClass FinnishLightStemmer; // Light Stemmer for Finnish.\n", "des": "Analyzer for Finnish."}
{"index": 3787, "repo": "lucene-analysis-common-9.7.0", "code": "package fr;\n\nClass FrenchAnalyzer; // Analyzer for French language.\nClass FrenchLightStemFilter; // A TokenFilter that applies FrenchLightStemmer to stem French words.\nClass FrenchLightStemFilterFactory; // Factory for FrenchLightStemFilter.\nClass FrenchLightStemmer; // Light Stemmer for French.\nClass FrenchMinimalStemFilter; // A TokenFilter that applies FrenchMinimalStemmer to stem French words.\nClass FrenchMinimalStemFilterFactory; // Factory for FrenchMinimalStemFilter.\nClass FrenchMinimalStemmer; // Light Stemmer for French.\n", "des": "Analyzer for French."}
{"index": 3788, "repo": "lucene-analysis-common-9.7.0", "code": "package ga;\n\nClass IrishAnalyzer; // Analyzer for Irish.\nClass IrishLowerCaseFilter; // Normalises token text to lower case, handling t-prothesis and n-eclipsis (i.e., that 'nAthair' should become 'n-athair')\nClass IrishLowerCaseFilterFactory; // Factory for IrishLowerCaseFilter.\n", "des": "Analyzer for Irish."}
{"index": 3789, "repo": "lucene-analysis-common-9.7.0", "code": "package gl;\n\nClass GalicianAnalyzer; // Analyzer for Galician.\nClass GalicianMinimalStemFilter; // A TokenFilter that applies GalicianMinimalStemmer to stem Galician words.\nClass GalicianMinimalStemFilterFactory; // Factory for GalicianMinimalStemFilter.\nClass GalicianMinimalStemmer; // Minimal Stemmer for Galician\nClass GalicianStemFilter; // A TokenFilter that applies GalicianStemmer to stem Galician words.\nClass GalicianStemFilterFactory; // Factory for GalicianStemFilter.\nClass GalicianStemmer; // Galician stemmer implementing \"Regras do lematizador para o galego\".\n", "des": "Analyzer for Galician."}
{"index": 3790, "repo": "lucene-analysis-common-9.7.0", "code": "package hi;\n\nClass HindiAnalyzer; // Analyzer for Hindi.\nClass HindiNormalizationFilter; // A TokenFilter that applies HindiNormalizer to normalize the orthography.\nClass HindiNormalizationFilterFactory; // Factory for HindiNormalizationFilter.\nClass HindiNormalizer; // Normalizer for Hindi.\nClass HindiStemFilter; // A TokenFilter that applies HindiStemmer to stem Hindi words.\nClass HindiStemFilterFactory; // Factory for HindiStemFilter.\nClass HindiStemmer; // Light Stemmer for Hindi.\n", "des": "Analyzer for Hindi."}
{"index": 3791, "repo": "lucene-analysis-common-9.7.0", "code": "package hu;\n\nClass HungarianAnalyzer; // Analyzer for Hungarian.\nClass HungarianLightStemFilter; // A TokenFilter that applies HungarianLightStemmer to stem Hungarian words.\nClass HungarianLightStemFilterFactory; // Factory for HungarianLightStemFilter.\nClass HungarianLightStemmer; // Light Stemmer for Hungarian.\n", "des": "Analyzer for Hungarian."}
{"index": 3792, "repo": "lucene-analysis-common-9.7.0", "code": "package hunspell;\n\nInterface DictEntries; // An object representing homonym dictionary entries.\nInterface FragmentChecker; // An oracle for quickly checking that a specific part of a word can never be a valid word.\nInterface NGramFragmentChecker.NGramConsumer; // A callback for n-gram ranges in words\nClass AffixedWord; // An object representing the analysis result of a simple (non-compound) word\nClass AffixedWord.Affix; // An object representing a prefix or a suffix applied to a word stem\nClass DictEntry; // An object representing *.dic file entry with its word, flags and morphological data.\nClass Dictionary; // In-memory structure for the dictionary (.dic) and affix (.aff) data of a hunspell dictionary.\nClass EntrySuggestion; // Suggestion to add/edit dictionary entries to generate a given list of words created by WordFormGenerator.compress(java.util.List<java.lang.String>, java.util.Set<java.lang.String>, java.lang.Runnable).\nClass Hunspell; // A spell checker based on Hunspell dictionaries.\nClass HunspellStemFilter; // TokenFilter that uses hunspell affix rules and words to stem tokens.\nClass HunspellStemFilterFactory; // TokenFilterFactory that creates instances of HunspellStemFilter.\nClass NGramFragmentChecker; // A FragmentChecker based on all character n-grams possible in a certain language, keeping them in a relatively memory-efficient, but probabilistic data structure.\nClass Suggester; // A generator for misspelled word corrections based on Hunspell flags.\nClass WordFormGenerator; // A utility class used for generating possible word forms by adding affixes to stems (WordFormGenerator.getAllWordForms(String, String, Runnable)), and suggesting stems and flags to generate the given set of words (WordFormGenerator.compress(List, Set, Runnable)).\nEnum TimeoutPolicy; // A strategy determining what to do when Hunspell API calls take too much time\nClass SuggestionTimeoutException; // An exception thrown when Hunspell.suggest(java.lang.String) call takes too long, if TimeoutPolicy.THROW_EXCEPTION is used.\n", "des": "A Java implementation of Hunspell stemming and spell-checking algorithms (Hunspell), and a stemming TokenFilter (HunspellStemFilter) based on it."}
{"index": 3793, "repo": "lucene-analysis-common-9.7.0", "code": "package hy;\n\nClass ArmenianAnalyzer; // Analyzer for Armenian.\n", "des": "Analyzer for Armenian."}
{"index": 3794, "repo": "lucene-analysis-common-9.7.0", "code": "package id;\n\nClass IndonesianAnalyzer; // Analyzer for Indonesian (Bahasa)\nClass IndonesianStemFilter; // A TokenFilter that applies IndonesianStemmer to stem Indonesian words.\nClass IndonesianStemFilterFactory; // Factory for IndonesianStemFilter.\nClass IndonesianStemmer; // Stemmer for Indonesian.\n", "des": "Analyzer for Indonesian."}
{"index": 3795, "repo": "lucene-analysis-common-9.7.0", "code": "package in;\n\nClass IndicNormalizationFilter; // A TokenFilter that applies IndicNormalizer to normalize text in Indian Languages.\nClass IndicNormalizationFilterFactory; // Factory for IndicNormalizationFilter.\nClass IndicNormalizer; // Normalizes the Unicode representation of text in Indian languages.\n", "des": "Analyzer for Indian languages."}
{"index": 3796, "repo": "lucene-analysis-common-9.7.0", "code": "package it;\n\nClass ItalianAnalyzer; // Analyzer for Italian.\nClass ItalianLightStemFilter; // A TokenFilter that applies ItalianLightStemmer to stem Italian words.\nClass ItalianLightStemFilterFactory; // Factory for ItalianLightStemFilter.\nClass ItalianLightStemmer; // Light Stemmer for Italian.\n", "des": "Analyzer for Italian."}
{"index": 3797, "repo": "lucene-analysis-common-9.7.0", "code": "package lt;\n\nClass LithuanianAnalyzer; // Analyzer for Lithuanian.\n", "des": "Analyzer for Lithuanian."}
{"index": 3798, "repo": "lucene-analysis-common-9.7.0", "code": "package lv;\n\nClass LatvianAnalyzer; // Analyzer for Latvian.\nClass LatvianStemFilter; // A TokenFilter that applies LatvianStemmer to stem Latvian words.\nClass LatvianStemFilterFactory; // Factory for LatvianStemFilter.\nClass LatvianStemmer; // Light stemmer for Latvian.\n", "des": "Analyzer for Latvian."}
{"index": 3799, "repo": "lucene-analysis-common-9.7.0", "code": "package minhash;\n\nClass MinHashFilter; // Generate min hash tokens from an incoming stream of tokens.\nClass MinHashFilterFactory; // TokenFilterFactory for MinHashFilter.\n", "des": "MinHash filtering (for LSH)."}
{"index": 3800, "repo": "lucene-analysis-common-9.7.0", "code": "package miscellaneous;\n\nInterface ConcatenateGraphFilter.BytesRefBuilderTermAttribute; // Attribute providing access to the term builder and UTF-16 conversion\nClass ASCIIFoldingFilter; // This class converts alphabetic, numeric, and symbolic Unicode characters which are not in the first 127 ASCII characters (the \"Basic Latin\" Unicode block) into their ASCII equivalents, if one exists.\nClass ASCIIFoldingFilterFactory; // Factory for ASCIIFoldingFilter.\nClass CapitalizationFilter; // A filter to apply normal capitalization rules to Tokens.\nClass CapitalizationFilterFactory; // Factory for CapitalizationFilter.\nClass CodepointCountFilter; // Removes words that are too long or too short from the stream.\nClass CodepointCountFilterFactory; // Factory for CodepointCountFilter.\nClass ConcatenateGraphFilter; // Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).\nClass ConcatenateGraphFilter.BytesRefBuilderTermAttributeImpl; // Implementation of ConcatenateGraphFilter.BytesRefBuilderTermAttribute\nClass ConcatenateGraphFilterFactory; // Factory for ConcatenateGraphFilter.\nClass ConcatenatingTokenStream; // A TokenStream that takes an array of input TokenStreams as sources, and concatenates them together.\nClass ConditionalTokenFilter; // Allows skipping TokenFilters based on the current set of attributes.\nClass ConditionalTokenFilterFactory; // Abstract parent class for analysis factories that create ConditionalTokenFilter instances\nClass DateRecognizerFilter; // Filters all tokens that cannot be parsed to a date, using the provided DateFormat.\nClass DateRecognizerFilterFactory; // Factory for DateRecognizerFilter.\nClass DelimitedTermFrequencyTokenFilter; // Characters before the delimiter are the \"token\", the textual integer after is the term frequency.\nClass DelimitedTermFrequencyTokenFilterFactory; // Factory for DelimitedTermFrequencyTokenFilter.\nClass DropIfFlaggedFilter; // Allows Tokens with a given combination of flags to be dropped.\nClass DropIfFlaggedFilterFactory; // Provides a filter that will drop tokens matching a set of flags.\nClass EmptyTokenStream; // An always exhausted token stream.\nClass FingerprintFilter; // Filter outputs a single token which is a concatenation of the sorted and de-duplicated set of input tokens.\n", "des": "Miscellaneous Tokenstreams."}
{"index": 3801, "repo": "lucene-analysis-common-9.7.0", "code": "package ne;\n\nClass NepaliAnalyzer; // Analyzer for Nepali.\n", "des": "Analyzer for Nepali."}
{"index": 3802, "repo": "lucene-analysis-common-9.7.0", "code": "package ngram;\n\nClass EdgeNGramFilterFactory; // Creates new instances of EdgeNGramTokenFilter.\nClass EdgeNGramTokenFilter; // Tokenizes the given token into n-grams of given size(s).\nClass EdgeNGramTokenizer; // Tokenizes the input from an edge into n-grams of given size(s).\nClass EdgeNGramTokenizerFactory; // Creates new instances of EdgeNGramTokenizer.\nClass NGramFilterFactory; // Factory for NGramTokenFilter.\nClass NGramTokenFilter; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizer; // Tokenizes the input into n-grams of the given size(s).\nClass NGramTokenizerFactory; // Factory for NGramTokenizer.\n", "des": "Character n-gram tokenizers and filters."}
{"index": 3803, "repo": "lucene-analysis-common-9.7.0", "code": "package nl;\n\nClass DutchAnalyzer; // Analyzer for Dutch language.\n", "des": "Analyzer for Dutch."}
{"index": 3804, "repo": "lucene-analysis-common-9.7.0", "code": "package no;\n\nClass NorwegianAnalyzer; // Analyzer for Norwegian.\nClass NorwegianLightStemFilter; // A TokenFilter that applies NorwegianLightStemmer to stem Norwegian words.\nClass NorwegianLightStemFilterFactory; // Factory for NorwegianLightStemFilter.\nClass NorwegianLightStemmer; // Light Stemmer for Norwegian.\nClass NorwegianMinimalStemFilter; // A TokenFilter that applies NorwegianMinimalStemmer to stem Norwegian words.\nClass NorwegianMinimalStemFilterFactory; // Factory for NorwegianMinimalStemFilter.\nClass NorwegianMinimalStemmer; // Minimal Stemmer for Norwegian Bokmål (no-nb) and Nynorsk (no-nn)\nClass NorwegianNormalizationFilter; // This filter normalize use of the interchangeable Scandinavian characters æÆäÄöÖøØ and folded variants (ae, oe, aa) by transforming them to åÅæÆøØ.\nClass NorwegianNormalizationFilterFactory; // Factory for NorwegianNormalizationFilter.\n", "des": "Analyzer for Norwegian."}
{"index": 3805, "repo": "lucene-analysis-common-9.7.0", "code": "package path;\n\nClass PathHierarchyTokenizer; // Tokenizer for path-like hierarchies.\nClass PathHierarchyTokenizerFactory; // Factory for PathHierarchyTokenizer.\nClass ReversePathHierarchyTokenizer; // Tokenizer for domain-like hierarchies.\n", "des": "Analysis components for path-like strings such as filenames."}
{"index": 3806, "repo": "lucene-analysis-common-9.7.0", "code": "package pattern;\n\nClass PatternCaptureGroupFilterFactory; // Factory for PatternCaptureGroupTokenFilter.\nClass PatternCaptureGroupTokenFilter; // CaptureGroup uses Java regexes to emit multiple tokens - one for each capture group in one or more patterns.\nClass PatternReplaceCharFilter; // CharFilter that uses a regular expression for the target of replace string.\nClass PatternReplaceCharFilterFactory; // Factory for PatternReplaceCharFilter.\nClass PatternReplaceFilter; // A TokenFilter which applies a Pattern to each token in the stream, replacing match occurrences with the specified replacement string.\nClass PatternReplaceFilterFactory; // Factory for PatternReplaceFilter.\nClass PatternTokenizer; // This tokenizer uses regex pattern matching to construct distinct tokens for the input stream.\nClass PatternTokenizerFactory; // Factory for PatternTokenizer.\nClass PatternTypingFilter; // Set a type attribute to a parameterized value when tokens are matched by any of a several regex patterns.\nClass PatternTypingFilter.PatternTypingRule; // Value holding class for pattern typing rules.\nClass PatternTypingFilterFactory; // Provides a filter that will analyze tokens with the analyzer from an arbitrary field type.\nClass SimplePatternSplitTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternSplitTokenizerFactory; // Factory for SimplePatternSplitTokenizer, for producing tokens by splitting according to the provided regexp.\nClass SimplePatternTokenizer; // This tokenizer uses a Lucene RegExp or (expert usage) a pre-built determinized Automaton, to locate tokens.\nClass SimplePatternTokenizerFactory; // Factory for SimplePatternTokenizer, for matching tokens based on the provided regexp.\n", "des": "Set of components for pattern-based (regex) analysis."}
{"index": 3807, "repo": "lucene-analysis-common-9.7.0", "code": "package payloads;\n\nInterface PayloadEncoder; // Mainly for use with the DelimitedPayloadTokenFilter, converts char buffers to BytesRef.\nClass AbstractEncoder; // Base class for payload encoders.\nClass DelimitedPayloadTokenFilter; // Characters before the delimiter are the \"token\", those after are the payload.\nClass DelimitedPayloadTokenFilterFactory; // Factory for DelimitedPayloadTokenFilter.\nClass FloatEncoder; // Encode a character array Float as a BytesRef.\nClass IdentityEncoder; // Does nothing other than convert the char array to a byte array using the specified encoding.\nClass IntegerEncoder; // Encode a character array Integer as a BytesRef.\nClass NumericPayloadTokenFilter; // Assigns a payload to a token based on the TypeAttribute\nClass NumericPayloadTokenFilterFactory; // Factory for NumericPayloadTokenFilter.\nClass PayloadHelper; // Utility methods for encoding payloads.\nClass TokenOffsetPayloadTokenFilter; // Adds the OffsetAttribute.startOffset() and OffsetAttribute.endOffset() First 4 bytes are the start\nClass TokenOffsetPayloadTokenFilterFactory; // Factory for TokenOffsetPayloadTokenFilter.\nClass TypeAsPayloadTokenFilter; // Makes the TypeAttribute a payload.\nClass TypeAsPayloadTokenFilterFactory; // Factory for TypeAsPayloadTokenFilter.\n", "des": "Provides various convenience classes for creating payloads on Tokens."}
{"index": 3808, "repo": "lucene-analysis-common-9.7.0", "code": "package pt;\n\nClass PortugueseAnalyzer; // Analyzer for Portuguese.\nClass PortugueseLightStemFilter; // A TokenFilter that applies PortugueseLightStemmer to stem Portuguese words.\nClass PortugueseLightStemFilterFactory; // Factory for PortugueseLightStemFilter.\nClass PortugueseLightStemmer; // Light Stemmer for Portuguese\nClass PortugueseMinimalStemFilter; // A TokenFilter that applies PortugueseMinimalStemmer to stem Portuguese words.\nClass PortugueseMinimalStemFilterFactory; // Factory for PortugueseMinimalStemFilter.\nClass PortugueseMinimalStemmer; // Minimal Stemmer for Portuguese\nClass PortugueseStemFilter; // A TokenFilter that applies PortugueseStemmer to stem Portuguese words.\nClass PortugueseStemFilterFactory; // Factory for PortugueseStemFilter.\nClass PortugueseStemmer; // Portuguese stemmer implementing the RSLP (Removedor de Sufixos da Lingua Portuguesa) algorithm.\nClass RSLPStemmerBase; // Base class for stemmers that use a set of RSLP-like stemming steps.\nClass RSLPStemmerBase.Rule; // A basic rule, with no exceptions.\nClass RSLPStemmerBase.RuleWithSetExceptions; // A rule with a set of whole-word exceptions.\nClass RSLPStemmerBase.RuleWithSuffixExceptions; // A rule with a set of exceptional suffixes.\nClass RSLPStemmerBase.Step; // A step containing a list of rules.\n", "des": "Analyzer for Portuguese."}
{"index": 3809, "repo": "lucene-analysis-common-9.7.0", "code": "package query;\n\nClass QueryAutoStopWordAnalyzer; // An Analyzer used primarily at query time to wrap another analyzer and provide a layer of protection which prevents very common words from being passed into queries.\n", "des": "Automatically filter high-frequency stopwords."}
{"index": 3810, "repo": "lucene-analysis-common-9.7.0", "code": "package reverse;\n\nClass ReverseStringFilter; // Reverse token string, for example \"country\" => \"yrtnuoc\".\nClass ReverseStringFilterFactory; // Factory for ReverseStringFilter.\n", "des": "Filter to reverse token text."}
{"index": 3811, "repo": "lucene-analysis-common-9.7.0", "code": "package ro;\n\nClass RomanianAnalyzer; // Analyzer for Romanian.\n", "des": "Analyzer for Romanian."}
{"index": 3812, "repo": "lucene-analysis-common-9.7.0", "code": "package ru;\n\nClass RussianAnalyzer; // Analyzer for Russian language.\nClass RussianLightStemFilter; // A TokenFilter that applies RussianLightStemmer to stem Russian words.\nClass RussianLightStemFilterFactory; // Factory for RussianLightStemFilter.\nClass RussianLightStemmer; // Light Stemmer for Russian.\n", "des": "Analyzer for Russian."}
{"index": 3813, "repo": "lucene-analysis-common-9.7.0", "code": "package shingle;\n\nClass FixedShingleFilter; // A FixedShingleFilter constructs shingles (token n-grams) from a token stream.\nClass FixedShingleFilterFactory; // Factory for FixedShingleFilter\nClass ShingleAnalyzerWrapper; // A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.\nClass ShingleFilter; // A ShingleFilter constructs shingles (token n-grams) from a token stream.\nClass ShingleFilterFactory; // Factory for ShingleFilter.\n", "des": "Word n-gram filters."}
{"index": 3814, "repo": "lucene-analysis-common-9.7.0", "code": "package sinks;\n\nClass TeeSinkTokenFilter; // This TokenFilter provides the ability to set aside attribute states that have already been analyzed.\nClass TeeSinkTokenFilter.SinkTokenStream; // TokenStream output from a tee.\n", "des": "TeeSinkTokenFilter."}
{"index": 3815, "repo": "lucene-analysis-common-9.7.0", "code": "package snowball;\n\nClass SnowballFilter; // A filter that stems words using a Snowball-generated stemmer.\nClass SnowballPorterFilterFactory; // Factory for SnowballFilter, with configurable language\n", "des": "TokenFilter and Analyzer implementations that use a modified version of Snowball stemmers."}
{"index": 3816, "repo": "lucene-analysis-common-9.7.0", "code": "package sr;\n\nClass SerbianAnalyzer; // Analyzer for Serbian.\nClass SerbianNormalizationFilter; // Normalizes Serbian Cyrillic and Latin characters to \"bald\" Latin.\nClass SerbianNormalizationFilterFactory; // Factory for SerbianNormalizationFilter.\nClass SerbianNormalizationRegularFilter; // Normalizes Serbian Cyrillic to Latin.\n", "des": "Analyzer for Serbian."}
{"index": 3817, "repo": "lucene-analysis-common-9.7.0", "code": "package sv;\n\nClass SwedishAnalyzer; // Analyzer for Swedish.\nClass SwedishLightStemFilter; // A TokenFilter that applies SwedishLightStemmer to stem Swedish words.\nClass SwedishLightStemFilterFactory; // Factory for SwedishLightStemFilter.\nClass SwedishLightStemmer; // Light Stemmer for Swedish.\nClass SwedishMinimalStemFilter; // A TokenFilter that applies SwedishMinimalStemmer to stem Swedish words.\nClass SwedishMinimalStemFilterFactory; // Factory for SwedishMinimalStemFilter.\nClass SwedishMinimalStemmer; // Minimal Stemmer for Swedish.\n", "des": "Analyzer for Swedish."}
{"index": 3818, "repo": "lucene-analysis-common-9.7.0", "code": "package synonym;\n\npackage synonym.word2vec; // Analysis components for Synonyms using Word2Vec model.\nClass SolrSynonymParser; // Parser for the Solr synonyms format.\nClass SynonymFilter;\nClass SynonymFilterFactory;\nClass SynonymGraphFilter; // Applies single- or multi-token synonyms from a SynonymMap to an incoming TokenStream, producing a fully correct graph output.\nClass SynonymGraphFilterFactory; // Factory for SynonymGraphFilter.\nClass SynonymMap; // A map of synonyms, keys and values are phrases.\nClass SynonymMap.Builder; // Builds an FSTSynonymMap.\nClass SynonymMap.Parser; // Abstraction for parsing synonym files.\nClass WordnetSynonymParser; // Parser for wordnet prolog format\n", "des": "Analysis components for Synonyms."}
{"index": 3819, "repo": "lucene-analysis-common-9.7.0", "code": "package word2vec;\n\nClass Dl4jModelReader; // Dl4jModelReader reads the file generated by the library Deeplearning4j and provide a Word2VecModel with normalized vectors\nClass TermAndBoost; // Wraps a term and boost\nClass Word2VecModel; // Word2VecModel is a class representing the parsed Word2Vec model containing the vectors for each word in dictionary\nClass Word2VecSynonymFilter; // Applies single-token synonyms from a Word2Vec trained network to an incoming TokenStream.\nClass Word2VecSynonymFilterFactory; // Factory for Word2VecSynonymFilter.\nClass Word2VecSynonymProvider; // The Word2VecSynonymProvider generates the list of sysnonyms of a term.\nClass Word2VecSynonymProviderFactory; // Supply Word2Vec Word2VecSynonymProvider cache avoiding that multiple instances of Word2VecSynonymFilterFactory will instantiate multiple instances of the same SynonymProvider.\n", "des": "Analysis components for Synonyms using Word2Vec model."}
{"index": 3820, "repo": "lucene-analysis-common-9.7.0", "code": "package ta;\n\nClass TamilAnalyzer; // Analyzer for Tamil.\n", "des": "Analyzer for Tamil."}
{"index": 3821, "repo": "lucene-analysis-common-9.7.0", "code": "package te;\n\nClass TeluguAnalyzer; // Analyzer for Telugu.\nClass TeluguNormalizationFilter; // A TokenFilter that applies TeluguNormalizer to normalize the orthography.\nClass TeluguNormalizationFilterFactory; // Factory for TeluguNormalizationFilter.\nClass TeluguNormalizer; // Normalizer for Telugu.\nClass TeluguStemFilter; // A TokenFilter that applies TeluguStemmer to stem Telugu words.\nClass TeluguStemFilterFactory; // Factory for TeluguStemFilter.\nClass TeluguStemmer; // Stemmer for Telugu.\n", "des": "Analyzer for Telugu Language."}
{"index": 3822, "repo": "lucene-analysis-common-9.7.0", "code": "package th;\n\nClass ThaiAnalyzer; // Analyzer for Thai language.\nClass ThaiTokenizer; // Tokenizer that use BreakIterator to tokenize Thai text.\nClass ThaiTokenizerFactory; // Factory for ThaiTokenizer.\n", "des": "Analyzer for Thai."}
{"index": 3823, "repo": "lucene-analysis-common-9.7.0", "code": "package tr;\n\nClass ApostropheFilter; // Strips all characters after an apostrophe (including the apostrophe itself).\nClass ApostropheFilterFactory; // Factory for ApostropheFilter.\nClass TurkishAnalyzer; // Analyzer for Turkish.\nClass TurkishLowerCaseFilter; // Normalizes Turkish token text to lower case.\nClass TurkishLowerCaseFilterFactory; // Factory for TurkishLowerCaseFilter.\n", "des": "Analyzer for Turkish."}
{"index": 3824, "repo": "lucene-analysis-common-9.7.0", "code": "package util;\n\nClass CharArrayIterator; // A CharacterIterator used internally for use with BreakIterator\nClass CharTokenizer; // An abstract base class for simple, character-oriented tokenizers.\nClass ElisionFilter; // Removes elisions from a TokenStream.\nClass ElisionFilterFactory; // Factory for ElisionFilter.\nClass FilesystemResourceLoader; // Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.\nClass OpenStringBuilder; // A StringBuilder that allows one to access the array.\nClass RollingCharBuffer; // Acts like a forever growing char[] as you read characters into it from the provided reader, but internally it uses a circular buffer to only hold the characters that haven't been freed yet.\nClass SegmentingTokenizerBase; // Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.\nClass StemmerUtil; // Some commonly-used stemming functions\nClass UnicodeProps; // This file contains unicode properties used by various CharTokenizers.\n", "des": "Utility functions for text analysis."}
{"index": 3825, "repo": "lucene-analysis-common-9.7.0", "code": "package wikipedia;\n\nClass WikipediaTokenizer; // Extension of StandardTokenizer that is aware of Wikipedia syntax.\nClass WikipediaTokenizerFactory; // Factory for WikipediaTokenizer.\n", "des": "Tokenizer that is aware of Wikipedia syntax."}
{"index": 3826, "repo": "lucene-analysis-common-9.7.0", "code": "package collation;\n\npackage collation.tokenattributes; // Custom AttributeImpl for indexing collation keys as index terms.\nClass CollationAttributeFactory; // Converts each token into its CollationKey, and then encodes the bytes as an index term.\nClass CollationDocValuesField; // Indexes collation keys as a single-valued SortedDocValuesField.\nClass CollationKeyAnalyzer; // Configures KeywordTokenizer with CollationAttributeFactory.\n", "des": "Unicode collation support."}
{"index": 3827, "repo": "lucene-analysis-common-9.7.0", "code": "package tokenattributes;\n\nClass CollatedTermAttributeImpl; // Extension of CharTermAttributeImpl that encodes the term text as a binary Unicode collation key instead of as UTF-8 bytes.\n", "des": "Custom AttributeImpl for indexing collation keys as index terms."}
{"index": 3828, "repo": "lucene-analysis-common-9.7.0", "code": "package snowball;\n\npackage snowball.ext; // Autogenerated snowball stemmer implementations.\nClass Among; // Internal class used by Snowball stemmers\nClass SnowballProgram; // Base class for a snowball stemmer\nClass SnowballStemmer; // Parent class of all snowball stemmers, which must implement stem\n", "des": "Snowball stemmer API"}
{"index": 3829, "repo": "lucene-analysis-common-9.7.0", "code": "package ext;\n\nClass ArabicStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass ArmenianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass BasqueStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass CatalanStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass DanishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass DutchStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass EnglishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass EstonianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass FinnishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass FrenchStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass German2Stemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass GermanStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass GreekStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass HindiStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass HungarianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass IndonesianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass IrishStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass ItalianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass KpStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass LithuanianStemmer; // This class implements the stemming algorithm defined by a snowball script.\nClass LovinsStemmer; // This class implements the stemming algorithm defined by a snowball script.\n", "des": "Autogenerated snowball stemmer implementations."}
{"index": 3830, "repo": "lucene-highlighter-9.7.0", "code": "package highlight;\n\nInterface Encoder; // Encodes original text.\nInterface Formatter; // Processes terms found in the original text, typically by applying some form of mark-up to highlight terms in HTML search results pages.\nInterface Fragmenter; // Implements the policy for breaking text into multiple fragments for consideration by the Highlighter class.\nInterface Scorer; // A Scorer is responsible for scoring a stream of tokens.\nClass DefaultEncoder; // Simple Encoder implementation that does not modify the output\nClass GradientFormatter; // Formats text with different color intensity depending on the score of the term.\nClass Highlighter; // Marks up highlighted terms found in the best sections of text, using configurable Fragmenter, Scorer, Formatter, Encoder and tokenizers.\nClass NullFragmenter; // Fragmenter implementation which does not fragment the text.\nClass OffsetLimitTokenFilter; // This TokenFilter limits the number of tokens while indexing by adding up the current offset.\nClass PositionSpan; // Utility class to record Positions Spans\nClass QueryScorer; // Scorer implementation which scores text fragments by the number of unique query terms found.\nClass QueryTermExtractor; // Utility class used to extract the terms used in a query, plus any weights.\nClass QueryTermScorer; // Scorer implementation which scores text fragments by the number of unique query terms found.\nClass SimpleFragmenter; // Fragmenter implementation which breaks text up into same-size fragments with no concerns over spotting sentence boundaries.\nClass SimpleHTMLEncoder; // Simple Encoder implementation to escape text for HTML output\nClass SimpleHTMLFormatter; // Simple Formatter implementation to highlight terms with a pre and post tag.\nClass SimpleSpanFragmenter; // Fragmenter implementation which breaks text up into same-size fragments but does not split up Spans.\nClass SpanGradientFormatter; // Formats text with different color intensity depending on the score of the term using the span tag.\nClass TermVectorLeafReader; // Wraps a Terms with a LeafReader, typically from term vectors.\nClass TextFragment; // Low-level class used to record information about a section of a document with a score.\nClass TokenGroup; // One, or several overlapping tokens, along with the score(s) and the scope of the original text.\n", "des": "Highlighting search terms."}
{"index": 3831, "repo": "lucene-highlighter-9.7.0", "code": "package matchhighlight;\n\nInterface MatchHighlighter.FieldValueHighlighter; // Actual per-field highlighter.\nInterface MatchRegionRetriever.FieldValueProvider; // An abstraction that provides document values for a given field.\nInterface MatchRegionRetriever.MatchOffsetsConsumer; // A callback for accepting a single document (and its associated leaf reader, leaf document ID) and its match offset ranges, as indicated by the Matches interface retrieved for the query.\nInterface OffsetsRetrievalStrategy; // Determines how match offset regions are computed from MatchesIterator.\nInterface OffsetsRetrievalStrategySupplier; // A per-field supplier of OffsetsRetrievalStrategy.\nInterface PassageAdjuster; // Adjusts the range of one or more passages over a given value.\nClass BreakIteratorShrinkingAdjuster; // A PassageAdjuster that adjusts the Passage range to word boundaries hinted by the given BreakIterator.\nClass FieldValueHighlighters; // A factory of MatchHighlighter.FieldValueHighlighter classes that cover typical use cases (verbatim values, highlights, abbreviations).\nClass MatchHighlighter; // An example highlighter that combines several lower-level highlighting utilities in this package into a fully featured, ready-to-use component.\nClass MatchHighlighter.DocHighlights; // Single document's highlights.\nClass MatchHighlighter.QueryOffsetRange; // An OffsetRange of a match, together with the source query that caused it.\nClass MatchRegionRetriever; // Utility class to compute a list of \"match regions\" for a given query, searcher and document(s) using Matches API.\nClass OffsetRange; // A non-empty range of offset positions.\nClass OffsetsFromMatchIterator; // This strategy retrieves offsets directly from MatchesIterator, if they are available, otherwise it falls back to using OffsetsFromPositions.\nClass OffsetsFromPositions; // This strategy applies to fields with stored positions but no offsets.\nClass OffsetsFromTokens; // This strategy works for fields where we know the match occurred but there are no known positions or offsets.\nClass OffsetsFromValues; // This strategy works for fields where we know the match occurred but there are no known positions or offsets.\nClass Passage; // A passage is a fragment of source text, scored and possibly with a list of sub-offsets (markers) to be highlighted.\n", "des": "This package contains several components useful to build a highlighter on top of the Matches API."}
{"index": 3832, "repo": "lucene-highlighter-9.7.0", "code": "package uhighlight;\n\nInterface CharArrayMatcher; // Matches a character array\nInterface LabelledCharArrayMatcher; // Associates a label with a CharArrayMatcher to distinguish different sources for terms in highlighting\nClass AnalysisOffsetStrategy; // Provides a base class for analysis based offset strategies to extend from.\nClass CustomSeparatorBreakIterator; // A BreakIterator that breaks the text whenever a certain separator, provided as a constructor argument, is found.\nClass DefaultPassageFormatter; // Creates a formatted snippet from the top passages.\nClass FieldHighlighter; // Internal highlighter abstraction that operates on a per field basis.\nClass FieldOffsetStrategy; // Ultimately returns an OffsetsEnum yielding potentially highlightable words in the text.\nClass LengthGoalBreakIterator; // Wraps another BreakIterator to skip past breaks that would result in passages that are too short.\nClass MemoryIndexOffsetStrategy; // Uses an Analyzer on content to get offsets and then populates a MemoryIndex.\nClass NoOpOffsetStrategy; // Never returns offsets.\nClass OffsetsEnum; // An enumeration/iterator of a term and its offsets for use by FieldHighlighter.\nClass OffsetsEnum.MultiOffsetsEnum; // A view over several OffsetsEnum instances, merging them in-place\nClass OffsetsEnum.OfMatchesIterator; // Based on a MatchesIterator; does not look at submatches.\nClass OffsetsEnum.OfMatchesIteratorWithSubs; // Based on a MatchesIterator with submatches.\nClass OffsetsEnum.OfPostings; // Based on a PostingsEnum -- the typical/standard OE impl.\nClass OverlaySingleDocTermsLeafReader; // Overlays a 2nd LeafReader for the terms of one field, otherwise the primary reader is consulted.\nClass Passage; // Represents a passage (typically a sentence of the document).\nClass PassageFormatter; // Creates a formatted snippet from the top passages.\nClass PassageScorer; // Ranks passages found by UnifiedHighlighter.\nClass PhraseHelper; // Helps the FieldOffsetStrategy with position sensitive queries (e.g.\nClass PostingsOffsetStrategy; // Uses offsets in postings -- IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS.\n", "des": "The UnifiedHighlighter -- a flexible highlighter that can get offsets from postings, term vectors, or analysis."}
{"index": 3833, "repo": "lucene-highlighter-9.7.0", "code": "package vectorhighlight;\n\nInterface BoundaryScanner; // Finds fragment boundaries: pluggable into BaseFragmentsBuilder\nInterface FragListBuilder; // FragListBuilder is an interface for FieldFragList builder classes.\nInterface FragmentsBuilder; // FragmentsBuilder is an interface for fragments (snippets) builder classes.\nClass BaseFragListBuilder; // A abstract implementation of FragListBuilder.\nClass BaseFragmentsBuilder; // Base FragmentsBuilder implementation that supports colored pre/post tags and multivalued fields.\nClass BreakIteratorBoundaryScanner; // A BoundaryScanner implementation that uses BreakIterator to find boundaries in the text.\nClass FastVectorHighlighter; // Another highlighter implementation.\nClass FieldFragList; // FieldFragList has a list of \"frag info\" that is used by FragmentsBuilder class to create fragments (snippets).\nClass FieldFragList.WeightedFragInfo; // List of term offsets + weight for a frag info\nClass FieldFragList.WeightedFragInfo.SubInfo; // Represents the list of term offsets for some text\nClass FieldPhraseList; // FieldPhraseList has a list of WeightedPhraseInfo that is used by FragListBuilder to create a FieldFragList object.\nClass FieldPhraseList.WeightedPhraseInfo; // Represents the list of term offsets and boost for some text\nClass FieldPhraseList.WeightedPhraseInfo.Toffs; // Term offsets (start + end)\nClass FieldQuery; // FieldQuery breaks down query object into terms/phrases and keeps them in a QueryPhraseMap structure.\nClass FieldQuery.QueryPhraseMap; // Internal structure of a query for highlighting: represents a nested query structure\nClass FieldTermStack; // FieldTermStack is a stack that keeps query terms in the specified field of the document to be highlighted.\nClass FieldTermStack.TermInfo; // Single term with its position/offsets in the document and IDF weight.\nClass ScoreOrderFragmentsBuilder; // An implementation of FragmentsBuilder that outputs score-order fragments.\nClass ScoreOrderFragmentsBuilder.ScoreComparator; // Comparator for FieldFragList.WeightedFragInfo by boost, breaking ties by offset.\nClass SimpleBoundaryScanner; // Simple boundary scanner implementation that divides fragments based on a set of separator characters.\nClass SimpleFieldFragList; // A simple implementation of FieldFragList.\n", "des": "Another highlighter implementation based on term vectors."}
{"index": 3834, "repo": "lucene-core-9.7.0", "code": "package analysis;\n\npackage analysis.standard; // Fast, general-purpose grammar-based tokenizer StandardTokenizer implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.\npackage analysis.tokenattributes; // General-purpose attributes for text analysis.\nClass AbstractAnalysisFactory; // Abstract parent class for analysis factories TokenizerFactory, TokenFilterFactory and CharFilterFactory.\nClass AnalysisSPILoader<S extends AbstractAnalysisFactory>; // Helper class for loading named SPIs from classpath (e.g.\nClass Analyzer; // An Analyzer builds TokenStreams, which analyze text.\nClass Analyzer.ReuseStrategy; // Strategy defining how TokenStreamComponents are reused per call to Analyzer.tokenStream(String, java.io.Reader).\nClass Analyzer.TokenStreamComponents; // This class encapsulates the outer components of a token stream.\nClass AnalyzerWrapper; // Extension to Analyzer suitable for Analyzers which wrap other Analyzers.\nClass AutomatonToTokenStream; // Converts an Automaton into a TokenStream.\nClass CachingTokenFilter; // This class can be used if the token attributes of a TokenStream are intended to be consumed more than once.\nClass CharacterUtils; // Utility class to write tokenizers or token filters.\nClass CharacterUtils.CharacterBuffer; // A simple IO buffer to use with CharacterUtils.fill(CharacterBuffer, Reader).\nClass CharArrayMap<V>; // A simple class that stores key Strings as char[]'s in a hash table.\nClass CharArraySet; // A simple class that stores Strings as char[]'s in a hash table.\nClass CharFilter; // Subclasses of CharFilter can be chained to filter a Reader They can be used as Reader with additional offset correction.\nClass CharFilterFactory; // Abstract parent class for analysis factories that create CharFilter instances.\nClass DelegatingAnalyzerWrapper; // An analyzer wrapper, that doesn't allow to wrap components or readers.\nClass FilteringTokenFilter; // Abstract base class for TokenFilters that may remove tokens.\nClass GraphTokenFilter; // An abstract TokenFilter that exposes its input stream as a graph\nClass LowerCaseFilter; // Normalizes token text to lower case.\nClass StopFilter; // Removes stop words from a token stream.\n", "des": "Text analysis."}
{"index": 3835, "repo": "lucene-core-9.7.0", "code": "package standard;\n\nClass StandardAnalyzer; // Filters StandardTokenizer with LowerCaseFilter and StopFilter, using a configurable list of stop words.\nClass StandardTokenizer; // A grammar-based tokenizer constructed with JFlex.\nClass StandardTokenizerFactory; // Factory for StandardTokenizer.\nClass StandardTokenizerImpl; // This class implements Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29.\n", "des": "Fast, general-purpose grammar-based tokenizer StandardTokenizer implements the Word Break rules from the Unicode Text Segmentation algorithm, as specified in Unicode Standard Annex #29."}
{"index": 3836, "repo": "lucene-core-9.7.0", "code": "package tokenattributes;\n\nInterface BytesTermAttribute; // This attribute can be used if you have the raw term bytes to be indexed.\nInterface CharTermAttribute; // The term text of a Token.\nInterface FlagsAttribute; // This attribute can be used to pass different flags down the Tokenizer chain, e.g.\nInterface KeywordAttribute; // This attribute can be used to mark a token as a keyword.\nInterface OffsetAttribute; // The start and end character offset of a Token.\nInterface PayloadAttribute; // The payload of a Token.\nInterface PositionIncrementAttribute; // Determines the position of this token relative to the previous Token in a TokenStream, used in phrase searching.\nInterface PositionLengthAttribute; // Determines how many positions this token spans.\nInterface SentenceAttribute; // This attribute tracks what sentence a given token belongs to as well as potentially other sentence specific attributes.\nInterface TermFrequencyAttribute; // Sets the custom term frequency of a term within one document.\nInterface TermToBytesRefAttribute; // This attribute is requested by TermsHashPerField to index the contents.\nInterface TypeAttribute; // A Token's lexical type.\nClass BytesTermAttributeImpl; // Implementation class for BytesTermAttribute.\nClass CharTermAttributeImpl; // Default implementation of CharTermAttribute.\nClass FlagsAttributeImpl; // Default implementation of FlagsAttribute.\nClass KeywordAttributeImpl; // Default implementation of KeywordAttribute.\nClass OffsetAttributeImpl; // Default implementation of OffsetAttribute.\nClass PackedTokenAttributeImpl; // Default implementation of the common attributes used by Lucene: CharTermAttribute TypeAttribute PositionIncrementAttribute PositionLengthAttribute OffsetAttribute TermFrequencyAttribute\nClass PayloadAttributeImpl; // Default implementation of PayloadAttribute.\nClass PositionIncrementAttributeImpl; // Default implementation of PositionIncrementAttribute.\nClass PositionLengthAttributeImpl; // Default implementation of PositionLengthAttribute.\nClass SentenceAttributeImpl; // Default implementation of SentenceAttribute.\nClass TermFrequencyAttributeImpl; // Default implementation of TermFrequencyAttribute.\nClass TypeAttributeImpl; // Default implementation of TypeAttribute.\n", "des": "General-purpose attributes for text analysis."}
{"index": 3837, "repo": "lucene-core-9.7.0", "code": "package codecs;\n\npackage codecs.compressing; // Compressing helper classes.\npackage codecs.lucene90; // Lucene 9.0 file format.\npackage codecs.lucene94; // Lucene 9.4 file format.\npackage codecs.lucene95; // Lucene 9.5 file format.\npackage codecs.perfield; // Postings format that can delegate to different formats per-field.\nClass BlockTermState; // Holds all state required for PostingsReaderBase to produce a PostingsEnum without re-seeking the terms dict.\nClass BufferingKnnVectorsWriter; // Buffers up pending vector value(s) per doc, then flushes when segment flushes.\nClass Codec; // Encodes/decodes an inverted index segment.\nClass CodecUtil; // Utility class for reading and writing versioned headers.\nClass CompetitiveImpactAccumulator; // This class accumulates the (freq, norm) pairs that may produce competitive scores.\nClass CompoundDirectory; // A read-only Directory that consists of a view over a compound file.\nClass CompoundFormat; // Encodes/decodes compound files\nClass DocValuesConsumer; // Abstract API that consumes numeric, binary and sorted docvalues.\nClass DocValuesFormat; // Encodes/decodes per-document values.\nClass DocValuesProducer; // Abstract API that produces numeric, binary, sorted, sortedset, and sortednumeric docvalues.\nClass FieldInfosFormat; // Encodes/decodes FieldInfos\nClass FieldsConsumer; // Abstract API that consumes terms, doc, freq, prox, offset and payloads postings.\nClass FieldsProducer; // Abstract API that produces terms, doc, freq, prox, offset and payloads postings.\nClass FilterCodec; // A codec that forwards all its method calls to another codec.\nClass KnnFieldVectorsWriter<T>; // Vectors' writer for a field\nClass KnnVectorsFormat; // Encodes/decodes per-document vector and any associated indexing structures required to support nearest-neighbor search\nClass KnnVectorsReader; // Reads vectors from an index.\nClass KnnVectorsWriter; // Writes vectors to an index.\nClass KnnVectorsWriter.MergedVectorValues; // View over multiple vector values supporting iterator-style access via DocIdMerger.\nClass LiveDocsFormat; // Format for live/deleted documents\n", "des": "Codecs API: API for customization of the encoding and structure of the index."}
{"index": 3838, "repo": "lucene-core-9.7.0", "code": "package compressing;\n\nClass CompressionMode; // A compression mode.\nClass Compressor; // A data compressor.\nClass Decompressor; // A decompressor.\nClass MatchingReaders; // Computes which segments have identical field name to number mappings, which allows stored fields and term vectors in this codec to be bulk-merged.\n", "des": "Compressing helper classes."}
{"index": 3839, "repo": "lucene-core-9.7.0", "code": "package lucene90;\n\npackage lucene90.blocktree; // BlockTree terms dictionary.\npackage lucene90.compressing; // Lucene 9.0 compressing format.\nClass DeflateWithPresetDictCompressionMode; // A compression mode that trades speed for compression ratio.\nClass IndexedDISI; // Disk-based implementation of a DocIdSetIterator which can return the index of the current document, i.e.\nClass Lucene90CompoundFormat; // Lucene 9.0 compound file format\nClass Lucene90DocValuesFormat; // Lucene 9.0 DocValues format.\nClass Lucene90LiveDocsFormat; // Lucene 9.0 live docs format\nClass Lucene90NormsFormat; // Lucene 9.0 Score normalization format.\nClass Lucene90PointsFormat; // Lucene 9.0 point format, which encodes dimensional values in a block KD-tree structure for fast 1D range and N dimensional shape intersection filtering.\nClass Lucene90PointsReader; // Reads point values previously written with Lucene90PointsWriter\nClass Lucene90PointsWriter; // Writes dimensional values\nClass Lucene90PostingsFormat; // Lucene 5.0 postings format, which encodes postings in packed integer blocks for fast decode.\nClass Lucene90PostingsFormat.IntBlockTermState; // Holds all state required for Lucene90PostingsReader to produce a PostingsEnum without re-seeking the terms dict.\nClass Lucene90PostingsReader; // Concrete class that reads docId(maybe frq,pos,offset,payloads) list with postings format.\nClass Lucene90PostingsWriter; // Concrete class that writes docId(maybe frq,pos,offset,payloads) list with postings format.\nClass Lucene90SegmentInfoFormat; // Lucene 9.0 Segment info format.\nClass Lucene90StoredFieldsFormat; // Lucene 9.0 stored fields format.\nClass Lucene90TermVectorsFormat; // Lucene 9.0 term vectors format.\nClass LZ4WithPresetDictCompressionMode; // A compression mode that compromises on the compression ratio to provide fast compression and decompression.\nEnum Lucene90StoredFieldsFormat.Mode; // Configuration option for stored fields.\n", "des": "Lucene 9.0 file format."}
{"index": 3840, "repo": "lucene-core-9.7.0", "code": "package blocktree;\n\nClass FieldReader; // BlockTree's implementation of Terms.\nClass Lucene90BlockTreeTermsReader; // A block-based terms index and dictionary that assigns terms to variable length blocks according to how they share prefixes.\nClass Lucene90BlockTreeTermsWriter; // Block-based terms index and dictionary writer.\nClass Stats; // BlockTree statistics for a single field returned by FieldReader.getStats().\n", "des": "BlockTree terms dictionary."}
{"index": 3841, "repo": "lucene-core-9.7.0", "code": "package compressing;\n\nClass FieldsIndexWriter; // Efficient index format for block-based Codecs.\nClass Lucene90CompressingStoredFieldsFormat; // A StoredFieldsFormat that compresses documents in chunks in order to improve the compression ratio.\nClass Lucene90CompressingStoredFieldsReader; // StoredFieldsReader impl for Lucene90CompressingStoredFieldsFormat.\nClass Lucene90CompressingStoredFieldsWriter; // StoredFieldsWriter impl for Lucene90CompressingStoredFieldsFormat.\nClass Lucene90CompressingTermVectorsFormat; // A TermVectorsFormat that compresses chunks of documents together in order to improve the compression ratio.\nClass Lucene90CompressingTermVectorsReader; // TermVectorsReader for Lucene90CompressingTermVectorsFormat.\nClass Lucene90CompressingTermVectorsWriter; // TermVectorsWriter for Lucene90CompressingTermVectorsFormat.\n", "des": "Lucene 9.0 compressing format."}
{"index": 3842, "repo": "lucene-core-9.7.0", "code": "package lucene94;\n\nClass Lucene94FieldInfosFormat; // Lucene 9.0 Field Infos format.\n", "des": "Lucene 9.4 file format."}
{"index": 3843, "repo": "lucene-core-9.7.0", "code": "package lucene95;\n\nClass Lucene95Codec; // Implements the Lucene 9.5 index format\nClass Lucene95HnswVectorsFormat; // Lucene 9.5 vector format, which encodes numeric vector values and an optional associated graph connecting the documents having values.\nClass Lucene95HnswVectorsReader; // Reads vectors from the index segments along with index data structures supporting KNN search.\nClass Lucene95HnswVectorsWriter; // Writes vector values and knn graphs to index segments.\nEnum Lucene95Codec.Mode; // Configuration option for the codec.\n", "des": "Lucene 9.5 file format."}
{"index": 3844, "repo": "lucene-core-9.7.0", "code": "package perfield;\n\nClass PerFieldDocValuesFormat; // Enables per field docvalues support.\nClass PerFieldKnnVectorsFormat; // Enables per field numeric vector support.\nClass PerFieldKnnVectorsFormat.FieldsReader; // VectorReader that can wrap multiple delegate readers, selected by field.\nClass PerFieldPostingsFormat; // Enables per field postings support.\n", "des": "Postings format that can delegate to different formats per-field."}
{"index": 3845, "repo": "lucene-core-9.7.0", "code": "package document;\n\nClass BinaryDocValuesField; // Field that stores a per-document BytesRef value.\nClass BinaryPoint; // An indexed binary field for fast range filters.\nClass BinaryRangeDocValues; // A binary representation of a range that wraps a BinaryDocValues field\nClass DateTools; // Provides support for converting dates to strings and vice-versa.\nClass Document; // Documents are the unit of indexing and search.\nClass DocumentStoredFieldVisitor; // A StoredFieldVisitor that creates a Document from stored fields.\nClass DoubleDocValuesField; // Syntactic sugar for encoding doubles as NumericDocValues via Double.doubleToRawLongBits(double).\nClass DoubleField; // Field that stores a per-document double value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass DoublePoint; // An indexed double field for fast range filters.\nClass DoubleRange; // An indexed Double Range field.\nClass DoubleRangeDocValuesField; // DocValues field for DoubleRange.\nClass FeatureField; // Field that can be used to store static scoring factors into documents.\nClass Field; // Expert: directly create a field for a document.\nClass FieldType; // Describes the properties of a field.\nClass FloatDocValuesField; // Syntactic sugar for encoding floats as NumericDocValues via Float.floatToRawIntBits(float).\nClass FloatField; // Field that stores a per-document float value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass FloatPoint; // An indexed float field for fast range filters.\nClass FloatRange; // An indexed Float Range field.\nClass FloatRangeDocValuesField; // DocValues field for FloatRange.\nClass InetAddressPoint; // An indexed 128-bit InetAddress field.\nClass InetAddressRange; // An indexed InetAddress Range Field\nClass IntField; // Field that stores a per-document int value for scoring, sorting or value retrieval and index the field for fast range filters.\nClass IntPoint; // An indexed int field for fast range filters.\nClass IntRange; // An indexed Integer Range field.\nClass IntRangeDocValuesField; // DocValues field for IntRange.\n", "des": "The logical representation of a Document for indexing and searching."}
{"index": 3846, "repo": "lucene-core-9.7.0", "code": "package geo;\n\nInterface Component2D; // 2D Geometry object that supports spatial relationships with bounding boxes, triangles and points.\nInterface Tessellator.Monitor; // Implementation of this interface will receive calls with internal data at each step of the triangulation algorithm.\nClass Circle; // Represents a circle on the earth's surface.\nClass GeoEncodingUtils; // reusable geopoint encoding methods\nClass GeoEncodingUtils.Component2DPredicate; // A predicate that checks whether a given point is within a component2D geometry.\nClass GeoEncodingUtils.DistancePredicate; // A predicate that checks whether a given point is within a distance of another point.\nClass Geometry; // Base class for LatLonGeometry and XYGeometry\nClass GeoUtils; // Basic reusable geo-spatial utility methods\nClass LatLonGeometry; // Lat/Lon Geometry object.\nClass Line; // Represents a line on the earth's surface.\nClass Point; // Represents a point on the earth's surface.\nClass Polygon; // Represents a closed polygon on the earth's surface.\nClass Rectangle; // Represents a lat/lon rectangle.\nClass SimpleWKTShapeParser; // Parses shape geometry represented in WKT format\nClass Tessellator; // Computes a triangular mesh tessellation for a given polygon.\nClass Tessellator.Node; // Circular Doubly-linked list used for polygon coordinates\nClass Tessellator.Triangle; // Triangle in the tessellated mesh\nClass XYCircle; // Represents a circle on the XY plane.\nClass XYEncodingUtils; // reusable cartesian geometry encoding methods\nClass XYGeometry; // Cartesian Geometry object.\nClass XYLine; // Represents a line in cartesian space.\nClass XYPoint; // Represents a point on the earth's surface.\nClass XYPolygon; // Represents a polygon in cartesian space.\nClass XYRectangle; // Represents a x/y cartesian rectangle.\nEnum Component2D.WithinRelation; // Used by withinTriangle to check the within relationship between a triangle and the query shape (e.g.\nEnum GeoUtils.WindingOrder; // used to define the orientation of 3 points -1 = Clockwise 0 = Colinear 1 = Counter-clockwise\n", "des": "Geospatial Utility Implementations for Lucene Core"}
{"index": 3847, "repo": "lucene-core-9.7.0", "code": "package index;\n\nInterface ImpactsSource; // Source of Impacts.\nInterface IndexableField; // Represents a single field for indexing.\nInterface IndexableFieldType; // Describes the properties of a field.\nInterface IndexReader.CacheHelper; // A utility class that gives hooks in order to help build a cache based on the data that is contained in this index.\nInterface IndexReader.ClosedListener; // A listener that is called when a resource gets closed.\nInterface IndexSorter; // Handles how documents should be sorted in an index, both within a segment and between segments.\nInterface IndexSorter.ComparableProvider; // Used for sorting documents across segments\nInterface IndexSorter.DocComparator; // A comparator of doc IDs, used for sorting documents within a segment\nInterface IndexSorter.NumericDocValuesProvider; // Provide a NumericDocValues instance for a LeafReader\nInterface IndexSorter.SortedDocValuesProvider; // Provide a SortedDocValues instance for a LeafReader\nInterface IndexWriter.IndexReaderWarmer; // If DirectoryReader.open(IndexWriter) has been called (ie, this writer is in near real-time mode), then after a merge completes, this class can be invoked to warm the reader on the newly merged segment, before the merge commits.\nInterface IndexWriterEventListener; // A callback event listener for recording key events happened inside IndexWriter\nInterface MergePolicy.MergeContext; // This interface represents the current context of the merge selection process.\nInterface MergeScheduler.MergeSource; // Provides access to new merges and executes the actual merge\nInterface PointValues.IntersectVisitor; // We recurse the PointValues.PointTree, using a provided instance of this to guide the recursion.\nInterface PointValues.PointTree; // Basic operations to read the KD-tree.\nInterface QueryTimeout; // Query timeout abstraction that controls whether a query should continue or be stopped.\nInterface TwoPhaseCommit; // An interface for implementations that support 2-phase commit.\nClass AutomatonTermsEnum; // A FilteredTermsEnum that enumerates terms based upon what is accepted by a DFA.\nClass BaseCompositeReader<R extends IndexReader>; // Base class for implementing CompositeReaders based on an array of sub-readers.\n", "des": "Code to maintain and access indices."}
{"index": 3848, "repo": "lucene-core-9.7.0", "code": "package tests;\n\nInterface ConcurrentMergeSchedulerAccess; // Access to ConcurrentMergeScheduler internals exposed to the test framework.\nInterface IndexPackageAccess; // Access to org.apache.lucene.index package internals exposed to the test framework.\nInterface IndexPackageAccess.FieldInfosBuilder; // Public type exposing FieldInfo internal builders.\nInterface IndexWriterAccess; // Access to IndexWriter internals exposed to the test framework.\nInterface SegmentReaderAccess; // Access to SegmentReader internals exposed to the test framework.\nClass TestSecrets; // A set of static methods returning accessors for internal, package-private functionality in Lucene.\n", "des": "Internal bridges to package-private internals, for use by the lucene test framework only."}
{"index": 3849, "repo": "lucene-core-9.7.0", "code": "package search;\n\npackage search.comparators; // Comparators, used to compare hits so as to determine their sort order when collecting the top results with TopFieldCollector.\npackage search.similarities; // This package contains the various ranking models that can be used in Lucene.\nInterface BoostAttribute; // Add this Attribute to a TermsEnum returned by MultiTermQuery.getTermsEnum(Terms,AttributeSource) and update the boost on each returned term.\nInterface Collector; // Expert: Collectors are primarily meant to be used to gather raw results from a search, and implement sorting or custom result filtering, collation, etc.\nInterface CollectorManager<C extends Collector,​T>; // A manager of collectors.\nInterface LeafCollector; // Collector decouples the score from the collected doc: the score computation is skipped entirely if it's not needed.\nInterface LeafFieldComparator; // Expert: comparator that gets instantiated on each leaf from a top-level FieldComparator instance.\nInterface Matches; // Reports the positions and optionally offsets of all matching terms in a query for a single document\nInterface MatchesIterator; // An iterator over match positions (and optionally offsets) for a single document and field\nInterface MaxNonCompetitiveBoostAttribute; // Add this Attribute to a fresh AttributeSource before calling MultiTermQuery.getTermsEnum(Terms,AttributeSource).\nInterface QueryCache; // A cache for queries.\nInterface QueryCachingPolicy; // A policy defining which filters should be cached.\nInterface ReferenceManager.RefreshListener; // Use to receive notification when a refresh has finished.\nInterface SearcherLifetimeManager.Pruner; // See SearcherLifetimeManager.prune(org.apache.lucene.search.SearcherLifetimeManager.Pruner).\nInterface SegmentCacheable; // Interface defining whether or not an object can be cached against a LeafReader\nClass AutomatonQuery; // A Query that will match terms against a finite-state machine.\nClass BlendedTermQuery; // A Query that blends index statistics across multiple terms.\nClass BlendedTermQuery.Builder; // A Builder for BlendedTermQuery.\nClass BlendedTermQuery.DisjunctionMaxRewrite; // A BlendedTermQuery.RewriteMethod that creates a DisjunctionMaxQuery out of the sub queries.\n", "des": "Code to search indices."}
{"index": 3850, "repo": "lucene-core-9.7.0", "code": "package comparators;\n\nClass DocComparator; // Comparator that sorts by asc _doc\nClass DoubleComparator; // Comparator based on Double.compare(double, double) for numHits.\nClass FloatComparator; // Comparator based on Float.compare(float, float) for numHits.\nClass IntComparator; // Comparator based on Integer.compare(int, int) for numHits.\nClass LongComparator; // Comparator based on Long.compare(long, long) for numHits.\nClass MinDocIterator; // Docs iterator that starts iterating from a configurable minimum document\nClass NumericComparator<T extends Number>; // Abstract numeric comparator for comparing numeric values.\nClass TermOrdValComparator; // Sorts by field's natural Term sort order, using ordinals.\n", "des": "Comparators, used to compare hits so as to determine their sort order when collecting the top results with TopFieldCollector."}
{"index": 3851, "repo": "lucene-core-9.7.0", "code": "package similarities;\n\nInterface LMSimilarity.CollectionModel; // A strategy for computing the collection language model.\nClass AfterEffect; // This class acts as the base class for the implementations of the first normalization of the informative content in the DFR framework.\nClass AfterEffectB; // Model of the information gain based on the ratio of two Bernoulli processes.\nClass AfterEffectL; // Model of the information gain based on Laplace's law of succession.\nClass Axiomatic; // Axiomatic approaches for IR.\nClass AxiomaticF1EXP; // F1EXP is defined as Sum(tf(term_doc_freq)*ln(docLen)*IDF(term)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq\nClass AxiomaticF1LOG; // F1LOG is defined as Sum(tf(term_doc_freq)*ln(docLen)*IDF(term)) where IDF(t) = ln((N+1)/df(t)) N=total num of docs, df=doc freq\nClass AxiomaticF2EXP; // F2EXP is defined as Sum(tfln(term_doc_freq, docLen)*IDF(term)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq\nClass AxiomaticF2LOG; // F2EXP is defined as Sum(tfln(term_doc_freq, docLen)*IDF(term)) where IDF(t) = ln((N+1)/df(t)) N=total num of docs, df=doc freq\nClass AxiomaticF3EXP; // F3EXP is defined as Sum(tf(term_doc_freq)*IDF(term)-gamma(docLen, queryLen)) where IDF(t) = pow((N+1)/df(t), k) N=total num of docs, df=doc freq gamma(docLen, queryLen) = (docLen-queryLen)*queryLen*s/avdl NOTE: the gamma function of this similarity creates negative scores\n", "des": "This package contains the various ranking models that can be used in Lucene."}
{"index": 3852, "repo": "lucene-core-9.7.0", "code": "package store;\n\nInterface RandomAccessInput; // Random Access Index API.\nClass BaseDirectory; // Base implementation for a concrete Directory that uses a LockFactory for locking.\nClass BufferedChecksum; // Wraps another Checksum with an internal buffer to speed up checksum calculations.\nClass BufferedChecksumIndexInput; // Simple implementation of ChecksumIndexInput that wraps another input and delegates calls.\nClass BufferedIndexInput; // Base implementation class for buffered IndexInput.\nClass ByteArrayDataInput; // DataInput backed by a byte array.\nClass ByteArrayDataOutput; // DataOutput backed by a byte array.\nClass ByteBufferIndexInput; // Base IndexInput implementation that uses an array of ByteBuffers to represent a file.\nClass ByteBuffersDataInput; // A DataInput implementing RandomAccessInput and reading data from a list of ByteBuffers.\nClass ByteBuffersDataOutput; // A DataOutput storing data in a list of ByteBuffers.\nClass ByteBuffersDataOutput.ByteBufferRecycler; // An implementation of a ByteBuffer allocation and recycling policy.\nClass ByteBuffersDirectory; // A ByteBuffer-based Directory implementation that can be used to store index files on the heap.\nClass ByteBuffersIndexInput; // An IndexInput implementing RandomAccessInput and backed by a ByteBuffersDataInput.\nClass ByteBuffersIndexOutput; // An IndexOutput writing to a ByteBuffersDataOutput.\nClass ChecksumIndexInput; // Extension of IndexInput, computing checksum as it goes.\nClass DataInput; // Abstract base class for performing read operations of Lucene's low-level data types.\nClass DataOutput; // Abstract base class for performing write operations of Lucene's low-level data types.\nClass Directory; // A Directory provides an abstraction layer for storing a list of files.\nClass FileSwitchDirectory; // Expert: A Directory instance that switches files between two other Directory instances.\nClass FilterDirectory; // Directory implementation that delegates calls to another directory.\nClass FilterIndexInput; // IndexInput implementation that delegates calls to another directory.\nClass FilterIndexOutput; // IndexOutput implementation that delegates calls to another directory.\nClass FlushInfo; // A FlushInfo provides information required for a FLUSH context.\nClass FSDirectory; // Base class for Directory implementations that store index files in the file system.\nClass FSLockFactory; // Base class for file system based locking implementation.\n", "des": "Binary i/o API, used for all index data."}
{"index": 3853, "repo": "lucene-core-9.7.0", "code": "package util;\n\npackage util.automaton; // Finite-state automaton for regular expressions.\npackage util.bkd; // Block KD-tree, implementing the generic spatial data structure described in this paper.\npackage util.compress; // Compression utilities.\npackage util.fst; // Finite state transducers\npackage util.graph; // Utility classes for working with token streams as graphs.\npackage util.hnsw; // Navigable Small-World graph, nominally Hierarchical but currently only has a single layer.\npackage util.hppc; // package holding hppc related classes.\npackage util.mutable; // Comparable object wrappers\npackage util.packed; // Packed integer arrays and streams.\nInterface Accountable; // An object whose RAM usage can be computed.\nInterface ArrayUtil.ByteArrayComparator; // Comparator for a fixed number of bytes.\nInterface Attribute; // Base interface for attributes.\nInterface AttributeReflector; // This interface is used to reflect contents of AttributeSource or AttributeImpl.\nInterface Bits; // Interface for Bitset-like structures.\nInterface BytesRefArray.IndexedBytesRefIterator; // An extension of BytesRefIterator that allows retrieving the index of the current element\nInterface BytesRefIterator; // A simple iterator interface for BytesRef iteration.\nInterface ClassLoaderUtils; // Helper class used by ServiceLoader to investigate parent/child relationships of ClassLoaders.\nInterface IOConsumer<T>; // An IO operation with a single input that may throw an IOException.\nInterface IOFunction<T,​R>; // A Function that may throw an IOException\nInterface IOSupplier<T>; // This is a result supplier that is allowed to throw an IOException.\nInterface IOUtils.IOConsumer<T>;\nInterface IOUtils.IOFunction<T,​R>;\nInterface NamedSPILoader.NamedSPI; // Interface to support NamedSPILoader.lookup(String) by name.\nInterface ResourceLoader; // Abstraction for loading resources (streams, files, and classes).\nInterface ResourceLoaderAware; // Interface for a component that needs to be initialized by an implementation of ResourceLoader.\nInterface RollingBuffer.Resettable; // Implement to reset an instance\nInterface Unwrappable<T>; // An object with this interface is a wrapper around another object (e.g., a filter with a delegate).\n", "des": "Some utility classes."}
{"index": 3854, "repo": "lucene-core-9.7.0", "code": "package automaton;\n\nInterface AutomatonProvider; // Automaton provider for RegExp. RegExp.toAutomaton(AutomatonProvider,int)\nClass Automata; // Construction of basic automata.\nClass Automaton; // Represents an automaton and all its states and transitions.\nClass Automaton.Builder; // Records new states and transitions and then Automaton.Builder.finish() creates the Automaton.\nClass ByteRunAutomaton; // Automaton representation for matching UTF-8 byte[].\nClass CharacterRunAutomaton; // Automaton representation for matching char[].\nClass CompiledAutomaton; // Immutable class holding compiled details for a given Automaton.\nClass DaciukMihovAutomatonBuilder;\nClass FiniteStringsIterator; // Iterates all accepted strings.\nClass LevenshteinAutomata; // Class to construct DFAs that match a word within some edit distance.\nClass LimitedFiniteStringsIterator; // FiniteStringsIterator which limits the number of iterated accepted strings.\nClass MinimizationOperations; // Operations for minimizing automata.\nClass Operations; // Automata operations.\nClass RegExp; // Regular Expression extension to Automaton.\nClass RunAutomaton; // Finite-state automaton with fast run operation.\nClass StatePair; // Pair of states.\nClass Transition; // Holds one transition from an Automaton.\nClass UTF32ToUTF8; // Converts UTF-32 automata to the equivalent UTF-8 representation.\nEnum CompiledAutomaton.AUTOMATON_TYPE; // Automata are compiled into different internal forms for the most efficient execution depending upon the language they accept.\nEnum RegExp.Kind; // The type of expression represented by a RegExp node.\nClass TooComplexToDeterminizeException; // This exception is thrown when determinizing an automaton would require too much work.\n", "des": "Finite-state automaton for regular expressions."}
{"index": 3855, "repo": "lucene-core-9.7.0", "code": "package bkd;\n\nInterface PointReader; // One pass iterator through all points previously written with a PointWriter, abstracting away whether points are read from (offline) disk or simple arrays in heap.\nInterface PointValue; // Represents a dimensional point value written in the BKD tree.\nInterface PointWriter; // Appends many points, and then at the end provides a PointReader to iterate those points.\nClass BKDConfig; // Basic parameters for indexing points on the BKD tree.\nClass BKDRadixSelector; // Offline Radix selector for BKD tree.\nClass BKDRadixSelector.PathSlice; // Sliced reference to points in an PointWriter.\nClass BKDReader; // Handles reading a block KD-tree in byte[] space previously written with BKDWriter.\nClass BKDWriter; // Recursively builds a block KD-tree to assign all incoming points in N-dim space to smaller and smaller N-dim rectangles (cells) until the number of points in a given rectangle is <= config.maxPointsInLeafNode.\nClass HeapPointReader; // Utility class to read buffered points from in-heap arrays.\nClass HeapPointWriter; // Utility class to write new points into in-heap arrays.\nClass MutablePointTreeReaderUtils; // Utility APIs for sorting and partitioning buffered points.\nClass OfflinePointReader; // Reads points from disk in a fixed-with format, previously written with OfflinePointWriter.\nClass OfflinePointWriter; // Writes points to disk in a fixed-with format.\n", "des": "Block KD-tree, implementing the generic spatial data structure described in this paper."}
{"index": 3856, "repo": "lucene-core-9.7.0", "code": "package compress;\n\nClass LowercaseAsciiCompression; // Utility class that can efficiently compress arrays that mostly contain characters in the [0x1F,0x3F) or [0x5F,0x7F) ranges, which notably include all digits, lowercase characters, '.', '-' and '_'.\nClass LZ4; // LZ4 compression and decompression routines.\nClass LZ4.FastCompressionHashTable; // Simple lossy LZ4.HashTable that only stores the last ocurrence for each hash on 2^14 bytes of memory.\nClass LZ4.HighCompressionHashTable; // A higher-precision LZ4.HashTable.\n", "des": "Compression utilities."}
{"index": 3857, "repo": "lucene-core-9.7.0", "code": "package fst;\n\nInterface FSTStore; // Abstraction for reading/writing bytes necessary for FST.\nClass ByteSequenceOutputs; // An FST Outputs implementation where each output is a sequence of bytes.\nClass BytesRefFSTEnum<T>; // Enumerates all input (BytesRef) + output pairs in an FST.\nClass BytesRefFSTEnum.InputOutput<T>; // Holds a single input (BytesRef) + output pair.\nClass CharSequenceOutputs; // An FST Outputs implementation where each output is a sequence of characters.\nClass FST<T>; // Represents an finite state machine (FST), using a compact byte[] format.\nClass FST.Arc<T>; // Represents a single arc.\nClass FST.BytesReader; // Reads bytes stored in an FST.\nClass FSTCompiler<T>; // Builds a minimal FST (maps an IntsRef term to an arbitrary output) from pre-sorted terms with outputs.\nClass FSTCompiler.Builder<T>; // Fluent-style constructor for FST FSTCompiler.\nClass IntSequenceOutputs; // An FST Outputs implementation where each output is a sequence of ints.\nClass IntsRefFSTEnum<T>; // Enumerates all input (IntsRef) + output pairs in an FST.\nClass IntsRefFSTEnum.InputOutput<T>; // Holds a single input (IntsRef) + output pair.\nClass NoOutputs; // A null FST Outputs implementation; use this if you just want to build an FSA.\nClass OffHeapFSTStore; // Provides off heap storage of finite state machine (FST), using underlying index input instead of byte store on heap\nClass OnHeapFSTStore; // Provides storage of finite state machine (FST), using byte array or byte store allocated on heap.\nClass Outputs<T>; // Represents the outputs for an FST, providing the basic algebra required for building and traversing the FST.\nClass PairOutputs<A,​B>; // An FST Outputs implementation, holding two other outputs.\nClass PairOutputs.Pair<A,​B>; // Holds a single pair of two outputs.\n", "des": "Finite state transducers"}
{"index": 3858, "repo": "lucene-core-9.7.0", "code": "package graph;\n\nClass GraphTokenStreamFiniteStrings; // Consumes a TokenStream and creates an Automaton where the transition labels are terms from the TermToBytesRefAttribute.\n", "des": "Utility classes for working with token streams as graphs."}
{"index": 3859, "repo": "lucene-core-9.7.0", "code": "package hnsw;\n\nInterface RandomAccessVectorValues<T>; // Provides random access to vectors by dense ordinal.\nClass HnswGraph; // Hierarchical Navigable Small World graph.\nClass HnswGraph.ArrayNodesIterator; // NodesIterator that accepts nodes as an integer array.\nClass HnswGraph.CollectionNodesIterator; // Nodes iterator based on set representation of nodes.\nClass HnswGraph.NodesIterator; // Iterator over the graph nodes on a certain level, Iterator also provides the size – the total number of nodes to be iterated over.\nClass HnswGraphBuilder<T>; // Builder for HNSW graph.\nClass HnswGraphSearcher<T>; // Searches an HNSW graph to find nearest neighbors to a query vector.\nClass NeighborArray; // NeighborArray encodes the neighbors of a node and their mutual scores in the HNSW graph as a pair of growable arrays.\nClass NeighborQueue; // NeighborQueue uses a LongHeap to store lists of arcs in an HNSW graph, represented as a neighbor node id with an associated score packed together as a sortable long, which is sorted primarily by score.\nClass OnHeapHnswGraph; // An HnswGraph where all nodes and connections are held in memory.\n", "des": "Navigable Small-World graph, nominally Hierarchical but currently only has a single layer."}
{"index": 3860, "repo": "lucene-core-9.7.0", "code": "package hppc;\n\nClass BitMixer; // Bit mixing utilities.\nClass IntIntHashMap; // A hash map of int to int, implemented using open addressing with linear probing for collision resolution.\nClass IntIntHashMap.AbstractIterator<E>; // Simplifies the implementation of iterators a bit.\nClass IntIntHashMap.BufferAllocationException; // BufferAllocationException forked from HPPC\n", "des": "package holding hppc related classes."}
{"index": 3861, "repo": "lucene-core-9.7.0", "code": "package mutable;\n\nClass MutableValue; // Base class for all mutable values.\nClass MutableValueBool; // MutableValue implementation of type boolean.\nClass MutableValueDate; // MutableValue implementation of type Date.\nClass MutableValueDouble; // MutableValue implementation of type double.\nClass MutableValueFloat; // MutableValue implementation of type float.\nClass MutableValueInt; // MutableValue implementation of type int.\nClass MutableValueLong; // MutableValue implementation of type long.\nClass MutableValueStr; // MutableValue implementation of type String.\n", "des": "Comparable object wrappers"}
{"index": 3862, "repo": "lucene-core-9.7.0", "code": "package packed;\n\nInterface PackedInts.Decoder; // A decoder for packed integers.\nInterface PackedInts.Encoder; // An encoder for packed integers.\nInterface PackedInts.ReaderIterator; // Run-once iterator interface, to decode previously saved PackedInts.\nClass AbstractPagedMutable<T extends AbstractPagedMutable<T>>; // Base implementation for PagedMutable and PagedGrowableWriter.\nClass BlockPackedReaderIterator; // Reader for sequences of longs written with BlockPackedWriter.\nClass BlockPackedWriter; // A writer for large sequences of longs.\nClass DirectMonotonicReader; // Retrieves an instance previously written by DirectMonotonicWriter.\nClass DirectMonotonicReader.Meta; // In-memory metadata that needs to be kept around for DirectMonotonicReader to read data from disk.\nClass DirectMonotonicWriter; // Write monotonically-increasing sequences of integers.\nClass DirectReader; // Retrieves an instance previously written by DirectWriter\nClass DirectWriter; // Class for writing packed integers to be directly read from Directory.\nClass GrowableWriter; // Implements PackedInts.Mutable, but grows the bit count of the underlying packed ints on-demand.\nClass MonotonicBlockPackedReader; // Provides random access to a stream written with MonotonicBlockPackedWriter.\nClass MonotonicBlockPackedWriter; // A writer for large monotonically increasing sequences of positive longs.\nClass PackedDataInput; // A DataInput wrapper to read unaligned, variable-length packed integers.\nClass PackedDataOutput; // A DataOutput wrapper to write unaligned, variable-length packed integers.\nClass PackedInts; // Simplistic compression for array of unsigned long values.\nClass PackedInts.FormatAndBits; // Simple class that holds a format and a number of bits per value.\nClass PackedInts.Mutable; // A packed integer array that can be modified.\nClass PackedInts.NullReader; // A PackedInts.Reader which has all its values equal to 0 (bitsPerValue = 0).\nClass PackedInts.Reader; // A read-only random access array of positive integers.\nClass PackedInts.Writer; // A write-once Writer.\nClass PackedLongValues; // Utility class to compress integers into a LongValues instance.\n", "des": "Packed integer arrays and streams."}
{"index": 3863, "repo": "lucene-spatial-extras-9.7.0", "code": "package spatial;\n\npackage spatial.bbox; // Bounding Box Spatial Strategy\npackage spatial.composite; // Composite strategies.\npackage spatial.prefix; // Prefix Tree Strategy.\npackage spatial.query; // Spatial Query options useful for client side requests\npackage spatial.serialized; // Strategies that serialize the shape (non-indexed).\npackage spatial.spatial4j; // Spatial4j stuff that ideally belongs in Spatial4j (isn't related to Lucene).\npackage spatial.util; // Advanced spatial utilities.\npackage spatial.vector; // Spatial strategy that uses two fields.\nClass ShapeValues; // Iterator over Shape objects for an index segment\nClass ShapeValuesSource; // Produces ShapeValues per-segment\nClass SpatialStrategy; // The SpatialStrategy encapsulates an approach to indexing and searching based on shapes.\n", "des": "Lucene advanced spatial search"}
{"index": 3864, "repo": "lucene-spatial-extras-9.7.0", "code": "package bbox;\n\nClass BBoxOverlapRatioValueSource; // The algorithm is implemented as envelope on envelope (rect on rect) overlays rather than complex polygon on complex polygon overlays.\nClass BBoxSimilarityValueSource; // A base class for calculating a spatial relevance rank per document from a provided ShapeValuesSource returning a Rectangle per-document.\nClass BBoxStrategy; // A SpatialStrategy for indexing and searching Rectangles by storing its coordinates in numeric fields.\n", "des": "Bounding Box Spatial Strategy"}
{"index": 3865, "repo": "lucene-spatial-extras-9.7.0", "code": "package composite;\n\nClass CompositeSpatialStrategy; // A composite SpatialStrategy based on RecursivePrefixTreeStrategy (RPT) and SerializedDVStrategy (SDV).\nClass CompositeVerifyQuery; // A Query that considers an \"indexQuery\" to have approximate results, and a follow-on ShapeValuesSource is called to verify each hit from TwoPhaseIterator.matches().\nClass IntersectsRPTVerifyQuery; // A spatial Intersects predicate that distinguishes an approximated match from an exact match based on which cells are within the query shape.\n", "des": "Composite strategies."}
{"index": 3866, "repo": "lucene-spatial-extras-9.7.0", "code": "package prefix;\n\npackage prefix.tree; // This package is about SpatialPrefixTree and any supporting classes.\nClass AbstractPrefixTreeQuery; // Base class for Lucene Queries on SpatialPrefixTree fields.\nClass AbstractVisitingPrefixTreeQuery; // Traverses a SpatialPrefixTree indexed field, using the template and visitor design patterns for subclasses to guide the traversal and collect matching documents.\nClass AbstractVisitingPrefixTreeQuery.VNode; // A visitor node/cell found via the query shape for AbstractVisitingPrefixTreeQuery.VisitorTemplate.\nClass BytesRefIteratorTokenStream; // A TokenStream used internally by PrefixTreeStrategy.\nClass CellToBytesRefIterator; // A reset'able BytesRefIterator wrapper around an Iterator of Cells.\nClass ContainsPrefixTreeQuery; // Finds docs where its indexed shape CONTAINS the query shape.\nClass HeatmapFacetCounter; // Computes spatial facets in two dimensions as a grid of numbers.\nClass HeatmapFacetCounter.Heatmap; // Response structure\nClass IntersectsPrefixTreeQuery; // A Query matching documents that have an SpatialRelation.INTERSECTS (i.e.\nClass NumberRangePrefixTreeStrategy; // A PrefixTree based on Number/Date ranges.\nClass NumberRangePrefixTreeStrategy.Facets; // Facet response information\nClass NumberRangePrefixTreeStrategy.Facets.FacetParentVal; // Holds a block of detailLevel counts aggregated to their parent level.\nClass PointPrefixTreeFieldCacheProvider; // Implementation of ShapeFieldCacheProvider designed for PrefixTreeStrategys that index points (AND ONLY POINTS!).\nClass PrefixTreeFacetCounter; // Computes facets on cells for PrefixTreeStrategy.\nClass PrefixTreeFacetCounter.FacetVisitor; // A callback/visitor of facet counts.\nClass PrefixTreeStrategy; // An abstract SpatialStrategy based on SpatialPrefixTree.\nClass RecursivePrefixTreeStrategy; // A PrefixTreeStrategy which uses AbstractVisitingPrefixTreeQuery.\nClass TermQueryPrefixTreeStrategy; // A basic implementation of PrefixTreeStrategy using a large TermInSetQuery of all the cells from SpatialPrefixTree.getTreeCellIterator(org.locationtech.spatial4j.shape.Shape, int).\nClass WithinPrefixTreeQuery; // Finds docs where its indexed shape is WITHIN the query shape.\n", "des": "Prefix Tree Strategy."}
{"index": 3867, "repo": "lucene-spatial-extras-9.7.0", "code": "package tree;\n\nInterface Cell; // Represents a grid cell.\nInterface CellCanPrune; // Grid cells that share nothing with other cells when calling Cell.getNextLevelCells(Shape) might implement this interface.\nInterface NumberRangePrefixTree.NRShape; // Base interface for Shapes this prefix tree supports.\nInterface NumberRangePrefixTree.UnitNRShape; // A unit value Shape implemented as a stack of numbers, one for each level in the prefix tree.\nInterface S2ShapeFactory; // Shape factory for Spatial contexts that support S2 geometry.\nClass CellIterator; // An Iterator of SpatialPrefixTree Cells.\nClass DateRangePrefixTree; // A PrefixTree for date ranges in which the levels of the tree occur at natural periods of time (e.g.\nClass GeohashPrefixTree; // A SpatialPrefixTree based on Geohashes.\nClass GeohashPrefixTree.Factory; // Factory for creating GeohashPrefixTree instances with useful defaults\nClass LegacyCell; // The base for the original two SPT's: Geohash and Quad.\nClass NumberRangePrefixTree; // A SpatialPrefixTree for single-dimensional numbers and number ranges of fixed precision values (not floating point).\nClass PackedQuadPrefixTree; // Uses a compact binary representation of 8 bytes to encode a spatial quad trie.\nClass PackedQuadPrefixTree.Factory; // Factory for creating PackedQuadPrefixTree instances with useful defaults.\nClass QuadPrefixTree; // A SpatialPrefixTree which uses a quad tree in which an indexed term will be generated for each cell, 'A', 'B', 'C', 'D'.\nClass QuadPrefixTree.Factory; // Factory for creating QuadPrefixTree instances with useful defaults\nClass S2PrefixTree; // Spatial prefix tree for S2 Geometry.\nClass S2PrefixTree.Factory; // Factory for creating S2PrefixTree instances with useful defaults\nClass SpatialPrefixTree; // A spatial Prefix Tree, or Trie, which decomposes shapes into prefixed strings at variable lengths corresponding to variable precision.\nClass SpatialPrefixTreeFactory; // Abstract Factory for creating SpatialPrefixTree instances with useful defaults and passed on configurations defined in a Map.\n", "des": "This package is about SpatialPrefixTree and any supporting classes."}
{"index": 3868, "repo": "lucene-spatial-extras-9.7.0", "code": "package query;\n\nClass SpatialArgs; // Principally holds the query Shape and the SpatialOperation.\nClass SpatialArgsParser; // Parses a string that usually looks like \"OPERATION(SHAPE)\" into a SpatialArgs object.\nClass SpatialOperation; // A predicate that compares a stored geometry to a supplied geometry.\nClass UnsupportedSpatialOperation; // Exception thrown when the SpatialStrategy cannot implement the requested operation.\n", "des": "Spatial Query options useful for client side requests"}
{"index": 3869, "repo": "lucene-spatial-extras-9.7.0", "code": "package serialized;\n\nClass SerializedDVStrategy; // A SpatialStrategy based on serializing a Shape stored into BinaryDocValues.\n", "des": "Strategies that serialize the shape (non-indexed)."}
{"index": 3870, "repo": "lucene-spatial-extras-9.7.0", "code": "package spatial4j;\n\nClass Geo3dBinaryCodec; // Geo3d implementation of BinaryCodec\nClass Geo3dCircleShape; // Specialization of a Geo3dShape which represents a Circle.\nClass Geo3dDistanceCalculator; // Geo3d implementation of DistanceCalculator\nClass Geo3dPointShape; // Specialization of a Geo3dShape which represents a Point.\nClass Geo3dRectangleShape; // Specialization of a Geo3dShape which represents a Rectangle.\nClass Geo3dShape<T extends GeoAreaShape>; // A Spatial4j Shape wrapping a GeoAreaShape (\"Geo3D\") -- a 3D planar geometry based Spatial4j Shape implementation.\nClass Geo3dShapeFactory; // Geo3d implementation of S2ShapeFactory\nClass Geo3dSpatialContextFactory; // Geo3d implementation of SpatialContextFactory\n", "des": "Spatial4j stuff that ideally belongs in Spatial4j (isn't related to Lucene)."}
{"index": 3871, "repo": "lucene-spatial-extras-9.7.0", "code": "package util;\n\nClass CachingDoubleValueSource; // Caches the doubleVal of another value source in a HashMap so that it is computed only once.\nClass DistanceToShapeValueSource; // The distance from a provided Point to a Point retrieved from an ShapeValuesSource.\nClass ReciprocalDoubleValuesSource; // Transforms a DoubleValuesSource using the formula v = k / (v + k)\nClass ShapeAreaValueSource; // The area of a Shape retrieved from an ShapeValuesSource\nClass ShapeFieldCache<T extends org.locationtech.spatial4j.shape.Shape>; // Bounded Cache of Shapes associated with docIds.\nClass ShapeFieldCacheDistanceValueSource; // A DoubleValuesSource that returns the spatial distance between an input point and a document's points in ShapeFieldCacheProvider.\nClass ShapeFieldCacheProvider<T extends org.locationtech.spatial4j.shape.Shape>; // Provides access to a ShapeFieldCache for a given LeafReader.\nClass ShapeValuesPredicate; // Compares a shape from a provided ShapeValuesSource with a given Shape and sees if it matches a given SpatialOperation (the predicate).\n", "des": "Advanced spatial utilities."}
{"index": 3872, "repo": "lucene-spatial-extras-9.7.0", "code": "package vector;\n\nClass DistanceValueSource; // A DoubleValuesSource that returns the distance for a PointVectorStrategy.\nClass PointVectorStrategy; // Simple SpatialStrategy which represents Points in two numeric fields.\n", "des": "Spatial strategy that uses two fields."}
{"index": 3873, "repo": "solr-ltr-9.3.0", "code": "package ltr;\n\npackage ltr.feature; // Contains Feature related classes\npackage ltr.interleaving; // Contains Various Interleaving auxiliary classes\npackage ltr.model; // Contains Model related classes\npackage ltr.norm; // A normalizer normalizes the value of a feature.\npackage ltr.search; // APIs and classes for parsing and processing search requests\npackage ltr.store; // Contains feature and model store related classes.\nClass CSVFeatureLogger; // A feature logger that logs in csv format.\nClass DocInfo;\nClass FeatureLogger; // FeatureLogger can be registered in a model and provide a strategy for logging the feature values.\nClass LTRRescorer; // Implements the rescoring logic.\nClass LTRScoringQuery; // The ranking query that is run, reranking results using the LTRScoringModel algorithm\nClass LTRScoringQuery.FeatureInfo;\nClass LTRThreadModule; // The LTRThreadModule is optionally used by the LTRQParserPlugin and LTRFeatureLoggerTransformerFactory classes to parallelize the creation of Feature.FeatureWeight objects.\nClass SolrQueryRequestContextUtils;\nEnum FeatureLogger.FeatureFormat;\n", "des": "This package contains the main logic for performing the reranking using a Learning to Rank model."}
{"index": 3874, "repo": "solr-ltr-9.3.0", "code": "package feature;\n\nClass Feature; // A recipe for computing a feature.\nClass FieldLengthFeature; // This feature returns the length of a field (in terms) for the current document.\nClass FieldValueFeature; // This feature returns the value of a field in the current document.\nClass OriginalScoreFeature; // This feature returns the original score that the document had before performing the reranking.\nClass SolrFeature; // This feature allows you to reuse any Solr query as a feature.\nClass ValueFeature; // This feature allows to return a constant given value for the current document.\nClass FeatureException;\n", "des": "Contains Feature related classes"}
{"index": 3875, "repo": "solr-ltr-9.3.0", "code": "package interleaving;\n\npackage interleaving.algorithms; // Contains Various Interleaving Algorithms\nInterface Interleaving; // Interleaving considers two ranking models: modelA and modelB. For a given query, each model returns its ranked list of documents La = (a1,a2,...) and Lb = (b1, b2, ...). An Interleaving algorithm creates a unique ranked list I = (i1, i2, ...). This list is created by interleaving elements from the two lists la and lb as described by the implementation algorithm. Each element Ij is labelled TeamA if it is selected from La and TeamB if it is selected from Lb.\nClass InterleavingResult;\nClass LTRInterleavingQuery; // A learning to rank Query with Interleaving, will incapsulate two models, and delegate to it the rescoring of the documents.\nClass LTRInterleavingRescorer; // Implements the rescoring logic.\nClass LTRInterleavingScoringQuery;\nClass OriginalRankingLTRScoringQuery;\n", "des": "Contains Various Interleaving auxiliary classes"}
{"index": 3876, "repo": "solr-ltr-9.3.0", "code": "package algorithms;\n\nClass TeamDraftInterleaving; // Interleaving was introduced the first time by Joachims in [1, 2]. Team Draft Interleaving is among the most successful and used interleaving approaches[3]. Team Draft Interleaving implements a method similar to the way in which captains select their players in team-matches. Team Draft Interleaving produces a fair distribution of ranking models’ elements in the final interleaved list. \"Team draft interleaving\" has also proved to overcome an issue of the \"Balanced interleaving\" approach, in determining the winning model[4].\n", "des": "Contains Various Interleaving Algorithms"}
{"index": 3877, "repo": "solr-ltr-9.3.0", "code": "package model;\n\nInterface NeuralNetworkModel.Activation;\nInterface NeuralNetworkModel.Layer;\nClass AdapterModel; // A scoring model whose initialization is completed via its AdapterModel.init(SolrResourceLoader) method.\nClass DefaultWrapperModel; // A scoring model that fetches the wrapped model from SolrResourceLoader.\nClass LinearModel; // A scoring model that computes scores using a dot product.\nClass LTRScoringModel; // A scoring model computes scores that can be used to rerank documents.\nClass MultipleAdditiveTreesModel; // A scoring model that computes scores based on the summation of multiple weighted trees.\nClass NeuralNetworkModel; // A scoring model that computes document scores using a neural network.\nClass WrapperModel; // A scoring model that wraps the other model.\nClass ModelException;\n", "des": "Contains Model related classes"}
{"index": 3878, "repo": "solr-ltr-9.3.0", "code": "package norm;\n\nClass IdentityNormalizer; // A Normalizer that normalizes a feature value to itself.\nClass MinMaxNormalizer; // A Normalizer to scale a feature value using a (min,max) range.\nClass Normalizer; // A normalizer normalizes the value of a feature.\nClass StandardNormalizer; // A Normalizer to scale a feature value around an average-and-standard-deviation distribution.\nClass NormalizerException;\n", "des": "A normalizer normalizes the value of a feature."}
{"index": 3879, "repo": "solr-ltr-9.3.0", "code": "package transform;\n\nClass LTRFeatureLoggerTransformerFactory; // This transformer will take care to generate and append in the response the features declared in the feature store of the current reranking model, or a specified feature store.\nClass LTRInterleavingTransformerFactory;\n", "des": "APIs and implementations of DocTransformer for modifying documents in Solr request responses"}
{"index": 3880, "repo": "solr-ltr-9.3.0", "code": "package search;\n\nClass LTRQParserPlugin; // Plug into solr a rerank model.\nClass LTRQuery; // A learning to rank Query, will incapsulate a learning to rank model, and delegate to it the rescoring of the documents.\n", "des": "APIs and classes for parsing and processing search requests"}
{"index": 3881, "repo": "solr-ltr-9.3.0", "code": "package store;\n\npackage store.rest; // Contains the ManagedResource that encapsulate the feature and the model stores.\nClass FeatureStore;\nClass ModelStore; // Contains the model and features declared.\n", "des": "Contains feature and model store related classes."}
{"index": 3882, "repo": "solr-ltr-9.3.0", "code": "package rest;\n\nClass ManagedFeatureStore; // Managed resource for a storing a feature.\nClass ManagedModelStore; // Menaged resource for storing a model\n", "des": "Contains the ManagedResource that encapsulate the feature and the model stores."}
{"index": 3883, "repo": "solr-solrj-9.3.0", "code": "package solrj;\n\npackage solrj.beans; // Annotation based mapping of client objects to Solr documents.\npackage solrj.cloud; // Common classes for SolrCloud.\npackage solrj.embedded; // SolrJ client implementations for embedded solr access.\npackage solrj.impl; // Concrete implementations of client API classes.\npackage solrj.request; // Convenience classes for dealing with various types of Solr requests.\npackage solrj.response; // Convenience classes for dealing with various types of Solr responses.\npackage solrj.routing; // Classes to handle query routing preferences\npackage solrj.util; // Utilities for Solr client applications.\nInterface FastStreamingDocsCallback;\nInterface V2RequestSupport; // A a request object is able to convert itself to V2 Request it should implement this interface\nClass ResponseParser;\nClass SolrClient; // Abstraction through which all communication with a Solr server may be routed\nClass SolrQuery; // This is an augmented SolrParams with get/set/add fields for common fields used in the Standard and Dismax request handlers\nClass SolrQuery.SortClause; // A single sort clause, encapsulating what to sort and the sort order.\nClass SolrRequest<T extends SolrResponse>;\nClass SolrResponse;\nClass StreamingResponseCallback; // A callback interface for streaming response\nEnum RoutedAliasTypes; // Types of Routed Alias supported.\nEnum SolrQuery.ORDER;\nEnum SolrRequest.METHOD;\nEnum SolrRequest.SolrClientContext;\nEnum SolrRequest.SolrRequestType;\nClass SolrServerException; // Exception to catch all types of communication / parsing issues associated with talking to SOLR\n", "des": "Primary APIs for communicating with a Solr Server from a Java client."}
{"index": 3884, "repo": "solr-solrj-9.3.0", "code": "package beans;\n\nClass DocumentObjectBinder; // A class to map objects to and from solr documents.\nClass BindingException;\nAnnotation Type Field; // This class can be used to annotate a field or a setter an any class and SolrJ would help you convert to SolrInputDocument and from SolrDocument\n", "des": "Annotation based mapping of client objects to Solr documents."}
{"index": 3885, "repo": "solr-solrj-9.3.0", "code": "package cloud;\n\nClass DelegatingClusterStateProvider; // Base class for overriding some behavior of ClusterStateProvider\nClass ShardTerms; // Hold values of terms, this class is immutable.\nClass SocketProxy; // Kindly borrowed the idea and base implementation from the ActiveMQ project; useful for blocking traffic on a specified port.\n", "des": "Common classes for SolrCloud."}
{"index": 3886, "repo": "solr-solrj-9.3.0", "code": "package embedded;\n\nClass SSLConfig; // Encapsulates settings related to SSL Configuration.\n", "des": "SolrJ client implementations for embedded solr access."}
{"index": 3887, "repo": "solr-solrj-9.3.0", "code": "package impl;\n\nInterface ClusterStateProvider; // Provides cluster state from some source\nInterface HttpClientBuilderFactory; // Factory interface for configuring SolrHttpClientBuilder.\nInterface HttpListenerFactory;\nInterface SolrHttpClientBuilder.AuthSchemeRegistryProvider;\nInterface SolrHttpClientBuilder.CookieSpecRegistryProvider;\nInterface SolrHttpClientBuilder.CredentialsProviderProvider;\nClass AuthenticationStoreHolder;\nClass BaseHttpClusterStateProvider;\nClass BaseHttpSolrClient;\nClass BinaryRequestWriter; // A RequestWriter which writes requests in the javabin format\nClass BinaryRequestWriter.BAOS;\nClass BinaryResponseParser;\nClass CloudHttp2SolrClient; // SolrJ client class to communicate with SolrCloud using Http2SolrClient.\nClass CloudHttp2SolrClient.Builder; // Constructs CloudHttp2SolrClient instances from provided configuration.\nClass CloudLegacySolrClient;\nClass CloudLegacySolrClient.Builder; // Constructs CloudLegacySolrClient instances from provided configuration.\nClass CloudSolrClient;\nClass CloudSolrClient.Builder; // Constructs CloudSolrClient instances from provided configuration.\nClass CloudSolrClient.RouteResponse<T extends LBSolrClient.Req>;\nClass ConcurrentUpdateHttp2SolrClient;\nClass ConcurrentUpdateHttp2SolrClient.Builder; // Constructs ConcurrentUpdateHttp2SolrClient instances from provided configuration.\nClass ConcurrentUpdateSolrClient;\nClass ConcurrentUpdateSolrClient.Builder; // Constructs ConcurrentUpdateSolrClient instances from provided configuration.\nClass DelegationTokenHttpSolrClient;\nClass Http2ClusterStateProvider;\nClass Http2SolrClient; // Difference between this Http2SolrClient and HttpSolrClient: Http2SolrClient sends requests in HTTP/2 Http2SolrClient can point to multiple urls Http2SolrClient does not expose its internal httpClient like HttpSolrClient.getHttpClient(), sharing connection pools should be done by Http2SolrClient.Builder.withHttpClient(Http2SolrClient)\nClass Http2SolrClient.Builder;\nClass Http2SolrClient.OutStream;\nClass HttpClientUtil;\nClass HttpClientUtil.GzipDecompressingEntity;\nClass HttpClientUtil.SocketFactoryRegistryProvider;\nClass HttpClusterStateProvider;\nClass HttpListenerFactory.RequestResponseListener;\nClass HttpSolrClient;\nClass HttpSolrClient.Builder;\nClass HttpSolrClient.HttpUriRequestResponse;\n", "des": "Concrete implementations of client API classes."}
{"index": 3888, "repo": "solr-solrj-9.3.0", "code": "package request;\n\npackage request.beans; // Annotated Data objects used in V2 Requests\npackage request.json; // Allows sending of requests using Solr's JSON query/faceting API\npackage request.schema; // Convenience classes for making Schema API requests.\nInterface ApiMapping.CommandMeta;\nInterface ApiMapping.V2EndPoint;\nInterface CollectionAdminRequest.RoutedAliasAdminRequest;\nInterface IsUpdateRequest; // Marker class so that we can determine which requests are updates.\nInterface JavaBinUpdateRequestCodec.StreamingUpdateHandler;\nInterface RequestWriter.ContentWriter;\nClass AbstractUpdateRequest;\nClass ApiMapping; // Types and utilities used by many ApiMapping classes.\nClass CollectionAdminRequest<T extends CollectionAdminResponse>; // This class is experimental and subject to change.\nClass CollectionAdminRequest.AddReplica;\nClass CollectionAdminRequest.AddReplicaProp;\nClass CollectionAdminRequest.AddRole;\nClass CollectionAdminRequest.AsyncCollectionAdminRequest; // Base class for asynchronous collection admin requests\nClass CollectionAdminRequest.AsyncCollectionSpecificAdminRequest;\nClass CollectionAdminRequest.AsyncShardSpecificAdminRequest;\nClass CollectionAdminRequest.Backup;\nClass CollectionAdminRequest.BalanceShardUnique;\nClass CollectionAdminRequest.ClusterProp;\nClass CollectionAdminRequest.ClusterStatus;\nClass CollectionAdminRequest.CollectionAdminRoleRequest;\nClass CollectionAdminRequest.CollectionProp;\nClass CollectionAdminRequest.ColStatus;\nClass CollectionAdminRequest.Create;\nClass CollectionAdminRequest.CreateAlias;\nClass CollectionAdminRequest.CreateCategoryRoutedAlias;\nClass CollectionAdminRequest.CreateShard;\nClass CollectionAdminRequest.CreateSnapshot;\nClass CollectionAdminRequest.CreateTimeRoutedAlias;\nClass CollectionAdminRequest.Delete;\nClass CollectionAdminRequest.DeleteAlias;\nClass CollectionAdminRequest.DeleteBackup; // SolrRequest class for the \"Backup Deletion\" API.\nClass CollectionAdminRequest.DeleteNode;\nClass CollectionAdminRequest.DeleteReplica;\nClass CollectionAdminRequest.DeleteReplicaProp;\nClass CollectionAdminRequest.DeleteShard;\nClass CollectionAdminRequest.DeleteSnapshot;\nClass CollectionAdminRequest.DeleteStatus;\nClass CollectionAdminRequest.DimensionalRoutedAlias;\nClass CollectionAdminRequest.ForceLeader;\nClass CollectionAdminRequest.InstallShard;\nClass CollectionAdminRequest.List;\nClass CollectionAdminRequest.ListAliases;\n", "des": "Convenience classes for dealing with various types of Solr requests."}
{"index": 3889, "repo": "solr-solrj-9.3.0", "code": "package beans;\n\nClass BackupCollectionPayload; // V2 API POJO for the /v2/collections 'backup-collection' command.\nClass ClusterPropPayload;\nClass ClusterPropPayload.Cluster;\nClass ClusterPropPayload.CollectionDefaults;\nClass ClusterPropPayload.Defaults;\nClass CreateConfigPayload;\nClass CreateCorePayload;\nClass CreateShardPayload;\nClass DeleteBasicAuthUserPayload;\nClass MigrateDocsPayload;\nClass ModifyCollectionPayload;\nClass MoveReplicaPayload;\nClass OverseerOperationPayload;\nClass PackagePayload; // Just a container class for POJOs used in Package APIs\nClass PackagePayload.AddVersion;\nClass PackagePayload.DelVersion;\nClass PluginMeta; // POJO for a plugin metadata used in container plugins\nClass PrepareCoreRecoveryPayload;\nClass RateLimiterPayload; // POJO for Rate Limiter Metadata Configuration\nClass RebalanceLeadersPayload;\nClass RejoinLeaderElectionPayload;\nClass RequestApplyCoreUpdatesPayload;\nClass RequestBufferUpdatesPayload;\nClass RequestCoreRecoveryPayload;\nClass RequestSyncShardPayload;\nClass SetRuleBasedAuthPermissionPayload;\nClass SplitShardPayload;\nClass UpdateRuleBasedAuthPermissionPayload;\nClass V2ApiConstants;\n", "des": "Annotated Data objects used in V2 Requests"}
{"index": 3890, "repo": "solr-solrj-9.3.0", "code": "package json;\n\nClass DirectJsonQueryRequest; // Represents a query using the JSON Query DSL\nClass DomainMap;\nClass HeatmapFacetMap; // Represents a \"heatmap\" facet in a JSON request query.\nClass JsonFacetMap<B extends JsonFacetMap<B>>; // A common parent for a small set of classes that allow easier composition of JSON facet objects.\nClass JsonQueryRequest; // Represents a query using the JSON Query DSL\nClass QueryFacetMap; // Represents a \"query\" facet in a JSON query request.\nClass RangeFacetMap; // Represents a \"range\" facet in a JSON request query.\nClass TermsFacetMap; // Represents a \"terms\" facet in a JSON query request.\nEnum HeatmapFacetMap.HeatmapFormat;\nEnum RangeFacetMap.OtherBuckets;\nEnum TermsFacetMap.FacetMethod;\n", "des": "Allows sending of requests using Solr's JSON query/faceting API"}
{"index": 3891, "repo": "solr-solrj-9.3.0", "code": "package schema;\n\nClass AbstractSchemaRequest<T extends SolrResponse>;\nClass AnalyzerDefinition;\nClass FieldTypeDefinition;\nClass SchemaRequest; // This class offers access to the operations exposed by the Solr Schema API.\nClass SchemaRequest.AddCopyField; // Adds a new copy field rule to the schema of the specified collection.\nClass SchemaRequest.AddDynamicField; // Adds a new dynamic field rule to the schema of the specified collection.\nClass SchemaRequest.AddField; // Adds a new field definition to the schema.\nClass SchemaRequest.AddFieldType; // Update request used to add a new field type to the schema.\nClass SchemaRequest.CopyFields; // Schema API request that retrieves the source and destination of each copy field in the schema.\nClass SchemaRequest.DeleteCopyField; // Deletes a copy field rule from the schema of the specified collection.\nClass SchemaRequest.DeleteDynamicField; // Deletes a dynamic field rule from your schema.\nClass SchemaRequest.DeleteField; // Removes a field definition from the schema.\nClass SchemaRequest.DeleteFieldType; // Removes a field type from the schema of the specified collection.\nClass SchemaRequest.DynamicField; // Schema API request that lists the dynamic field definition for the specified field contained in the schema.\nClass SchemaRequest.DynamicFields; // Schema API request that lists the dynamic field definitions contained in the schema.\nClass SchemaRequest.Field; // Schema API request that lists the field definition for the specified field contained in the schema.\nClass SchemaRequest.Fields; // Schema API request class that lists the field definitions contained in the schema.\nClass SchemaRequest.FieldType; // Schema API request that retrieves the type definitions for the specified field type contained in the schema.\nClass SchemaRequest.FieldTypes; // Schema API request that lists the types definitions contained in the schema.\nClass SchemaRequest.GlobalSimilarity; // Retrieves the class name of the global similarity defined (if any) in the schema.\nClass SchemaRequest.MultiUpdate; // The Schema API offers the possibility to perform one or more add requests in a single command.\nClass SchemaRequest.ReplaceDynamicField; // Replaces a dynamic field rule in the schema of the specified collection.\nClass SchemaRequest.ReplaceField; // Replaces a field's definition.\nClass SchemaRequest.ReplaceFieldType; // Replaces a field type in schema belonging to the schema of the specified collection.\n", "des": "Convenience classes for making Schema API requests."}
{"index": 3892, "repo": "solr-solrj-9.3.0", "code": "package response;\n\npackage response.json; // Allows parsing of JSON query/faceting API responses\npackage response.schema; // Convenience classes for dealing with Schema API responses.\nClass AnalysisResponseBase; // A base class for all analysis responses.\nClass AnalysisResponseBase.AnalysisPhase; // A phase in the analysis process.\nClass AnalysisResponseBase.TokenInfo; // Holds all information of a token as part of an analysis phase.\nClass Cluster; // This class represents a cluster of Solr Docs .\nClass ClusteringResponse; // Encapsulates responses from ClusteringComponent\nClass CollectionAdminResponse;\nClass ConfigSetAdminResponse; // No special handling at this time.\nClass ConfigSetAdminResponse.List;\nClass CoreAdminResponse;\nClass DelegationTokenResponse; // Delegation Token responses\nClass DelegationTokenResponse.Cancel;\nClass DelegationTokenResponse.Get;\nClass DelegationTokenResponse.Renew;\nClass DocumentAnalysisResponse; // A response that is returned by processing the DocumentAnalysisRequest.\nClass DocumentAnalysisResponse.DocumentAnalysis; // An analysis process breakdown of a document.\nClass DocumentAnalysisResponse.FieldAnalysis; // An analysis process breakdown for a specific field.\nClass FacetField; // A utility class to hold the facet response.\nClass FacetField.Count;\nClass FieldAnalysisResponse; // A response that is returned by processing the FieldAnalysisRequest.\nClass FieldAnalysisResponse.Analysis; // The analysis of a field.\nClass FieldStatsInfo; // Holds stats info\nClass Group; // Represents a group.\nClass GroupCommand; // This class represents the result of a group command.\nClass GroupResponse; // Overall grouping result.\nClass HealthCheckResponse;\nClass IntervalFacet; // Objects of this class will contain the result of all the intervals defined for a specific field.\nClass IntervalFacet.Count; // Holds counts for facet intervals defined in a field\nClass LukeResponse; // This is an incomplete representation of the data returned from Luke\nClass LukeResponse.FieldInfo;\nClass LukeResponse.FieldTypeInfo;\nClass PivotField;\nClass QueryResponse;\nClass RangeFacet<B,​G>; // Represents a range facet result\nClass RangeFacet.Count;\nClass RangeFacet.Currency;\nClass RangeFacet.Date;\nClass RangeFacet.Numeric;\n", "des": "Convenience classes for dealing with various types of Solr responses."}
{"index": 3893, "repo": "solr-solrj-9.3.0", "code": "package json;\n\nClass BucketBasedJsonFacet; // Represents the top-level response for a bucket-based JSON facet (i.e.\nClass BucketJsonFacet; // Represents an individual bucket result of a \"term\" or \"range\" facet.\nClass HeatmapJsonFacet; // Represents the result of a \"heatmap\" JSON facet.\nClass NestableJsonFacet; // Represents the response to a \"query\" JSON facet.\n", "des": "Allows parsing of JSON query/faceting API responses"}
{"index": 3894, "repo": "solr-solrj-9.3.0", "code": "package schema;\n\nClass FieldTypeRepresentation;\nClass SchemaRepresentation;\nClass SchemaResponse; // This class is used to wrap the response messages retrieved from Solr Schema API.\nClass SchemaResponse.CopyFieldsResponse;\nClass SchemaResponse.DynamicFieldResponse;\nClass SchemaResponse.DynamicFieldsResponse;\nClass SchemaResponse.FieldResponse;\nClass SchemaResponse.FieldsResponse;\nClass SchemaResponse.FieldTypeResponse;\nClass SchemaResponse.FieldTypesResponse;\nClass SchemaResponse.GlobalSimilarityResponse;\nClass SchemaResponse.SchemaNameResponse;\nClass SchemaResponse.SchemaVersionResponse;\nClass SchemaResponse.UniqueKeyResponse;\nClass SchemaResponse.UpdateResponse;\n", "des": "Convenience classes for dealing with Schema API responses."}
{"index": 3895, "repo": "solr-solrj-9.3.0", "code": "package routing;\n\nInterface ReplicaListTransformer;\nInterface ReplicaListTransformerFactory;\nClass AffinityReplicaListTransformer; // Allows better caching by establishing deterministic evenly-distributed replica routing preferences according to either explicitly configured hash routing parameter, or the hash of a query parameter (configurable, usually related to the main query).\nClass AffinityReplicaListTransformerFactory; // Factory for constructing an AffinityReplicaListTransformer that reorders replica routing preferences deterministically, based on request parameters.\nClass NodePreferenceRulesComparator; // This comparator makes sure that the given replicas are sorted according to the given list of preferences.\nClass NoOpReplicaListTransformer;\nClass PreferenceRule;\nClass RequestReplicaListTransformerGenerator;\nClass ShufflingReplicaListTransformer;\n", "des": "Classes to handle query routing preferences"}
{"index": 3896, "repo": "solr-solrj-9.3.0", "code": "package util;\n\nInterface AsyncListener<T>; // Listener for async requests\nInterface Cancellable;\nClass ClientUtils;\nClass Constants;\nClass SolrBasicAuthentication; // BasicAuthentication that does not care about uri and realm\nClass SolrIdentifierValidator; // Ensures that provided identifiers align with Solr's recommendations/requirements for choosing collection, core, etc identifiers.\nEnum SolrIdentifierValidator.IdentifierType;\n", "des": "Utilities for Solr client applications."}
{"index": 3897, "repo": "solr-solrj-9.3.0", "code": "package api;\n\nInterface CollectionConfig;\nInterface HashRange; // A range of hash that is stored in a shard\nInterface Resource; // A binary resource.\nInterface Resource.Consumer;\nInterface Router; // identify shards for a given routing key or document id\nInterface Shard; // A shard of a collection\nInterface ShardReplica; // replica of a shard\nInterface SimpleMap<T>; // A simplified read-only key-value structure.\nInterface SolrCluster; // Represents a Solr cluster\nInterface SolrCollection; // Represents a collection in Solr\nInterface SolrNode; // A read only view of a Solr node\nEnum ApiType; // Types of API calls\n", "des": "API interfaces for core SolrCloud classes"}
{"index": 3898, "repo": "solr-solrj-9.3.0", "code": "package common;\n\npackage common.annotation; // Annotations mapping to Jackson\npackage common.cloud; // Common Solr Cloud and ZooKeeper related classes reused on both clients & server.\npackage common.luke; // Common constants used by the LukeRequestHandler.\npackage common.params; // Parameter constants and enumerations.\npackage common.util; // Common utility classes reused on both clients & server.\nInterface Callable<T>;\nInterface ConfigNode; // A generic interface that represents a config file, mostly XML Please note that this is an immutable, read-only object.\nInterface IteratorWriter; // Interface to help do push writing to an array\nInterface IteratorWriter.ItemWriter;\nInterface MapSerializable; // This is to facilitate just in time creation of objects before writing it to the response.\nInterface MapWriter; // Use this class to push all entries of a Map into an output.\nInterface MapWriter.EntryWriter; // An interface to push one entry at a time to the output.\nInterface NavigableObject; // This class contains helper methods for navigating deeply nested Objects.\nInterface PushWriter; // This is an interface to stream data out using a push API\nInterface SolrCloseable; // A Closeable that also allows checking whether it's been closed.\nInterface SpecProvider; // A generic interface for any class that is capable of providing its specification as a json schema\nClass ConditionalKeyMapWriter;\nClass ConditionalKeyMapWriter.EntryWriterWrapper;\nClass ConditionalMapWriter;\nClass ConditionalMapWriter.EntryWriterWrapper;\nClass ConfigNode.Helpers;\nClass EmptyEntityResolver; // This class provides several singletons of entity resolvers used by SAX and StAX in the Java API.\nClass EnumFieldValue; // Represents a Enum field value, which includes integer value (indicating the sort order) and string (displayed) value.\nClass LinkedHashMapWriter<V>;\nClass MapWriterMap;\nClass SolrCloseableLatch; // This class mimicks the operation of CountDownLatch, but it also periodically checks the state of the provided SolrCloseable and terminates the wait if it's closed by throwing an InterruptedException.\nClass SolrDocument; // A concrete representation of a document within a Solr index.\nClass SolrDocumentBase<T,​K>;\nClass SolrDocumentList; // Represent a list of SolrDocuments returned from a search.\n", "des": "Common classes reused on both clients & server for dealing with documents to be indexed and result documents."}
{"index": 3899, "repo": "solr-solrj-9.3.0", "code": "package annotation;\n\nAnnotation Type JsonProperty; // Provides a 1:1 mapping from jackson's annotation.\n", "des": "Annotations mapping to Jackson"}
{"index": 3900, "repo": "solr-solrj-9.3.0", "code": "package cloud;\n\nInterface CollectionStatePredicate; // Interface to determine if a set of liveNodes and a collection's state matches some expecatations.\nInterface DocCollection.CollectionStateProps; // JSON properties related to a collection's state.\nInterface DocCollection.PrsSupplier;\nInterface NodesSysProps; // Fetch a node's system properties.\nInterface Replica.ReplicaStateProps; // JSON properties related to a replica's state.\nInterface Slice.SliceStateProps; // JSON properties related to a slice's state.\nInterface SolrClassLoader; // A generic interface to load plugin classes\nClass Aliases; // Holds collection aliases -- virtual collections that point to one or more other collections.\nClass ClusterState; // Immutable state of the cloud.\nClass ClusterState.CollectionRef;\nClass CompositeIdRouter; // CompositeIdRouter partitions ids based on a CompositeIdRouter.SEPARATOR, hashes each partition and merges the hashes together to map the id to a slice.\nClass CompositeIdRouter.KeyParser; // Helper class to calculate parts, masks etc for an id.\nClass DocCollection; // Models a Collection in zookeeper (but that Java name is obviously taken, hence \"DocCollection\")\nClass DocRouter; // Class to partition int range into n ranges.\nClass DocRouter.Range;\nClass HashBasedRouter;\nClass ImplicitDocRouter; // This document router is for custom sharding\nClass PerReplicaStates; // This represents the individual replica states in a collection This is an immutable object.\nClass PerReplicaStates.Operation;\nClass PerReplicaStates.State; // The state of a replica as stored as a node under /collections/collection-name/state.json/replica-state\nClass PlainIdRouter;\nClass Replica;\nClass ReplicaPosition;\nClass RoutingRule; // Used for routing docs with particular keys into another collection\nClass Slice; // A Slice contains immutable information about a logical shard (all replicas that share the same shard id).\nClass ZkCoreNodeProps;\nClass ZkNodeProps; // ZkNodeProps contains generic immutable properties.\nEnum PerReplicaStates.Operation.Type;\nEnum Replica.State; // The replica's state.\nEnum Replica.Type;\nEnum Slice.State; // The slice's state.\n", "des": "Common Solr Cloud and ZooKeeper related classes reused on both clients & server."}
{"index": 3901, "repo": "solr-solrj-9.3.0", "code": "package luke;\n\nEnum FieldFlag;\n", "des": "Common constants used by the LukeRequestHandler."}
{"index": 3902, "repo": "solr-solrj-9.3.0", "code": "package params;\n\nInterface AnalysisParams; // Defines the request parameters used by all analysis request handlers.\nInterface CollectionAdminParams;\nInterface CollectionParams;\nInterface CommonAdminParams;\nInterface CommonParams; // Parameters used across many handlers\nInterface ConfigSetParams; // ConfigSets API related parameters and actions.\nInterface CursorMarkParams; // Parameters and constants used when dealing with cursor based requests across large sorted result sets.\nInterface DisMaxParams; // A collection of params used in DisMaxRequestHandler, both for Plugin initialization and for Requests.\nInterface EventParams;\nInterface ExpandParams; // Expand parameters\nInterface FacetParams; // Facet parameters\nInterface GroupParams; // Group parameters\nInterface HighlightParams;\nInterface MoreLikeThisParams; // Params for MoreLikeThisHandler.\nInterface QueryElevationParams; // Parameters used with the QueryElevationComponent\nInterface ShardParams; // Parameters used for distributed search.\nInterface SimpleParams; // Parameters used by the SimpleQParser.\nInterface SpatialParams;\nInterface SpellingParams; // Parameters used for spellchecking\nInterface StatsParams; // Stats Parameters\nInterface StreamParams; // Streaming Expressions Parameters and Properties.\nInterface TermsParams;\nInterface TermVectorParams;\nInterface UpdateParams; // A collection of standard params used by Update handlers\nClass AppendedSolrParams; // SolrParams wrapper which acts similar to DefaultSolrParams except that it \"appends\" the values of multi-value params from both sub instances, so that all of the values are returned.\nClass CoreAdminParams;\nClass DefaultSolrParams;\nClass MapSolrParams; // SolrParams implementation that can be built from and is backed by a Map.\nClass ModifiableSolrParams; // This class is similar to MultiMapSolrParams except you can edit the parameters after it is initialized.\nClass MultiMapSolrParams;\nClass RequiredSolrParams; // This is a simple wrapper to SolrParams that will throw a 400 exception if you ask for a parameter that does not exist.\nClass SolrParams; // SolrParams is designed to hold parameters to Solr, often from the request coming into Solr.\nEnum CollectionParams.CollectionAction; // (Mostly) Collection API actions that can be sent by nodes to the Overseer over the /overseer/collection-queue-work ZooKeeper queue.\nEnum CollectionParams.LockLevel;\nEnum CommonParams.EchoParamStyle; // valid values for: echoParams\n", "des": "Parameter constants and enumerations."}
{"index": 3903, "repo": "solr-solrj-9.3.0", "code": "package util;\n\nInterface Cache<K,​V>;\nInterface Compressor;\nInterface ContentStream;\nInterface DataEntry; // This represents a data entry in the payload/stream.\nInterface DataEntry.EntryListener;\nInterface DataEntry.FastDecoder;\nInterface ExecutorUtil.InheritableThreadLocalProvider; // Any class which wants to carry forward the threadlocal values to the threads run by threadpools must implement this interface and the implementation should be registered here\nInterface JavaBinCodec.ObjectResolver; // Allows extension of JavaBinCodec to support serialization of arbitrary data types.\nInterface JavaBinCodec.WritableDocFields;\nInterface JsonRecordReader.Handler; // Implement this interface to stream records as and when one is found.\nInterface JsonTextWriter;\nInterface ReflectMapWriter;\nInterface RetryUtil.BooleanRetryCmd;\nInterface RetryUtil.RetryCmd;\nInterface TextWriter;\nInterface Utf8CharSequence; // A byte[] backed String\nInterface Utils.InputStreamConsumer<T>;\nInterface ValidatingJsonMap.PredicateWithErrMsg<T>;\nInterface XML.Writable;\nClass ByteArrayUtf8CharSequence; // A mutable byte[] backed Utf8CharSequence.\nClass BytesBlock;\nClass BytesOutputStream;\nClass BytesOutputStream.Bytes;\nClass ByteUtils;\nClass CollectionUtil; // Methods for creating collections with exact sizes, and other convenience methods\nClass CommandOperation;\nClass CommonTestInjection; // Allows random faults to be injected in running code during test runs across all solr packages.\nClass ContentStreamBase; // Three concrete implementations for ContentStream - one for File/URL/String\nClass ContentStreamBase.ByteArrayStream; // Construct a ContentStream from a File\nClass ContentStreamBase.FileStream; // Construct a ContentStream from a File\nClass ContentStreamBase.StringStream; // Construct a ContentStream from a String\nClass ContentStreamBase.URLStream; // Construct a ContentStream from a URL This uses a URLConnection to get the content stream\nClass DataInputInputStream; // An abstract DataInput that extends InputStream\nClass DOMUtil;\nClass ExecutorUtil;\nClass ExecutorUtil.MDCAwareThreadPoolExecutor;\nClass FastInputStream; // Single threaded buffered InputStream Internal Solr use only, subject to change.\nClass FastJavaBinDecoder;\nClass FastOutputStream; // Single threaded buffered OutputStream Internal Solr use only, subject to change.\n", "des": "Common utility classes reused on both clients & server."}
