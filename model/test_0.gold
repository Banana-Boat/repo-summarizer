7296	The context in which a specific MongoJsonSchemaCreator.JsonSchemaPropertyContext.getProperty() is encountered during schema creation.
7297	Implementation of IndexDefinition holding additional (property)path information used for creating the index.
7298	Match modes for treatment of String values.
7299	MongoDB specific transaction object, representing a MongoResourceHolder.
7300	Mongo-specific TypeMapper exposing that Documents might contain a type key.
7301	Gateway for object expression operators.
7302	The mode for merging the aggregation pipeline output.
7303	IndexFilter implementation for usage with plain Document as well as CriteriaDefinition filter expressions.
7304	An ProjectionOperation.ProjectionOperationBuilder that is used for SpEL expression based projections.
7305	Base class to create repository implementations based on Querydsl.
7306	Collection override (optional).
7307	Result restrictions.
7308	Provide a Query override (optional).
7309	Compose insert execution by calling one of the terminating methods.
7310	Input document filter query (Optional).
7311	ReactiveMongoContext utilizes and enriches the Reactor Context with information potentially required for e.g.
7312	Component that inspects MongoPersistentEntity instances contained in the given MongoMappingContext for indexing metadata and ensures the indexes to be available using reactive infrastructure.
7313	MongoDB specific transaction object, representing a MongoResourceHolder.
7314	Provide a Query override (optional).
7315	Compose remove execution by calling one of the terminating methods.
7316	Gateway interface to execute ClientSession bound operations against MongoDB via a ReactiveSessionCallback.
7317	Define a filter query for the Update (optional).
7318	Declare the Update to apply.
7319	The ReferenceLoader obtains raw documents for linked entities via a ReferenceLoader.DocumentReferenceQuery.
7320	ReferenceResolver.ReferenceCollection is a value object that contains information about the target database and collection name of an association.
7321	Utility to translate regex flags to MongoDB regex options and vice versa.
7322	Encapsulates the aggregation framework $replaceRoot-operation.
7323	Encapsulates the $sample-operation.
7324	Gateway to $function and $accumulator aggregation operations.
7325	Utility methods for JSON serialization.
7326	Gateway interface to execute ClientSession bound operations against MongoDB via a SessionCallback.
7327	SessionSynchronization is used along with MongoTemplate to define in which type of transactions to participate if any.
7328	Gateway to Set expressions which perform set operation on arrays, treating arrays as sets.
7329	A Field that the result of a computation done via an AggregationExpression.
7330	SetWindowFieldsOperation.Window implementation based on the current document.
7331	SetWindowFieldsOperation.Window implementation based on the sort fields.
7332	A SetWindowFieldsOperation.Window to be used for ComputedField.
7333	SetWindowFieldsOperation.WindowOutput defines output of $setWindowFields stage by defining the field(s) to append to the documents in the output.
7334	The actual time unit to apply to a SetWindowFieldsOperation.Window.
7335	Quick access to available units.
7336	Factory to create MongoDatabase instances from a MongoClient instance.
7337	Encapsulates the aggregation framework $skip-operation.
7338	Encapsulates the aggregation framework $sortByCount-operation.
7339	Encapsulates the aggregation framework $sort-operation.
7340	Represents a geospatial sphere value.
7341	Class that exposes the SpringData MongoDB specific information like the current Version or driver information.
7342	Gateway to String aggregation operations.
7343	The actual SubscriptionRequest sent to the MessageListenerContainer.
7344	Describes the system variables available in MongoDB aggregation framework pipeline expressions.
7345	Builder for creating TailableCursorRequest.TailableCursorRequestOptions.
7346	The actual Task to run within the MessageListenerContainer.
7347	The Task.State defining the lifecycle phase the actual Task.
7348	A Term defines one or multiple words Term.Type.WORD or phrases Term.Type.PHRASE to be used in the context of full text search.
7349	A TypedAggregation is a special Aggregation that holds information of the input aggregation type.
7350	Load strategy to be used Unwrapped.onEmpty().
7351	Enum to represent how strict the check of WriteConcernResult shall be.
7352	A convenience base class for any FileListFilter whose criteria can be evaluated against each File in isolation.
7353	Filters a listing of files by qualifying their 'name' against a regular expression (an instance of Pattern).
7354	Enumeration of options supported by various commands.
7355	Base class for filters that support ant style path expressions, which are less powerful but more readable than regular expressions.
7356	The CompositeFileListFilter extension which chains the result of the previous filter to the next one.
7357	RemoteFileTemplate callback with the underlying client instance providing access to lower level methods where no result is returned.
7358	Default implementation of the filename generator strategy.
7359	The default implementation of SessionFactoryLocator using a simple map lookup and an optional default to fall back on.
7360	Strategy for scanning directories.
7361	When writing file, this enumeration indicates what action shall be taken in case the destination file already exists.
7362	A FileLocker is a strategy that can ensure that files are only processed a single time.
7363	A payload transformer that copies a File's contents to a String.
7364	Strategy for synchronizing from a remote File system to a local directory.
7365	File locking strategy that uses java.nio.
7366	The DefaultDirectoryScanner extension which walks through the directory tree using Files.walk(Path, int, FileVisitOption...).
7367	Implementation of AbstractRegexPatternMatchingFileListFilter for java.io.File instances.
7368	A strategy for rotating advices to allow reconfiguring the message source before and/or after a poll.
7369	Simple convenience implementation of SessionCallback for cases where no result is returned.
7370	Filter that supports ant style path expressions, which are less powerful but more readable than regular expressions.
7371	Enum for AspectJ annotation types.
7372	Abstract superclass for expression pointcuts, offering location and expression properties.
7373	Abstract generic PointcutAdvisor that allows for any Advice to be configured.
7374	Listener to be registered on ProxyCreatorSupport objects Allows for receiving callbacks on activation and change of advice.
7375	Base interface holding AOP advice (action to take at a joinpoint) and a filter determining the applicability of the advice (such as a pointcut).
7376	Interface allowing extension to the Spring AOP framework to allow handling of new Advisors and Advice types.
7377	Interface for registries of Advisor adapters.
7378	Delegate interface for a configured AOP proxy, allowing for the creation of actual proxy objects.
7379	Interface implemented to provide an instance of an AspectJ aspect.
7380	Spring AOP advice wrapping an AspectJ after advice method.
7381	Spring AOP advice wrapping an AspectJ after-returning advice method.
7382	Spring AOP advice wrapping an AspectJ after-throwing advice method.
7383	Utility methods for dealing with AspectJ advisors.
7384	Spring AOP advice that wraps an AspectJ before method.
7385	AspectJPointcutAdvisor that adapts an AbstractAspectJAdvice to the PointcutAdvisor interface.
7386	Interface to be implemented by types that can supply the information needed to sort advice/advisors by AspectJ's precedence rules.
7387	AspectJ-based proxy factory, allowing for programmatic building of proxies which include AspectJ aspects (code style as well annotation style).
7388	Helper for retrieving standard Spring Advisors from a BeanFactory, for use with auto-proxying.
7389	Helper for retrieving @AspectJ beans from a BeanFactory and building Spring Advisors based on them, for use with auto-proxying.
7390	Refreshable TargetSource that fetches fresh target beans from a BeanFactory.
7391	AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose information about intercepted invocations to the logger.
7392	Default implementation of the AdvisorAdapterRegistry interface.
7393	Concrete BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in the BeanFactory, as well as the Pointcut to be configured through a bean property.
7394	Convenient Pointcut-driven Advisor implementation.
7395	Default implementation of the ScopedObject interface.
7396	Convenient implementation of the IntroductionInterceptor interface.
7397	Convenient implementation of the IntroductionInterceptor interface.
7398	Convenient abstract superclass for dynamic method matchers, which do care about arguments at runtime.
7399	Convenient superclass when we want to force subclasses to implement MethodMatcher interface, but subclasses will want to be pointcuts.
7400	Interceptor that exposes the current MethodInvocation as a thread-local object.
7401	Interface to be implemented by Spring AOP Advisors wrapping AspectJ aspects that may have a lazy initialization strategy.
7402	Superinterface for advisors that perform one or more AOP introductions.
7403	This interface represents a generic runtime joinpoint (in the AOP terminology).
7404	TargetSource that lazily accesses a singleton bean from a BeanFactory.
7405	Subinterface of AspectInstanceFactory that returns AspectMetadata associated with AspectJ-annotated classes.
7406	Core Spring pointcut abstraction.
7407	Pointcut constants for matching getters and setters, and static methods useful for manipulating and evaluating pointcuts.
7408	Config interface for a pooling target source.
7409	TargetSource implementation that creates a new instance of the target bean for each request, destroying each instance on release (after each request).
7410	Interface to be implemented by dynamic target objects, which support reloading and optionally polling for updates.
7411	Convenient class for regexp method pointcuts that hold an Advice, making them an Advisor.
7412	An AOP introduction interface for scoped objects.
7413	Simple AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose trace information about intercepted method invocations, with method entry and method exit info.
7414	Convenient abstract superclass for static method matchers, which don't care about arguments at runtime.
7415	Convenient superclass when we want to force subclasses to implement the MethodMatcher interface but subclasses will want to be pointcuts.
7416	Convenient base class for Advisors that are also static pointcuts.
7417	A TargetSource is used to obtain the current "target" of an AOP invocation, which will be invoked via reflection if no around advice chooses to end the interceptor chain itself.
7418	Statistics for a ThreadLocal TargetSource.
7419	Interceptor to wrap an after-throwing advice.
7420	Spring AOP ClassFilter implementation using AspectJ type matching.
7421	A MailInboundChannelAdapterSpec for IMAP.
7422	Collection of utility methods to work with Mail transports.
7423	A MailReceiver implementation that polls a mail server using the POP3 protocol.
7424	Handles deserialization of settings from the default textual format.
7425	Collects the output of the settings builder.
7426	Collects parameters that control the decryption of settings.
7427	Collects the output of the settings decrypter.
7428	Signals a failure to parse the settings due to invalid syntax (e.g.
7429	The different severity levels for a problem, in decreasing order.
7430	Handles deserialization of settings from some kind of textual format like XML.
7431	Validate a model settings
7432	Handles serialization of settings into some kind of textual format like XML.
7433	Factory class that allows to create Authentication instances for OAuth 2.0 authentication methods.
7434	Indicates the usage status of the connection and whether it has been released.
7435	A generic schema representation for AvroBasedGenericSchema .
7436	A schema implementation to deal with json data.
7437	The default implementation of ServiceNameResolver.
7438	A service name resolver to resolve real socket address.
7439	AopTestUtils is a collection of AOP-related utility methods for use in unit and integration testing scenarios.
7440	ApplicationEvents encapsulates all application events that were fired during the execution of a single test method.
7441	Holder class to expose the application events published during the execution of a test in the form of a thread-bound ApplicationEvents object.
7442	TestExecutionListener which provides support for ApplicationEvents.
7443	BootstrapContext encapsulates the context in which the Spring TestContext Framework is bootstrapped.
7444	Strategy interface for loading an ApplicationContext for an integration test managed by the Spring TestContext Framework.
7445	Default implementation of the BootstrapContext interface.
7446	DelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlContextLoader (or a GenericGroovyXmlContextLoader if Groovy is present in the classpath) and an AnnotationConfigContextLoader.
7447	Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test class.
7448	Defines modes which determine how the context cache is cleared when @DirtiesContext is used in a test whose context is configured as part of a hierarchy via @ContextHierarchy.
7449	Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test method.
7450	ExceptionCollector is a test utility for executing code blocks, collecting exceptions, and generating a single AssertionError containing any exceptions encountered as suppressed exceptions.
7451	Factory for "output" flash attribute assertions.
7452	ExchangeResult variant with the response body decoded as Flux<T> but not yet consumed.
7453	Simple ConfigurableEnvironment implementation exposing MockEnvironment.setProperty(String, String) and MockEnvironment.withProperty(String, String) methods for testing purposes.
7454	Mock implementation of HttpOutputMessage.
7455	Main entry point for server-side Spring MVC test support.
7456	The main class to import in order to access all available MockMvcBuilders.
7457	Simple PropertySource implementation for use in testing.
7458	Contract that frameworks or applications can use to pre-package a set of customizations to a WebTestClient.MockServerSpec and expose that as a shortcut.
7459	Builder for a MockServerWebExchange.
7460	An extension of ResponseActions that also implements RequestMatcher and ResponseCreator
7461	A contract for setting up request expectations and defining a response.
7462	Allows applying actions, such as expectations, on the result of an executed request.
7463	A ResultMatcher matches the result of an executed request against some expectation.
7464	Enumeration of phases that dictate when SQL scripts are executed.
7465	Enumeration of modes that dictate how errors are handled while executing SQL statements.
7466	Enumeration of modes that dictate whether SQL scripts should be executed within a transaction and what the transaction propagation behavior should be.
7467	Enumeration of modes that dictate whether method-level @Sql declarations are merged with class-level @Sql declarations.
7468	Implementation of ProfileValueSource which uses system properties as the underlying source.
7469	Collection of utility methods for working with Spring's core testing annotations.
7470	Defines autowiring modes for parameters in a test constructor.
7471	TestContextAotGenerator generates AOT artifacts for integration tests that depend on support from the Spring TestContext Framework.
7472	Base class for events published by the EventPublishingTestExecutionListener.
7473	Enumeration of modes that dictate whether explicitly declared listeners are merged with the default listeners when @TestExecutionListeners is declared on a class that does not inherit listeners from a superclass or enclosing class.
7474	Factory for assertions on the selected view.
7475	WebDelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if Groovy is present on the classpath) and an AnnotationConfigWebContextLoader.
7476	Spec for expectations on the response body decoded to a List.
7477	A helper class for assertions on XML content.
7478	Populates the GrantedAuthoritys for a user by reading a list of attributes that were returned as part of the CAS response.
7479	The PayloadExchange type
7480	Base abstract class of the SessionManager interface, enabling configuration of an application-wide globalSessionTimeout.
7481	Base support class for implementations that reads and processes JSR-175 annotations.
7482	AuthenticationInfo represents a Subject's (aka user's) stored account information relevant to the authentication/log-in process only.
7483	An AuthenticationListener listens for notifications while Subjects authenticate with the system.
7484	An AuthenticationToken is a consolidation of an account's principals and supporting credentials submitted by a user during an authentication attempt.
7485	AuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc.) used during authorization (access control) checks only.
7486	An AnnotationMethodInterceptor that asserts the calling code is authorized to execute the method before allowing the invocation to continue by inspecting code annotations to perform an access control check.
7487	Basic abstract class to support intercepting methods that perform authorization (access control) checks.
7488	Default implementation of the SessionContext interface which provides getters and setters that wrap interaction with the underlying backing context map.
7489	A HashingPasswordService is a PasswordService that performs password encryption and comparisons based on cryptographic Hashes.
7490	Thrown when a particular client (that is, host address) has not been enabled to access the system or if the client has been enabled access but is not permitted to perform a particular operation or access a particular resource.
7491	A Realm implementation that creates SimpleAccount instances based on Ini configuration.
7492	Password hash salt configuration.
7493	A set of static helper methods for managing JDBC API objects.
7494	Interface that encapsulates the creation of LdapContext objects that are used by DefaultLdapRealms to perform authentication attempts and query for authorization data.
7495	Utility class providing static methods to make working with LDAP easier.
7496	An enum for specifying a logical operation that can be used for interpreting authorization annotations
7497	3rd-party API independent representation of a method invocation.
7498	A PrincipalCollection that allows modification.
7499	A PasswordService supports common use cases when using passwords as a credentials mechanism.
7500	Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed continued access.
7501	A Realm is a security component that can access application-specific security entities such as users, roles, and permissions to determine authentication and authorization operations.
7502	PatternMatcher implementation that uses standard java.util.regex objects.
7503	Accesses the currently accessible Subject for the calling code depending on runtime environment.
7504	A SessionContext is a 'bucket' of data presented to a SessionFactory which interprets this data to construct Session instances.
7505	Interface to be implemented by components that wish to be notified of events that occur during a Session's life cycle.
7506	Simple adapter implementation of the SessionListener interface, effectively providing no-op implementations of all methods.
7507	A SessionManager manages the creation, maintenance, and clean-up of all application Sessions.
7508	Interface that should be implemented by classes that can control validating sessions on a regular basis.
7509	A SubjectDAO is responsible for persisting a Subject instance's internal state such that the Subject instance can be recreated at a later time if necessary.
7510	A SubjectRunnable ensures that a target/delegate Runnable will execute such that any call to SecurityUtils.getSubject() during the Runnable's execution will return the associated Subject instance.
7511	A ThreadState instance manages any state that might need to be bound and/or restored during a thread's execution.
7512	PermissionResolver implementation that returns a new WildcardPermission based on the input string.
7513	Define the mode in which Artemis can operate.
7514	Event fired when auto-configuration classes are imported.
7515	Supported cache types (defined in order of precedence).
7516	Details required to establish a connection to a Cassandra service.
7517	A Cassandra node.
7518	Name of the algorithm used to compress protocol frames.
7519	Configure ConcurrentKafkaListenerContainerFactory with sensible defaults.
7520	Range options.
7521	Available application types.
7522	Render styles.
7523	Details required to establish a connection to a Couchbase service.
7524	Formatters for dates, times, and date-times.
7525	Details required to establish a connection to an Elasticsearch service.
7526	Connection protocol.
7527	An entity scanner that searches the classpath from an @EntityScan specified packages.
7528	Include error attributes options.
7529	Include Stacktrace attribute options.
7530	Details required for Flyway to establish a connection to an SQL service using JDBC.
7531	Details required to establish a connection to an SQL service using JDBC.
7532	Translate the acknowledge modes defined on the Session.
7533	Define the supported Quartz JobStore.
7534	Details required for Liquibase to establish a connection to an SQL service using JDBC.
7535	Details required to establish a connection to a MongoDB service.
7536	GridFS configuration.
7537	Mustache TemplateLoader implementation that uses a prefix, suffix and the Spring Resource abstraction to load a template from a file, classpath, URL etc.
7538	Details required to establish a connection to a Neo4j service.
7539	Factory that can be used to create a RequestMatcher for commonly used paths.
7540	Adapts MongoProperties to MongoConnectionDetails.
7541	A RabbitMQ address.
7542	Define the available target for a RetryTemplate.
7543	Details required to establish a connection to a Redis service.
7544	A node in a sentinel or cluster configuration.
7545	Redis sentinel configuration.
7546	Redis standalone configuration.
7547	Type of Redis client to use.
7548	Strategies for configuring and validating Redis.
7549	Type of Redis session repository to auto-configure.
7550	Type of Spring Data repositories to enable.
7551	Callback interface that can be implemented by beans wishing to further customize the RestClient through a RestClientBuilder whilst retaining default auto-configuration.
7552	Some named search strategies for beans in the bean factory hierarchy.
7553	Strategies for supporting forward headers.
7554	Log format for Jetty access logs.
7555	A MongoClientSettingsBuilderCustomizer that applies standard settings to a MongoClientSettings.
7556	Common locations for static resources.
7557	Interface that can be used to apply SSL configuration to a WebClient.Builder.
7558	Matching strategy options.
7559	The spec for a MarshallingWebServiceInboundGateway.
7560	A single file that has changed.
7561	Change types.
7562	A collections of files from a specific source directory that have changed.
7563	A single file that may be served from a ClassLoader.
7564	The kinds of class load files.
7565	An individual source directory that is being managed by the collection.
7566	ApplicationEvent containing details of a classpath change.
7567	Various outcomes for the handler.
7568	Server used to restart the current application with updated ClassLoaderFiles.
7569	Repository used by FileSystemWatcher to save file/directory snapshots across restarts.
7570	The client side component of a socket tunnel.
7571	Listener that can be used to receive TunnelClient events.
7572	Convenient base class for AsyncHandlerMethodReturnValueHandler implementations that support only asynchronous (Future-like) return values and merely serve as adapters of such types to Spring's ListenableFuture.
7573	Base class for MessageCondition's that pre-declares abstract methods AbstractMessageCondition.getContent() and AbstractMessageCondition.getToStringInfix() in order to provide implementations of AbstractMessageCondition.equals(Object), AbstractMessageCondition.hashCode(), and AbstractMessageCondition.toString().
7574	Convenient base class for ReactorNettyCodec implementations that need to work with NIO ByteBuffers.
7575	Abstract base class for SubscribableChannel implementations.
7576	A MessageConverter that supports MIME type "application/octet-stream" with the payload converted to and from a byte[].
7577	DestinationResolver implementation that proxies a target DestinationResolver, caching its CachingDestinationResolverProxy.resolveDestination(java.lang.String) results.
7578	Support for CompletableFuture (and as of 4.3.7 also CompletionStage) as a return value type.
7579	A StompSession that implements TcpConnectionHandler in order to send and receive messages.
7580	No-op resolver for method arguments of type Continuation.
7581	Extends MessageReceivingOperations and adds operations for receiving messages from a destination specified as a (resolvable) String name.
7582	An implementation of Message with a generic payload.
7583	Implementation of MessageConverter that can read and write JSON using Google Gson.
7584	Strategy interface for resolving method parameters into argument values in the context of a given Message.
7585	Strategy interface for resolving method parameters into argument values in the context of a given Message.
7586	Strategy interface to handle the value returned from the invocation of a method handling a Message.
7587	Handle the return value from the invocation of an annotated Message handling method.
7588	Generic strategy interface for mapping MessageHeaders to and from other types of objects.
7589	Argument resolver for headers.
7590	Argument resolver for headers.
7591	Implementation of MessageConverter that can read and write JSON using the JSON Binding API.
7592	A generic message representation with headers and body.
7593	Defines methods for sending messages.
7594	Contract for mapping conditions to messages.
7595	A converter to turn the payload of a Message from serialized form to a typed Object and vice versa.
7596	Extension of the Runnable interface with methods to obtain the MessageHandler and Message to be handled.
7597	Represents a Spring-managed bean with cross-cutting functionality to be applied to one or more Spring beans with annotation-based message handling methods.
7598	A MessageChannel from which messages may be actively received through polling.
7599	Resolver for arguments of type Principal, including Optional<Principal>.
7600	Reactor Netty based implementation of TcpConnection.
7601	Simple holder for a decoding Function and an encoding BiConsumer to use with Reactor Netty.
7602	Reactor Netty based implementation of TcpConnection.
7603	Resolves arguments of type RSocket that can be used for making requests to the remote peer.
7604	A simple converter that simply unwraps the message payload as long as it matches the expected target class.
7605	A generic representation of different kinds of messages found in simple messaging protocols like STOMP.
7606	Represents a session of connected user.
7607	Represents a subscription within a user session.
7608	Represents a connected user.
7609	A registry of currently connected users.
7610	Contract for access to session counters.
7611	Represents a STOMP command.
7612	An encoder for STOMP frames.
7613	Contract to handle a STOMP frame.
7614	A handle to use to unsubscribe or to track a receipt.
7615	A TcpConnectionHandler for use with STOMP connections, exposing further information about the connection.
7616	TcpMessageCodec for STOMP, delegating to StompDecoder and StompEncoder.
7617	A MessageConverter that supports MIME type "text/plain" with the payload converted to and from a String.
7618	A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel.
7619	An extension of HandlerMethodArgumentResolver for implementations that are synchronous in nature and do not block to resolve values.
7620	A contract for managing lifecycle events for a TCP connection including the handling of incoming messages.
7621	Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g.
7622	Contains the result from parsing a "user" destination from a source message and translating it to target destinations (one per active user session).
7623	Represents a single entry in the archive.
7624	Launcher for JAR based archives.
7625	Interface registered in spring.factories to provides extended 'jarmode' support.
7626	Interface that provides read-only random access to some underlying data.
7627	Launcher for WAR based archives.
7628	Abstract implementation of a CallbackHandler.
7629	Generic utility methods for dealing with KeyStore objects.
7630	Simple callback handler that validates passwords against a in-memory Properties object.
7631	Exception indicating that a WS-Security executions should result in a SOAP Fault.
7632	Abstract base class for LocaleContextResolver implementations.
7633	Abstract base class for LocaleResolver implementations.
7634	A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().
7635	Abstract base class for VersionStrategy implementations.
7636	File name-based VersionPathStrategy, e.g.
7637	A prefix-based VersionPathStrategy, e.g.
7638	Convenient superclass for Excel document views in the Office 2007 XLSX format, using POI's streaming variant.
7639	Asynchronous subtype of ServerResponse that exposes the future response.
7640	A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e.
7641	This <hasBindErrors> tag provides an Errors instance in case of bind errors.
7642	A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache.
7643	The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'.
7644	The <checkbox> tag renders an HTML 'input' tag with type 'checkbox'.
7645	Assists with the registration of global, URL pattern based CorsConfiguration mappings.
7646	Configures a request handler for serving static resources by forwarding the request to the Servlet container's "default" Servlet.
7647	Entity-specific subtype of ServerResponse that exposes entity data.
7648	A strategy interface for retrieving and saving FlashMap instances.
7649	Convenience subclass of UrlBasedViewResolver that supports FreeMarkerView (i.e.
7650	Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e.
7651	MVC framework SPI, allowing parameterization of the core MVC workflow.
7652	Interface to be implemented by objects that define a mapping between requests and handler objects.
7653	The <hidden> tag renders an HTML 'input' tag with type 'hidden' using the bound value.
7654	The <htmlEscape> tag sets default HTML escape value for the current page.
7655	Adapter to use the plain HttpRequestHandler interface with the generic DispatcherServlet.
7656	Helps with configuring a list of mapped interceptors.
7657	Specialization of InternalResourceView for JSTL pages, i.e.
7658	Interface for web-based locale resolution strategies that allows for both locale resolution via the request and locale modification via request and response.
7659	Spring MVC View that renders XML content by serializing the model for the current request using Jackson 2's XmlMapper.
7660	Additional interface that a HandlerMapping can implement to expose a request matching API aligned with its internal request matching configuration and implementation.
7661	Method invocation information.
7662	The <nestedPath> tag supports and assists with nested beans or bean properties in the model.
7663	By default, when the DispatcherServlet can't find a handler for a request it sends a 404 response.
7664	Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag.
7665	The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy.
7666	The <radiobutton> tag renders an HTML 'input' tag with type 'radio'.
7667	Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.
7668	Rendering-specific subtype of ServerResponse that exposes model and template data.
7669	Contract for request mapping conditions.
7670	Superclass for all tags that require a RequestContext.
7671	Assists with the registration of resource resolvers and transformers.
7672	A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary.
7673	Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.
7674	Store and retrieve FlashMap instances to and from the HTTP session.
7675	Adapter to use the plain Controller workflow interface with the generic DispatcherServlet.
7676	Adapter to use the Servlet interface with the generic DispatcherServlet.
7677	The <transform> tag provides transformation for reference data values from controllers and other objects inside a spring:bind tag (or a data-bound form element tag from Spring's form tag library).
7678	A strategy for extracting and embedding a resource version in its URL path.
7679	MVC View for a web interaction.
7680	Assist with the registration of a single view controller.
7681	Enumerates possible strategies to use when multiple URLs are provided and an error occurs.
7682	Abstract base class for filename suffix based VersionStrategy implementations, e.g.
7683	Abstract base class for VersionStrategy implementations that insert a prefix into the URL path, e.g.
7684	A base class for RequestCondition types providing implementations of AbstractRequestCondition.equals(Object), AbstractRequestCondition.hashCode(), and AbstractRequestCondition.toString().
7685	Abstract base class for URL-based views.
7686	Defines the context used during the extraction.
7687	Defines the context used during the insertion.
7688	Extension of BodyInserter that allows for adding form data or multipart form data.
7689	A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, or otherwise delegates to the resolver chain and caches the result.
7690	Documented KeyValues for the HTTP client observations.
7691	No-op resolver for method arguments of type Continuation.
7692	Assists with the registration of global, URL pattern based CorsConfiguration mappings.
7693	Resolve Errors or BindingResult method arguments.
7694	Represents a function that exchanges a request for a (delayed) ClientResponse.
7695	Static factory methods to create an ExchangeFunction.
7696	A mutable builder for an ExchangeStrategies.
7697	Resolver that always resolves to a fixed list of media types.
7698	A ViewResolver for resolving FreeMarkerView instances, i.e.
7699	Contract to abstract the details of invoking a handler of a given type.
7700	HandlerAdapter implementation that supports HandlerFunctions.
7701	Strategy to resolve the argument value for a method parameter in the context of the current HTTP request.
7702	Process the HandlerResult, usually returned by a HandlerAdapter.
7703	Resolves method arguments of type HttpEntity or RequestEntity by reading the body of the request through a compatible HttpMessageReader.
7704	Resolver for a controller method argument of type Model that can also be resolved as a Map.
7705	Resolver that checks a query parameter and uses it to look up a matching MediaType.
7706	Resolves method argument value of type Principal.
7707	Extends Rendering.Builder with extra options for redirect scenarios.
7708	Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.
7709	Rendering-specific subtype of ServerResponse that exposes model and template data.
7710	Resolves method arguments annotated with @RequestBody by reading the body of the request through a compatible HttpMessageReader.
7711	Assists with the registration of resource resolvers and transformers.
7712	A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary.
7713	HandlerResultHandler that handles return values from methods annotated with @ResponseBody writing to the body of the request or response with an HttpMessageWriter.
7714	Handles return values of type HttpEntity, ResponseEntity, HttpHeaders, ErrorResponse, and ProblemDetail.
7715	Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.
7716	Defines the context used during the ServerResponse.writeTo(ServerWebExchange, Context).
7717	Resolver for a SessionStatus argument obtaining it from the BindingContext.
7718	HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler.
7719	Spring WebSocketSession adapter for Tomcat's Session.
7720	A strategy to determine the version of a static resource and to apply and/or extract it from the URL path.
7721	Contract to render HandlerResult to the HTTP response.
7722	Exceptions that contain actual HTTP request data.
7723	Resolves method argument value of type WebSession.
7724	Contract for reactive-style handling of a WebSocket session.
7725	Handler for a WebSocket session.
7726	WebSocket message types.
7727	MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type.
7728	Strategy interface to control back off between attempts in a single retry operation.
7729	A special purpose Classifier with easy configuration options for mapping from one arbitrary type of object to another via a pattern matcher.
7730	A policy, that is based on BinaryExceptionClassifier.
7731	Wrapper for an object to adapt it to the Classifier interface.
7732	Subclass of SimpleRetryPolicy that delegates to super.canRetry() and, if true, further evaluates an expression against the last thrown exception.
7733	Strategy interface for detecting a single Method on a Class.
7734	A RetryPolicy that allows the first attempt but never permits a retry.
7735	A Classifier that maps from String patterns with wildcards to a set of values of a given type.
7736	A RetryPolicy is responsible for allocating and managing resources needed by RetryOperations.
7737	A RetrySimulator is a tool for exercising retry + backoff operations.
7738	Stateful retry is characterised by having to recognise the items that are being processed, so this interface is used primarily to provide a cache key in between failed attempts.
7739	Global variable support for retry clients.
7740	Simple base class for BackOffPolicy implementations that maintain no state across invocations.
7741	Custom JavaExec task for running a Spring Boot application.
7742	Spec that controls the dependencies that should be part of a particular layer.
7743	Spec that controls the content that should be part of a particular layer.
7744	Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests.
7745	Entry point to Spring Boot's Gradle DSL.
7746	An enumeration of supported compression options for an entry in a ZIP archive.
7747	Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions.
7748	JobFactory implementation that supports Runnable objects as well as standard Quartz Job instances.
7749	Advisor driven by a JCacheOperationSource, used to include a cache advice bean for methods that are cacheable.
7750	Simple Quartz Job adapter that delegates to a given Runnable instance.
7751	Model the base of JSR-107 cache operation through an interface contract.
7752	This interface defines a strategy for sending simple mails.
7753	Exception thrown when a mail sending error is encountered.
7754	Quartz Job implementation that invokes a specified method.
7755	Simple implementation of the Quartz Job interface, applying the passed-in JobDataMap and also the SchedulerContext as bean property values.
7756	An Message authorization context.
7757	Base implementation of AccessDeniedHandler.
7758	RequestMatcher that will return true if all of the passed in RequestMatcher instances match.
7759	Decides whether a web channel provides sufficient security.
7760	Decides whether a web channel meets a specific security condition.
7761	Represents the directive values expected by the ClearSiteDataHeaderWriter.
7762	Represents the directive values expected by the ClearSiteDataServerHttpHeadersWriter
7763	Inserts Cross-Origin-Embedder-Policy header.
7764	Inserts the Cross-Origin-Opener-Policy header
7765	Inserts Cross-Origin-Resource-Policy header
7766	Provides the information about an expected CSRF token.
7767	An implementation of the CsrfTokenRequestHandler interface that is capable of making the CsrfToken available as a request attribute and resolving the token value as either a header or parameter value of the request.
7768	A callback interface that is used to make the CsrfToken created by the CsrfTokenRepository available as a request attribute.
7769	A CSRF token that is used to protect against CSRF attacks.
7770	A CSRF token that is used to protect against CSRF attacks.
7771	The default ServerRedirectStrategy to use.
7772	An interface that allows delayed access to a CsrfToken that may be generated.
7773	A ServerAuthenticationEntryPoint which delegates to multiple ServerAuthenticationEntryPoint based on a ServerWebExchangeMatcher
7774	A RequestMatcher implementation which uses a SpEL expression
7775	Adapter that wraps an Enumeration around a Java 2 collection Iterator.
7776	Utility class to generate HTTP dates.
7777	Provides support for Feature Policy.
7778	Writes the Feature-Policy response header with configured policy directives.
7779	A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request.
7780	Holds objects associated with a HTTP filter.
7781	Represents a Header to be added to the HttpServletResponse
7782	Prompts a user for HTTP Basic authentication.
7783	Interface which can be used to reject potentially dangerous requests and/or wrap them to control their behaviour.
7784	This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism.
7785	A SecurityWebFilterChain that leverages a ServerWebExchangeMatcher to determine which WebFilter to execute.
7786	A builder for MvcRequestMatcher
7787	RequestMatcher that will return true if any of the passed in RequestMatcher instances match.
7788	Provides support for Permisisons Policy.
7789	Writes the Permissions-Policy response header with configured policy directives.
7790	PortMapper implementations provide callers with information about which HTTP ports are associated with which HTTPS ports on the system, and vice versa.
7791	Authentication implementation for pre-authenticated authentication.
7792	Performs a redirect to a specified location.
7793	Performs a redirect on log out success.
7794	Provides support for Referrer Policy.
7795	Writes the Referrer-Policy response header.
7796	An HttpServletRequest authorization context.
7797	Simple strategy to match an HttpServletRequest.
7798	A builder for RequestMatcherDelegatingAuthenticationManagerResolver.
7799	Stores off the values of a cookie in a serializable holder
7800	A ServerLogoutHandler which removes the SecurityContext using the provided ServerSecurityContextRepository
7801	Defines a filter chain which is capable of being matched against a ServerWebExchange in order to decide whether it applies to that request.
7802	Adapts a ServerAuthenticationEntryPoint into a ServerAuthenticationFailureHandler
7803	Strategy used for persisting a SecurityContext between requests.
7804	Indicates a session ID was changed for the purposes of session fixation protection.
7805	Uses HttpServletRequest.invalidate() to protect against session fixation attacks.
7806	Obtains the principal from a certificate using a regular expression match against the Subject (as returned by a call to X509Certificate.getSubjectDN()).
7807	A holder of selected HTTP details related to a web authentication request.
7808	A composite of the ServerWebExchange and the WebFilterChain.
7809	This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication.
7810	The possible values for the X-Frame-Options header.
7811	ServerHttpHeadersWriter implementation for the X-Frame-Options headers.
7812	The X-Frame-Options values.
7813	Renders the X-XSS-Protection header.
7814	The value of the x-xss-protection header.
7815	Add the x-xss-protection header.
7816	The value of the x-xss-protection header.
7817	A BindingTargetFactory implementation that restricts the type of binding target to a specified class and its supertypes.
7818	Binding states.
7819	Defines methods to create/configure the binding targets defined by org.springframework.cloud.stream.annotation.EnableBinding.
7820	A Bindable that stores the dynamic destination names and handles their unbinding.
7821	Internal utilities for handling generics.
7822	Interface to be implemented by the classes that configure the Bindable message channels.
7823	An implementation of BindingTargetFactory for creating DefaultPollableMessageSources.
7824	Utility class to determine if a binding is configured for partitioning (based on the binder properties provided in the constructor) and what partition a message should be delivered to.
7825	A mechanism to poll a consumer.
7826	Represents a ProducerDestination that provides the information about the destination that is physically provisioned through ProvisioningProvider.provisionProducerDestination(String, ProducerProperties).
7827	Provisioning SPI that allows the users to provision destinations such as queues and topics.
7828	An implementation of BindingTargetFactory for creating SubscribableChannels.
7829	Gossip pool (serf) statuses.
7830	Base class for implementations of EntityInformation.
7831	Access options when using PersistentPropertyPathAccessor to get and set properties.
7832	How to handle null values during a PersistentPropertyPath traversal.
7833	How to propagate setting values that cross collection and map properties.
7834	How to handle intermediate null values when setting
7835	Helper value to abstract an accessor.
7836	Default implementation for AuditingConfiguration.
7837	ReflectionUtils.MethodCallback to find annotations of a given type.
7838	RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation.
7839	Configuration information for auditing.
7840	Enumeration to define in which way repositories are bootstrapped.
7841	Represents a geospatial box value
7842	Configurable FieldNamingStrategy that splits up camel-case property names and reconcatenates them using a configured delimiter.
7843	Interface to be implemented by classes that can synchronize between data stores and ChangeSets.
7844	Represents a geospatial circle value
7845	A factory that can generate byte code to speed-up dynamic property access.
7846	A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream.
7847	TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.
7848	Default DateTimeProvider simply creating new LocalDateTime instances for each method call.
7849	Value object to create custom Metrics on the fly.
7850	Default implementation of RepositoryMetadata.
7851	Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation.
7852	Converter to create Distance instances from String representations.
7853	Combined EntityReader and EntityWriter and add the ability to access a MappingContext and ConversionService.
7854	Extension of EntityMetadata to add functionality to query information of entity instances.
7855	SPI to allow adding a set of properties and function definitions accessible via the root of an EvaluationContext provided by an ExtensionAwareQueryMethodEvaluationContextProvider.
7856	Provides a way to access a centrally defined potentially shared StandardEvaluationContext.
7857	Support for query by example (QBE).
7858	The match modes to expose so that clients can find about how to concatenate the predicates.
7859	Null handling for creating criterion out of an Example.
7860	Match modes for treatment of String values.
7861	An EvaluationContextProvider that assembles an EvaluationContext from a list of EvaluationContextExtension instances.
7862	Value object to encapsulate the factory method to be used when mapping persistent data to objects.
7863	Value object to capture GeoResults as well as the average distance they have.
7864	Interface for a component allowing the access of identifier values.
7865	A PersistentPropertyAccessor that will use an entity's PersistenceCreator to create a new instance of it to apply a new value for a given PersistentProperty.
7866	Delegating PersistentPropertyAccessorFactory decorating the PersistentPropertyAccessors created with an InstantiationAwarePropertyAccessor to allow the handling of purely immutable types.
7867	Exception to indicate a source path couldn't be resolved into a PersistentPropertyPath completely.
7868	AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic IsNewAwareAuditingHandler.markAudited(Object) method that will route calls to AuditingHandler.markCreated(Object) or AuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.
7869	A ResourceReader using Jackson to read JSON into objects.
7870	MethodInterceptorFactory to create a MethodInterceptor that will
7871	Interface for generic CRUD operations on a repository for a specific type.
7872	Interface to allow execution of Query by Example Example instances.
7873	Base implementation of an ApplicationEvent refering to a PersistentEntity.
7874	TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.
7875	Exception being thrown in case an entity could not be instantiated in the process of a to-object-mapping.
7876	SPI to create MethodInterceptor instances based on the given source object and the target type to produce.
7877	Strategy interface providing predicates to resolve a method called on a composite to its implementation method.
7878	Interface for Metrics that can be applied to a base scale.
7879	Commonly used Metrics.
7880	Abstraction of a map of NamedQueries that can be looked up by their names.
7881	Builder to create a BeanDefinition for a NamedQueries instance using properties.
7882	Simple value object to wrap a nullable delegate.
7883	A ScrollPosition based on the offsets within query results.
7884	A page is a sublist of a list of objects.
7885	Repository fragment to provide methods to retrieve entities using the pagination and sorting abstraction.
7886	A tuple of things.
7887	Utility methods for String parsing.
7888	A single part of a method name that has to be transformed into a query part.
7889	The various types of ignore case that are supported.
7890	Simple interface for entities.
7891	IsNewStrategy that invokes Persistable.isNew() on the given object.
7892	EntityInformation implementation that uses a PersistentEntity to obtain id type information and uses a IdentifierAccessor to access the property value if requested.
7893	Domain service to allow accessing and setting PersistentPropertys of an entity.
7894	Factory to create PersistentPropertyAccessor for a given PersistentEntity and bean instance.
7895	Represents a geospatial point value.
7896	Converter to parse two comma-separated doubles into a Point.
7897	Utility methods to work with Predicates.
7898	Helper class to find a PreferredConstructor.
7899	Helper class to find a PreferredConstructor.
7900	Information about a projection type.
7901	NamedQueries implementation backed by a Properties instance.
7902	Proxy type detection utilities, extensible via ProxyUtils.ProxyDetector registered via Spring factories.
7903	Builder assembling Predicate out of PropertyValues.
7904	Provides a way to access a centrally defined potentially shared EvaluationContext.
7905	Exception to represent a failed attempt to convert a source value into a query method parameter.
7906	AuditingHandler extension that uses PersistentEntity.isNew(Object) to expose a generic ReactiveIsNewAwareAuditingHandler.markAudited(Object) method that will route calls to ReactiveAuditingHandler.markCreated(Object) or ReactiveAuditingHandler.markModified(Object) based on the IsNewStrategy determined from the factory.
7907	Enumeration of supported reactive libraries.
7908	Meta-information about the methods a repository exposes.
7909	Interface for a query abstraction.
7910	The type of a Revision.
7911	A dedicated Sort implementation that allows the definition of the ordering of revisions independently of the property name the revision number is held in.
7912	Keyset scrolling direction.
7913	Basic TypeInformationMapper implementation that interprets the alias handles as fully qualified class name and tries to load a class with the given name to build TypeInformation.
7914	Enumeration for null handling hints that can be used in Sort.Order expressions.
7915	Evaluates SpEL expressions as extracted by the SpelQueryContext.SpelExtractor based on parameter information from a method and parameter values from a method call.
7916	ParameterValueProvider that can be used to front a ParameterValueProvider delegate to prefer a SpEL expression evaluation over directly resolving the parameter value with the delegate.
7917	Helper class containing utility methods to implement JAXB XmlAdapters as well as the DTO types to be marshalled by JAXB.
7918	Extension of TargetClassAware to be able to ignore the getter on JSON rendering.
7919	Interface to abstract implementations of how to access a type alias from a given source or sink.
7920	Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children.
7921	Interface to abstract the mapping from a type alias to the actual type.
7922	Provides an abstract superclass for Permission implementations.
7923	Represents an individual permission assignment within an Acl.
7924	An immutable default implementation of AccessControlEntry.
7925	Provides support for creating and storing Acl instances.
7926	Represents the identity of an individual domain object instance.
7927	Simple implementation of ObjectIdentity.
7928	Represents a permission granted to a Sid for a given domain object.
7929	AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace.
7930	Most trivial implementation of KeySpaceResolver returning the Class.getName().
7931	KeyValueEvent after removing an object by with a given key.
7932	KeyValueEvent after loading an object by its key.
7933	KeyValueEvent after inserting an object by with a given key.
7934	KeyValueEvent after updating an object by with a given key.
7935	KeyValueEvent before inserting an object by with a given key.
7936	KeyValueEvent before updating an object by with a given key.
7937	Provides Security related MockMvcConfigurer implementations.
7938	Security related MockMvc ResultMatchers.
7939	Represents the events on the methods of TestExecutionListener
7940	Base implementation for configuration settings.
7941	A builder for subclasses of AbstractSettings.
7942	A context that holds information of the Authorization Server runtime environment.
7943	A holder of the AuthorizationServerContext that associates it with the current thread using a ThreadLocal.
7944	A facility for holding information associated to a specific context.
7945	Default implementation of OAuth2TokenContext.
7946	A RegisteredClientRepository that stores RegisteredClient(s) in-memory.
7947	An Authentication implementation used for the OAuth 2.0 Authorization Code Grant.
7948	Implementations of this interface are responsible for the management of OAuth 2.0 Authorization Consent(s).
7949	Base implementation of an Authentication representing an OAuth 2.0 Authorization Grant.
7950	A representation of an OAuth 2.0 Authorization Server Metadata response, which is returned from an OAuth 2.0 Authorization Server's Metadata Endpoint, and contains a set of claims about the Authorization Server's configuration.
7951	Implementations of this interface are responsible for the management of OAuth 2.0 Authorization(s).
7952	An Authentication implementation for the Device Authorization Consent used in the OAuth 2.0 Device Authorization Grant.
7953	An Authentication implementation for the Device Verification Request (submission of the user code) used in the OAuth 2.0 Device Authorization Grant.
7954	An Authentication implementation used for the OAuth 2.0 Refresh Token Grant.
7955	An Authentication implementation used for OAuth 2.0 Token Introspection.
7956	An Authentication implementation used for OAuth 2.0 Token Revocation.
7957	A representation of an OpenID Client Registration Request and Response, which is sent to and returned from the Client Registration Endpoint, and contains a set of claims about the Client's Registration information.
7958	An Authentication implementation used for OpenID Connect 1.0 Dynamic Client Registration (and Configuration) Endpoint.
7959	A representation of an OpenID Provider Configuration Response, which is returned from an Issuer's Discovery Endpoint, and contains a set of claims about the OpenID Provider's configuration.
7960	A repository for OAuth 2.0 RegisteredClient(s).
7961	Supporting class for computation results allowing introspection of the result value.
7962	Base class for VaultConverter implementations.
7963	AppRole implementation of ClientAuthentication.
7964	Publisher for AuthenticationEvents.
7965	A tuple of two things.
7966	Value object for an authentication nonce.
7967	Default implementation of VaultTokenSupplier caching the VaultToken from a delegate VaultTokenSupplier.
7968	Value object representing cipher text with an optional VaultTransitContext.
7969	Interface to obtain an arbitrary credential that is uses in ClientAuthentication or AuthenticationSteps methods.
7970	Cubbyhole ClientAuthentication implementation.
7971	Utility to parse a Go format duration into Duration.
7972	Interface to obtain a GoogleCredential for GCP IAM authentication.
7973	Interface to obtain a ServiceAccountCredentials for GCP IAM credentials authentication.
7974	Flattens a hierarchical Map of objects into a property Map.
7975	Key-Value utility to retrieve secrets from a versioned key-value backend.
7976	Kubernetes implementation of ClientAuthentication.
7977	A lease abstracting the lease Id, duration and its renewability.
7978	Version-specific endpoint implementations that use either legacy or sys/leases endpoints.
7979	Empty listener adapter implementing LeaseListener and LeaseErrorListener.
7980	Strategy interface to control whether to retain or drop a Lease after a failure.
7981	LifecycleAwareSessionManagerSupport.RefreshTrigger implementation using a fixed timeout to schedule renewal before a LoginToken expires.
7982	Common interface for trigger objects that determine the next execution time of a refresh task.
7983	PCF implementation of ClientAuthentication.
7984	Strategy interface to transform properties to a new key-value Map in a functional style.
7985	PropertyTransformer that adds a prefix to each key name.
7986	Represents a requested secret from a specific Vault path associated with a lease RequestedSecret.Mode.
7987	Factory interface that produces a RestTemplate object.
7988	Value object representing the result of a Signature validation.
7989	VaultEndpointProvider returning a static VaultEndpoint.
7990	Configuration for a key in a keystore.
7991	Static Token-based ClientAuthentication method.
7992	Value object representing cipher text with an optional VaultTransformContext.
7993	Enumeration to specify the type of the transit key.
7994	Version-specific endpoint implementations for response unwrapping.
7995	Username and password implementation of ClientAuthentication.
7996	Interface that specifies kv metadata related operations.
7997	Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.
7998	Interface that specifies a basic set of Vault operations using Vault's Key/Value secret backend.
7999	Request for a signature creation request.
8000	Value object for a Vault token.
8001	Builder for VaultTransformContext.
8002	Transit backend encryption/decryption/rewrapping context.
8003	Factory interface that produces a WebClient object.
8004	Callback to convert a SearchDocument into different other classes
8005	Class corresponding to the Elasticsearch class, but in the org.springframework.data.elasticsearch package
8006	Options that may be passed to an DocumentOperations.bulkIndex(List, BulkOptions, IndexCoordinates) or DocumentOperations.bulkUpdate(List, BulkOptions, IndexCoordinates) call.
8007	Based on reference doc - https://www.elastic.co/guide/en/elasticsearch/reference/current/suggester-context.html
8008	Operator to join the entries of the criteria chain
8009	Values based on Elasticsearch reference documentation.
8010	Interface to convert from and to TemporalAccessors.
8011	Default implementation of the RoutingResolver interface.
8012	Record defining a docvalue_field to be used in a query.
8013	Values for the dynamic mapping parameter.
8014	Elasticsearch specific TypeMapper definition.
8015	Converter to read a Point from Map using lat/long properties.
8016	Converter to write a Point to Map using lat/long properties.
8017	Interface definition for structures defined in GeoJSON format. copied from Spring Data Mongodb
8018	Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects. Copied from Spring Data Mongodb
8019	GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons. Copied fro Spring Data Mongodb.
8020	HostProvider.Verification allows to influence the lookup strategy for active hosts.
8021	OpType for the index operation.
8022	A class to hold the mapping parameters that might be set on Field or InnerField annotation.
8023	Interface defining methods to convert the value of an entity-property to a value in Elasticsearch and back.
8024	Value class combining an id with a routing value.
8025	Desscribes the point in time parameters for a query
8026	Utility to reactively read Resources.
8027	This interfaces defines the operations to access the Elasticsearch script API.
8028	Enum defining the refresh policy.
8029	This interfaces defines the operations to access the Elasticsearch script API.
8030	Define script types for update queries.
8031	A container for seq_no and primary_term values.
8032	class defining the settings for an index.
8033	Enum to represent the relation that Elasticsearch returns for the totalHits value
8034	Defines if type hints should be written.
8035	Base class for DatabaseInitializerDetectors that detect database initializer beans by type.
8036	Abstract base class for a FailureAnalyzer that handles some kind of injection failure.
8037	AnsiElement implementation for ANSI 8-bit foreground or background color codes.
8038	Ansi background colors.
8039	Ansi colors.
8040	Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled).
8041	Ansi styles.
8042	Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification.
8043	Event published by a SpringApplication when it fails to start.
8044	Provides access to the application home directory.
8045	Event published as late as conceivably possible to indicate that the application is ready to service requests.
8046	Event published once the application context has been refreshed but before any application and command line runners have been called.
8047	Provides access to an application specific temporary directory.
8048	An enumeration of possible values for configuring the Banner.
8049	Really basic JSON parser for when you have nothing else available.
8050	Restrictions that can be applied when binding values.
8051	Strategy interface used to determine a specific constructor to use when binding.
8052	Context information for use by BindHandlers.
8053	Exception thrown when binding fails.
8054	Configuration property binding methods.
8055	ApplicationEvent published by a BootstrapContext when it's closed.
8056	The scope of an instance.
8057	Bean to record and provide bound @ConfigurationProperties.
8058	Provide build-related information such as group and artifact.
8059	Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment.
8060	Option flags that can be applied.
8061	EventListener to listen to Environment updates triggered by the ConfigDataEnvironmentPostProcessor.
8062	Strategy class that can be used to load ConfigData for a given ConfigDataResource.
8063	ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found.
8064	Context provided to ConfigDataLocationResolver methods.
8065	Action to take when an uncaught ConfigDataNotFoundException is thrown.
8066	ConfigDataLocationResolver for config tree locations.
8067	PropertySource backed by a directory tree that contains files for each value.
8068	Property source options.
8069	Exception thrown when @ConfigurationProperties binding fails.
8070	The various forms that a non-indexed element value can take.
8071	The state of content from a ConfigurationPropertySource.
8072	SameSite values.
8073	Supported database initialization modes.
8074	Unwraps a DataSource that may have been proxied or wrapped in a custom Wrapper such as DelegatingDataSource.
8075	Default SslBundleRegistry implementation.
8076	Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate.
8077	Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present.
8078	Type of HTTP message to consider for encoding configuration.
8079	Error attributes that can be included in an error response.
8080	Provides access to error attributes which can be logged or presented to the user.
8081	The result of analyzing a failure.
8082	A ServletContextInitializer to register Filters in a Servlet 3.0+ container.
8083	Provide git-related information such as commit id and time.
8084	The result of a graceful shutdown request.
8085	Thin wrapper to adapt Gson to a JsonParser.
8086	Contains @Configuration import candidates, usually auto-configurations.
8087	Exception thrown when an attempt is made to resolve a property against an inactive ConfigData property source.
8088	Base class for components exposing unstructured data with dedicated methods for well known keys.
8089	Simple factory used to instantiate objects by injecting available parameters.
8090	Callback used to register available parameters.
8091	Exception thrown if an invalid property is found when processing config data.
8092	Exception thrown when a configuration property value is invalid.
8093	Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser.
8094	WebServer that can be used to control a Jetty web server.
8095	SslStoreBundle backed by a Java keystore.
8096	The various scopes under which a serializer/deserializer can be registered.
8097	Builder for JsonMixinModuleEntries.
8098	Parser that can read JSON formatted strings into Maps or Lists.
8099	Configuration for the server's JSP servlet.
8100	Represents a single callback that can be invoked in a lambda safe way.
8101	Represents a collection of callbacks that can be invoked in a lambda safe way.
8102	Abstract base class for lambda safe callbacks.
8103	Filter that can be used to exclude beans definitions from having their lazy-init set by the LazyInitializationBeanFactoryPostProcessor.
8104	"Liveness" state of the application.
8105	A reference to a log output file.
8106	Supported logger configurations scopes.
8107	Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation.
8108	Exception thrown when more than one mutually exclusive configuration property has been configured.
8109	RSocketServer that is based on a Reactor Netty server.
8110	WebServer that can be used to control a Reactor Netty web server.
8111	Interface that uniquely represents the origin of an item.
8112	OriginLookup backed by a Map containing OriginTrackedValues.
8113	A wrapper for an Object value and Origin.
8114	SslStoreBundle backed by PEM-encoded certificates and private keys.
8115	Provides access to environment profiles that have either been set directly on the Environment or will be set based on configuration data property values.
8116	Strategy to load '.properties' files into a PropertySource.
8117	Strategy interface located through SpringFactoriesLoader and used to load a PropertySource.
8118	Origin from a PropertySource.
8119	An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory.
8120	"Readiness" state of the application.
8121	Simple interface that represents a fully configured RSocket server.
8122	Choice of transport protocol for the RSocket server.
8123	Event to be published after the application context is refreshed and the RSocketServer is ready.
8124	An enumeration of the available schema management options.
8125	Session cookie properties.
8126	Available session tracking modes (mirrors SessionTrackingMode.
8127	Configuration for shutting down a WebServer.
8128	Used to configure and run an augmented SpringApplication where additional configuration should be applied.
8129	An MBean contract to control and monitor a running SpringApplication over JMX.
8130	Interface that can be used to add or remove code that should run when the JVM is shutdown.
8131	Client authentication types.
8132	A bundle of key and trust stores that can be used to establish an SSL connection.
8133	ConfigDataResource backed by a Resource.
8134	Represent the timeline of steps recorded by BufferingApplicationStartup.
8135	Event on the current StartupTimeline.
8136	Origin for an item loaded from a text resource.
8137	A location (line and column number) within the resource.
8138	WebServer that can be used to control a Tomcat web server.
8139	WebServer that can be used to control an Undertow web server.
8140	An enumeration of possible types of web application.
8141	Simple interface that represents a fully configured web server (for example Tomcat, Jetty, Netty).
8142	Event to be published when the WebServer is ready.
8143	Strategy to load '.yml' (or '.yaml') files into a PropertySource.
8144	A parser to parse properties for a given input
8145	Encryptor that uses AES encryption.
8146	Implementation of PasswordEncoder that uses the BCrypt strong hashing function.
8147	Stores the default bcrypt version for use in configuration.
8148	An Encryptor equivalent to AesBytesEncryptor using AesBytesEncryptor.CipherAlgorithm.CBC that uses Bouncy Castle instead of JCE.
8149	An Encryptor equivalent to AesBytesEncryptor using AesBytesEncryptor.CipherAlgorithm.GCM that uses Bouncy Castle instead of JCE.
8150	Service interface for symmetric data encryption.
8151	A generator for unique byte array-based keys.
8152	Static helper for encoding data.
8153	Service interface for encoding passwords.
8154	The Algorithm used for creating the SecretKeyFactory
8155	Service interface for symmetric encryption of text strings.
8156	UTF-8 Charset encoder/decoder.
8157	The compression type that can be specified on a Producer.
8158	The action a consumer should take when a consumer receives a message that it cannot decrypt.
8159	Listener on the consumer state changes.
8160	This is an abstraction over the logical value that is store into a Message.
8161	Generic Record Builder to build a GenericRecord.
8162	A schema that serializes and deserializes between GenericRecord and bytes.
8163	Standard hashing functions available when choosing the partition to use for a particular message.
8164	KeyShared mode of KeyShared subscription.
8165	A simple KeyValue class.
8166	Encoding types of supported KeyValueSchema for Pulsar messages.
8167	This interface models a Schema that is composed of two parts.
8168	Opaque unique identifier of a single message
8169	A listener that will be called in order for every message received.
8170	The abstraction of a message's payload.
8171	The factory class of MessagePayload.
8172	Interface for custom message router that can be passed to a producer to select the partition that a particular messsage should be published on.
8173	Default routing mode for messages to partition.
8174	The type of access to the topic that the producer requires.
8175	The action the producer will take in case of encryption failures.
8176	Protcol type to determine type of proxy routing when client connects to proxy using {@link ClientBuilder::proxyServiceUrl}.
8177	Reader interceptor.
8178	A listener that will be called in order for every message received.
8179	When subscribing to topics using a regular expression, one can specify to only pick a certain type of topics.
8180	Information about the schema.
8181	Schema Provider.
8182	The provider to provide the service url.
8183	Size unit converter.
8184	When creating a consumer, if the subscription does not exist, a new subscription will be created.
8185	Types of subscription mode supported by Pulsar.
8186	Types of subscription supported by Pulsar.
8187	TopicConsumerBuilder is used to configure topic specific options to override those set at the ConsumerBuilder level.
8188	The class represents a transaction within Pulsar.
8189	The builder to build a transaction for Pulsar.
8190	State of the transaction coordinator client.
8191	A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job.
8192	Observation created around a Job execution.
8193	Observation created around a step execution.
8194	Adapts a Callable<RepeatStatus> to the Tasklet interface.
8195	Listener interface for the lifecycle of a chunk.
8196	A Tasklet implementing variations on read-process-write item handling.
8197	Composite JobParametersValidator that passes the job parameters through a sequence of injected JobParametersValidators
8198	State that requires a decider to make the status decision.
8199	An implementation of the ExecutionContextSerializer that produces/consumes Base64 content.
8200	Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging.
8201	State implementation for ending a job if it is in progress and continuing if just starting.
8202	Batch Domain Entity class.
8203	A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result.
8204	This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step.
8205	Represents the status of FlowExecution.
8206	Implementation of the Job interface that allows for complex flows of steps, rather than requiring sequential execution.
8207	State that delegates to a Flow
8208	A Step implementation that delegates to a Flow.
8209	A step builder for FlowStep instances.
8210	Listener interface for the processing of an item.
8211	Listener interface around the reading of an item.
8212	Listener interface for the writing of items.
8213	Convenience for building jobs of various kinds.
8214	Provide callbacks at specific points in the lifecycle of a Job.
8215	Parser for a step listener element.
8216	Generic service that can bind and unbind a JobFactory in a JobRegistry.
8217	A factory for JobParameters instances.
8218	A runtime service registry interface for registering job configurations by name.
8219	A step builder for JobStep instances.
8220	Converter for JobParameters instances that uses a JSON naming convention for converting job parameters.
8221	Simple, thread-safe, map-based implementation of JobRegistry.
8222	Simple map-based implementation of StepRegistry.
8223	A Tasklet that wraps a method in a POJO.
8224	Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys.
8225	A JobFactory that keeps a reference to a Job.
8226	This incrementer increments a "run.id" parameter of type Long from the given job parameters.
8227	A State that proxies a delegate and changes its name but leaves its behavior unchanged.
8228	An implementation of ExitCodeMapper that can be configured through a map from batch exit codes (String) to integer results.
8229	Interface for listener to skipped items.
8230	Convenient base class for clients who need to do something in a repeat callback inside a Step.
8231	Listener interface for the lifecycle of a Step.
8232	Strategy interface for generating input contexts for a partitioned step execution independent from the fabric they are going to run on.
8233	Parser for a step listener element.
8234	Convenience factory for Step instances given a StepLocator.
8235	Registry keeping track of all the Step instances defined in a Job.
8236	State implementation that delegates to a FlowExecutor to execute the specified Step.
8237	Implementation of the JobLauncher interface based on a TaskExecutor.
8238	The specific access level granted to the cloud foundry user that's calling the endpoints.
8239	Authorization exceptions thrown to limit access to the endpoints.
8240	Reasons why the exception can be thrown.
8241	Technologies that can be used to expose an endpoint.
8242	Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set.
8243	Enumeration of management context types.
8244	A meter value that is used when configuring micrometer.
8245	Represents an anonymous Authentication.
8246	A ReactiveAuthorizationManager that determines if the current user is authenticated.
8247	Indicates a class can process a specific Authentication implementation.
8248	An AuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains any of the specified authorities.
8249	A parent class for AuthorizationGrantedEvent and AuthorizationDeniedEvent.
8250	Ordering of Spring Security's authorization Advisors
8251	An Authorization manager which can determine if an Authentication has access to a specific object.
8252	Creates a LoginContext using the Configuration provided to it.
8253	The default implementation of Token.
8254	Wraps a delegate Runnable with logic for setting up a SecurityContext before invoking the delegate Runnable and then removing the SecurityContext after the delegate has completed.
8255	Offers static methods for directly manipulating fields.
8256	An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating if the Authentication contains a specified authority from the JSR-250 security annotations.
8257	A Map based implementation of ReactiveUserDetailsService
8258	An expression-based AuthorizationManager that determines the access by evaluating the provided expression against the MethodInvocation.
8259	A context object that contains a MethodInvocation and the result of that MethodInvocation.
8260	Does not perform any caching.
8261	An AuthorizationManager that observes the authorization
8262	An ReactiveAuthenticationManager that observes the authentication
8263	An AuthorizationManager which can determine if an Authentication may return the result from an invoked MethodInvocation by evaluating an expression from the PostAuthorize annotation.
8264	Adapts an AuthenticationManager to the reactive APIs.
8265	A reactive authorization manager which can determine if an Authentication has access to a specific object.
8266	Represents a remembered Authentication.
8267	This class defines a role hierarchy for use with various access checking components.
8268	Used for creating Key converter instances
8269	Creates a SecureRandom instance.
8270	Interface defining the minimum security information associated with the current thread of execution.
8271	An event that represents a change in SecurityContext
8272	Base implementation of SecurityContext.
8273	Generic "session ID changed" event which indicates that a session identifier (potentially represented by a security context) has changed.
8274	Provides SHA512 digest methods.
8275	Caches UserDetails instances in a Spring defined Cache.
8276	An AuthenticationProvider implementation for the TestingAuthenticationToken.
8277	An Authentication implementation that is designed for use whilst unit testing.
8278	A token issued by TokenService.
8279	Provides a mechanism to allocate and rebuild secure, randomised tokens.
8280	Used by InMemoryUserDetailsManager to temporarily store the attributes associated with a user.
8281	Provides a cache of UserDetails objects.
8282	Pulsar event action type.
8283	A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add timestamp from broker side metadata for each entry.
8284	A plugin interface that allows you to intercept the client requests to the Pulsar brokers and add metadata for each entry from broker side.
8285	Definition of possible checksum types.
8286	Implements cancellation and timeout support for CompletableFutures.
8287	Generic compression codec interface.
8288	LZ4 Compression.
8289	No compression.
8290	Snappy Compression.
8291	ZLib Compression.
8292	Zstandard Compression.
8293	Domain types differentiated by Mozilla Public Suffix List.
8294	Pulsar system event type.
8295	Logger for the JVM G1 GC metrics.
8296	JvmGCMetricsLogger can be implemented for each specific GC type which retrieves GC count and pause time and logs it into metrics.
8297	Connection Mode for TLS.
8298	This class encapsulates lookup data.
8299	Namespace authorization operations.
8300	Similar to `DefaultSslContextBuilder`, which build `javax.net.ssl.SSLContext` for web service.
8301	Contains utility methods for working with Netty Channels.
8302	SSL context builder for Netty Client side.
8303	Contains utility methods for working with Netty Futures.
8304	SSL context builder for Netty Server side.
8305	SSL context builder for Netty.
8306	PolicyName authorization operations.
8307	PolicyOperation authorization operations.
8308	Schema data.
8309	Basic interface for service unit's identification.
8310	ServiceURI represents service uri within pulsar cluster.
8311	Auto refresher and builder of SSLContext.
8312	SSLContextValidatorEngine to validate 2 SSlContext.
8313	Definition of possible resource types.
8314	Tenant authorization operations.
8315	Defines a custom strategy to compact messages in a topic.
8316	Topic authorization operations.
8317	The callback interface for an AsyncProcessor so that it can notify you when an Exchange is done.
8318	A consumer of a batch of message exchanges from an Endpoint
8319	Factory for creating a Processor that can invoke a method on a bean and supporting using Camel bean parameter bindings.
8320	A predicate which evaluates a binary expression.
8321	State of the breakpoint as either active or suspended.
8322	Used to identify objects that can cache their resume state or data
8323	The cache fill policy can be used to determine how this cache should be filled with data.
8324	Used for custom injection when doing CamelBeanPostProcessor bean post-processing.
8325	An interface to represent an object which wishes to be injected with the CamelContext
8326	To apply custom configurations to CamelContext instances.
8327	Strategy for assigning name to a CamelContext.
8328	An exception caused by a specific message Exchange
8329	An advice (before and after) to execute cross cutting functionality in the Camel routing engine.
8330	A CamelPreemptiveClusterView is a CamelClusterView that can be externally disabled by another controller.
8331	This enum set various categories options into the UriEndpoint.
8332	Represents a list of TLS/SSL cipher suite names.
8333	Represents the options for the client authentication settings of a server socket.
8334	An interface to represent an object which wishes to be injected with a Component.
8335	Used as additional filer mechanism to control if customizers need to be applied or not.
8336	The result of a verification
8337	Status of the verification
8338	Interface defining an attribute which is a key for the detailed error messages.
8339	Interface defining an error code.
8340	A condition to define when a given Exchange matches when is being routed.
8341	An interface for listening to consumer events and allow proxying between a consumer predicate and the Camel component.
8342	An interface to represent an object which wishes to support listening for consumer events using the ConsumerListener.
8343	Represents an object that can have an associated content type.
8344	Represents a data format used to marshal objects to and from streams such as Java Serialization or using JAXB2 to encode/decode objects using XML or using SOAP encoding.
8345	Used as additional filer mechanism to control if customizers need to be applied or not.
8346	Allows Message to store a DataType which represents the data type of the Message.
8347	A pluggable strategy for resolving dev consoles in a loosely coupled manner
8348	An interface to represent an object that can be resolved as a consumer Endpoint
8349	An interface to represent an object that can be resolved as a producer Endpoint
8350	An interface for Processor aware of its ErrorHandler which are wrapped via the Channel during route initialization, or specially used by RecipientList EIP annotation.
8351	Factory for creating ErrorHandlers.
8352	Customizer for ErrorHandler which supports redeliveries.
8353	A Strategy pattern for handling exceptions; particularly in asynchronous processes such as consumers.
8354	Represents the kind of message exchange pattern
8355	An enum of common and known keys for exchange properties used by camel-core.
8356	An expression provides a plugin strategy for evaluating expressions on a message exchange.
8357	Represents an Expression or Predicate that supports a result type.
8358	Configuration for access to Hashicorp Vault Secrets.
8359	Interface to allow plug-able implementation to filter header to and from Camel message.
8360	The direction is either IN or OUT.
8361	An interface to represent an object which can make use of injected HeaderFilterStrategy.
8362	Factory to create the Map implementation to use for storing headers on Message.
8363	An interface to represent an object which wishes to be injected with the HealthCheck
8364	A repository for health checks.
8365	A pluggable strategy for resolving health checks in a loosely coupled manner
8366	Represents an object which is aware of HTTP responses.
8367	To allow objects to be injected with an id, such as EIP Processors which has been defined from Camel routes.
8368	Used for defining if a given class is singleton or not.
8369	Used as additional filer mechanism to control if customizers need to be applied or not.
8370	An entity that can point to a given line number from a source Resource such as YAML and XML DSL parsers.
8371	A source for properties that can be loaded all at once during initialization, such as loading .properties files.
8372	Allows a BeanRepository to temporary have a local repository take precedence, such as when creating route templates to give more flexibility.
8373	Used to configure the logging levels
8374	Level of mbeans for registration
8375	Level of granularity for performance statistics enabled
8376	Service Factory for ManagementStrategy
8377	Message traits are runtime traits that can be associated with a message (for instance, the redelivery state, a data type, etc).
8378	SPI for dumping model definitions into XML representation.
8379	SPI for dumping model definitions into YAML representation.
8380	Represents a node in the routes which is identified as a route.
8381	Represents an object which is aware of the namespaces in which its used such as XPath and XQuery type expressions so that the current namespace context can be injected
8382	Implementations support navigating a graph where you can traverse forward and each next returns a List of outputs of type T that can contain 0..n nodes.
8383	Allows to be used in combination with NotifyBuilder as external predicate implementations to compute if the exchange matches.
8384	Generic offset without a concrete type
8385	An interface to represent offset keys (addressable for an offset)
8386	A specialized AggregationRepository which also supports optimistic locking.
8387	Finder to find PeriodicTask tasks.
8388	A shared scheduler to run small period tasks, such as updating internal statistics, or for custom components to have a background task.
8389	A manager for internal plugins.
8390	A strategy capable of applying interceptors to a processor.
8391	Represents a Polling Consumer where the caller polls for messages when it is ready.
8392	Strategy that allows Consumers to influence the PollingConsumer.
8393	Strategy for a PollingConsumer when polling an Endpoint.
8394	Utilization statistics of the this factory.
8395	Evaluates a binary predicate on the message exchange.
8396	A factory to create Processor based on the definition.
8397	A function that is applied instead of looking up a property placeholder.
8398	A source for properties.
8399	Factory for creating out of the box PropertiesSource.
8400	Some messages can carry redelivery details which might affect routing (i.e; JMS messages).
8401	SPI strategy for reloading.
8402	An interface to represent an object which wishes to be injected with the Resource
8403	SPI strategy for reloading Resource in an existing running CamelContext
8404	SPI for loading resources.
8405	This provides an interface for resumable objects.
8406	An interface to represent an object which wishes to support resume operations using a ResumeStrategy.
8407	Provides a basic interface for implementing component-specific configuration builder
8408	An interface to represent an object which wishes to be injected with a Route such as Consumer which is the consumer for a route.
8409	A route configurations builder is capable of building route configurations using the builder and model classes.
8410	The last error that happened during changing the route lifecycle, i.e.
8411	To allow objects to be injected with the route id
8412	A routes builder is capable of building routes using the builder and model classes.
8413	SPI for loading RoutesBuilder from a Resource.
8414	Information about a route to be started where we want to control the order in which they are started by CamelContext.
8415	Source for parameters used when creating routes from route templates.
8416	Base class for all Camel unchecked exceptions.
8417	Statistics gathered about the endpoint.
8418	A pluggable scheduler for org.apache.camel.support.ScheduledPollConsumer consumers.
8419	Represents a list of TLS/SSL cipher suite names.
8420	An interface that represents resumable objects that can be serialized to a medium
8421	Represents the core lifecycle API for services which can be initialized, started and stopped
8422	An interface to represent an object which wishes to be injected with a ServiceChooser
8423	An interface to represent an object which wishes to be injected with a ServiceDiscovery
8424	An interface to represent an object which wishes to be injected with a ServiceFilter
8425	A Shared (thread safe) internal Processor that Camel routing engine used during routing for cross cutting functionality such as: Execute UnitOfWork Keeping track which route currently is being routed Execute RoutePolicy Gather JMX performance statics Tracing Debugging Message History Stream Caching Transformer ...
8426	Allows Consumer to fine grained control on shutdown which mostly have to cater for in-memory based components.
8427	Represents the options available when shutting down routes.
8428	Represents the kind of options for what to do with the current task when shutting down.
8429	Indicates that an object is able to use the global SSLContextParameters if configured.
8430	Allows objects to be notified when CamelContext has almost done all work when starting.
8431	Recording state of steps during startup to capture execution time, and being able to emit events to diagnostic tools such as Java Flight Recorder.
8432	Controls the level of information logged during startup (and shutdown) of CamelContext.
8433	This StateRepository holds a set of key/value pairs for defining a particular state of a component.
8434	Marked if the Expression or Predicate is based from a constant value (ie is static).
8435	Tagging interface to indicate that a type is capable of caching the underlying data stream.
8436	Used for selecting if the memory limit is committed or maximum heap memory setting.
8437	A Service which is also capable of suspending and resuming.
8438	Provides a hook for custom Processor or Component instances to respond to completed or failed processing of an Exchange rather like Spring's TransactionSynchronization
8439	An extension to Synchronization which provides route awareness capabilities.
8440	A vetoable Synchronization.
8441	Creates ExecutorService and ScheduledExecutorService objects that work with a thread pool for a given ThreadPoolProfile and ThreadFactory.
8442	Exception when failing during type conversion.
8443	What to do if attempting to add a duplicate type converter
8444	Factory to create UnitOfWork.
8445	Generator to generate UUID strings.
8446	Represent the kinds of options for wait for tasks to complete.
8447	Wraps a file.
8448	An interface to represent an object which wishes to be injected with the HealthCheck
8449	The mode used to shuffle the addresses.
8450	Manager class for the appender.
8451	A RabbitTemplate that permits batching individual messages into a larger message.
8452	Represents a broker event generated by the Event Exchange Plugin (https://www.rabbitmq.com/event-exchange.html).
8453	The cache mode.
8454	The type of publisher confirms to use.
8455	A listener for new channel creation and destruction.
8456	Subinterface of Channel to be implemented by Channel proxies.
8457	Default implementation of FatalExceptionStrategy.
8458	A listener for connection creation and closing.
8459	An AmqpEvent emitted by the listener container when consumer is subscribed to the queue.
8460	A ConnectionListener that will declare a single exchange when the connection is established.
8461	Encapsulates an arbitrary message - simple "bean" holder structure.
8462	The container type.
8463	An event that is emitted when a container is idle if the container is configured to do so.
8464	A retry recoverer for use with a batch listener.
8465	Base class for CompletableFutures returned by AsyncRabbitTemplate.
8466	Factory of MessageListenerContainers.
8467	Spring Rabbit Observation for listeners.
8468	Low cardinality tags.
8469	Spring RabbitMQ Observation for RabbitTemplate.
8470	Low cardinality tags.
8471	A RepublishMessageRecoverer supporting publisher confirms and returns.
8472	Functional sub interface enabling a lambda for the onShutDown method.
8473	A NodeLocator using the Spring WebFlux WebClient.
8474	A special-purpose cache interface specifically for the GenericScope to use to manage cached bean instances.
8475	A simple cache implementation backed by a concurrent map.
8476	The SameSite attribute of the Set-Cookie HTTP response header allows you to declare if your cookie should be restricted to a first-party or same-site context.
8477	Enum representing all of the default Shiro Filter instances available to web applications.
8478	Bootstrap listener to startup and shutdown the web application's Shiro WebEnvironment at ServletContext startup and shutdown respectively.
8479	Represents a source of information for IP restrictions (see IpFilter)
8480	Allows a filter to be named via JavaBeans-compatible NameableFilter.getName()/NameableFilter.setName(String) methods.
8481	A NamedFilterList is a List of Filter instances that is uniquely identified by a name.
8482	A RequestPairSource is a component that can supply a ServletRequest and ServletResponse pair associated with a currently executing request.
8483	A SessionKey implementation that also retains the ServletRequest and ServletResponse associated with the web request that is performing the session lookup.
8484	A WebSubject represents a Subject instance that was acquired as a result of an incoming ServletRequest.
8485	Value object representing a specification to add a column.
8486	Object to configure a ALTER KEYSPACE specification.
8487	Descriptor for a Cassandra column type exposing a DataType.
8488	Factory for configuring a CqlTemplate.
8489	Simple PersistenceExceptionTranslator for Cassandra.
8490	Schema drop support for Cassandra based on CassandraMappingContext and CassandraPersistentEntity.
8491	Cassandra-specific extension of the CrudRepository interface that allows the specification of a type for the identity of the @Table (or @Persistable) type.
8492	Spring data access exception for when Cassandra schema element being created already exists.
8493	Cassandra Protocol types.
8494	PropertyValueProvider for CassandraPersistentProperty.
8495	Value object representing a column name.
8496	Resolves ColumnType for properties, TypeInformation, and values.
8497	Composite KeyspacePopulator that delegates to a list of given KeyspacePopulator implementations, executing all scripts.
8498	Simple enumeration for the various compression types.
8499	Column functions to specify indexing behavior.
8500	Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate.
8501	Commonly used CQL operators.
8502	Extension to WriteOptions for use with DELETE operations.
8503	Value object representing a specification to drop a column.
8504	Value object representing a DROP INDEX specification.
8505	Load strategy to be used Embedded.onEmpty().
8506	Mapping information for an individual entity class.
8507	Table override (optional).
8508	Table override (optional).
8509	Table override (optional).
8510	Table override (optional).
8511	Base value object class to specify user type fields.
8512	Filter consisting of CriteriaDefinitions to be used with SELECT, UPDATE and DELETE queries.
8513	Aggregator of multiple violations for convenience when verifying id interfaces.
8514	Data access exception thrown when a result set did not have the correct column count, for example when expecting a single column but getting 0 or more than 1 columns.
8515	Describes an index.
8516	Extension to WriteOptions for use with INSERT operations.
8517	Available actions for Keyspace Specifications.
8518	Describes a Keyspace.
8519	Known Replication Strategy options.
8520	Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ....
8521	Factory class for producing implementations of given id interfaces.
8522	CassandraEntityInformation implementation using a CassandraPersistentEntity instance to lookup the necessary information.
8523	Factory to wrap a ReactiveSession with ObservableReactiveSession.
8524	Enum for Cassandra primary key column ordering.
8525	Values representing primary key column types.
8526	Mapping between a persistent entity's property and its column.
8527	Enumeration to define statement idempotency.
8528	Value object to represent a field and its meta-information.
8529	Extension of QueryMapper.Field to be backed with mapping metadata.
8530	Table override (optional).
8531	Table override (optional).
8532	Table override (optional).
8533	Trigger SELECT execution by calling one of the terminating methods.
8534	Table override (optional).
8535	Converter to convert Row to Object array.
8536	Converter to convert Rows to a List of Object representation.
8537	Converter to convert Rows to a Map of String/Object representation.
8538	CassandraValueProvider to read property values from a Row.
8539	Enum identifying any schema actions to take at startup.
8540	Trivial implementation of PreparedStatementCreator.
8541	Naming strategy that renders CamelCase name parts to snake_case.
8542	Enumeration to represent how parameters are rendered.
8543	Known KeyCaching Options
8544	Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ....
8545	Factory for Term objects encapsulating a binding value.
8546	NamingStrategy that applies a transformation Function after invoking a delegate NamingStrategy.
8547	CassandraValueProvider to read property values from a TupleValue.
8548	CassandraValueProvider to read property values from a UdtValue.
8549	Builder to remove a single element/multiple elements from a collection associated with a ColumnName.
8550	Builder to associate a single value with a collection at a given index at ColumnName.
8551	Extension to WriteOptions for use with UPDATE operations.
8552	Object to support the configuration of user type specifications that have columns.
8553	Aggregator of multiple MappingException for convenience when verifying persistent entities.
8554	Cassandra Write Options are an extension to QueryOptions for write operations.
8555	Handles deserialization of a model from some kind of textual format like XML.
8556	Wraps an ordinary File as a model source.
8557	Determines profile activation based on the existence/absence of some file.
8558	Holds data relevant for a model building event.
8559	Signals one ore more errors during model building.
8560	Signals a failure to parse the POM due to invalid syntax (e.g.
8561	The different severity levels for a problem, in decreasing order.
8562	Version
8563	Handles deserialization of a model from some kind of textual format like XML.
8564	Provides access to the contents of a POM independently of the backing store (e.g.
8565	Determines profile activation based on the operating system of the current runtime platform.
8566	Determines whether a profile should be activated.
8567	Determines profile activation based on the existence or value of some execution property.
8568	Context used to transform a pom file.
8569	The transformerContextBuilder is responsible for initializing the TransformerContext.
8570	Signals an error when resolving the path to an external model.
8571	Utility that determines the necessary type conversions between Java types used in the domain model and types compatible with JDBC drivers.
8572	Builder for Identifier.
8573	Allows the creation of instances of database dependent types, e.g.
8574	MyBatisContext instances get passed to MyBatis mapped statements as arguments, making Ids, instances, domainType and other attributes available to the statements.
8575	Exception thrown when SQL specified is invalid.
8576	Base class for value objects representing a value or a NULL binding.
8577	A bind marker represents a single bindable parameter within a query.
8578	Bind markers represent placeholders in SQL queries for substitution for an actual parameter.
8579	Target to apply bindings to.
8580	Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.
8581	Interface declaring methods that accept callback Function to operate within the scope of a Connection.
8582	Strategy used to populate, initialize, or clean up a database.
8583	Extension to QueryOperation for a prepared SQL query Supplier with bound parameters.
8584	Contract for fetching tabular results.
8585	Represents a function that filters an ExecuteFunction.
8586	Exception thrown when we can't classify a R2dbcException into one of our generic data access exceptions.
8587	This is the file specification used to activate a profile.
8588	This is the property specification used to activate a profile.
8589	ArtifactDeployer
8590	This is the main graph data structure used by the RepositorySystem to present tree and graph objects.
8591	MetadataResolutionRequestTypeEnum
8592	Class ParamdocXpp3Writer.
8593	Class ProfilesXpp3Writer.
8594	Abstract class to provide most of the infrastructure required to implement a Mojo except for the execute method. The implementation should have a Mojo annotation with the name of the goal:
8595	This interface forms the contract required for Mojos to interact with the Maven infrastructure. It features an execute() method, which triggers the Mojo's build-process behavior, and can throw a MojoExecutionException or MojoFailureException if error conditions occur. Also included is the setLog(...) method, which simply allows Maven to inject a logging mechanism which will allow the Mojo to communicate to the outside world through standard Maven channels.
8596	Strategy for reading and writing a cookie value to the HttpServletResponse.
8597	Contains the information necessary to write a value to the HttpServletResponse.
8598	Supported modes of writing the session to session store.
8599	Supported modes of tracking and saving session changes to session store.
8600	A repository interface for managing Session instances.
8601	Abstract base class for entities.
8602	Value object to represent a BeanDefinition for an EntityManagerFactory with a dedicated bean name.
8603	Delegating QueryRewriter that delegates rewrite calls to a delegate provided by a Supplier.
8604	Enum for JPA 2.1 EntityGraph types.
8605	EntityGraph configuration for JPA 2.1 EntityGraphs.
8606	Base class for JpaEntityInformation implementations to share common method implementations.
8607	Set of classes to contain query execution strategies.
8608	SPI interface to be implemented by JpaRepository implementations.
8609	Value object to abstract a collection of Attributes.
8610	A utility class for JSqlParser.
8611	Value object to hold metadata about repository methods.
8612	A AbstractJpaQuery implementation based on a PartTree.
8613	Interface for a persistence provider specific accessor of identifiers held in proxies.
8614	Interface to hide different implementations to extract the original JPA query string from a Query.
8615	Callback to rewrite a query and apply sorting and pagination settings that cannot be applied based on a regularly detectable scheme.
8616	Provide a QueryRewriter based upon the JpaQueryMethod.
8617	MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory.
8618	MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance.
8619	A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource.
8620	The FtpRemoteFileTemplate.exists(String) operation mode.
8621	A RemoteFileStreamingInboundChannelAdapterSpec for a FtpStreamingMessageSource.
8622	Abstract JPA Query Provider to serve as a base class for all JPA Query providers.
8623	AMQP ItemReader implementation using an AmqpTemplate to receive and/or convert messages.
8624	A builder implementation for the AmqpItemReader
8625	A builder implementation for the AmqpItemWriter
8626	MethodResolver implementation that finds a single Method on the given Class that contains the specified annotation type.
8627	An ItemReader that deserializes data from a Resource containing serialized Avro objects.
8628	An ItemWriter that serializes data to an WritableResource using Avro.
8629	A builder implementation for the AvroItemWriter.
8630	Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier.
8631	Creates a fully qualified ClassifierCompositeItemProcessor.
8632	Creates a fully qualified ClassifierCompositeItemWriter.
8633	Very simple base class for CompletionPolicy implementations.
8634	Composite ItemProcessor that passes the item through a sequence of injected ItemTransformers (return value of previous transformation is the entry value of the next). Note the user is responsible for injecting a chain of ItemProcessors that conforms to declared input and output types.
8635	Creates a fully qualified CompositeItemProcessorBuilder.
8636	DB2 implementation of a PagingQueryProvider using database specific features.
8637	Default implementation of FieldSetFactory with no special knowledge of the FieldSet required.
8638	This MailErrorHandler implementation simply rethrows the exception it receives.
8639	A re-usable PropertyEditorRegistrar that can be used wherever one needs to register custom PropertyEditor instances with a PropertyEditorRegistry (like a bean wrapper, or a type converter).
8640	Very simple CompletionPolicy that bases its decision on the result of a batch operation.
8641	A LineAggregator implementation that converts an object into a delimited list of strings.
8642	An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts.
8643	Factory interface for creating FieldSet instances.
8644	Utility methods for files used in batch processing.
8645	Tokenizer used to process data obtained from files with fixed-length format.
8646	This class is an item writer that writes data to a file or stream.
8647	Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events.
8648	A json object marshaller that uses Google Gson to marshal an object into a json representation.
8649	Implementation of JsonObjectReader based on Google Gson.
8650	H2 implementation of a PagingQueryProvider using database specific features.
8651	SAP HANA implementation of a PagingQueryProvider using database specific features.
8652	HSQLDB implementation of a PagingQueryProvider using database specific features.
8653	Exception indicating that the line size expected is different from what is expected.
8654	Marker interface defining a contract for periodically storing state and restoring from that state should an error occur.
8655	A json object marshaller that uses Jackson to marshal an object into a json representation.
8656	Implementation of JsonObjectReader based on Jackson.
8657	An ItemReader for JMS using a JmsTemplate.
8658	Creates a fully qualified JmsItemReader.
8659	An ItemWriter for JMS using a JmsTemplate.
8660	Creates a fully qualified JmsItemWriter.
8661	A builder for the JpaItemWriter.
8662	Interface defining the functionality to be provided for generating queries for use with JPA ItemReaders or other custom built artifacts.
8663	Item writer that writes data in json format to an output file.
8664	Strategy interface for Json readers.
8665	Implementation of ExceptionHandler based on an Classifier.
8666	Logging levels for the handler.
8667	MariaDB implementation of a PagingQueryProvider using database specific features.
8668	Strategy interface for detecting a single Method on a Class.
8669	MySQL implementation of a PagingQueryProvider using database specific features.
8670	Oracle implementation of a PagingQueryProvider using database specific features.
8671	The direction of the sort in an ORDER BY clause.
8672	Postgres implementation of a PagingQueryProvider using database specific features.
8673	Utility to convert a Properties object to a String and back.
8674	Policy for text file-based input sources to determine the end of a record, e.g.
8675	An implementation of LineAggregator that concatenates a collection of items of a common type with the system line separator.
8676	Line-tokenizer using a regular expression to filter out data (by using matching and non-matching groups).
8677	Helper class for policies that need to count the number of occurrences of some event (e.g.
8678	A MethodInterceptor that can be used to automatically repeat calls to a method on a service.
8679	Policy for terminating a batch after a fixed number of operations.
8680	Creates a fully qualified SimpleMailMessageItemWriter.
8681	Simplest possible RecordSeparatorPolicy - treats all lines as record endings.
8682	Creates a fully qualified SingleItemPeekeableItemReader.
8683	Wrapper for an item and its exception if it failed processing.
8684	SQLite implementation of a PagingQueryProvider using database specific features.
8685	SQL Server implementation of a PagingQueryProvider using database specific features.
8686	Sybase implementation of a PagingQueryProvider using database specific features.
8687	Creates a fully qualified SynchronizedItemStreamReader.
8688	Creates a fully qualified SynchronizedItemStreamWriter.
8689	Helper class that sets up a System property with a default value.
8690	Termination policy that times out after a fixed period.
8691	Wrapper for a FileChannel that delays actually writing to or closing the buffer if a transaction is active.
8692	Simple implementation of ItemProcessor that validates input and returns it without modifications.
8693	Base implementation of ComponentDefinition that provides a basic implementation of AbstractComponentDefinition.getDescription() which delegates to ComponentDefinition.getName().
8694	Representation of an alias that has been registered during the parsing process.
8695	Extended BeanDefinition interface that exposes AnnotationMetadata about its bean class - without requiring the class to be loaded yet.
8696	Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface.
8697	BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring.
8698	Sources from which services were obtained.
8699	Enumeration determining autowiring status: that is, whether a bean should have its dependencies automatically injected by the Spring container using setter injection.
8700	Subclass of BeanDefinitionStoreException indicating an invalid override attempt: typically registering a new definition for the same bean name while DefaultListableBeanFactory.isAllowBeanDefinitionOverriding() is false.
8701	Exception thrown when a BeanFactory encounters an invalid bean definition: e.g.
8702	Interface that can be used to configure the code that will be generated to perform bean factory initialization.
8703	Exception thrown when instantiation of a bean failed.
8704	Holder for a key-value style attribute that is part of a bean definition.
8705	Thrown when a bean doesn't match the expected type.
8706	AOT processor that makes bean registration contributions by processing RegisteredBean instances.
8707	Interface that can be used to configure the code that will be generated to perform registration of a single bean.
8708	Interface that can be used to configure the code that will be generated to register beans.
8709	Exception thrown when the BeanFactory cannot load the specified class of a given bean.
8710	Bean definition for beans which inherit settings from their parent.
8711	ComponentDefinition implementation that holds one or more nested ComponentDefinition instances, aggregating them into a named group of components.
8712	Property editor for java.util.Date, supporting a custom java.text.DateFormat.
8713	Property editor for any Number subclass such as Short, Integer, Long, BigInteger, Float, Double, BigDecimal.
8714	Subinterface of BeanPostProcessor that adds a before-destruction callback.
8715	Interface to be implemented by objects used within a BeanFactory which are themselves factories for individual objects.
8716	Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered.
8717	GenericBeanDefinition is a one-stop shop for declarative bean definition purposes.
8718	Sub-interface implemented by bean factories that can be part of a hierarchy.
8719	Representation of an import that has been processed during the parsing process.
8720	Exception thrown when referring to an invalid bean property.
8721	Class that models an arbitrary location in a resource.
8722	Represents an override of a method that looks up an object in the same IoC context, either by bean name or by bean type (based on the declared method return type).
8723	Interface representing an object whose value set can be merged with that of a parent object.
8724	Post-processor callback interface for merged bean definitions at runtime.
8725	A simple holder for a given bean name plus bean instance.
8726	Exception thrown when a BeanFactory is asked for a bean instance for which multiple matching candidates have been found when only one matching bean was expected.
8727	Public delegate for resolving autowirable parameters on externally managed constructors and methods.
8728	Simple ArrayDeque-based structure for tracking the logical position during a parsing process.
8729	SPI interface allowing tools and other external processes to handle errors and warnings reported during bean definition parsing.
8730	Custom PropertyEditor for Properties objects.
8731	Superclass for exceptions related to a property access, such as type mismatch or invocation target exception.
8732	Simple factory facade for obtaining PropertyAccessor instances, in particular for BeanWrapper instances.
8733	PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper.
8734	Extension of MethodOverride that represents an arbitrary override of a method by the IoC container.
8735	Immutable placeholder class used for a property value object when it's a reference to another bean name in the factory, to be resolved at runtime.
8736	FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility.
8737	FactoryBean that exposes all services for the configured service class, represented as a List of service objects, obtained through the JDK 1.6 ServiceLoader facility.
8738	FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class.
8739	Extension of the FactoryBean interface.
8740	Definition for sorting bean instances by a property.
8741	Method to use for resolving resources.
8742	Extension of the DestinationResolver interface, exposing methods for clearing the cache.
8743	Implementation of the JMS ExceptionListener interface that supports chaining, allowing the addition of multiple ExceptionListener instances in order.
8744	Simple DestinationResolver implementation resolving destination names as dynamic destinations.
8745	Base class for exception thrown by the framework whenever it encounters a problem related to JMS.
8746	Model for a JMS listener endpoint.
8747	Strategy interface that specifies a converter between Java objects and JMS messages.
8748	Constants that indicate a target message type to convert to: a TextMessage, a BytesMessage, a MapMessage or an ObjectMessage.
8749	Simple implementation of JmsHeaderMapper.
8750	An authenticator which binds as a user.
8751	Provides lifecycle services for an embedded LDAP server.
8752	A LDAP authority populator that can recursively search static nested groups.
8753	A Password Policy request control.
8754	Defines status codes for use with PasswordPolicyException, with error codes (for message source lookup) and default messages.
8755	An AuthenticationSource to retrieve authentication information stored in Spring Security's SecurityContextHolder.
8756	Represents the literal values TRUE and FALSE.
8757	Represents the invocation of a constructor.
8758	Represents the elvis operator ?:.
8759	Parses expression strings into compiled expressions that can be evaluated.
8760	Expression language AST node that represents a float literal.
8761	A function reference is of the form "#someFunction(a,b,c)".
8762	Represent a map in an expression, e.g.
8763	Expression language AST node that represents an integer literal.
8764	Expression language AST node that represents a long integer literal.
8765	Expression language AST node that represents null.
8766	Represents the boolean AND operation.
8767	Implements division operator.
8768	Implements the equality operator.
8769	Supported operations that an OperatorOverloader can implement for any pair of operands.
8770	The operator 'instanceof' checks if an object is of the class specified in the right-hand operand, in the same way that instanceof does in Java.
8771	Represents a NOT operation.
8772	By default the mathematical operators Operation support simple types like numbers.
8773	Implements greater-than-or-equal operator.
8774	Implements the greater-than operator.
8775	Implements the less-than-or-equal operator.
8776	Implements the less-than operator.
8777	The minus operator supports: subtraction of numbers subtraction of an int from a string of one character (effectively decreasing that character), so 'd'-3='a'
8778	Implements the modulus operator.
8779	Implements the multiply operator.
8780	Implements the not-equal operator.
8781	Represents the boolean OR operation.
8782	The plus operator will: add numbers concatenate strings
8783	Input provided to an expression parser that can influence an expression parsing/compilation routine.
8784	Expression language AST node that represents a real literal.
8785	Captures the possible configuration settings for a compiler that can be used when evaluating expressions.
8786	Root exception for Spring EL related exceptions.
8787	Contains all the messages that can be produced by the Spring Expression Language.
8788	Message kinds.
8789	Root exception for Spring EL related exceptions.
8790	Standard implementation of OperatorOverloader.
8791	A basic TypeComparator implementation: supports comparison of Number types as well as types implementing Comparable.
8792	Expression language AST node that represents a string literal.
8793	Configurable ParserContext implementation for template parsing.
8794	Represents a ternary expression, for example: "someCheck()?true:false".
8795	Captures primitive types and their corresponding class objects, plus one special TypeCode.OBJECT entry that represents all reference (non-primitive) types.
8796	Instances of a type comparator should be able to compare pairs of objects for equality.
8797	Represents a reference to a type, for example "T(String)" or "T(com.example.Foo)".
8798	Represents a reference to a value.
8799	A ValueRef for the null value.
8800	A ValueRef holder for a single value, which cannot be set.
8801	An artifact handler defines for a dependency type, defined as Plexus role: extension and classifier, to be able to download the file, information on how to use the artifact: whether to add it to the classpath, or to take into account its dependencies.
8802	Exception caused when one or more artifacts can not be resolved because they are not found in the local or remote repositories.
8803	Base class for post processors that decompress the message body if the MessageProperties.SPRING_AUTO_DECOMPRESS header is true or to optionally always decompress if the content encoding matches AbstractDecompressingPostProcessor.getEncoding(), or starts with AbstractDecompressingPostProcessor.getEncoding() + ":", in which case the encoding following the colon becomes the final content encoding of the decompressed message.
8804	Base class for post processors based on Deflater.
8805	MessageConverters that potentially use Java deserialization.
8806	Used to receive a batch of messages if the container supports it.
8807	The binding destination.
8808	A post processor that uses a DeflaterOutputStream to compress the message body.
8809	A post processor that uses a GZIPInputStream to decompress the message body.
8810	A post processor that uses a GZIPOutputStream to compress the message body.
8811	A post processor that uses a InflaterInputStream to decompress the message body.
8812	The precedence for type conversion - inferred from the method parameter or message headers.
8813	The 0-8 and 0-9-1 AMQP specifications do not define an Message class or interface.
8814	Message converter interface.
8815	Enumeration for the message delivery mode.
8816	Listener interface to receive asynchronous delivery of Amqp Messages.
8817	Used in several places in the framework, such as AmqpTemplate#convertAndSend(Object, MessagePostProcessor) where it can be used to add/modify headers or properties after the message conversion has been performed.
8818	Locate the queue leader.
8819	Overflow argument values.
8820	A delegating adapter that unwraps RemoteInvocationResult after invoking the delegate to convert from a message.
8821	Returned message and its metadata.
8822	Type safe accessor for retried message sending.
8823	A post processor that uses a ZipInputStream to decompress the message body.
8824	A post processor that uses a ZipOutputStream to compress the message body.
8825	Base class for OAuth 2.0 Token implementations.
8826	The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.
8827	A ConversionService configured with converters that provide type conversion for claim values.
8828	A domain object that wraps the attributes of an OAuth 2.0 token.
8829	The default implementation of an OAuth2User.
8830	The default implementation of an OidcUser.
8831	An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token.
8832	An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token.
8833	An "exchange" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type.
8834	A representation of an OAuth 2.0 Error.
8835	Core interface representing an OAuth 2.0 Token.
8836	An implementation of an AbstractOAuth2Token representing an OpenID Connect Core 1.0 ID Token.
8837	A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider.
8838	A GrantedAuthority that may be associated to an OidcUser.
8839	A representation of a UserInfo Response that is returned from the OAuth 2.0 Protected Resource UserInfo Endpoint.
8840	Base class for TCP Connection Support implementations.
8841	Reads data in an InputStream to a byte[]; data must be terminated by \r\n (not included in resulting byte[]).
8842	Reads data in an InputStream to a byte[]; data must be terminated by a single byte (not included in resulting byte[]).
8843	Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[]).
8844	Implementation of TcpSocketFactorySupport for non-SSL sockets ServerSocket and Socket.
8845	Implementation of TcpSocketFactorySupport for SSL sockets SSLServerSocket and SSLSocket.
8846	Implementation of TcpNioConnectionSupport for SSL NIO connections.
8847	Default implementation of TcpSocketSupport; makes no changes to sockets.
8848	Default implementation of TcpSSLContextSupport; uses a 'TLS' (by default) SSLContext, initialized with 'JKS' keystores, managed by 'SunX509' Key and Trust managers.
8849	TcpClientConnectionFactorySpec for TcpNetClientConnectionFactorys.
8850	TcpServerConnectionFactorySpec for TcpNetServerConnectionFactorys.
8851	TcpClientConnectionFactorySpec for TcpNioClientConnectionFactorys.
8852	TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys.
8853	An interface representing a sending client of a connection factory.
8854	Connection factories that act as TCP servers, listening for incoming connections.
8855	Strategy interface for supplying Socket Factories.
8856	Strategy interface for modifying sockets.
8857	Enumeration for common database platforms.
8858	Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped.
8859	Exception thrown on an optimistic locking violation for a mapped object.
8860	Exception thrown if a mapped object could not be retrieved via its identifier.
8861	Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos.
8862	Extension of the standard JPA PersistenceUnitInfo interface, for advanced collaboration between Spring's LocalContainerEntityManagerFactoryBean and PersistenceUnitManager implementations.
8863	A simple helper class which acts as a factory of QName instances.
8864	This class defines all the new XML-related groovy methods which enhance the normal JDK XML classes when inside the Groovy environment.
8865	Utilities for array interaction.
8866	Utility to bind Parameter to a BindTarget.
8867	R2DBC dialect for H2.
8868	Simple singleton to convert Booleans to their Byte representation.
8869	Simple singleton to convert Bytes to their Boolean representation.
8870	An SQL dialect for Postgres.
8871	Value object to capture custom conversion.
8872	Table override (optional).
8873	Table override (optional).
8874	Table override (optional).
8875	Trigger SELECT execution by calling one of the terminating methods.
8876	Table override (optional).
8877	An SQL dialect for Microsoft SQL Server.
8878	DELETE specification.
8879	A subclass of QueryMapper that maps Update to update assignments.
8880	Base implementation of a Candidate.
8881	A message source that can limit the number of remote objects it fetches.
8882	Strategy interface to determine if a given header name matches.
8883	A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern.
8884	Base ApplicationEvent class for leader based events.
8885	Called by subclasses in doInvoke() to proceed() the invocation.
8886	An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[].
8887	Interface that defines the contract for candidates to participate in a leader election.
8888	Transformer that stores a Message and returns a new Message whose payload is the id of the stored Message.
8889	Interface for classes that perform both encode (serialize) and decode (deserialize) on multiple classes.
8890	A Codec that can delegate to one out of many Codecs, each mapped to a class.
8891	An Executor that encapsulates two underlying executors.
8892	A Trigger that delegates the Trigger.nextExecutionTime(TriggerContext) to one of two Triggers.
8893	Supports atomic updates to values in the store.
8894	Interface that defines the context for candidate leadership.
8895	AbstractPayloadTransformer that delegates to a codec to decode the payload from a byte[].
8896	Simple Candidate for leadership.
8897	The default Message Splitter implementation.
8898	A channel that invokes a single subscriber for each sent Message.
8899	Parser for the 'enricher' element.
8900	An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor.
8901	A MessageHandler that evaluates the provided Expression expecting a void return.
8902	A base class for aggregators that evaluates a SpEL expression with the message list as the root object within the evaluation context.
8903	A Message Router implementation that evaluates the specified SpEL expression.
8904	Implementations convert a channel to a name, retaining a reference to the channel keyed by the name.
8905	MessageHandlers implementing this interface can propagate headers from an input message to an output message.
8906	Strategy interface for mapping from an Object to aMessage.
8907	Message consumers implement this interface, the message handler within a consumer may or may not emit output messages.
8908	The ObservationDocumentation implementation for Spring Integration infrastructure.
8909	Key names for message handler observations.
8910	Key names for message handler observations.
8911	Key names for message producer observations.
8912	The Enterprise Integration Pattern types.
8913	The Enterprise Integration Pattern categories.
8914	An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource.
8915	Pre-defined names and prefixes to be used for setting and/or retrieving JSON entries from/to Message Headers and other adapter, e.g.
8916	Simple factory to provide JsonObjectMapper instances based on jackson-databind lib in the classpath.
8917	Interface for publishing leader based application events.
8918	ConcurrentMetadataStore with the ability of registering MetadataStoreListener callbacks, to be invoked when changes occur in the metadata store.
8919	Will transform Map to an instance of Object.
8920	An "artificial" MessageChannel implementation which will be unwrapped to the MessageChannel bean on the bean registration phase.
8921	Strategy interface for dispatching messages to handlers.
8922	Base interface for any component that is capable of sending messages to a MessageChannel.
8923	Base interface for any source of Messages that can be polled.
8924	Message sources implementing this interface have additional properties that can be set or examined using JMX.
8925	Strategy interface for storing metadata from certain adapters to avoid duplicate delivery of messages, for example.
8926	A callback to be invoked whenever a value changes in the data store.
8927	Base implementation for a MetadataStoreListener.
8928	The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor.
8929	A Message Router that invokes the specified method on the given object.
8930	A builder for a counter.
8931	A builder for a gauge.
8932	A builder for a timer.
8933	Transformer implementation that converts a payload instance into a JSON string representation.
8934	Interface for components that wish to be considered for an orderly shutdown using management interfaces.
8935	Utility methods for pattern matching.
8936	Endpoints implementing this interface can be paused/resumed.
8937	A message channel that prioritizes messages based on a Comparator.
8938	Operations available on a channel that has queuing semantics.
8939	The MessageProducerSupport to adapt a provided MessageSource into a Flux and let it be subscribed in the MessageProducerSupport.subscribeToPublisher(org.reactivestreams.Publisher<? extends org.springframework.messaging.Message<?>>).
8940	An AOP advice to perform hooks before and/or after a receive() contract is called.
8941	The AbstractReplyProducingMessageHandler wrapper around raw MessageHandler for request-reply scenarios, e.g.
8942	A simple advice that polls at one rate when messages exist and another when there are no messages.
8943	A simple PollSkipStrategy to be used with a PollSkipAdvice.
8944	User of the pool provide an implementation of this interface; called during various pool operations.
8945	Utility class that keeps track of a Set of SpEL PropertyAccessors in order to register them with the "integrationEvaluationContext" upon initialization.
8946	Thin wrapper around a Semaphore that allows to create a potentially unlimited upper bound to by used in buffers of messages (e.g.
8947	Utility to help generate UUID instances from generic objects.
8948	Defines the payload type when the listener container is configured with consumerBatchEnabled.
8949	Base spec for outbound AMQP endpoints.
8950	A ListenerExecutionFailedException enhanced with the channel and delivery tag.
8951	Archive layout types.
8952	Package an application into an OCI image using a buildpack.
8953	Docker configuration options.
8954	Encapsulates Docker registry authentication configuration options.
8955	Layer configuration options.
8956	Implementation of the XsdSchema interface that uses Apache WS-Commons XML Schema.
8957	Helper class used to find the current version of JAXP.
8958	Convenient utility methods for dealing with SAX.
8959	Convenient utility methods for loading of Schema objects, performing standard handling of input streams.
8960	Convenient subclass of StreamSource that reads from a StringReader.
8961	Convenient utility methods for dealing with TrAX.
8962	Simple processor that validates a given Source.
8963	Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.
8964	Factory for compiled XPathExpressions, being aware of JAXP 1.3+ XPath functionality, and Jaxen.
8965	Spring FactoryBean for XPathExpression object.
8966	Represents an abstraction for XSD schemas.
8967	Represents an abstraction for a collection of XSD schemas.
8968	For ReaderSources that can choose a parent class, a base that provides common functionality.
8969	An interface for MetaClass instances that "adapt" other MetaClass instances such as a proxy or delegating MetaClass.
8970	Utilities for handling array types
8971	This class handles converting Strings to ASTNode lists.
8972	Intended style to use for cloning when using the @AutoClone annotation.
8973	Helper class for internal use only.
8974	This class represents a sequence of BytecodeInstructions or ASTNodes.
8975	Find classes under the specified package via some classpath entry Usage:
8976	Helper class to return either a SourceUnit or ClassNode.
8977	An interface for MetaMethods that invoke closures to implements.
8978	The phases of the GroovyCompiler.
8979	A convenience front end for getting standard compilations done.
8980	Behavior-changing configuration options for the map
8981	An option specifying which Java reference type should be used to refer to a key and/or value.
8982	Thrown when configuration data is invalid.
8983	This class is a general adapter to adapt a map of closures to any Java interface.
8984	Intended mode to use when generating constructors to emulate default parameter values when using the TupleConstructor annotation.
8985	Script that performs method invocations and property access like Closure does.
8986	Represents a do { ...
8987	A buffered writer only for OutputStreamWriter that is aware of the encoding of the OutputStreamWriter.
8988	Represents an evictable memoize cache with its essential methods
8989	Represents an eviction strategy for the cache with limited size
8990	A class for error messages produced by the parser system.
8991	A ReaderSource for source files.
8992	Represents particular files of interest.
8993	Represents special return values for the 'preDir', 'postDir' and 'visit'/supplied Closures used with ResourceGroovyMethods.traverse(java.io.File, java.util.Map, groovy.lang.Closure) and related methods to control subsequent traversal behavior.
8994	Represents a standard for loop in Groovy
8995	Transformation for declarative dependency management.
8996	This class represents an error that is thrown when a bug is recognized inside the runtime.
8997	A special visitor for working with the structure of a class.
8998	Represents groovydoc
8999	Represents Groovydoc Holder
9000	The interface implemented by all Groovy objects.
9001	Base class for Java objects wishing to be Groovy objects.
9002	A PrintStream that outputs objects in Groovy style.
9003	Classes which can run scripts should implement this interface.
9004	Event handler registration: setup Registers closure that runs after the type checker finishes initialization finish Registers closure that runs after the type checker completes type checking beforeVisitClass Registers closure that runs before type checking a class afterVisitClass Registers closure that runs after having finished the visit of a type checked class beforeVisitMethod Registers closure that runs before type checking a method body afterVisitMethod Registers closure that runs after type checking a method body beforeMethodCall Registers closure that runs before the type checker starts type checking a method call afterMethodCall Registers closure that runs once the type checker has finished type checking a method call methodNotFound Registers closure that runs when it fails to find an appropriate method for a method call ambiguousMethods Registers closure that runs when the type checker cannot choose between several candidate methods onMethodSelection Registers closure that runs when it finds a method appropriate for a method call unresolvedVariable Registers closure that runs when the type checker finds an unresolved variable unresolvedProperty Registers closure that runs when the type checker cannot find a property on the receiver unresolvedAttribute Registers closure that runs when the type checker cannot find an attribute on the receiver incompatibleAssignment Registers closure that runs when the type checker thinks that the right-hand side of an assignment is incompatible with the left-hand side incompatibleReturnType Registers closure that runs when the type checker thinks that a return value is incompatibe with the return type Expression categorization: isAnnotationConstantExpression Determines if argument is an AnnotationConstantExpression isArgumentListExpression Determines if argument is an ArgumentListExpression isArrayExpression Determines if argument is an ArrayExpression isAttributeExpression Determines if argument is an AttributeExpression isBinaryExpression Determines if argument is a BinaryExpression isBitwiseNegationExpression Determines if argument is a BitwiseNegationExpression isBooleanExpression Determines if argument is a BooleanExpression isCastExpression Determines if argument is a CastExpression isClassExpression Determines if argument is a ClassExpression isClosureExpression Determines if argument is a ClosureExpression isConstantExpression Determines if argument is a ConstantExpression isConstructorCallExpression Determines if argument is a ConstructorCallExpression isDeclarationExpression Determines if argument is a DeclarationExpression isElvisOperatorExpression Determines if argument is an ElvisOperatorExpression isEmptyExpression Determines if argument is an EmptyExpression isFieldExpression Determines if argument is a FieldExpression isGStringExpression Determines if argument is a GStringExpression isLambdaExpression Determines if argument is a LambdaExpression isListExpression Determines if argument is a ListExpression isMapExpression Determines if argument is a MapExpression isMapEntryExpression Determines if argument is a MapEntryExpression isMethodCallExpression Determines if argument is a MethodCallExpression isMethodPointerExpression Determines if argument is a MethodPointerExpression isMethodReferenceExpression Determines if argument is a MethodReferenceExpression isNamedArgumentListExpression Determines if argument is a NamedArgumentListExpression isNotExpression Determines if argument is a NotExpression isPostfixExpression Determines if argument is a PostfixExpression isPrefixExpression Determines if argument is a PrefixExpression isPropertyExpression Determines if argument is a PropertyExpression isRangeExpression Determines if argument is a RangeExpression isSpreadExpression Determines if argument is a SpreadExpression isSpreadMapExpression Determines if argument is a SpreadMapExpression isStaticMethodCallExpression Determines if argument is a StaticMethodCallExpression isTernaryExpression Determines if argument is a TernaryExpression isTupleExpression Determines if argument is a TupleExpression isUnaryMinusExpression Determines if argument is a UnaryMinusExpression isUnaryPlusExpression Determines if argument is a UnaryPlusExpression isVariableExpression Determines if argument is a VariableExpression General utility: Delegates to AbstractTypeCheckingExtension Imports static members of ClassHelper Imports static members of StaticTypeCheckingSupport
9005	This factory allows the generation of an import customizer.
9006	Enum for easy differentiation between call types
9007	Enum for easy differentiation between call types
9008	A ReaderSource for source strings.
9009	Implementers of this interface can be registered in the ProxyMetaClass for notifications about method calls for objects managed by the ProxyMetaClass.
9010	A closure which stores calls in a List so that method calls can be iterated over in a 'yield' style way
9011	Additional Java 16 based functions will be added here as needed.
9012	Compilation unit to only generate stubs.
9013	A LazyInitializable is an object that can be initialized lazily.
9014	This is an AST Node that provides some sort of looping mechanism.
9015	A cache backed by a ConcurrentLinkedHashMap
9016	This is a basic implementation of a map able to forget its values.
9017	Handles generation of code for the @MapConstructor annotation.
9018	Represents a memoize cache with its essential methods
9019	Message source backed up by one or more ResourceBundle instances for simple i18n support.
9020	Represents the length property of an array
9021	MetaMethod for mixed in classes
9022	Handles generation of code for the @Newify AST transform.
9023	A MetaMethod implementation where the underlying method is really a static helper method on some class but it appears to be an instance method on a class.
9024	A MetaMethod implementation where the underlying method is really a static helper method on some class.
9025	Handles generation of code for the @NullCheck annotation.
9026	Default impl that returns parentName and childName accordingly.
9027	Strategy for resolving a relationship property name.
9028	Util for object's operations with checks
9029	Intended target when @PackageScope is placed at the class level.
9030	A factory of parser plugin instances.
9031	An interface that adds the ability to intercept property getters/setters
9032	Dynamic groovy proxy for another object.
9033	An interface for things that can supply (and potentially resupply) a Reader on a source stream.
9034	Handles completion of code for the @RecordType annotation.
9035	Intended mode to use for records when using the @RecordType annotation (or record keyword).
9036	Represents a reference to a value
9037	Reflector creation helper.
9038	Utility class to add return statements.
9039	The tool to simulate running script files via groovy command
9040	Handles generation of code for the @Sealed annotation.
9041	Intended mode to use for sealed classes when using the @Sealed annotation (or sealed keyword).
9042	This factory allows the generation of a SecureASTCustomizer.
9043	Provides the source text for an assertion statement and translates coordinates in the original source text to coordinates relative to the assertion's (normalized) source text.
9044	Static compilation AST node metadata keys.
9045	Handles the implementation of the CompileStatic transformation.
9046	This enumeration is used by the AST transformations which rely on static type checking, either to store or to retrieve information from AST node metadata.
9047	Handles the implementation of the TypeChecked transformation.
9048	This class codes around a silly limitation of StringWriter which doesn't allow a StringBuffer to be passed in as a constructor for some bizarre reason.
9049	A ReaderSource for source strings.
9050	A class for error messages produced by the parser system.
9051	Base exception indicating a syntax error.
9052	This MetaBeanProperty will create a pseudo property whose value is bound to an object using weak references.
9053	A type checking extension that will take care of handling errors which are specific to traits.
9054	Transform try-with-resources to try-catch-finally Reference JLS "14.20.3.
9055	Represents a list of 2 typed Objects.
9056	Represents a list of 3 typed Objects.
9057	Represents a list of 4 typed Objects.
9058	Represents a list of 5 typed Objects.
9059	Represents a list of 6 typed Objects.
9060	Represents a list of 7 typed Objects.
9061	Represents a list of 8 typed Objects.
9062	This enumeration can be used whenever it is preferred to annotate a class as TypeChecked in general, but where only one or more methods are "dynamic".
9063	This class contains several transformers for used during method invocation.
9064	A ReaderSource for source files hosted at a URL.
9065	Various utility functions for use in the compiler.
9066	Indicates the visibility of a node.
9067	A class for warning messages.
9068	Represents a while (condition) { ...
9069	A base SecurityBuilder that ensures the object being built is only built one time.
9070	Callback interface that accepts a single input argument and returns no result.
9071	Adds a Filter that will generate a login page if one is not specified otherwise when using EnableWebSecurity.
9072	A SecurityConfigurer that can be exposed as a bean to configure the global AuthenticationManagerBuilder.
9073	Adds password management support.
9074	The standard order for PayloadInterceptor to be sorted.
9075	Allows configuring a shared PortMapper instance used to determine the ports when redirecting between HTTP and HTTPS.
9076	Allows for configuring a SecurityBuilder.
9077	Specifies the various session creation policies for Spring Security.
9078	Allows configuring a UserDetailsService within a AuthenticationManagerBuilder.
9079	XPath MessageSelector that tests if a provided value supports payloads of type Document or String.
9080	An implementation of Transformer that delegates to an OXM Unmarshaller.
9081	Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression.
9082	Feign contract method parameter processor.
9083	Specifies the parameter context.
9084	CookieValue annotation processor.
9085	Enumeration of pool concurrency policies.
9086	Enumeration of pooled connection re-use policies.
9087	MatrixVariable annotation processor.
9088	PathVariable parameter processor.
9089	SpringQueryMap parameter processor.
9090	RequestHeader parameter processor.
9091	RequestParam parameter processor.
9092	RequestPart parameter processor.
9093	The mode in which this registry is going to work with locks.
9094	Redis implementation of ConcurrentMetadataStore.
9095	Filter by anti-affinity-group-policy.
9096	Filter out unqualified Brokers, which are not entered into LoadBalancer for decision-making.
9097	Class that will return the broker host usage.
9098	Util class to search and load BrokerInterceptors.
9099	The broker load data reporter.
9100	JMX Bean interface for Compactor stats.
9101	This is a consumer selector based fixed hash range.
9102	Factory of InMemoryDelayedDeliveryTracker objects.
9103	Class that will return the broker host usage.
9104	This is a consumer selector based fixed hash range.
9105	This is a sticky-key consumer selector based user provided range.
9106	Placement strategy which selects a broker based on which one has the least resource usage with weight.
9107	Class that will return the broker host usage.
9108	The load data reporter, it publish the load data to load data storage.
9109	The filter and load balance context, use for delivering context between filter, scheduler and strategy.
9110	The base interface to schedule execute task in load manager.
9111	Load management component which determines the criteria for unloading bundles.
9112	MLPendingAckStore reply call back.
9113	Provider is for MLPendingAckStore.
9114	Interface which serves as a component for ModularLoadManagerImpl, flexibly allowing the injection of potentially complex strategies.
9115	Listener for NamespaceBundle ownership changes.
9116	The namespace unload strategy.
9117	The state of the pending ack handle PendingAckHandleState.
9118	Call back for pending ack reply.
9119	A representation of a message in a topic in its raw form (i.e.
9120	Usage "sense" for resource groups: publish and dispatch for now; may be more later (e.g., storage-monitoring) ToDo: "class" is vague; is there a better term to call this?
9121	The entities that might reference RGs are tenants, namespaces (and maybe topics, later).
9122	A validator to validate the schema data is well formed.
9123	Defines the possible states for service units.
9124	Service Unit(e.g.
9125	A Dispatcher that'll use StreamingEntryReader to read entries from ManagedLedger.
9126	Load shedding strategy that unloads any broker that exceeds the average resource utilization of all brokers by a configured threshold.
9127	The top k highest-loaded bundles' load data reporter.
9128	Stages of events currently supported.
9129	Types of events currently supported.
9130	The state of the topicTransactionBuffer TopicTransactionBuffer.
9131	A provider that provides TransactionBuffer.
9132	Provider of transaction pending ack store.
9133	Load shedding strategy that unloads bundles from the highest loaded brokers.
9134	Base class for AbstractAuthenticationToken implementations that expose common attributes between different OAuth 2.0 Access Token Formats.
9135	A representation of a Bearer Token Error.
9136	A factory for creating BearerTokenError instances that correspond to the registered Bearer Token Error Codes.
9137	An implementation of an AbstractOAuth2TokenAuthenticationToken representing a Jwt Authentication.
9138	Abstract superclass that may be used instead of implementing ContextMapper directly.
9139	A filter for a logical AND.
9140	The Type attribute indicates whether a field is regarded as binary based or string based by the LDAP JNDI provider.
9141	An AuthenticationSource is responsible for providing the principal (user DN) and credentials to be used when creating a new context.
9142	Implementations of this interface are capable of providing a base LDAP path.
9143	Abstract superclass for binary logical operations, that is "AND" and "OR" operations.
9144	A CompensatingTransactionOperationExecutor to manage a bind operation.
9145	Convenience implementation of AuthenticationErrorCallback that stores the given exception and provides a method for retrieving it.
9146	Abstract superclass for filters that compare values.
9147	Transaction object used by AbstractCompensatingTransactionManagerDelegate.
9148	Responsible for executing a single recorded operation as well as committing or rolling it back, depending on the transaction outcome.
9149	A CompensatingTransactionOperationManager implementation records and performs operations that are to be performed within a compensating transaction.
9150	And/or filter builder support for LdapQuery.
9151	A ContextSource is responsible for configuring and creating DirContext instances.
9152	A simple interface to be implemented to provide type conversion functionality.
9153	A NameClassPairCallbackHandler for counting all returned entries.
9154	Default implementation of TempEntryRenamingStrategy.
9155	Support class to provide BaseLdapPathSource functionality to ContextSource instances that act as proxies.
9156	Authentication strategy for LDAP DIGEST-MD5 SASL mechanism.
9157	A strategy to use when authenticating LDAP connections on creation.
9158	Keeps track of the transaction DirContext.
9159	Interface to be called in search by LdapTemplate before and after the actual search and enumeration traversal.
9160	Token Manager.
9161	Common interface for LDAP filters.
9162	Allows hard coded parts to be included in a search filter.
9163	Extends BasicAttributes to add specialized support for DNs.
9164	The specifications for the LdapClient.authenticate() request.
9165	The specifications for the LdapClient.bind(java.lang.String) request.
9166	The specifications for the LdapClient.listBindings(java.lang.String) request.
9167	The specifications for the LdapClient.list(java.lang.String) request.
9168	The specifications for the LdapClient.modify(java.lang.String) request.
9169	The specifications for the LdapClient.unbind(java.lang.String) request.
9170	Holds all information regarding a Ldap query to be performed.
9171	Do-nothing implementation of DirContextProcessor.
9172	Utility methods for working with LDAP transactions.
9173	A CompensatingTransactionOperationExecutor to manage a modifyAttributes operation.
9174	A filter for 'not'.
9175	A convenience class that combines NOT behavior with present behavior to allow the user to check for the non-existence of a attribute.
9176	A CompensatingTransactionOperationExecutor that performs nothing.
9177	Filter for logical OR.
9178	Filter that allows the user to check for the existence of a attribute.
9179	A CompensatingTransactionOperationExecutor to manage a rebind operation.
9180	A CompensatingTransactionOperationExecutor to manage a rename operation.
9181	Type safe definitions of search scopes.
9182	The default DirContextAuthenticationStrategy implementation, setting the DirContext environment up for 'SIMPLE' authentication, and specifying the user DN and password as SECURITY_PRINCIPAL and SECURITY_CREDENTIALS respectively in the authenticated environment before the context is created.
9183	DirContextProcessor implementation for managing the SortControl.
9184	Describes the input token stream.
9185	A proxy for ContextSource to make sure that the returned DirContext objects are aware of the surrounding transactions.
9186	A CompensatingTransactionOperationExecutor to manage an unbind operation.
9187	Abstract base class for Atom and RSS Feed message converters, using the ROME tools project.
9188	Exception to be thrown when an async request times out.
9189	Wrapper for a ClientHttpRequestFactory that buffers all outgoing and incoming streams in memory.
9190	Extension of CodecConfigurer for HTTP message reader and writer options relevant on the client side.
9191	Documented KeyValues for HTTP client observations.
9192	Represents a client-side reactive HTTP request.
9193	Represents a client-side HTTP response.
9194	Context that holds information for metadata collection during the client HTTP exchanges observations.
9195	Exposes the values of properties configured through CodecConfigurer.defaultCodecs() that are applied to default codecs.
9196	Registry and container for multipart HTTP message writers.
9197	Bootstrap listener to start up and shut down Spring's root WebApplicationContext.
9198	Filter to handle CORS pre-flight requests and intercept CORS simple and actual requests with a CorsProcessor, and to update the response, e.g.
9199	Utility class for CORS request handling based on the CORS W3C recommendation.
9200	Enum to represent multiple URI encoding strategies.
9201	Resolves Errors method arguments.
9202	Discovers @ExceptionHandler methods in a given class, including all of its superclasses, and helps to resolve a given Exception to the exception types supported by a given Method.
9203	WebHandler decorator that invokes one or more WebExceptionHandlers after the delegate WebHandler.
9204	Specialization of Part that represents an uploaded file received in a multipart request.
9205	WebHandlerDecorator that invokes a chain of WebFilters before invoking the delegate WebHandler.
9206	A ContentNegotiationStrategy that returns a fixed content type.
9207	LocaleContextResolver implementation that always returns a fixed locale and optionally time zone.
9208	Filter that parses form data for HTTP PUT, PATCH, and DELETE requests and exposes it as Servlet request parameters.
9209	Represents an event triggered for a form field.
9210	Strategy interface for resolving method parameters into argument values in the context of a given request.
9211	Filter that converts posted method parameters into HTTP methods, retrievable via HttpServletRequest.getMethod().
9212	Reactive WebFilter that converts posted method parameters into HTTP methods, retrievable via HttpRequest.getMethod().
9213	Represents an HTTP cookie as a name-value pair consistent with the content of the "Cookie" request header.
9214	Represents an HTTP request or response entity, consisting of headers and body.
9215	ServerHttpResponse decorator for HTTP HEAD requests.
9216	Exception thrown when the request handler cannot generate a response that is acceptable by the client.
9217	Exception thrown when a client POSTs, PUTs, or PATCHes content of a type not supported by request handler.
9218	Response extractor that uses the given entity converters to convert the response into a type T.
9219	Represents an HTTP request message, consisting of a method and a URI.
9220	Provides a convenient implementation of the HttpRequest interface that can be overridden to adapt the request.
9221	Factory to create a client proxy from an HTTP service interface with @HttpExchange methods.
9222	Adds initialization to a WebDataBinder via @InitBinder methods.
9223	Encode from an Object stream to a byte stream of JSON objects using Jackson 2.x.
9224	Factory to manage JDK HttpClient resources such as a shared Executor within the lifecycle of a Spring ApplicationContext.
9225	Interface for web-based locale context resolution strategies that allows for both locale context resolution via the request and locale context modification via the HTTP exchange.
9226	Base class for Encoder, Decoder, HttpMessageReader, or HttpMessageWriter that uses a logger and shows potentially sensitive request data.
9227	Implementation of HttpMessageConverter that can read and write XML using Jackson 2.x extension component for reading and writing XML encoded data.
9228	HttpInputMessage that can eventually stores a Jackson view that will be used to deserialize the message.
9229	A factory delegate for resolving MediaType objects from Resource handles or filenames.
9230	Strategy to resolve a MediaType to a list of file extensions — for example, to resolve "application/json" to "json".
9231	A ConversionNotSupportedException raised while resolving a method argument.
9232	A TypeMismatchException raised while resolving a controller method argument.
9233	Exception for errors that fit response status 405 (method not allowed).
9234	ServletRequestBindingException subclass that indicates that a matrix variable expected in the method parameters of an @RequestMapping method is not present among the matrix variables extracted from the URL.
9235	ServletRequestBindingException subclass that indicates that a path variable expected in the method parameters of an @RequestMapping method is not present among the URI variables extracted from the URL.
9236	ServletRequestBindingException subclass that indicates that a request cookie expected in the method parameters of an @RequestMapping method is not present.
9237	ServletRequestBindingException subclass that indicates that a request header expected in the method parameters of an @RequestMapping method is not present.
9238	ServerWebInputException subclass that indicates a missing request value such as a request header, cookie value, query parameter, etc.
9239	ServletRequestBindingException subclass that indicates a missing parameter.
9240	Provides additional methods for dealing with multipart content within a servlet request, allowing to access uploaded files.
9241	Extension of the WebRequest interface, exposing the native request and response objects in a generic fashion.
9242	Exception for errors that fit response status 406 (not acceptable).
9243	Strategy that resolves the requested content type from a query parameter.
9244	Representation for a part in a "multipart/form-data" request.
9245	Represents an event for a "multipart/form-data" request.
9246	Path segment element.
9247	Holder for URI variables and path parameters (matrix variables) extracted based on the pattern for a given matched path.
9248	Exception that is thrown when there is a problem with the pattern being parsed.
9249	The messages that can be included in a PatternParseException when there is a parse failure.
9250	FactoryBean that creates a java.net.Proxy.
9251	Overrides HttpServletResponse.sendRedirect(String) and handles it by setting the HTTP status and "Location" headers, which keeps the Servlet container from re-writing relative redirect URLs into absolute ones.
9252	ServerHttpRequest implementation that accesses one part of a multipart request.
9253	Request-backed Scope implementation.
9254	Defines a builder that adds a body to the response entity.
9255	Strategy interface used by the RestTemplate to determine whether a particular response has an error or not.
9256	Subclass of ErrorResponseException that accepts a "reason", and by default maps that to the "detail" of the ProblemDetail.
9257	Convenient superclass for application classes that need REST access.
9258	Extension of CodecConfigurer for HTTP message reader and writer options relevant on the server side.
9259	Exception for an HttpStatus.INTERNAL_SERVER_ERROR that exposes extra information about a controller method that failed, or a controller method argument that could not be resolved.
9260	Documented KeyValues for the HTTP server observations for Servlet-based web applications.
9261	Documented KeyValues for the HTTP server observations for reactive web applications.
9262	WebFilter that creates observations for HTTP exchanges.
9263	Represents a server-side HTTP response.
9264	A mutable builder for a SseEvent.
9265	Exporter that takes Spring-defined objects and exposes them as ServletContext attributes.
9266	FactoryBean that fetches a specific, existing ServletContext attribute.
9267	BeanPostProcessor implementation that passes the ServletContext to beans that implement the ServletContextAware interface.
9268	FactoryBean that retrieves a specific ServletContext init parameter (that is, a "context-param" defined in web.xml).
9269	Simple request logging filter that writes the request URI (and optionally the query string) to the ServletContext log.
9270	Special DataBinder to perform data binding from servlet request parameters to JavaBeans, including support for multipart files.
9271	Strategy interface for storing model attributes in a backend session.
9272	Simple interface that can be injected into handler methods, allowing them to signal that their session processing is complete.
9273	Simple implementation of the SessionStatus interface, keeping the complete flag as an instance variable.
9274	Convenient base class for self-autowiring classes that gets constructed within a Spring-based web application.
9275	A holder for SSL session information.
9276	ServerWebInputException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.
9277	ServletRequestBindingException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.
9278	Factory to create UriBuilder instances with shared configuration such as a base URI, an encoding mode strategy, and others across all URI builder instances created through a factory.
9279	Defines methods for expanding a URI template with variables.
9280	CorsConfigurationSource that uses URL patterns to select the CorsConfiguration for a request.
9281	WebHandler that decorates and delegates to another WebHandler.
9282	Special DataBinder to perform data binding from web request parameters to JavaBeans, including support for multipart files.
9283	Interface for general web request interception.
9284	Contract for session ID resolution strategies.
9285	Strategy for WebSession persistence.
9286	Sub-interface of ReactiveOutputMessage that has support for "zero-copy" file transfers.
9287	Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.
9288	Abstract base for EndpointMapping implementations that map classes tagged with an annotation.
9289	Abstract base class for DestinationProvider implementations that cache destination URI.
9290	Abstract implementation of the MimeMessage interface.
9291	Abstract base class for EndpointMappings that resolve qualified names as registration keys.
9292	Represents an attachment to a MimeMessage
9293	Workflow interface that allows for customized client-side message interception.
9294	Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.
9295	Implementation of the PoxMessage interface that is based on a DOM Document.
9296	Interface that must be implemented for each endpoint type to handle a message request.
9297	Endpoint invocation chain, consisting of an endpoint object and any preprocessing interceptors.
9298	Represents an Endpoint Reference, as defined in the WS-Addressing specification.
9299	Sub-interface of WebServiceConnection that is aware of any Fault messages received.
9300	Sub-interface of WebServiceMessage that can contain special Fault messages.
9301	Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.5+ SoapFault annotation.
9302	Interface to define access to header information for certain WebServiceConnection implementations.
9303	Helper class for endpoints and endpoint mappings that use marshalling.
9304	Implementation of MethodArgumentResolver that supports MessageContext arguments.
9305	Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.
9306	Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.
9307	Strategy interface used to resolve method parameters into arguments.
9308	Strategy interface used to handle method return values.
9309	Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.
9310	Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.
9311	Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.
9312	Client-side interceptor that validates the contents of WebServiceMessages using a schema.
9313	Interceptor that validates the contents of WebServiceMessages using a schema.
9314	SAX XMLReader that reads from a SAAJ Node.
9315	The default Wsdl11Definition implementation.
9316	Subinterface of SoapHeader that exposes SOAP 1.2 functionality.
9317	SOAP-specific subclass of the EndpointInvocationChain.
9318	Represents the Envelope element in a SOAP message.
9319	Thrown by SoapFaultMessageResolver when the response message has a fault.
9320	Defines properties for a SOAP Fault.
9321	Represents the detail element in a SOAP fault.
9322	Represents the content for an individual SOAP detail entry in a SOAP Message.
9323	Exception resolver that allows for mapping exception class names to SOAP Faults.
9324	Implementation of MethodArgumentResolver that supports resolving SoapHeaderElement parameters.
9325	Sub-interface of WebServiceMessageFactory which contains SOAP-specific properties and methods.
9326	Implementation of MethodArgumentResolver that supports SoapMessage, SoapBody, SoapEnvelope, and SoapHeader.
9327	Contains various utility methods for handling SOAP messages.
9328	Defines the contract for payloads that can be written directly to a XMLStreamWriter.
9329	Simple holder class that associates a TransportContext instance with the current thread.
9330	A TransportOutputStream is an output stream with MIME input headers.
9331	Implementation of the EndpointMapping interface to map from the full request URI or request URI path to endpoint beans.
9332	Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.
9333	Represents a protocol-agnostic XML message.
9334	The WebServiceMessageFactory serves as a factory for WebServiceMessages.
9335	Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.
9336	Miscellaneous utilities for web applications.
9337	Defines callback methods to customize the Java-based configuration for Spring Web Services enabled via @EnableWs.
9338	Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.
9339	Implementation of the Wsdl11Definition based on WSDL4J.
9340	Implementation of the EndpointMapping interface that uses the JAXB2 XmlRootElement annotation to map methods to request payload root elements.
9341	The base class for rewriters.
9342	An QuadHolder that creates quads from a collection or iterator of triples.
9343	Interface that defines the ConstructClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rConstructTemplate
9344	The handler for construct clauses.
9345	Interface that defines the DatasetClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rDatasetClause
9346	The base interface for handlers.
9347	An QuadHolder that manages extracts all statements from a model as quads.
9348	The order for the ORDER BY modifiers.
9349	The prefix handler for the updatebuilder class
9350	An QuadHolder that manages AbstractQueryBuilder data.
9351	An QuadHolder that contains Quads from a collection or iterator..
9352	An interface that defines a holder of quads.
9353	Interface that defines the SelectClause as per http://www.w3.org/TR/2013/REC-sparql11-query-20130321/#rSelectClause
9354	A QuadHolder implementation for a single quad.
9355	The various strategies for handling metadata emitted by multiple parsers.
9356	Common handler types for content.
9357	Very slight modification of Commons' BoundedInputStream so that we can figure out if this hit the bound or not.
9358	Content type detector that combines multiple different detection mechanisms.
9359	Tika container extractor interface.
9360	Decrypts the incoming document stream and delegates further parsing to another parser instance.
9361	Date related utility methods and constants
9362	Loads EmbeddedStreamTranslators via service loading.
9363	A translator which picks the first available Translator implementations available through the service provider mechanism.
9364	Content handler decorator that prevents the EmbeddedContentHandler.startDocument() and EmbeddedContentHandler.endDocument() events from reaching the decorated handler.
9365	Tika embedder interface
9366	Dummy parser that always produces an empty XHTML document without even attempting to parse the given document stream.
9367	Dummy translator that always declines to give any text.
9368	Dummy parser that always throws a TikaException without even attempting to parse the given document stream.
9369	HandlerConfig.PARSE_MODE.RMETA "recursive metadata" is the same as the -J option in tika-app and the /rmeta endpoint in tika-server.
9370	A set of Hex encoding and decoding utility methods.
9371	SAX content handler that updates a language detector based on all the received character content.
9372	Writer that builds a language profile based on all the written content.
9373	Simple PipesReporter that logs everything at the debug level.
9374	Final evaluation state of a .../node() XPath expression.
9375	Tika parser interface.
9376	An implementation of ContainerExtractor powered by the regular Parser API.
9377	Reader for the text content from a given binary stream.
9378	Class used to extract phone numbers while parsing.
9379	This is called asynchronously by the AsyncProcessor.
9380	This is a helper class that wraps a parser in a recursive handler.
9381	This is the default implementation of AbstractRecursiveParserWrapperHandler.
9382	Wraps an input stream, reading it only once, but making it available for rereading an arbitrary number of times.
9383	Service Loading and Ordering related utils
9384	This class provides a collection of the most important technical standard organizations.
9385	This is to be used to limit the amount of metadata that a parser can add based on the StandardWriteFilter.maxTotalEstimatedSize, StandardWriteFilter.maxFieldSize, StandardWriteFilter.maxValuesPerField, and StandardWriteFilter.maxKeySize.
9386	A content handler decorator that tags potential exceptions so that the handler that caused the exception can easily be identified.
9387	A SAXException wrapper that tags the wrapped exception with a given object reference.
9388	A file might contain different types of embedded documents.
9389	Interface for Translator services.
9390	Content handler decorator that simplifies the task of producing XMP output.
9391	Applications may provide an implementation of this interface to filter the discovered WebSocket endpoints that are deployed.
9392	An enumeration that defines a few standard naming conventions for JSON field names.
9393	A class representing a JSON null value.
9394	Context for serialization that is passed to a custom serializer during invocation of its JsonSerializer.serialize(Object, Type, JsonSerializationContext) method.
9395	A streaming parser that allows reading of multiple JsonElements from the specified reader asynchronously.
9396	A structure, name or value type in a JSON-encoded string.
9397	Defines the expected format for a long or Long type when it is serialized.
9398	Result of a filter check.
9399	An enumeration that defines two standard number reading strategies and a couple of strategies to overcome some historical Gson limitations while deserializing numbers as Object and Number.
9400	Base class for the *Chunk implementation to reduce duplication.
9401	Different types of socket states to react upon.
9402	Abstract base class for ObjectCreationFactory implementations.
9403	Base class for a WebResourceSet based on a single, rather than nested, archive.
9404	Intended for use by a Valve to indicate that the Valve provides access logging.
9405	A helper class that wraps several AccessLog instances.
9406	ActionCodes represent callbacks from the servlet container to the coyote connector.
9407	This the NIO2 based protocol handler implementation for AJP.
9408	This the NIO based protocol handler implementation for AJP.
9409	Imported copy of the ArrayStack class from Commons Collections, which was the only direct dependency from Digester.
9410	This class implements some basic ASCII character handling functions.
9411	Provides a mechanism for the Coyote connectors to communicate with the AsyncContext.
9412	A FileHandler implementation that uses a queue of log entries.
9413	This Realm is intended for use with Authenticator implementations (SSLAuthenticator, SpnegoAuthenticator) that authenticate the user as well as obtain the user credentials.
9414	NIO based character decoder.
9415	Authenticator supporting the BASIC authentication method.
9416	Parser for an HTTP Authorization header for BASIC authentication as per RFC 2617 section 2, and the Base64 encoded credentials as per RFC 2045 section 6.8.
9417	JNDI object factory that creates an instance of BasicDataSource that has been configured based on the RefAddr values of the specified Reference, which must match the names and data types of the BasicDataSource bean properties with the following exceptions: connectionInitSqls must be passed to this factory as a single String using semicolon to delimit the statements whereas BasicDataSource requires a collection of Strings.
9418	This class implements an output stream in which the data is written into a byte array.
9419	Class that extends ServletOutputStream, used as a wrapper from within SsiInclude
9420	When we need more space we'll either grow the buffer ( up to the limit ) or send it to a channel.
9421	A byte message is not serialized and deserialized by the channel instead it is sent as a byte array By default Tribes uses java serialization when it receives an object to be sent over the wire.
9422	NIO based character encoder.
9423	Default implementation of a JASPIC CallbackHandler.
9424	Rule implementation that saves a parameter for use by a surrounding CallMethodRule.
9425	Strategy for obtaining and printing the current call stack.
9426	Utility methods for CallStack.
9427	Rule implementation that creates an SSLHostConfigCertificate.
9428	A channel exception is thrown when an internal error happens somewhere in the channel.
9429	An interface to listens to incoming messages from a channel.
9430	Utility class that attempts to map from a Locale to the corresponding character set to be used for interpreting input text (or generating output text) when the Content-Type header does not include one.
9431	Ant task that checks that all the files in the given fileset have end-of-line delimiters that are appropriate.
9432	Utility class for building class loaders for Catalina.
9433	Interface of an object, which may be closed.
9434	Receive replicated SessionMessage form other cluster node.
9435	Cluster valves are a simple extension to the Tomcat valve architecture with a small addition of being able to reference the cluster component in the container it sits in.
9436	This class is used to obtain InputStreams for configuration files from a given location String.
9437	Rule implementation that creates a connector.
9438	A ModelMBean implementation for the org.apache.coyote.tomcat5.CoyoteConnector component.
9439	Constants.
9440	Decoupling interface which specifies that an implementing class is associated with at most one Container instance.
9441	General event for notifying listeners of significant changes on a Container.
9442	A ContainerServlet is a servlet that has access to Catalina internal functionality, and is loaded from the Catalina class loader instead of the web application class loader.
9443	Implementation of LifecycleListener that will create context naming information environment entries.
9444	A ModelMBean implementation for the org.apache.tomcat.util.descriptor.web.ContextResourceLink component.
9445	A ModelMBean implementation for the org.apache.tomcat.util.descriptor.web.ContextResource component.
9446	Representation of an application resource reference, as represented in an <res-env-refy> element in the deployment descriptor.
9447	Defines timing options for responding to requests that contain a '100-continue' expectations.
9448	Enumerates varies types of CORS requests.
9449	Coyote implementation of the servlet output stream.
9450	This interface is used by the Realm to compare the user provided credentials with the credentials stored in the Realm for that user.
9451	Store server.xml Element CredentialHandler
9452	Custom subclass of ObjectInputStream that loads from the class loader for this web application.
9453	Destroy context provided to object factories via destroyObject and invalidateObject methods.
9454	Authenticator supporting the DIGEST authentication method.
9455	This enum exists because RFC 7616 and Java use different names for some digests.
9456	This enumeration lists the different types of dispatches that request processing can trigger.
9457	A DisposableConnectionFacade object is the top most interceptor that wraps an object of type PooledConnection.
9458	Interface implemented by session managers that do not keep a complete copy of all sessions in memory but do know where every session is.
9459	A MembershipProvider that uses DNS to retrieve the members of a cluster.
9460	Object factory for EJBs.
9461	Simple ELContextWrapper for runtime evaluation of EL w/ dynamic FunctionMappers
9462	The element_value structure is documented at https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-4.html#jvms-4.7.16.1
9463	An Engine is a Container that represents the entire Catalina servlet engine.
9464	Startup event listener for an Engine that configures the properties of that Engine, and the associated defined contexts.
9465	The ErrorHandler class is used when sending messages that are sent asynchronously and the application still needs to get confirmation when the message was sent successfully or when a message errored out.
9466	Interface for handling JSP parse and javac compilation errors.
9467	Representation of an error page element for a web application, as represented in a <error-page> element in the deployment descriptor.
9468	Utilities for handling Throwables and Exceptions.
9469	Utilities for handling Throwables and Exceptions.
9470	Utilities for handling Throwables and Exceptions.
9471	Duration unit
9472	Expiration configuration starting point.
9473	Extension to the RpcCallback interface.
9474	If the main resources are packaged as a WAR file then any JARs will be extracted to the work directory and used from there.
9475	Rule implementation that uses an ObjectCreationFactory to create a new object which it pushes onto the object stack.
9476	A simple implementation of a blocking queue with fairness waiting.
9477	Utility class to generate HTTP dates.
9478	Implementation of Handler that appends log messages to a file named {prefix}{date}{suffix} in a configured directory.
9479	This class provides support for accessing the headers for a file or form item that was received within a multipart/form-data POST request.
9480	Default implementation of the FileItemHeaders interface.
9481	Interface that will indicate that FileItem or FileItemStream implementations will accept the headers read for the item.
9482	Thrown to indicate that A files size exceeds the configured maximum.
9483	High level API for processing file uploads.
9484	Base class for filters that provides generic initialisation and a simple no-op destruction.
9485	Ant task that implements the /findleaks command, supported by the Tomcat manager application.
9486	Concrete implementation of Role for a UserDatabase.
9487	A ModelMBean implementation for the org.apache.catalina.Group component.
9488	Simple Valve that responds to cloud orchestrators health checks.
9489	Concrete implementation of the UserDatabase interface considers all directories in a directory whose pathname is specified to our constructor to be "home" directories for those users.
9490	InputBuffer for HTTP that provides request header parsing as well as transfer encoding.
9491	HTTP/1.1 protocol implementation using NIO2.
9492	HTTP/1.1 protocol implementation using NIO.
9493	This class is only for internal use in the protocol implementation.
9494	Input filter interface.
9495	Specifies a class loader capable of being decorated with ClassFileTransformers.
9496	Generate Interceptor Element
9497	This interface is implemented by clients of the JarScanner to enable them to receive notification of a discovered JAR.
9498	Jasper-specific CompositeELResolver that optimizes certain functions to avoid unnecessary resolver calls.
9499	Class loader for loading servlet class files (corresponding to JSP files) and tag handler class files (corresponding to tag files).
9500	Represents a Java class, i.e., the data structures, constant pool, fields, methods and commands contained in a Java .class file.
9501	Context factory for the "java:" namespace.
9502	Access JMX JSR 160 MBeans Server.
9503	Access JMX JSR 160 MBeans Server.
9504	Query for Mbeans.
9505	unregister an MBean at JMX JSR 160 MBeans Server.
9506	Ant task that implements the JMX Get command (/jmxproxy/?
9507	This servlet will dump JMX attributes in a simple format and implement proxy services for modeler.
9508	Ant task that implements the JMX Query command (/jmxproxy/?
9509	Ant task that implements the JMX Set command (/jmxproxy/?
9510	Access log valve derivative that rewrites entries as JSON.
9511	Handles the jsp-config element in WEB_INF/web.xml.
9512	The list of valid states for components that implement Lifecycle.
9513	Store Loader Element.
9514	An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.
9515	The ManagedDataSource is a PoolingDataSource that creates ManagedConnections.
9516	Store server.xml Manager element
9517	This is a utility class to match file globs.
9518	Inner class that represents a member entry
9519	The MembershipListener interface is used as a callback to the membership service.
9520	EXPERIMENTAL AND NOT YET COMPLETE!
9521	Naming enumeration implementation.
9522	Naming enumeration implementation.
9523	Store server.xml elements Resources at context and GlobalNamingResources
9524	A class representing a CIDR netmask.
9525	An Authenticator and Valve implementation that checks only security constraints not involving user authentication.
9526	CallStack strategy using no-op implementations of all functionality.
9527	Internal configuration information for a Notification descriptor.
9528	Minimal Realm implementation that always returns null when an attempt is made to validate a user name and password.
9529	Rule implementation that creates a new object and pushes it onto the object stack.
9530	Interface for use with FactoryCreateRule.
9531	Provides same information as default log format but on a single line to make it easier to grep the logs.
9532	Output buffer.
9533	Output filter.
9534	Concrete implementation of the UserDatabase interface that processes the /etc/passwd file on a Unix system.
9535	Base implementation (client and server have different concrete implementations) of the wrapper that converts a POJO instance into a WebSocket endpoint instance.
9536	Provides access to APR memory pools which are used to manage memory allocations for natively created instances.
9537	A DelegatingCallableStatement that cooperates with PoolingConnection to implement a pool of CallableStatements.
9538	A DelegatingPreparedStatement that cooperates with PoolingConnection to implement a pool of PreparedStatements.
9539	Provides all possible states of a PooledObject.
9540	Extension of DefaultPooledObject to wrap pooled soft references.
9541	Statement types.
9542	Implementation of LifecycleListener that will populate the context's role mapping from a properties file.
9543	Implement a map for the txt: and rnd: mod_rewrite capabilities.
9544	Store server.xml Element Realm
9545	Utilities for Managing Serialization and Reflection
9546	Interface for modeler MBeans.
9547	All-to-all replication for a hash map implementation.
9548	Abstracts access to the request information needed for file uploads.
9549	Object factory for Resources env.
9550	Object factory for Resources.
9551	Extended implementation of HashSet that includes a locked property.
9552	Interface for user defined lookup/replacement logic that can be defined in a rewrite.config file by a RewriteMap directive.
9553	Abstract representation of a security role, suitable for use in environments like JAAS that want to deal with Principals.
9554	The RpcCallback interface is an interface for the Tribes channel to request a response object to a request that came in.
9555	A very simple thread pool class.
9556	Util class to protect Catalina against package access and insertion.
9557	A CallStack strategy using a SecurityManager.
9558	Interface to send data to proxies.
9559	Provides access to the request information needed for a request made to an HTTP servlet.
9560	ServletResponseWrapper used by the JSP 'include' action.
9561	Session cluster message
9562	Ant task that implements the /sessions command supported by the Tomcat manager application.
9563	Utility methods on HttpSessions...
9564	Rule implementation that calls a method on the (top-1) (parent) object, passing the top object (child) as an argument.
9565	Basic implementation primarily intended for use when using third-party ServerAuthModule implementations that only provide the module.
9566	This exception is thrown, if a requests permitted size is exceeded.
9567	Defines events that occur per socket that require further processing by the container.
9568	Filter to process SSI requests within a webpage.
9569	Provides a factory and base implementation for the Tomcat specific mechanism that allows alternative SSL/TLS implementations to be used without requiring the implementation of a full JSSE provider.
9570	Defines an interface to interact with SSL sessions.
9571	Provides a common interface for SSLImplementations to create the necessary JSSE implementation objects for TLS connections created via the JSSE API.
9572	Store server.xml Server element and children ( Listener,GlobalNamingResource,Service)
9573	This servlet will display a complete status of the HTTP/1.1 connector.
9574	Rule that creates a new IStoreFactory instance, and associates it with the top object on the stack (which must implement IStoreFactory).
9575	XML Format
9576	An internationalization / localization helper class which reduces the bother of handling ResourceBundles and takes care of the common cases of message formatting which otherwise require the creation of Object arrays and such.
9577	Converts String to and from bytes using the encodings required by the Java specification.
9578	A LifecycleListener that triggers the renewal of threads in Executor pools when a Context is being stopped to avoid thread-local related memory leaks.
9579	CallStack strategy that uses the stack trace from a Throwable.
9580	Helper class for wrapping existing servlets.
9581	Allows pooled objects to make information available about when and how they were used available to the object pool.
9582	Object factory for User transactions.
9583	Interceptor that traps any unhandled exception types and throws an exception that has been declared by the method called, or throw an SQLException if it is declared.
9584	Ant task to convert a given set of files from Text to HTML.
9585	All URL decoding happens here.
9586	Log mode for the next log message.
9587	A ModelMBean implementation for the org.apache.catalina.User component.
9588	A Valve is a request processing component associated with a particular Container.
9589	The WarWatcher watches the deployDir for changes made to the directory (adding new WAR files->deploy or remove WAR files->undeploy) and notifies a listener of the changes made.
9590	RuleSet for processing the contents of a web application deployment descriptor (/WEB-INF/web.xml) resource.
9591	In normal usage, this ServletContextListener does not need to be explicitly configured as the WsSci performs all the necessary bootstrap and installs this listener in the ServletContext.
9592	Handles the initial HTTP connection for WebSocket connections.
9593	WAITING - not suspended Server case: waiting for a notification that data is ready to be read from the socket, the socket is registered to the poller Client case: data has been read from the socket and is waiting for data to be processed PROCESSING - not suspended Server case: reading from the socket and processing the data Client case: processing the data if such has already been read and more data will be read from the socket SUSPENDING_WAIT - suspended, a call to suspend() was made while in WAITING state.
9594	XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.
9595	Used to pass data to the methods of AsyncListener.
9596	Enumeration of dispatcher types.
9597	Equivalent of HttpConstraint for programmatic configuration of security constraints.
9598	Objects that are bound to a session may listen to container events notifying them that sessions will be passivated and that session will be activated.
9599	This listener interface can be implemented in order to get notifications of changes to the attribute lists of sessions within this web application.
9600	Events of this type are either sent to an object that implements HttpSessionBindingListener when it is bound or unbound from a session, or to an HttpSessionAttributeListener that has been configured in the deployment descriptor when any attribute is bound, unbound or replaced in a session.
9601	Causes an object to be notified when it is bound to or unbound from a session.
9602	Implementations of this interface are notified of changes to the list of active sessions in a web application.
9603	Interface between the HTTP upgrade process and the new protocol.
9604	This interface exposes the JSP specific configuration information obtain ed from the deployment descriptors.
9605	Represents the ways that a request can be mapped to a servlet
9606	The programmatic equivalent of MultipartConfig used to configure multi-part handling for a Servlet when registering a Servlet via code.
9607	Receives notification of read events when using non-blocking IO.
9608	Defines an object that receives requests from the client and sends them to any resource (such as a servlet, HTML file, or JSP file) on the server.
9609	This is the event class for notifications about changes to the attributes of the servlet context of a web application.
9610	Implementations of this interface receive notifications of changes to the attribute list on the servlet context of a web application.
9611	Implementations of this interface receive notifications about changes to the servlet context of the web application they are part of.
9612	Provides an input stream for reading binary data from a client request, including an efficient readLine method for reading data one line at a time.
9613	Interface through which a Servlet may be further configured.
9614	This is the event class for notifications of changes to the attributes of the servlet request in an application.
9615	A ServletRequestAttributeListener can be implemented by the developer interested in being notified of request attribute changes.
9616	Events of this kind indicate lifecycle events for a ServletRequest.
9617	A ServletRequestListener can be implemented by the developer interested in being notified of requests coming in and out of scope in a web component.
9618	Represents the two possible values of the empty role semantic, active when a list of role names is empty.
9619	Represents the two possible values of data transport, encrypted or not.
9620	The programmatic equivalent of ServletSecurity used to configre security constraints for a Servlet.
9621	Defines the permitted options for configuring the session tracking mode.
9622	Represents a taglib descriptor definitions in the deployment descriptor.
9623	Defines an exception that a servlet or filter throws to indicate that it is permanently or temporarily unavailable.
9624	The interface used by an HttpUpgradeHandler to interact with an upgraded HTTP connection.
9625	Receives notification of write events when using non-blocking IO.
9626	Class representing an abstract gallery dialog action.
9627	Abstract class for HTTP imports.
9628	Class to export user.
9629	Abstract class for actions to display a JSP file in a vaadin window.
9630	Abstract base class used for converting from CmsLogEntry instances to the necessary changes in the user's publish list.
9631	A workplace menu item.
9632	Abstract superclass for preferences.
9633	Abstract thread to keep track of operation progress.
9634	An enum representing the age of a publish list resource.
9635	Abstract implementation of the interface I_CmsRepositorySession to provide the functionality of filtering items.
9636	Abstract superclass for menu item visibility checks.
9637	Workplace action only visible in the toolbar context menus, not within the file table.
9638	An app navigation entry.
9639	Abstract implementation of the content editor change handler.
9640	Base class for XML content value implementations that require only a simple XML cdata text node.
9641	Base class for XML content value implementations that require only a simple XML plain text node.
9642	The client messages class for the SEO dialog.
9643	The acacia XML content editor.
9644	Parses the HTTP Accept-Language header as per section 14.4 of RFC 2068 (HTTP 1.1 header field definitions) and creates a sorted list of Locales from it.
9645	Account info bean.
9646	Account info fields.
9647	A post create handler that adds categories to newly created resources (that are not a copy of an existing resource).
9648	Contains the replacements (and titles of the replacements) for a single type.
9649	Bean for additional site-map entry information.
9650	Additional info bean.
9651	Represents the value of an attribute, with additional information about where the value originated from.
9652	Represents a sequence of inherited module/sitemap configurations, together with an index into that list.
9653	JSON property name constant.
9654	A status enum for the initialization status.
9655	Stores information about the container page which was last edited, so we can jump back to it later.
9656	Validates the user passwords in with advanced password requirements.
9657	Provides the specific constants, members and helper methods to generate the content of the download gallery dialog used in the XML content editors, WYSIWYG editors and context menu.
9658	A bean which contains the information for creating an alias.
9659	A class used to keep track of which user is editing the alias table from which sites.
9660	This class is used for filtering aliases in database operations.
9661	A class used for storing alias import results by key.
9662	A bean representing the result of trying to import a single alias.
9663	The status for the result of an alias import operation.
9664	The class used for transmitting alias data to the server for serving.
9665	Describes a mapping rule that selects a different site root based on whether the requested path matches a set of prefixes or not.
9666	Bean representing a category for workplace apps.
9667	Displays all available app.
9668	Widget used to displays a nested hierarchy of app categories and apps.
9669	Enum representing caching status of a view.
9670	The app visibility status.
9671	Comparison of resource attributes.
9672	Displays changes between attributes (size, modification date, etc.
9673	The scroll position CSS shared state.
9674	Availability dialog.
9675	The available window widths.
9676	Manages a set of benchmark timers.
9677	The bread crumb state.
9678	The content mode describes how the text used for a broadcast message should be interpreted.
9679	Contains the broadcast message data.
9680	Extending the browser frame class to allow setting of the iFrame name attribute.
9681	The browser frame state.
9682	A bean representing a set of select options.
9683	Modes to run this app.
9684	The category select dialog.
9685	The category tree.
9686	Recursive category tree entry.
9687	A configuration bean representing a <ChangeHandler> element configured in an XSD's field settings.
9688	Dialog used to change the password.
9689	Dialog for changing the resource type.
9690	The change type dialog action.
9691	A bean containing a date, both as a 'long' value and a user-readable string representation.
9692	Client side lock class.
9693	An enum used for addressing a specific value in a property.
9694	An enum for the edit status of the entry.
9695	An enum for the entry type.
9696	Helper class to deal with loading and saving user preferences from the ADE user interface.
9697	Bean that represents a client variant of a template context.
9698	Client-side bean which holds information about a client variant of a template context.
9699	The element delte modes.
9700	Enum representing the different ways dropping elements on a container page can be handled.
9701	The available editor themes.
9702	Helper class used to determine which resources from a collector list should be included in a publish list.
9703	Converts column values to the correct types.
9704	Bean which holds the necessary data for complex value widgets in the Acacia editor.
9705	Container wrapping a single UI component.
9706	Utils to read and update the list configuration.
9707	Enum representing how filter queries should be combined in a search.
9708	A single item of the ADE file type configuration.
9709	Dialog to confirm flush without any options.
9710	The model group states.
9711	Action element for container-page editor includes.
9712	Enum representing the element copy mode.
9713	Gallery data loaded initially for the 'Add' menu in the page editor.
9714	Bean containing the 'context' of the edited container page for use in RPC calls.
9715	'Wrapper' around XML container page used for programmatic editing operations on container pages.
9716	The content editor action element.
9717	Widget display type evaluation rules.
9718	ContextMenuOpenedOnComponentEvent is an event fired by the context menu when it's opened from a component.
9719	ContextMenuOpenedOnTableFooterEvent is an event that is fired by the context menu when it's opened by clicking on table footer
9720	ContextMenuOpenedOnTableHeaderEvent is an event fired by the context menu when it's opened by clicking on table header row.
9721	ContextMenuOpenedOnTableRowEvent is an event that is fired when context menu is opened by clicking on table row.
9722	ContextMenuOpenedOnTreeItemEvent is an event fired by the context menu when it's opened by clicking on tree item.
9723	Handles inline editing within the file table.
9724	Class used to manage multiple context menu item providers through a single instance.
9725	The copy move dialog action.
9726	The copy/move actions.
9727	The dialog mode.
