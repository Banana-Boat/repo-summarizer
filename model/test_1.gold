9728	Action for the 'copy page' dialog.
9729	The copy to clip-board/select text button shared state.
9730	The copy to project dialog action.
9731	A enumeration for the ADE context.
9732	The available client modules.
9733	Bean containing the needed data when creating a new resource.
9734	This class represents the definition of a column for the table widget used to select data items provided by an I_CmsDataView implementation.
9735	The column type.
9736	Encodes/decodes the configuration passed to the data view popup as a request parameter.
9737	Class representing the configuration passed to the Vaadin data view dialog by the client.
9738	Represents the result of a search query returned by an implementation of I_CmsDataView.
9739	Complex widget for opening selecting data from a data source implementing the I_CmsDataView interface.
9740	Convenience subclass of PopupDateField which comes preconfigured with a resolution and validation error message.
9741	Comparator for sorting resource objects based on dates.
9742	Session provider implementation.
9743	A default implementation of I_CmsDbContextFactory.
9744	Class for the database export function.
9745	Enumeration to distinguist between http- and server import.
9746	Class for the property definition app.
9747	App for the remove publish-locks function.
9748	Used to signal sql related issues.
9749	Class for the database static export app.
9750	The CmsDecorationMap is the object representation of a single decoartion file.
9751	The CmsDecorationObject defines a single text decoration.
9752	Default action handler for group buttons.
9753	Dummy widget class that causes the Acacia editor to render a nested content normally without a special widget.
9754	Default implementation of the locale handler.
9755	Default Password Generator class.
9756	Generic base driver interface.
9757	Default profiling handler which only has a single instance and delegates method calls to its registered child handlers.
9758	Default implementation of the publish group helper which operates on CmsPublishResource objects.
9759	Validator which can exclude some resources from publishing and supplies a status object for the excluded resources.
9760	Default admin tool handler.
9761	Enum for the subsitemap creation mode.
9762	Enum for IfInvalidRelation field setting values.
9763	Contains the visibility handler configuration for a content field path.
9764	A change handler that reacts to changes in a field by setting another empty field to a default value.
9765	Dialog for deleting resources.
9766	A bean which represents the information for the delete dialog.
9767	Dialog for deleting Sites.
9768	Server-side part of the dependent select box widget.
9769	This is a simple helper class to more easily produce container page beans to be used as detail-only containers.
9770	Sitemap generator class which tries to eliminate duplicate detail pages for the same content and locale.
9771	A type indicating the status of a page.
9772	Bean for special diagnostic information retrievable via JMX.
9773	Option dialog data.
9774	Describes a dialog option.
9775	Holds both a bean containing edit handler dialog options and a resource info bean for a selected resource.
9776	Wrapper class for the different types of diff modes.
9777	Constants to indicate which direct edit buttons should be displayed for a direct edit resource if the user has the permissions.
9778	Contains information about a resource that is direct edited.
9779	The direct publish dialog action.
9780	Represents the three possible display types (small, medium, wide).
9781	Defines the possible dependency types.
9782	Lucene document factory class for indexing data from a generic CmsResource.
9783	Lucene document factory class to extract index data from a cms resource containing plain html data.
9784	Lucene document factory class to extract text data from a VFS resource that is an OLE 2 MS Office document.
9785	Lucene document factory class to extract text data from a VFS resource that is an OOXML MS Office document.
9786	Lucene document factory class to extract index data from a cms resource containing Open Document Format data.
9787	Lucene document factory class to extract index data from a cms resource containing Adobe pdf data.
9788	Lucene document factory class to extract index data from a cms resource containing plain text data.
9789	Lucene document factory class to extract index data from a cms resource containing RTF data.
9790	Lucene document factory class to extract index data from a cms resource of type CmsResourceTypeXmlPage.
9791	Provides a widget that allows access to the available OpenCms download galleries, for use on a widget dialog.
9792	Enum for distinguishing between login modes.
9793	Special key class for caching the resource OU data with a Guava LoadingCache.
9794	Class used to collect log messages and later write them to the actual log but with duplicates removed.
9795	Entry to write to the log.
9796	Class used to keep track of optional dynamic category fields for a content.
9797	Wrapper class for dynamic function formats which can be used from JSP EL.
9798	Empty handler which shows or hides an 'Add' button to add new rows, depending on whether the group is empty.
9799	Handles state changes when the group becomes empty/not empty.
9800	Button bar for manipulating rows in a multivalued field list.
9801	Default implementation for row for multivalue field lists.
9802	The edit control code dialog action.
9803	Action to logout.
9804	Data which needs to be passed to the edit handler when using the 'new' button for an editable list element.
9805	Class for the Edit Login View.
9806	Handles editor content changes to read OpenCms resource properties and insert their values into the edited content.
9807	A default editor CSS handler to obtain the CSS style sheet path from the template property value of the template itself.
9808	This editor handler class returns the editor URI depending on various factors.
9809	Extension for iFrame embedded editors storing the changed state of the edited content.
9810	Action element for edit provider includes.
9811	Class for the edit resource type dialog.
9812	Comparison of two xml page elements.
9813	Contains lock information for a container page element.
9814	Represents the setting configuration for a container element.
9815	Element view info.
9816	Element view preference configuration.
9817	A widget to select an element view.
9818	Helper class for parsing an element with no content but several attributes into a subclass of I_CmsConfigurationParameterHandler.
9819	Helper class for parsing an element with several sub-elements which are text-valued (i.e.
9820	Separate UI for VAADIN based dialog embedded into a GWT module.
9821	Enum indicating the type of changes.
9822	The entity HTML representation including validation data.
9823	Dialog used to display error stack traces in the workplace.
9824	Event class for OpenCms for system wide events that are thrown by various operations (e.g.
9825	Wrapper around a JSON handler that catches exceptions.
9826	Simple utility class for caching a single value with a given cache expiration time.
9827	Dialog context for the explorer.
9828	Class which listens for cache flush events to uncache cached access control settings.
9829	A bean for a export name.
9830	Widget used to edit a module export point.
9831	Extended data structure for the collector, parsed from the collector parameters.
9832	Site selector widget which also optionally offers subsite options.
9833	Class representing a single option.
9834	Provides information about an external link.
9835	Class to validate pointer links.
9836	Thread for extern link validation.
9837	Thread for extern link validation.
9838	External widget configuration settings.
9839	Extracts the text from an HTML document.
9840	Extracts text data from a VFS resource that is an OLE 2 MS Office document.
9841	Extracts text data from a VFS resource that is an OOXML MS Office document.
9842	Extracts the text from OpenOffice documents (.ods, .odf).
9843	Extracts the text from a PDF document.
9844	Extracts the text from a RTF document.
9845	Layout which looks like a Vaadin window without actually being a window.
9846	Loads/saves favorites.
9847	Dialog which shows the list of favorites for the current user and allows them to jump to individual favorites, edit the list, or add the current location to the favorite list.
9848	Represents the type of the favorite.
9849	App for the history settings and clearing of history.
9850	Data bean which walkFileSystem passes to its callback.
9851	Dialog for clean flex cache.
9852	Formatter configuration for flex formatters.
9853	Implementation of the RequestDispatcher interface to allow JSPs to be loaded from the OpenCms VFS.
9854	Vaadin Layout with Buttons to clear the different types of cache.
9855	Interface for the dialogs.
9856	Dialog to request a password reset link if you forgot your passsword.
9857	Parses formatter beans from formatter configuration XML contents.
9858	Bean which holds a list of formatter configurations (client-side) which can be retrieved by key or id.
9859	The form edit dialog action.
9860	Represents information about whether a gallery folder should use a custom upload action.
9861	A single container type/width combination.
9862	The gallery dialog action.
9863	Mode that determines how to handle types in the gallery dialog that are disabled, usually because there is no matching container in the current page.
9864	Helper class for building a filtered sitemap tree for the gallery dialog's 'Sitemap' tab.
9865	Class representing a dialog for optimizing galleries.
9866	The gallery optimize dialog action.
9867	Sort parameter constants.
9868	Gallery tree entry class.
9869	The gallery type bean.
9870	Bean representing a Geo filter.
9871	A single configuration entry.
9872	Enum representing the type of a single configuration entry in a geomapping configuration.
9873	A group container.
9874	Bean which holds the results of saving a group container.
9875	The group edit parameters.
9876	Table properties.
9877	Context menu button widget state.
9878	Dummy log that does nothing on the server side.
9879	MS SQL implementation of the history driver methods.
9880	MySQL implementation of the history driver methods.
9881	Oracle implementation of the history driver methods.
9882	PostgreSql implementation of the history driver methods.
9883	Extension to allow clientside history back and forward.
9884	Utility methods for the history list.
9885	The history state.
9886	Bean representing a file version for the history dialog.
9887	Enum for distinguishing between offline and online project.
9888	Represents a single HTML converter configuration as defined in the OpenCms configuration file opencms-vfs.xml.
9889	Extracts plain text from HTML.
9890	Wrapper class for the different style of icon buttons.
9891	A tag factory for htmlparser that is able to "remove tags".
9892	Provides a http upload widget, for use on a widget dialog.
9893	Bundle of i18n setting to be used to setup a new request context.
9894	A bean carrying icon CSS class information.
9895	Dialog to clean Image Cache.
9896	A schedulable OpenCms job that clear the image cache for the scaled images created by the CmsImageLoader.
9897	Helper class for getting information about cached images.
9898	Table to show entries of image cache.
9899	Provides a widget that allows access to the available OpenCms image galleries, for use on a widget dialog.
9900	Allows to import resources from the filesystem or a ZIP file into the OpenCms VFS.
9901	Subclass which doesn't actually import anything, but just reads the module data into a data structure which can then be used by the module updater.
9902	Class for the import user thread.
9903	Categories of resources that need to be handled differently in the 'rewrite parseables' import step.
9904	Data class to temporarily keep track of relation data for a resource to be imported.
9905	Helper class for getting localized messages for the 'lock inactive users' feature.
9906	Implements methods to utilize a report thread for CmsIndexingReport.
9907	Implements the indexing method for a single resource as thread.
9908	Implements the management of indexing threads.
9909	Utility methods for inheritance groups which don't fit anywhere else.
9910	Reference to an container inheritance configuration.
9911	Parser class for parsing inheritance container references.
9912	Describes errors that occur in the context of OpenCms the initialization, this is fatal and prevents OpenCms from starting.
9913	DataSource implementation that may be filled with content from an InputStream.
9914	CmsInputWidget that strips HTML Tags from the input before storing values.
9915	Util class to find broken links in a bundle of resources.
9916	Class for the layout for choosing the resources.
9917	This tool handler just hides the tool for the user, but the tool can still be invoked explicitly, usefull for tool that requires an argument, like edit tools.
9918	Helper class for using JAXB to convert between beans and OpenCms config file XML elements.
9919	A simple class used to start and stop JLAN.
9920	Don't use CmsScheduledJobInfo directly, so we don't need to change it if we want to change how the values are rendered, and having only the fields we want displayed in the table makes it easier to understand.
9921	Form used to edit a scheduled job.
9922	Table used to display scheduled jobs, together with buttons for modifying the jobs.
9923	Property columns of table, including their Messages for header.
9924	Class representing a JSON document for a folder.
9925	JSON handler for rendering a container page as JSON.
9926	Produces directory listings in JSON format.
9927	JSON handler used to load JSPs referenced directly by path.
9928	JSON handler for rendering a list.
9929	Wrapper for JSON handlers that caches online project requests.
9930	JSON handler for rendering a resource as JSON.
9931	Sub-handler for converting XML contents to JSON, either as a whole or just specific locales or paths.
9932	Helper class used to translate key/value pairs from and to the format which can be processed by the CmsJsonPartFilter.
9933	Used for rendering container pages as a JSON structure.
9934	Result of rendering JSON.
9935	Vaadin extension class for a BrowserFrame to display a JSP.
9936	The null value info, used to generate RDFA and DND annotations for null values.
9937	This class provides the detection for different devices, so that the <cms:device type="...">-Tag can detect which device sends the HTTP request.
9938	Device selector class which distinguishes between the cases "desktop", "mobile" and "tablet".
9939	Provides the detection for different devices, so that the <cms:device type="...">-Tag can detect which kind of device type sends the HTTP request.
9940	Navigation builder context.
9941	The visibility mode.
9942	Allows JSP access to the results of a <cms:resourceload ...
9943	Bean containing a template name and URI.
9944	Keeps track of the runtime state of a single execution of this tag.
9945	Used to access XML content item information from the current open <cms:contentload> tag using JSP page context and the JSP EL.
9946	This class provides a <cms:device type="...">-Tag with the attribute type to specify the device.
9947	The tag 'displayFormatter' can be used to add a formatter resource type pairing to the surrounding 'display' tag.
9948	Generates a special HTML element which enables the 'create list element' dialog for a set of types when used in a formatter.
9949	This is a TagExtraInfo evaluation class that checks the attibutes of the <cms:include /> tag.
9950	Tag for defining a JSON array.
9951	Tag for defining a JSON object.
9952	Tag used to convert the HTML output of this tag's contents to encoded JSON.
9953	Builds a java.util.Map isntance with string keys and values from nested param tags, then stores it in a page context variable whose name is supplied by the user.
9954	Constants for type attribute interpretation.
9955	A handler for <param> that accepts attributes as Strings and evaluates them as expressions at runtime.
9956	JSP tag to generate a link to a PDF produced from a given XML content.
9957	Tells for which resource properties should be looked up (with or without searching), depending on the CmsJspTagProperty.FileUse.
9958	Provides access to the data of the currently logged in user.
9959	Workplace locale preference.
9960	App for legacy admin tools.
9961	Enum which represents different modes that control which domains OpenCms puts into the certificate configuration.
9962	Enum which represents the different types of events that LetsEncrypt updates should be triggered by.
9963	A bean for representing a link, which can be external or internal.
9964	Provides a widget that allows access to the available OpenCms external link galleries, for use on a widget dialog.
9965	Immutable bean representing most of the information in a CmsLink.
9966	Workplace action for the 'Link locale variant' dialog.
9967	Class for the Link validation app.
9968	Class for the Link validation app.
9969	Represents a single option (type) that can be selected in the list element creation dialog.
9970	Lock icons.
9971	Enum for the type of page icon which should be displayed.
9972	A list based resource bundle that with increased visibility of some key methods.
9973	Enum representing whether two resources can be linked together in a locale group.
9974	Bean representing a link to a different locale variant.
9975	Dialog used to select a resource which should be linked to a locale group.
9976	Action to lock a folder if it isn't already locked, with a dialog asking to confirm your choice if the folder contains resources locked by other users.
9977	Bean class which keeps track of a locking action performed on a resource.
9978	A type for the different locking actions.
9979	An enum indicating the success or type of failure of a locking operation.
9980	A bean holding the lock report info.
9981	Utilities for dealing with log4j loggers.
9982	Class for table to display and edit Log channels.
9983	Class for the Download dialog.
9984	Helper class for generating the zip file for the log download.
9985	Wrapper class for a DB log entry.
9986	Provides log files which should be available as options in the OpenCms log file viewer.
9987	Class for the view of log files.
9988	Ensures that among a set of check boxes, at most one of them is checked, without imposing constraints on the location of the checkboxes in the UI.
9989	Represents the login target information.
9990	The login context.
9991	Helper subclass of CmsLoginUserAgreement which can be used without a page context.
9992	Widget used to allow the user to search and select an organizational unit.
9993	Password field for the login dialog.
9994	Parameters which are initialized during the initial page load of the login dialog.
9995	Report class used for the logfile.
9996	Delegates indexing to a standard Lucene IndexWriter.
9997	Special collection class which allows lookup from keys to values and from values to sets of keys.
9998	The attribute type.
9999	Allows the use of max height in combination with vaadin layout components.
10000	The max height shared state.
10001	Cache types.
10002	Decorator for menu item visibility classes which always returns INVISIBLE if more than one resource is passed, but otherwise delegates the decision to its wrapped instance.
10003	Extension of Properties to allow saving with keys alphabetically ordered and without time stamp as first comment.
10004	Types of bundles editable by the Editor.
10005	The propertyIds of the table columns.
10006	Contains a localized message key, it's arguments and a I_CmsMessageBundle.
10007	A lookup table used to find out which VFS based message bundles (XML/property bundles) contain a given key.
10008	Configuration bean for meta mappings.
10009	Describes a MIME type configured in OpenCms.
10010	Wraps the model page and model group info into one object.
10011	This class contains the model page configuration for a sitemap region.
10012	This class contains the model page configuration for a sitemap region, without the actual resource.
10013	Bean holding model resource information to be displayed in the model select dialog.
10014	The available module export modes.
10015	Widget used to edit a module dependency.
10016	Holds exported module data and a modification date.
10017	A bean representing a module zip file to be imported.
10018	The form for importing modules via HTTP.
10019	This class is responsible for reading and writing module import/export log messages, to be used by CmsResourceWrapperModules.
10020	Action type.
10021	A widget for selecting a module resource.
10022	Represents a row of the modules overview table.
10023	Overview list for module information.
10024	A version number for an OpenCms module.
10025	Enum used to distinguish whether we want to generate the XML for a module export's manifest or the XML for writing back opencms-modules.xml.
10026	Class for a dialog to move resource types to modules.
10027	Dialog to change OU of given user.
10028	Interface for callbacks which should be notified when this helper has created a resource.
10029	Basic implementation of the interface I_CmsNewsletter.
10030	Content for newsletters.
10031	The basic class for the content notification feature in OpenCms.
10032	Objects of this class are serialized in the additional infos of a user to store, which resources were already confirmed by the user.
10033	This tool handler disables the tool if in online project.
10034	Shortcut handler triggered on 'Enter' and 'Esc' to trigger OK and Cancel actions.
10035	This tool handler hides the tool to non admin users.
10036	Provides methods for open gallery dialog.
10037	Class for the ou edit and new dialog.
10038	Ou Handler.
10039	Class to show ous in table for account management.
10040	Class for the OU Tree.
10041	Wrapper for CmsSelectQuery objects which adds SQL code for results paging.
10042	An individual weighted parameter value, with a 'source' attribute for better debuggability.
10043	Notification used to send password change link to user.
10044	Widget state for the special password field used by the login dialog.
10045	Simple data holder class which stores a path in a normalized form.
10046	A helper class used for calculating which paths need to be included or excluded from the XML sitemap generation.
10047	Data structure which stores contents indexed by path.
10048	A bean which represents a value together with a path which indicates from where the value has been read.
10049	This class is responsbile for creating and parsing links to generated PDFs.
10050	Class to generate or parse a link to a PDF thumbnail.
10051	This class is responsible for loading external resources while generating PDF from XHTML.
10052	The permission dialog action.
10053	The permission info bean.
10054	Permission change handler.
10055	Authorization handler which uses a special cookie sent by the user's browser for authorization.
10056	Bean representing the data encoded in a login token (user name and key).
10057	A point in 2D space.
10058	The service implementation for the org.opencms.ade.postupload module.
10059	Bean representing the configurable attributes for a preference.
10060	The user preferences dialog action.
10061	Response bean class for the 'prepareEdit' RPC method.
10062	A bean that holds the informations of a principal to show the availability dialog.
10063	Type of principal.
10064	The widget types.
10065	The principal select extension.
10066	Table to selecet principals used in the CmsPrincipalSelect vaadin element.
10067	Comparator for sorting resource objects based on priority and date.
10068	Comparator for sorting resource objects based on priority and title.
10069	Enumeration class for project types.
10070	Deletes a project.
10071	The set project dialog action.
10072	Oracle/OCI implementation of the project driver methods.
10073	Preference subclass for selecting the start project.
10074	The projects table.
10075	Action element class for opening the ADE properties dialog.
10076	A bean representing a set of property changes.
10077	Represents a row in an attribute comparison table.
10078	Displays differences between the sets of properties of two versions of a resource.
10079	A property based resource bundle with increased visibility of some key methods.
10080	Class for the table containing all property definitions in the system.
10081	Table columns.
10082	A publish group.
10083	Mode of operation for publish history cleanup.
10084	Defines a read-only publish job that is still waiting for publishing.
10085	Defines a read-only publish job that has been already published.
10086	Defines a read-only publish job that is being published.
10087	A bean which can be used to reconstruct a publish list.
10088	Performs some additional checks on publish lists to prevent inconsistent VFS states.
10089	Enum for the different publish list remove modes.
10090	Class to send a notification to an OpenCms user with a summary of warnings and errors occurred while publishing the project.
10091	Class for the Publish queue app.
10092	Helper class for finding all related resources for a set of resources to be published, for use with the new ADE publish dialog.
10093	A map from resources to sets of resources, which automtically instantiates an empty set when accessing a key that doesn't exist via get().
10094	A publish resource additional information bean.
10095	Reason value constants, when resources can not be published.
10096	Class for Vaadin Table showing history queue elements.
10097	Editor for the user quick launch configuration.
10098	Provides a widget for a standard HTML form for a group of radio buttons.
10099	Action to reindex resources.
10100	Util class to find broken links in a bundle of resources to be deleted.
10101	Util class to find broken links in a bundle of resources to be published.
10102	Helper bean used to collect a list of resources (usually relation targets) and keep track of whether any of them have the "changed" state.
10103	Enum representing how relations should be handled while copying resources.
10104	Relation validator entry information bean.
10105	RMI object which wraps a CmsShell and can be used for shell command execution.
10106	Client application used to connect locally to the CmsShell server.
10107	RMI shell server configuration.
10108	This class is used to initialize the RMI mechanism and export the object used to access the remote shell.
10109	Removable form row.
10110	A bean used to store information about a container page element which was just removed.
10111	Message key fallback handler used to enable reuse of localization keys for editor labels.
10112	A scheduled job which removes entries older than a given amount of time from the CMS_LOG table, to improve database performance.
10113	Remove the publish locks.
10114	Bean class containing the information needed for the Rename dialog.
10115	File replace dialog info.
10116	Status after updating a module.
10117	Report overlay, shows the wait spinner first and the report window later in case off longer running threads.
10118	Represents a single report entry.
10119	A widget used to display an OpenCms report.
10120	Creates a repository session to access OpenCms.
10121	Category information for a specific resource.
10122	Context menu builder for resource items.
10123	Helper class for formatting resource data as JSON.
10124	A resource type wrapper for jsp files, which adds the correct file extension "jsp" to the resources.
10125	A resource type wrapper for xml content files, which adds the correct file extension "xml" to the resources.
10126	A resource type wrapper for xml pages, which adds the correct file extension "xml" to the resources.
10127	Enum used to control icon display style.
10128	Bean containing a template resource and the name of the template.
10129	Class for site select options.
10130	Contents of the resource select dialog, filled using the declarative layout mechanism.
10131	Enum used for identifying tabs in the resource info dialog.
10132	Contains the data for the given column, along with some flags to control visibility/collapsed status.
10133	Provides a resource name / path translation facility.
10134	Enum for data source from which resource type bean was constructed.
10135	Enum representing the visibility of a resource type in the bean.
10136	Enum used to distinguish the type of menu in which a configured resource type can be displayed.
10137	Represents the visibility status of a resource type in the 'Add' menu of the container page editor.
10138	Resource type class for the second version of dynamic functions.
10139	The HTML redirect resource type.
10140	A data container for image size and scale operations.
10141	Special resource type for locale independent XML contents.
10142	The macro formatter resource type.
10143	Class for the result of a database statistic set.
10144	Class for the database-statistic result list.
10145	Class for the database statistic view.
10146	Resource type descriptor used in case the given resource type class in the XML configuration could not be instantiated.
10147	Resource type descriptor for unknown folder types.
10148	Enumeration class for defining the resource project state.
10149	Resource wrapper which intercepts createResource calls and substitutes them with replaceResource if there is already a deleted file at the same path.
10150	The availability dialog action.
10151	Match type of the restriction, i.e., how the values should be treated.
10152	The values in one input field.
10153	The type describes how values in that input field should be handled.
10154	Displays search result facets.
10155	This class represents the result of a "return link" lookup, which is what happens if the user clicks the "go to last page" button in the sitemap editor.
10156	The moved status.
10157	This class represents an alias which does not just map a fixed path to a fixed resource, but instead uses a regular expression substitution to determine the target path.
10158	Filter class used for selecting rewrite aliases from the database.
10159	The result of a match operation.
10160	This class represents the result of a validation of rewrite aliases.
10161	Table for the roles.
10162	Stores the editor save result information.
10163	The scroll position CSS shared state.
10164	An analyzer class is used by Lucene to reduce the content to be indexed with trimmed endings etc.
10165	Class keeping the configuration of the "Did you mean ...?" feature of the search form.
10166	Representation of one query facet item.
10167	Configuration for a single sort option.
10168	A resource implementation that combines the Solr document together with a OpenCms VFS resource.
10169	Class for handling the state of the "Did you mean?" search options.
10170	Class keeping the state of the Geo filter.
10171	Class for keeping the state for the pagination.
10172	Class for keeping the state of the sorting options.
10173	Dialog used to ask the user for a verification code generated from his second factor, using an authenticator app.
10174	Second factor information for login.
10175	The data needed to set up two-factor authentication for a user.
10176	Dialog used to change resource modification times.
10177	Select box widget that can transform into a combo box by clicking an edit icon.
10178	Class for the resource type select dialog.
10179	Class to send email to user in case of password reset or creating new user.
10180	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.
10181	Wrapper for the value stored by the CmsSerialDateWidget that provides easy access.
10182	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.
10183	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a monthly base.
10184	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles single events.
10185	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a weekly base.
10186	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a daily base.
10187	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.
10188	Implementation of @{link org.opencms.widgets.serialdate.I_CmsSerialDateBean} that handles series' specified on a yearly base.
10189	Implementation of the serial date RPC service.
10190	Utility methods for the serial date widget.
10191	Server-side implementation of I_CmsSerialDateValue.
10192	The form for importing a module from the application server.
10193	Enumeration class for the configuration mode.
10194	Shell script app.
10195	Layout for shell script settings and input dialog.
10196	Type of Dialog.
10197	Table with resources for which a given principal has permissions.
10198	Provides buttons for showing the two versions being compared.
10199	Advanced locale handler allowing single tree localization.
10200	The site localization modes.
10201	Represents a grouping of domains into certificates.
10202	Represents the domain information for a single site.
10203	Sitemap action used to generate the sitemap editor.
10204	The data needed by the sitemap attribute editor dialog in the sitemap editor.
10205	Contains a set of attribute definitions for the sitemap attribute editor.
10206	The category data for the current sitemap.
10207	The change types.
10208	The sitemap editor modes.
10209	Sitemap info object.
10210	This class represents the result of a 'merge sub-sitemap' operation.
10211	Helper class for recalculating navigation positions when a user has changed the order of navigation entries in the sitemap editor.
10212	Sitemap session cache.
10213	Loads node data for the sitemap tree.
10214	Represents the different redirect modes for a site alias.
10215	Preference for the start site.
10216	The dialog for selecting a site when exporting / deleting a module without a module site.
10217	Bean class which represents an option for the site selector in the gallery dialog.
10218	Enum for indicating the site type.
10219	Helper class for building the options for the site selector in the gallery dialog.
10220	Table properties.
10221	This Solr post processor generates for each found document the corresponding link and adds this link into the resulting document as field.
10222	Stores the editor settings.
10223	The source search form.
10224	Helping class for manipulating the Solr spellchecker indices.
10225	Class for generating an SQL boolean expression.
10226	Class for the property definition app.
10227	Class for storing query results.
10228	Standard visibility check implementation.
10229	Preference for the start folder.
10230	Preference for the start site.
10231	A helper class used to accumulate SQL fragments together with the corresponding query parameters.
10232	Action "Steal lock".
10233	Widget that can be used to view a running report that is not generated specifically by an OpenCms report thread, but from the text written to the stream provided by this widget.
10234	Report class used to write the output of a report to a StringBuffer.
10235	MySQL implementation of the subscription driver.
10236	Oracle implementation of the subscription driver.
10237	A data class which is used to transfer information about sub-sitemaps which have been created.
10238	Helper class which keeps track of a set of updates to be performed in a different thread.
10239	Defines the CmsSynchronizeList object, used to store synchronisation data required to synchronize the VFS and the server FS.
10240	Synchronizes a VFS folder with a folder form the "real" file system.
10241	Synchronizes a VFS folder with a folder form the "real" file system.
10242	Enum for the user session mode.
10243	Form tab information bean.
10244	An alternative export point driver which replaces the RFS targets of some export points with locations in a temporary export folder.
10245	Utility class for getting information about available templates.
10246	Action for replacing formatters in pages according to a template mapper configuration.
10247	Report thread for rewriting pages in a folder according to a given template mapper configuration.
10248	Helper class for finding the list of active template plugins for the current page.
10249	CmsTextareaWidget that strips HTML Tags from the input before storing values.
10250	Interprets two versions of a resource as text files, and shows a diff view for the two texts.
10251	Widget used to display a colorized diff view for two texts.
10252	Thread local stack.
10253	Builds up a tree whose nodes correspond to stack trace lines of the threads calling this profiling handler.
10254	Data for TinyMCE editor.
10255	This is an admin tool group, it just generates the html code for the group structure.
10256	The standard workplace tool layout.
10257	Generic tree node which can contain an object of generic type T as data, and which has a mutable list of child nodes.
10258	The tree open state of a gallery tree tab.
10259	The rule type.
10260	Represents a single rule configured for a policy.
10261	A context object used to keep user-related data around which may be needed by multiple rules, so we only need read it once (e.g.
10262	Enum describing how type configurations should be ordered in the sitemap configuration.
10263	Enum representing the different types of errors.
10264	Implementation of the I_CmsFormDataItem which delegates its methods to a FileItem from Apache Commons Upload.
10265	Exception class for use in the org.opencms.editors.usergenerated module.
10266	A queue used to enforce a certain wait time between requests for sessions for the same form configuration.
10267	Helper class which implements some of the security checks for user generated content creation.
10268	Dialog to confirm detaching a resource from a locale group.
10269	Workplace action for the 'Link locale variant' dialog.
10270	Action "Unlock resource".
10271	Upload action element, used to generate the upload dialog.
10272	Extends the given component to be an upload drop area.
10273	The upload button state.
10274	Bean to be used in JSP scriptlet code that provides access to the upload functionality.
10275	The upload button.
10276	A enum for the upload state.
10277	Helper class for building a new CmsUploadRestrictionInfo object.
10278	Handles all RPC services related to the upload dialog.
10279	The upload types.
10280	A class which is executed in a new thread, so its able to detect when an upload process is frozen and sets an exception in order to be canceled.
10281	A table to temporarily store warnings that should be displayed for uploaded files.
10282	An URL name mapping entry.
10283	The user data app.
10284	The GUI form for the user data app.
10285	Dialog to edit the user data.
10286	Form Layout for user data.
10287	Configuration for user data requests.
10288	Enum representing the type of user data request.
10289	Impelemnts user data download links for the user data request feature.
10290	AS400 implementation of the user driver methods.
10291	DB2 implementation of the user driver methods.
10292	MS SQL implementation of the user driver methods.
10293	PostgreSql implementation of the user driver methods.
10294	Parameters for the user edit dialog.
10295	Provides the user export settings.
10296	Dialog to show user information and to switch to user session.
10297	User publish list entry.
10298	An enum used for indicating searchable columns.
10299	An enum used for indicating sort order.
10300	Enumeration class for workplace search result styles.
10301	A enum for the different upload variants.
10302	Bean for transferring user preference information between the client and the server.
10303	Table properties.
10304	GWT serializer for CmsUUID.
10305	Helper class for building option groups.
10306	Container property ids.
10307	A simple bean class which represents a validation request for a single form field.
10308	The result of a single field validation.
10309	Bean for Variations im image resources.
10310	A vertical menu styled like e menu bar sub menu or the context menu.
10311	Data holder for a base name and locale of a message bundle.
10312	Data class containing the parameters for a VFS-based resource bundle.
10313	DataSource wrapper for VFS resources, allows easy sending of VFS resources as email attachments.
10314	A bean which represents a resource in the VFS.
10315	A bean class containing both a path and a UUID which should be stored in an XML file value.
10316	Flag to control which visibility checks should be performed by CmsStandardVisibilityCheck.
10317	A bean which represents a user having visited a page.
10318	Low-level utility class used for waiting for an action performed by another thread.
10319	Describes errors that occur in the context of the OpenCms widgets.
10320	Utility methods for getting widget informations out of content definitions.
10321	Bean representing widget information.
10322	Makes window close events available on the server side.
10323	A bean which represents a possible workflow, containing an identifier, a user-readable name and a list of workflow actions.
10324	Work flow action information.
10325	Contains the data on which a workflow action should act (usually, a list of resources).
10326	Workplace mode preference configuration.
10327	Layout for workplace server configuration.
10328	Represents an user additional information block.
10329	Manages the configuration of the additional information of users.
10330	Contains the data of a single workplace view.
10331	XML node name constants.
10332	Enumeration of possible sequence types in a content definition.
10333	The acacia XML content editor.
10334	Comparison of two xml content elements.
10335	Type constants.
10336	The property visibility options.
10337	XML node name constants.
10338	Element Property json property constants.
10339	Represents the root of an XML content for a given locale.
10340	Represents a configured tab to be used in the XML content editor for better usability.
10341	Enum representing the type of the tree node.
10342	XML node name constants.
10343	The acacia XML content editor.
10344	Cache for XML sitemaps.
10345	Bundle with the keys of report messages
10346	The available OpenCms workplace icons.
10347	Interface for actions used within the ADE context.
10348	Special authorization handler for APIs using stateless authorization.
10349	Generates app launcher buttons.
10350	App category interface.
10351	Used to write app settings to the user.
10352	Represents a single option.
10353	A choice option, but with (multi-valued) attributes added.
10354	Class providing the privileged login action.
10355	Apps implementing this interface will be stored in the user session so returning to the app will be quicker and use less resources.
10356	Represents a filter category in the categorized select widget (not necessarily an OpenCms category).
10357	The Interface Option.
10358	AutoBean factory used to create the data for the categorized select widget.
10359	Rendition provider interface used to generate alternative renditions for resources.
10360	AutoBean interface that represents the configuration for the client-side CodeMirror editor widget.
10361	Interface for complex widgets which are used in the Acacia editor to render whole nested contents.
10362	Interface for a single named configuration object that can either be merged with other configuration objects or disable a configuration object with the same name.
10363	Used for classes that are configurable using <param name="name">value</param> in the XML configuration.
10364	Server to client RPC communication.
10365	The context menu server RPC.
10366	Convenience interface to provide core server-side data to the client.
10367	Interface used to inject custom link handling behavior into HTML/link content fields.
10368	Enum representing a direction in time (past / future).
10369	Enum representing a time unit.
10370	This interface defines a factory to create runtime info objects.
10371	The available context types.
10372	Provides a method for selecting an individual jsp dialog.
10373	Extended attributes for editable data generated by e.g.
10374	Server side handler interface for button presses in a multivalue widget group row's button bar.
10375	Interface for the server side RPC for the CmsEditableGroupButtons component.
10376	Interface for components used as editable group rows.
10377	Provides methods to determine the CSS style sheet URI for the editors based on the edited resource path.
10378	Provides a method for selecting an individual file editor.
10379	Action context that allows direct editing of single properties.
10380	File table inline edit handler.
10381	Interface for tables which support a filter function.
10382	Displays a sub menu in the app launch pad.
10383	Interface representing the data from a field of a submitted form.
10384	Gallery mode constants.
10385	Tab ids used for tab configuration.
10386	Image parameteres.
10387	Sorting parameters.
10388	Common interface for accessing sitemap/VFS entry beans as tree nodes.
10389	Enables a dynamic configuration of values for the A_CmsGalleryWidget.
10390	This is interface is intended to be used in combination with the CmsGlobalConfigurationCacheEventHandler class.
10391	Client-to-server rpc interface for the GWT dialog extension.
10392	Interface for elements with icons.
10393	Interface used to check menu item visibility for context menus.
10394	A historical version of a resource in the OpenCms VFS resource history.
10395	HTML converters can be used to clean up HTML code and/or pretty print the code.
10396	Abstracts the index writer implementation for the most important index manipulation operations.
10397	Interface for individual JSON handlers.
10398	Renders a single-locale content tree as JSON.
10399	This interface supports the basic functionality for the device detection.
10400	AutoBean interface for the data injected into the page by the cms:enable-list-add tag.
10401	Provides information about the current state of the locale comparison editor.
10402	A locale handler returns the locale name to use for the given request context.
10403	Client RPC interface for opening a login target.
10404	Describes a macro mapper, which is used to efficiently resolve macros in the form of %(key) or ${key} in an input String.
10405	Interface for the newsletter.
10406	Every I_CmsNewsletter contains a list of I_CmsNewsletterContent objects.
10407	Interface for recipients of I_CmsNewsletter objects.
10408	Password handler implementing this interface allow the password security to be evaluated.
10409	Password security levels.
10410	Permission handler interface.
10411	Enum for the lock check mode.
10412	Synchronous service interface for the upload property dialog.
10413	Asynchronous service interface for the upload property dialog.
10414	Interface for dynamic CMIS properties.
10415	Client-to-server rpc interface for the GWT dialog extension.
10416	'Formats' a ResourceMap containing resources for publishing by creating a list of CmsPublishResource beans with the appropriate status informations to display.
10417	Remote interface for executing shell commands.
10418	Interface for Apps, which run an import thread for files.
10419	Identifies a class that can be used as a report thread .
10420	Describes an OpenCms request handler.
10421	Enumeration for all attributes of a resource.
10422	Increases the visibility of some key methods of a ResourceBundle.
10423	This interface checks the requested resource from the OpenCms request context and returns it to the calling method, which will usually be OpenCms.initResource(CmsObject, String, HttpServletRequest, HttpServletResponse).
10424	Resource formatter.
10425	Interface of the "Did you mean ...?" configuration for the JSP search form.
10426	Sort orders available for Solr facet entries.
10427	The interface of a single query facet item.
10428	The interface a sort configuration must implement.
10429	The interface a sort option configuration must implement.
10430	Interface to get controllers state and configuration - version for common search configurations.
10431	Interface the "Did you mean ...?" controller must implement.
10432	Interface to get controllers state and configuration - version for field facets.
10433	Interface to get controllers state and configuration - version for the query facet.
10434	Interface to get controllers state and configuration - version for field facets.
10435	Interface the controller for all field facets must implement - just allow access to the single controllers.
10436	Interface the controller for all range facets must implement - just allow access to the single controllers.
10437	Interface to get controllers state and configuration - version for the Geo filter.
10438	Interface to get controllers state and configuration - version for pagination.
10439	Interface to get controllers state and configuration - version for common search configurations.
10440	Class for keeping the state of the spellcheck search options.
10441	Interface for the Geo filter state.
10442	Interface for pagination states.
10443	Interface for sorting states.
10444	Synchronous interface for the serial date service.
10445	Asynchronous interface for the serial date service.
10446	Different types of serial dates.
10447	Different types of conditions how serial dates can end.
10448	Months as enumeration.
10449	Type of the series.
10450	Possible weeks of a month.
10451	Provides scriptable access to a class from the CmsShell.
10452	Interface for generic context menu entris.
10453	Interface for the client-to-server rpc calls used by the sitemap extension.
10454	The post document processor can be used in order to manipulate search results after the OpenCms permission check has been done.
10455	Interface for plugins that need to be called during startup and shutdown.
10456	Provides a method for scrubbing files from the export folder that might have been changed, so that the export is newly created after the next request to the resource.
10457	Defines methods which can be pluged into the syncronisation process between VFS and "real" FS.
10458	Interfaces for classes that encrypt text as text.
10459	Interface for toggable tables.
10460	Parameters for the unlock service.
10461	Handles all RPC services related to the upload dialog.
10462	Describes the different places from which the user data domain plugins can be used.
10463	Workplace action interface.
10464	Common interface for all workplace apps.
10465	Interface for configurations which should run custom logic when the configuration is written back by OpenCms.
10466	Provides access to a I_CmsXmlDocument document that was previously loaded by a parent tag.
10467	The available display types for element widgets.
10468	Settings for a JSON renderer.
10469	The available mapping types.
10470	This class represents a location in an XML content for a specific locale.
10471	The available search types for element searchsetting.
10472	Interface representing an XML content location which corresponds to an actual content value.
10473	This provides static methods to convert an XML text into a JSONObject, and to convert a JSONObject into an XML text using the JsonML transform.
10474	JSONObject.NULL is equivalent to the value that JavaScript calls null, whilst Java's null is equivalent to the value that JavaScript calls undefined.
10475	Debugging information about currently running requests.
10476	PrintfFormat allows the formatting of an array of objects embedded within a string.
10477	The XMLTokener extends the JSONTokener to provide additional methods for the parsing of XML texts.
10478	Keep a persistent roughly monotone view of how long a master has been overseeing this cluster.
10479	A default set of TinkerGraph.IdManager implementations for common identifier types.
10480	TinkerGraph will use an implementation of this interface to generate identifiers when a user does not supply them and to handle identifier conversions when querying to provide better flexibility with respect to handling different data types that mean the same thing.
10481	The class is used to represent the number of the array.
10482	Base object for FSSHTTPB.
10483	The class is used to read/set bit value for a byte array
10484	Cell manifest data element
10485	Represents entry types: uncompressed, compressed
10486	Represents intel file states during decompression
10487	Represents lzx states: started decoding, not started decoding
10488	Extracts text from chm file.
10489	Description Note: not always exists An index chunk has the following format: 0000: char[4] 'PMGI' 0004: DWORD Length of quickref/free area at end of directory chunk 0008: Directory index entries (to quickref/free area) The quickref area in an PMGI is the same as in an PMGL The format of a directory index entry is as follows: BYTE: length of name BYTEs: name (UTF-8 encoded) ENCINT: directory listing chunk which starts with name Encoded Integers aka ENCINT An ENCINT is a variable-length integer.
10490	This class is used to create instance of AbstractChunking.
10491	A 9-byte encoding of values in the range 0x0002000000000000 through 0xFFFFFFFFFFFFFFFF
10492	This class is used to represent the CompactID structrue.
10493	Base class of data element
10494	Specifies an data element hash stream object
10495	The enumeration of the data element type
10496	Data Size Object
10497	This class is used to represent the property contains 8 bytes of data in the PropertySet.rgData stream field.
10498	This class is used to represent the property contains 4 bytes of data in the PropertySet.rgData stream field.
10499	The interface of the property in OneNote file.
10500	This class is used to represent a JCID
10501	The class is used to build a intermediate node object.
10502	This class is used to represent the property contains no data.
10503	The ObjectGroupData class.
10504	Object Group Declarations
10505	Specifies an object group metadata
10506	Object Metadata Declaration
10507	object data BLOB declaration
10508	object data BLOB reference
10509	This class is used to represent a ObjectSpaceObjectPropSet.
10510	This class is used to represent a ObjectSpaceObjectStreamOfContextIDs.
10511	This class is used to represent a ObjectSpaceObjectStreamOfOIDs.
10512	This class is used to represent a ObjectSpaceObjectStreamOfOSIDs.
10513	This class is used to represent the property contains 1 byte of data in the PropertySet.rgData stream field.
10514	Interface implemented by all Tika OOXML extractors.
10515	This class is used to represent a PropertyID.
10516	This class is used to represent a PropertySet.
10517	The class is used to represent the prtArrayOfPropertyValues .
10518	This class is used to represent the prtFourBytesOfLengthFollowedByData.
10519	The enumeration of request type.
10520	Specifies a revision manifest object group references, each followed by object group extended GUIDs
10521	Specifies a revision manifest root declare, each followed by root and object extended GUIDs
10522	RTF parser
10523	Signature Object
10524	Specifies the storage index cell mappings (with cell identifier, cell mapping extended GUID, and cell mapping serial number)
10525	Specifies the storage index revision mappings (with revision and revision mapping extended GUIDs, and revision mapping serial number)
10526	Specifies one or more storage manifest root declare.
10527	Specifies a storage manifest schema GUID
10528	An 16-bit header for a compound object would indicate the end of a stream object
10529	An 8-bit header for a compound object would indicate the end of a stream object
10530	An 16-bit header for a compound object would indicate the start of a stream object
10531	An 32-bit header for a compound object would indicate the start of a stream object
10532	The enumeration of the stream object type header start
10533	SAX/Streaming pptx extractior
10534	This is an experimental, alternative extractor for docx files.
10535	This class is used to represent the property contains 2 bytes of data in the PropertySet.rgData stream field.
10536	CopyDistribution returns the conditional value.
10537	Interface for a distribution over discrete values.
10538	Tests that support the creation of Graph instances which occurs via GraphFactory.
10539	Generates values according to a normal distribution with the configured standard deviation.
10540	Generates values according to a scale-free distribution with the configured gamma value.
10541	Utility class to make size determinations for Iterable for efficient.
10542	An Iterator that checks a Predicate prior to processing the specified child Iterator instances.
10543	An interface that provides methods for detached properties and elements to be re-attached to the Graph.
10544	A Barrier is any step that requires all left traversers to be processed prior to emitting result traversers to the right.
10545	Provides a way to alter the bindings on a GremlinScriptEngine.
10546	Represents a factory to create Buffer instances from BufferFactory instances.
10547	Column references a particular type of column in a complex data structure such as a Map, a Map.Entry, or a Path.
10548	Compare is a BiPredicate that determines whether the first argument is ==, !=, >, >=, <, <= to the second argument.
10549	The result of the GraphComputer's computation.
10550	Contains is a BiPredicate that evaluates whether the first object is contained within (or not within) the second collection object.
10551	This module is required for a ScriptEngine to be Gremlin-enabled.
10552	Represents a GraphBinary data type.
10553	Utility class for parsing and formatting dates/times.
10554	Default implementation of the BindingsCustomizer which adds bindings to the ScriptContext.GLOBAL_SCOPE.
10555	The result of the GraphComputer's computation.
10556	Simple implementation of the ImportCustomizer which allows direct setting of all the different import types.
10557	Direction is used to denote the direction of an Edge or location of a Vertex on an Edge.
10558	Converts a Element to a Map.
10559	Features defined such that they support immutability but allow all other possibilities.
10560	Generalized serializer for {#code Enum} value types.
10561	Immediately notifies all listeners as events arrive.
10562	Options for detaching elements from the graph during eventing.
10563	Gathers messages from callbacks and fires them to listeners.
10564	Stores events in a queue that builds up until the transaction is committed which then fires them in the order they were received.
10565	An interface that represents the capabilities of a Graph implementation.
10566	This should only be used by providers to create keys, labels, etc.
10567	Graph variables are a set of key/value pairs associated with the graph.
10568	Reads a value from a buffer using the TypeSerializer instances configured in the TypeSerializerRegistry.
10569	A GraphComputing step is one that will change its behavior whether its on a GraphComputer or not.
10570	Factory to construct new Graph instances from a Configuration object or properties file.
10571	A enum denoting whether a particular result will be allowed or not.
10572	GraphMigrator takes the data in one graph and pipes it to another graph.
10573	A GraphOp or "graph operation" is a static Bytecode form that does not translate to a traversal but instead refers to a specific function to perform on a graph instance.
10574	An extension to the standard Jackson ObjectMapper which automatically registers the standard GraphSONModule for serializing Graph elements.
10575	The set of available GraphSON versions.
10576	A plugin interface that is used by the GremlinScriptEngineManager to configure special Customizer instances that will alter the features of any GremlinScriptEngine created by the manager itself.
10577	A result returned from a GremlinScriptChecker.parse(String) of a Gremlin string.
10578	A GremlinScriptEngine is an extension of the standard ScriptEngine and provides some specific methods that are important to the TinkerPop environment.
10579	Creates a GremlinScriptEngine implementation and supplies to it any Customizer implementations to it that are available on the GremlinScriptEngineManager.
10580	An implementation of the Comparability/Orderability semantics as defined in the Apache TinkerPop Provider documentation.
10581	The typespace.
10582	This strategy looks for .outE().inV(), .inE().outV() and .bothE().otherV() and replaces these step sequences with .out(), .in() or .both() respectively.
10583	Type of the index as it corresponds to the associated WithOptions.list and WithOptions.map.
10584	This strategy analyzes filter-steps with child traversals that themselves are pure filters.
10585	A generalized custom serializer registry for providers implementing a Graph.
10586	A utility implementation of a Property that only has a key but no value.
10587	A customizer implementation that provides bindings to a GremlinScriptEngine in the ScriptContext.GLOBAL_SCOPE.
10588	Largely a marker interface for builders that construct Mapper instances.
10589	MapReduce is composed of three stages: map, combine, and reduce.
10590	MatchWhereStrategy will fold any post-where() step that maintains a traversal constraint into match().
10591	Merge options relevant to upsert-like steps mergeV() and mergeE() that are applied to the relevant option() modulator.
10592	Implementation for the mergeV() step covering both the start step version and the one used mid-traversal.
10593	The Messenger serves as the routing system for messages between vertices.
10594	A set of BinaryOperator instances that handle common operations for traversal steps.
10595	This strategy will not alter the traversal.
10596	Provides Comparator instances for ordering traversers.
10597	Antlr parse tree context cast helper.
10598	PathProcessStrategy is an OLAP strategy that does its best to turn non-local children in where() and select() into local children by inlining components of the non-local child.
10599	A token used with option().
10600	A Path may have multiple values associated with a single label.
10601	This enumeration allows for the specification of the type of a Property.
10602	Determines the mode of the the IO operation as being for reading or writing (or by default "unset")
10603	A simple abstraction of a "connection" to a "server" that is capable of processing a Traversal and returning results.
10604	Many Step instance can have a variable scope which alter the manner in which the step will behave in relation to how the traversers are processed.
10605	Service calls can appear at the start of a traversal or mid-traversal.
10606	Represents a serializer for types that can be represented as a single value and that can be read and write in a single operation.
10607	StarGraph builder with options to customize its internals
10608	Provides helper functions for reading vertex and edges from their serialized GraphSON forms.
10609	A side-effect step that produces an edge induced subgraph.
10610	A collection of (T)okens which allows for more concise Traversal definitions.
10611	Text is a BiPredicate that determines whether the first string starts with, starts not with, ends with, ends not with, contains or does not contain the second string argument.
10612	Behaviors to supply to the Transaction.onClose(Consumer).
10613	Behaviors to supply to the Transaction.onReadWrite(Consumer).
10614	A status provided to transaction listeners to inform whether a transaction was successfully committed or rolled back.
10615	A Translator will translate Bytecode into another representation.
10616	Traversal enum parser parses all the enums like (e.g.
10617	Contains the Metrics gathered for a Traversal as the result of the .profile()-step.
10618	A TraverserRequirement is a list of requirements that a Traversal requires of a Traverser.
10619	Represents an operation that accepts two input arguments and returns no result.
10620	Defines how data types are handled in GraphSON through the GraphSONMapper.
10621	A VertexProperty is similar to a Property in that it denotes a key/value pair associated with an Vertex, however it is different in the sense that it also represents an entity that it is an Element that can have properties of its own.
10622	A container record that specifies information about animation information for a shape.
10623	If we come across a record we know has children of (potential) interest, but where the record itself is boring, but where other records may care about where this one lives, we create one of these.
10624	A Chunk that either acts as ByteChunk (if not initialized with a node) or lazy loads its binary data from the document (if linked with a node via ByteChunkDeferred.readValue(DocumentNode)).
10625	A group of chunks, that are at the same point in the file structure.
10626	A chunk header from v4 or v5
10627	A chunk header from v6
10628	Within a HMEFMessage, the content is often stored in as RTF, but LZW compressed.
10629	A StreamStore where the data on-disk is compressed, using the crazy Visio LZW
10630	Represents a DIB picture data in a PPT file
10631	A Chunk that is just a placeholder in the MAPIMessage directory structure, which contains children.
10632	A container record that specifies information about the document and document display settings.
10633	Holds the different Slide Size values
10634	If we come across a record we know has children of (potential) interest, but where the record itself is boring, but where other records may care about where this one lives, we create one of these.
10635	If we come across a record we know has children of (potential) interest, but where the record itself is boring, we create one of these.
10636	Represents EMF (Windows Enhanced Metafile) picture data.
10637	Environment, which contains lots of settings for the document.
10638	A container record that specifies information about an ActiveX control.
10639	An atom record that specifies an ActiveX control.
10640	Tne atom that holds metadata on a specific Link in the document.
10641	A container record that specifies information about a movie stored externally.
10642	This class holds the links to exernal objects referenced from the document.
10643	The atom that holds the seed info used by a ExObjList
10644	ExObjRefAtom (3009).
10645	A container record that specifies information about external video data.
10646	Represents an FKP data structure.
10647	Footnote Reference Descriptor (FRD).
10648	See http://www.redferni.uklinux.net/visio/ http://www.gnome.ru/projects/docs/vsdocs.html http://www.gnome.ru/projects/docs/slide1.png http://www.gnome.ru/projects/docs/slide2.png
10649	A decoder for the crazy LZW implementation used in Visio.
10650	This record aborts a path bracket or discards the path from a closed path bracket.
10651	The EMR_ARC record specifies an elliptical arc.
10652	The EMR_ARCTO record specifies an elliptical arc.
10653	This record opens a path bracket in the current playback device context.
10654	The EMR_CHORD record specifies a chord, which is a region bounded by the intersection of an ellipse and a line segment, called a secant.
10655	This record closes an open figure in a path.
10656	The EMR_ELLIPSE record specifies an ellipse.
10657	This record closes a path bracket and selects the path defined by the bracket into the playback device context.
10658	The EMR_LINETO record specifies a line from the current position up to, but not including, the specified point.
10659	The EMR_PIE record specifies a pie-shaped wedge bounded by the intersection of an ellipse and two radials.
10660	The EMR_POLYPOLYGON record specifies a series of closed polygons.
10661	The EMR_RECTANGLE record draws a rectangle.
10662	The EMR_ROUNDRECT record specifies a rectangle with rounded corners.
10663	The EMR_MOVETOEX record specifies coordinates of the new current position, in logical units.
10664	The EMR_STROKEPATH record renders the specified path by using the current pen.
10665	The EMR_FRAMERGN record draws a border around the specified region using the specified brush.
10666	The EMR_STRETCHBLT record specifies a block transfer of pixels from a source bitmap to a destination rectangle, optionally in combination with a brush pattern, according to a specified raster operation, stretching or compressing the output to fit the dimensions of the destination, if necessary.
10667	The EMR_CREATEBRUSHINDIRECT record defines a logical brush for graphics operations.
10668	The EMR_CREATEDIBPATTERNBRUSHPT record defines a pattern brush for graphics operations.
10669	The EMR_CREATEPEN record defines a logical pen for graphics operations.
10670	The EMR_SETMITERLIMIT record specifies the limit for the length of miter joins for the playback device context.
10671	The EMR_CREATEPALETTE record defines a logical palette for graphics operations.
10672	The EMR_RESIZEPALETTE record increases or decreases the size of an existing LogPalette object
10673	The ICMMode enumeration defines values that specify when to turn on and off ICM.
10674	The EMR_SETPALETTEENTRIES record defines RGB color values in a range of entries for an existing LogPalette object.
10675	The BrushType enumeration defines types of graphics brushes, which are used to fill graphics regions.
10676	The EmfPlusHatchBrushData object specifies a hatch pattern for a graphics brush.
10677	The EmfPlusPathGradientBrushData object specifies a path gradient for a graphics brush.
10678	The EmfPlusSolidBrushData object specifies a solid color for a graphics brush.
10679	The EmfPlusTextureBrushData object specifies a texture image for a graphics brush.
10680	The EmfPlusDrawDriverString record specifies text output with character positions.
10681	The EmfPlusDrawImage record specifies drawing a scaled image.
10682	The EmfPlusDrawImagePoints record specifies drawing a scaled image inside a parallelogram.
10683	The EmfPlusDrawPath record specifies drawing a graphics path
10684	The EmfPlusFillRects record specifies filling the interiors of a series of rectangles.
10685	The EmfPlusFillRegion record specifies filling the interior of a graphics region.
10686	The GraphicsVersion enumeration defines versions of operating system graphics that are used to create EMF+ metafiles.
10687	The ImageDataType enumeration defines types of image data formats.
10688	The WrapMode enumeration defines how the pattern from a texture or gradient brush is tiled across a shape or at shape boundaries, when it is smaller than the area being filled.
10689	The EmfPlusSave record saves the graphics state, identified by a specified index, on a stack of saved graphics states.
10690	The EmfPlusSetWorldTransform record sets the world transform according to the values in a specified transform matrix.
10691	The ObjectType enumeration defines types of graphics objects that can be created and used in graphics operations.
10692	The PathPointType enumeration defines types of points on a graphics path.
10693	The DashedLineCapType enumeration defines types of line caps to use at the ends of dashed lines that are drawn with graphics pens.
10694	The LineCapType enumeration defines types of line caps to use at the ends of lines that are drawn with graphics pens.
10695	The LineJoinType enumeration defines ways to join two lines that are drawn by the same graphics pen and whose ends meet.
10696	The LineStyle enumeration defines styles of lines that are drawn with graphics pens.
10697	The PenAlignment enumeration defines the distribution of the width of the pen with respect to the line being drawn.
10698	The EMR_SELECTCLIPPATH record specifies the current path as a clipping region for a playback device context, combining the new region with any existing clipping region using the specified mode.
10699	A utility for extracting out the message body, and all attachments from a HMEF/TNEF/winmail.dat file
10700	Parent class of all HPBF sub-parts, handling the fiddly reading in / writing out bits for all of them.
10701	Represents an AutoShape.
10702	Predefined fonts
10703	This class represents a slide's notes in a PowerPoint Document.
10704	A class that represents object data embedded in a slide show.
10705	A class that represents sound data embedded in a slide show.
10706	Represents a TextFrame shape in PowerPoint.
10707	Title masters define the design template for slides with a Title Slide layout.
10708	The BinaryRasterOperation Enumeration section lists the binary raster-operation codes.
10709	A 16-bit unsigned integer that defines the brush style.
10710	The META_ELLIPSE record draws an ellipse.
10711	The META_FRAMEREGION record draws a border around a specified region using a specified brush.
10712	The META_LINETO record draws a line from the drawing position that is defined in the playback device context up to, but not including, the specified point.
10713	The META_MOVETO record sets the output position in the playback device context to a specified point.
10714	The META_POLYGON record paints a polygon consisting of two or more vertices connected by straight lines.
10715	The META_POLYPOLYGON record paints a series of closed polygons.
10716	The META_RECTANGLE record paints a rectangle.
10717	The META_ROUNDRECT record paints a rectangle with rounded corners.
10718	The META_SELECTOBJECT record specifies a graphics object for the playback device context.
10719	The META_SETPIXEL record sets the pixel at the specified coordinates to the specified color.
10720	The MetafileEscapes specifies printer driver functionality that might not be directly accessible through WMF records
10721	The ColorUsage Enumeration (a 16-bit unsigned integer) specifies whether a color table exists in a device-independent bitmap (DIB) and how to interpret its values, i.e.
10722	The META_EXTFLOODFILL record fills an area with the brush that is defined in the playback device context.
10723	The META_FILLREGION record fills a region using a specified brush.
10724	The META_FLOODFILL record fills an area of the output surface with the brush that is defined in the playback device context.
10725	The META_INVERTREGION record draws a region in which the colors are inverted.
10726	The META_PAINTREGION record paints the specified region by using the brush that is defined in the playback device context.
10727	The META_PATBLT record paints a specified rectangle using the brush that is defined in the playback device context.
10728	The META_SETPOLYFILLMODE record sets polygon fill mode in the playback device context for graphics operations that fill polygons.
10729	A 16-bit unsigned integer that defines polygon fill mode.
10730	The META_STRETCHBLT record specifies the transfer of a block of pixels according to a raster operation, with possible expansion or contraction.
10731	The output quality defines how carefully to attempt to match the logical font attributes to those of an actual physical font.
10732	The output precision defines how closely the output must match the requested font's height, width, character orientation, escapement, pitch, and font type.
10733	An util class for saving the state of a Graphics2D object
10734	The HatchStyle Enumeration specifies the hatch pattern.
10735	A 16-bit unsigned integer that defines the mapping mode.
10736	The META_CREATEBRUSHINDIRECT record creates a Brush Object from a LogBrush Object.
10737	The META_DELETEOBJECT record deletes an object, including Bitmap16, Brush, DeviceIndependentBitmap, Font, Palette, Pen, and Region.
10738	The META_RESTOREDC record restores the playback device context from a previously saved device context.
10739	The META_SAVEDC record saves the playback device context for later retrieval.
10740	The META_SETBKCOLOR record sets the background color in the playback device context to a specified color, or to the nearest physical color if the device cannot represent the specified color.
10741	The META_SETBKMODE record defines the background raster operation mix mode in the playback device context.
10742	A 16-bit unsigned integer that defines background mix mode.
10743	The META_SETLAYOUT record defines the layout orientation in the playback device context.
10744	The META_SETMAPMODE record defines the mapping mode in the playback device context.
10745	The META_SETMAPPERFLAGS record defines the algorithm that the font mapper uses when it maps logical fonts to physical fonts.
10746	The META_SETRELABS record is reserved and not supported.
10747	The META_SETROP2 record defines the foreground raster operation mix mode in the playback device context.
10748	The META_SETSTRETCHBLTMODE record defines the bitmap stretching mode in the playback device context.
10749	The META_REALIZEPALETTE record maps entries from the logical palette that is defined in the playback device context to the system palette.
10750	The META_RESIZEPALETTE record redefines the size of the logical palette that is defined in the playback device context.
10751	The META_SELECTPALETTE record defines the current logical palette with a specified Palette Object.
10752	Available record types for WMF
10753	The META_SETTEXTALIGN record defines text-alignment values in the playback device context.
10754	The META_SETTEXTCHAREXTRA record defines inter-character spacing for text justification in the playback device context.
10755	The META_SETTEXTCOLOR record defines the text foreground color in the playback device context.
10756	The META_SETTEXTJUSTIFICATION record defines the amount of space to add to break characters in a string of justified text.
10757	The META_TEXTOUT record outputs a character string at the specified location by using the font, background color, and text color that are defined in the playback device context.
10758	The META_EXCLUDECLIPRECT record sets the clipping region in the playback device context to the existing clipping region minus the specified rectangle.
10759	The META_INTERSECTCLIPRECT record sets the clipping region in the playback device context to the intersection of the existing clipping region and the specified rectangle.
10760	The META_OFFSETCLIPRGN record moves the clipping region in the playback device context by the specified offsets.
10761	The META_OFFSETVIEWPORTORG record moves the viewport origin in the playback device context by specified horizontal and vertical offsets.
10762	The META_OFFSETWINDOWORG record moves the output window origin in the playback device context by specified horizontal and vertical offsets.
10763	The META_SCALEVIEWPORTEXT record scales the horizontal and vertical extents of the viewport that is defined in the playback device context by using the ratios formed by the specified multiplicands and divisors.
10764	The META_OFFSETWINDOWORG record moves the output window origin in the playback device context by specified horizontal and vertical offsets.
10765	The META_SELECTCLIPREGION record specifies a Region Object to be the current clipping region.
10766	The META_SETVIEWPORTEXT record sets the horizontal and vertical extents of the viewport in the playback device context.
10767	The META_SETVIEWPORTORG record defines the viewport origin in the playback device context.
10768	The META_SETWINDOWEXT record defines the horizontal and vertical extents of the output window in the playback device context.
10769	The META_SETWINDOWORG record defines the output window origin in the playback device context.
10770	Definition of the indent level of some text.
10771	This class represents the metadata of a link in a slide/notes/etc.
10772	Represents a JPEG picture data in a PPT file
10773	Enum to specify initial remapping of the FormatID based on thd LCID
10774	Master slide
10775	A MAPI file can be an email (NOTE) or a number of other types
10776	A pure-MAPI attribute holding RTF (compressed or not), which applies to a HMEFMessage or one of its Attachments.
10777	Specifies the Indent Level for the text
10778	A Chunk that holds the details given back by the server at submission time.
10779	Represents a movie in a PowerPoint document.
10780	Collection of convenience chunks for the NameID part of an outlook file
10781	Master container for Notes.
10782	Word document notes types (and their FIB field indices)
10783	Lightweight representation of a text piece.
10784	Represents a PAP FKP.
10785	A record that can be referenced in PersistPtr storage.
10786	Represents Macintosh PICT picture data.
10787	Picture types supported by MS Word format
10788	Represents a PNG picture data in a PPT file
10789	A stream that holds pointers, possibly in addition to some other data too.
10790	Factor class to create the appropriate pointers, based on the version of the file
10791	A Pointer from v5
10792	A simple closed polygon shape
10793	Records which either care about where they are on disk, or have other records who care about where they are, will implement this interface.
10794	A special (and dangerous) kind of Record Atom that cares about where it lives on the disk, or who has other Atoms that care about where this is on the disk.
10795	Utility class which dumps raw contents of a ppt file into XML format
10796	Represents a lightweight node in the Trees used to store content properties.
10797	Parent of all Quill CONTENTS bits
10798	Type 12 holds hyperlinks, and is very complex.
10799	Abstract class which all atom records will extend.
10800	List of all known record types in a PowerPoint document, and the classes that handle them.
10801	String table containing the names of authors of revision marks, e-mails and comments in this document.
10802	An atom record that specifies that a shape is a header or footer placeholder shape
10803	String table containing the history of the last few revisions ("saves") of the document.
10804	Master container for Slides.
10805	Holds the geometry of the Slide, and the ID of the placeholders on the slide.
10806	Inner class to wrap up a matching set of records that hold the text for a given sheet.
10807	A SlidePersist Atom (type 1011).
10808	A container holding information about a sound.
10809	Is a container for all sound related atoms and containers.
10810	Storage for embedded sounds.
10811	A PropertiesChunk for a Storage Properties, such as Attachments and Recipients.
10812	Represents a document's stylesheet.
10813	Document text parts that can have text pieces (CPs)
10814	A TextBytesAtom (type 4008).
10815	A TextCharsAtom (type 4000).
10816	Lightweight representation of a text piece.
10817	A enum that specifies the spelling status of a run of text.
10818	Tne atom that holds starting and ending character positions of a hyperlink
10819	If we come across a record we don't know about, we create one of these.
10820	An atom record that specifies a reference to the VBA project storage.
10821	A container record that specifies VBA information for the document.
10822	Class to find all the text in a Visio file, and return it.
10823	Represents a WMF (Windows Metafile) picture data.
10824	The Xst structure is a string.
10825	The AuthenticationType, either CONTAINER or APPLICATION
10826	Internal POI use only - parent of XSSF and SXSSF formula evaluators
10827	The different kinds of IBody that exist
10828	Specifies all types of borders which can be specified for WordprocessingML objects which have a border.
10829	Specifies the set of possible restart locations which may be used as to determine the next available line when a break's type attribute has a value of textWrapping.
10830	Specifies the possible types of break characters in a WordprocessingML document.
10831	The cells in a workbook can be calculated in different orders depending on various optimizations and dependencies.
10832	Specifies the location where the X.509 certificate that is used in signing is stored.
10833	Represents a immutable MIME ContentType value (RFC 2616 §3.7)
10834	A variant of SXSSFSheet that uses a RowGeneratorFunction to lazily create rows.
10835	EncryptedTempData can be used to buffer binary data in a secure way, by using encrypted temp files.
10836	Provide useful method to manage file.
10837	Specifies the logic which shall be used to calculate the line spacing of the parent object when it is displayed in the document.
10838	Specifies type of automatic numbered bullet points that should be applied to a paragraph.
10839	Build an output stream for MemoryPackagePart.
10840	Prints out the contents of a OOXML container.
10841	Specifies package access.
10842	Package properties unmarshaller.
10843	Specifies all types of alignment which are available to be applied to objects in a WordprocessingML document
10844	Only visits text nodes, accumulates text content into a string The text is returned in arbitrary order, with no regards to the location of the text on the page.
10845	Table of strings shared across all sheets in a workbook.
10846	JSR105 Signature Facet base class.
10847	Interface for the signature policy service.
10848	Date: 11/5/11
10849	Unlike SheetDataWriter, this writer does not create a temporary file, it writes data directly to the provided OutputStream.
10850	Sets alignment values allowed for Tables and Table Rows
10851	Sets height rule values allowed for Table Rows
10852	The width types for tables and table cells.
10853	Specifies whether the target of a PackageRelationship is inside or outside a Package.
10854	Specified a list of text alignment types
10855	Specifies all types of vertical alignment which are available to be applied to of all text on each line displayed within a paragraph.
10856	Specifies a list of auto-fit types.
10857	Text Capitalization that is to be applied to the text run.
10858	Vertical Text Types
10859	Specified a list of text font alignment types
10860	Text Horizontal Overflow
10861	Text Vertical Overflow
10862	Specifies the types of patterns which may be used to create the underline applied beneath the text in a run.
10863	Specifies possible values for the alignment of the contents of this run in relation to the default appearance of the run's text.
10864	Instantiates sub-classes of POIXMLDocumentPart depending on their relationship type
10865	This is your high-level starting point for working with Visio XML documents (.vsdx).
10866	Encapsulates logic to read color definitions from DrawingML and convert them to java.awt.Color
10867	Representation of a DrawingML Diagram
10868	Helper class to extract text from an OOXML Powerpoint file
10869	Represents a table in a .pptx presentation
10870	A shared style sheet in a .pptx slide show
10871	Reader for xlsb files.
10872	Table style names defined in the OOXML spec.
10873	The enumeration value indicating the side being used for a cell border.
10874	Handles data formats for XSSF.
10875	Even page footer value.
10876	Even page header value.
10877	Maps an XLSX to an XML according to one of the mapping defined.
10878	First page footer content.
10879	First page header content.
10880	Odd page footer value.
10881	Odd page header value.
10882	Raw picture data, normally attached to a SpreadsheetML Drawing.
10883	Represents the two different kinds of XML-based OOXML document.
10884	This class is a wrapper around the CTXmlColumnPr (Open Office XML Part 4: chapter 3.5.1.7)
10885	Default Character Run style, from which other styles will override TODO Share logic with XWPFRun which also uses CTRPr
10886	Sketch of XWPF footer class
10887	Sketch of XWPF header class
10888	A run of text with a Hyperlink applied to it.
10889	An Interface to make getting the different bits of a Zip File easy.
10890	A ZipEntrySource wrapper around a ZipFile.
10891	Zip part marshaller.
10892	The reason that a particular session closed.
10893	An interface that makes it possible to plugin different Netty pipelines to Gremlin Server, enabling the use of different protocols, mapper security and other such functions.
10894	The type of the request as determined by the contents of Tokens.ARGS_GREMLIN.
10895	Start and stop Gremlin Server.
10896	Constructs a Channelizer that exposes an HTTP endpoint in Gremlin Server.
10897	Provides a method in which users can hook into the startup and shutdown lifecycle of Gremlin Server.
10898	Interface for providing commands that websocket requests will respond to.
10899	An encapsulation of the evaluation of the body of an action so it is available to a tag handler.
10900	The BodyTag interface extends IterationTag by defining additional methods that let a tag handler manipulate the content of evaluating its body.
10901	Contains information about an error, for error pages.
10902	Information for a function in a Tag Library.
10903	Stores application-scoped information for the JSP container.
10904	Encapsulates a portion of JSP code in an object that can be invoked as many times as needed.
10905	The JspPage interface describes the generic interaction that a JSP Page Implementation class must satisfy; pages that use the HTTP protocol are described by the HttpJspPage interface.
10906	The interface of a classic tag handler that does not want to manipulate its body.
10907	Wraps any SimpleTag and exposes it using a Tag interface.
10908	The (translation-time only) attribute/value information for a tag instance.
10909	Optional class provided by the tag library author to describe additional translation-time information not described in the TLD.
10910	Tag information for a tag file in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.
10911	Translation-time validator class for a JSP page.
10912	Variable information for a tag in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.
10913	The auxiliary interface of a Tag, IterationTag or BodyTag tag handler that wants additional hooks for managing resources.
10914	A validation message from either TagLibraryValidator or TagExtraInfo.
10915	Information on the scripting variables that are created/modified by a tag (at run-time).
10916	A class for registered listeners on a retained lifecycle (generally backed up by a ViewModel).
10917	Internal implementation.
10918	Absolute path driver URL provider.
10919	Apollo driver URL provider.
10920	Batch execution unit.
10921	Batch executor for Statement.
10922	Classpath driver URL provider.
10923	JDBC context.
10924	Method invocation recorder.
10925	ShardingSphere driver URL provider.
10926	AbstractEncoder is an Encoder that implements all of Encoder's methods validating the input, but has those methods defer logic to a new method, AbstractEncoder.decodeUnchecked(byte[], int, int).
10927	An abstract identifier class for comparing equality of identifiers of the same type.
10928	This class contains all API entry points created in 2.0.0 or later.
10929	Builder methods for authentication
10930	Builds AccumuloClient or client Properties after all options have been specified
10931	Builder methods for creating AccumuloClient using properties
10932	Build methods for SASL
10933	Formatter that will aggregate entries for various display purposes.
10934	Accumulo is a distributed tree with three levels.
10935	Controls how Accumulo metadata is read.
10936	Implementations of BatchDeleter support efficient deletion of ranges in accumulo.
10937	In exchange for possibly returning scanned entries out of order, BatchScanner implementations may scan an Accumulo table more efficiently by Looking up multiple ranges in parallel.
10938	Send Mutations to a single Table in Accumulo.
10939	Access point to read a block.
10940	BCFile writer, the entry point for creating a new BCFile.
10941	A family of combiners that treat values as BigDecimals, encoding and decoding using the built-in BigDecimal String input/output functions.
10942	Cache statistics.
10943	A memory-bound queue that will grow until an element brings total size >= maxSize.
10944	Class for determining the "size" of a class, an attempt to calculate the actual bytes that an object of this class will occupy in memory The core of this class is taken from the Derby project
10945	A column, specified by family, qualifier, and visibility.
10946	The node types in a parse tree for a visibility expression.
10947	Can be configured per table to dispatch compactions to different compaction services.
10948	ConditionalWriter provides the ability to do efficient, atomic read-modify-write operations on rows.
10949	The default Accumulo selector for scan servers.
10950	Specifies that connection info was configured
10951	Configuration keys for general configuration options.
10952	Configuration keys for available Instance types.
10953	Constraint objects are used to determine if mutations will be applied to a table.
10954	The environment within which a constraint exists.
10955	The environment within which a constraint exists.
10956	The ContextClassLoaderFactory provides a mechanism for various Accumulo components to use a custom ClassLoader for specific contexts, such as loading table iterators.
10957	This class counts arbitrary keys while defending against too many keys and keys that are too long.
10958	Useful information provided to the crypto implementation
10959	Where in Accumulo the on-disk file encryption takes place.
10960	A self-contained cryptographic service.
10961	A Factory that returns a CryptoService based on the environment and configuration.
10962	An AccumuloConfiguration that contains only default values for properties.
10963	A constraints that limits the size of keys to 1mb.
10964	Configuration options for obtaining a delegation token created by SecurityOperations.getDelegationToken(DelegationTokenConfig)
10965	Handles serialization of DelegationTokenConfig
10966	This summarizer tracks the total number of delete Keys seen and the total number of keys seen.
10967	The value for the durability of a BatchWriter or ConditionalWriter.
10968	Summarizer that computes summary information about field lengths.
10969	Class implementation that will encrypt a file.
10970	Configuration keys for AccumuloConfiguration.
10971	Rate limiter from the Guava library.
10972	Constructs a PriorityQueue of multiple SortedKeyValueIterators.
10973	A ImportConfiguration builder
10974	Creation mode for table creation.
10975	Configuration keys for various features.
10976	Configuration keys for Scanner.
10977	A strongly typed representation of an Accumulo instance ID.
10978	Utility class for Iterators.
10979	Even though this type is not in a public API package, its used by methods in the public API.
10980	Authentication token for Kerberos authenticated clients
10981	Base Builder interface which can be used to set the Key timestamp and delete marker and to build the Key.
10982	A Combiner that interprets Values as Longs and returns the largest Long among them.
10983	Holds references to files that need replication
10984	Immutable metadata time object
10985	Prior to 2.1.0 Accumulo used the Hadoop Metrics2 framework.
10986	A Combiner that interprets Values as Longs and returns the smallest Long among them.
10987	An iterator capable of iterating over other iterators in sorted order.
10988	This class enables efficient batch writing to multiple tables.
10989	Formats available for serializing Mutations.
10990	The default encryption strategy which does nothing.
10991	This constraint ensures mutations do not have deletes.
10992	A rate limiter which doesn't actually limit rates at all.
10993	Provides a stop watch for timing a single type of event.
10994	The OptionDescriber interface allows you to set up iterator properties interactively in the accumulo shell.
10995	Configuration keys for various features.
10996	Configuration keys for BatchWriter.
10997	Specifications for part of a Key.
10998	An ArrayList implementation that represents a type-safe pre-allocated array.
10999	A RandomVolumeChooser that selects preferred volumes to use from the provided volume options.
11000	Types of Property values.
11001	Possible operational status codes.
11002	A GC reference used for collecting files and directories into a single stream.
11003	A GC reference to a Tablet directory, like t-0003.
11004	A GC reference used for streaming and delete markers.
11005	RFile is Accumulo's internal storage format for Key Value pairs.
11006	This is an intermediate interface in a larger builder pattern.
11007	This is an intermediate interface in a larger builder pattern.
11008	This class extends CipherOutputStream to include a way to track the number of bytes that have been encrypted by the stream.
11009	This class is used to serialize and deserialize root tablet metadata using GSon.
11010	This sampler can hash any subset of a Key's fields.
11011	Group Key/Value pairs into Iterators over rows.
11012	Enumeration around Sasl.QOP
11013	The SASL mechanism to use for authentication
11014	Communicates how a scan should use cache.
11015	Consistency level for the scanner.
11016	A client side plugin that determines what scan servers to use for eventually consistent scans.
11017	An optimized version of SkippingIterator.
11018	Formats the rows in a METADATA table scan to show distribution of shards over servers per day.
11019	Provides the ability to retrieve a RateLimiter keyed to a specific string, which will dynamically update its rate according to a specified callback function.
11020	Dispatcher that supports simple configuration for making tables use compaction services.
11021	If no options are given, then this will default to an executor named default and ScanDispatch.CacheUsage.TABLE for index and data cache.
11022	This class automates management of static singletons that maintain state for Accumulo clients.
11023	These enums determine the behavior of the SingletonManager.
11024	Every call to SkippingIterator.next() and SkippingIterator.seek(Range, Collection, boolean) calls the parent's implementation and then calls the implementation's SkippingIterator.consume().
11025	Does not show contents from scan, only displays statistics.
11026	Object representing a tablet file entry stored in the metadata table.
11027	Instances of this interface can be configured for Accumulo tables.
11028	When Accumulo calls methods in this interface, it will call Summarizer.Collector.accept(Key, Value) zero or more times and then call Summarizer.Collector.summarize(Summarizer.StatisticConsumer) once.
11029	A Combiner that interprets Values as Longs and returns their sum.
11030	This class implements loading in such a way that load operations for the same block will not run concurrently.
11031	Options giving control of how the bulk import file mapping is done.
11032	This class is responsible for managing the distribution of tablets throughout an Accumulo cluster.
11033	Serializes and deserializes Thrift messages to and from byte arrays.
11034	The type of ordering to use for the table's entries (default is MILLIS)
11035	A generic Version class.
11036	A class that validates arguments of a specified generic type.
11037	A class for accumulating constraint violations across a number of mutations.
11038	A constraint that checks the visibility of columns against the actor's authorizations.
11039	A class which evaluates visibility expressions against a set of authorizations.
11040	Encapsulates a FileSystem and a base Path within that filesystem.
11041	A scope for the volume chooser environment; a TABLE scope should be accompanied by a tableId.
11042	Basic Volume implementation that contains a FileSystem and a base path that should be used within that filesystem.
11043	The WholeRowIterator is designed to provide row-isolation so that queries see mutations as atomic.
11044	This callback handles the state of yielding within an iterator
11045	A factory for ZooCache instances.
11046	Enumeration of the options for what happens to a parent component when one of its child components is cancelled.
11047	Utility methods to create Producers.
11048	A token that represents an individual producer method.
11049	A hook for monitoring execution of production components.
11050	Abstract column class for the alias cell table columns.
11051	Base class for clipboard tabs.
11052	On hover intent handler.
11053	Dialog to select a resource model for a new resource.
11054	The create new gallery folder dialog.
11055	Abstract base class for pattern panel controllers.
11056	Basic preview detail tab layout.
11057	An abstract class for widgets which represent options for select boxes.
11058	Abstract button class implementing common methods of I_CmsToolbarButton for container-page tool-bar buttons.
11059	Abstract class which implements the common part of all toolbar handler functionality.
11060	Use this widget factory to use stand alone widgets.
11061	Represents information about which field in the property editor dialog is active.
11062	The selection option.
11063	Sitemap context menu add entry to navigation.
11064	Factory to generate basic input widget.
11065	Factory to generate basic input widget.
11066	Submenu for advanced options.
11067	The alias editor.
11068	Helper class used to perform an action when multiple asynchronous tasks have finished.
11069	Widget factory for creating attribute select widgets.
11070	Sitemap context menu availability entry.
11071	The binary resource preview factory.
11072	A coordinate system transform for translating between coordinates relative to a rectangle and the coordinates relative to a second rectangle with the first rectangle fit into the second one, either by just centering if possible or by centering and scaling it.
11073	Scale mode.
11074	A timer which sends an RPC call regularly to keep the session alive and receive workplace broadcasts.
11075	The context menu entry for "bumping" a detail page, i.e.
11076	Takes care of the burst of the same event, by skipping the first ones and executing only the last one.
11077	Factory to generate basic input widget.
11078	A factory for creating CmsCategorizedSelectWidget objects.
11079	Dialog to display and change resource categories.
11080	Sorting parameters.
11081	Widget representing a category in the category mode of the sitemap editor.
11082	Factory to generate basic input widget.
11083	Various static utility methods for dealing with cell tables.
11084	Menu entry for changing categories.
11085	Widget used to change the current user's password.
11086	The various style options for the checkable date panel.
11087	Factory to generate basic input widget.
11088	A menu entry widget for selecting choices for complex choice values.
11089	Event handler to toggle the I_CmsLayoutBundle.I_CmsStateCss.cmsHovering() class on mouse out/over.
11090	Client side button bar widget for multivalue widget groups.
11091	Class used to display a client variant of a template context.
11092	Helper class that asynchronously loads all the necessary scripts and stylesheets for the CodeMirror editor widget, and executes a callback at the end.
11093	Simple toggle button for the CodeMirror toolbar.
11094	Widget factory for the CodeMirror editor widget.
11095	Factory to generate basic input widget.
11096	Factory to generate basic input widget.
11097	A coordinate system transform represented as a composition of multiple other transforms.
11098	Provides a confirmation dialog with ok and cancel button.
11099	Interface with message string constants.
11100	Helper class for resizing containers in the drag/drop process when an element is dropped into them that is of lower height than the empty container HTML.
11101	Enum which is used to control how elements are removed from the page.
11102	Visitor interface used to process the current container content on the page.
11103	Enum for the event type.
11104	Additional options for the editor dialog.
11105	The result item context menu button.
11106	An entry in a CmsContextMenu.
11107	Context menu entry for copying a model page to be used as a model group page.
11108	The create new gallery folder dialog.
11109	Context menu entry for copying a model page.
11110	Menu entry for the "copy page" command.
11111	A list item widget class which also contains a resource type info bean, for use in creating new sitemap entries.
11112	The types of creatable sitemap entries.
11113	Bean containing the title and name of a category.
11114	The create new gallery folder dialog.
11115	Sitemap context menu create gallery entry.
11116	UiBinder widget for the create-mode selection dialog content.
11117	The client-side widget for data view items.
11118	Represents a data view value to be read from or written to the editor by the data view widget.
11119	Class responsible for reading data view values from the editor, and writing them back to the editor.
11120	Custom event type for CmsDateBox changes.
11121	The standard formats.
11122	A basic debug log, to print messages into the client window.
11123	The default string model implementation.
11124	Context menu entry for deleting a category.
11125	Sitemap context menu delete entry.
11126	Sitemap context menu delete entry.
11127	A dialog which informs the user that deleting a resource will break links from other resources.
11128	Widget factory for the dependent select widget.
11129	Context menu handler to be used within overlay dialogs.
11130	Sitemap context menu disable model page entry.
11131	Widget factory for the display type select widget.
11132	Factory to generate basic input widget.
11133	The animation types.
11134	Scroll direction enumeration.
11135	The allowed drag and drop orientation.
11136	HTML tag attributes.
11137	Helper class to encapsulate an attribute/value pair.
11138	CSS Colors.
11139	HTML entities.
11140	Form methods.
11141	CSS Properties.
11142	CSS Property values.
11143	HTML Tags.
11144	Enumeration of link/form targets.
11145	Dialog for selecting between copying and reusing an element dropped from the clipboard into the page.
11146	Helper functions to deal with editable data.
11147	Sitemap context menu edit entry.
11148	Context menu entry for editing a model page.
11149	The selection option.
11150	Sitemap context menu new entry.
11151	An optional container element button.
11152	The model group options.
11153	Widget containing a select box for selecting formatters and a help icon.
11154	Exportable wrapper class for the VIE instance.
11155	Helper class for displaying errors.
11156	Value change event with additional data.
11157	Client-side implementation for the ExternalLayout addon.
11158	The selection option.
11159	Content of the tool-bar menu favorite tab.
11160	Form field panel which puts its form fields into a field set, and also displays a resource info box.
11161	Data needed to create a tooltip.
11162	Widget which displays the focal point for an image.
11163	Handles manipulation of the focal point in the gallery dialog.
11164	An extension of CmsTextBox that keeps information about its focus state.
11165	Native preview handler that focuses the on scroll wheel mouse event on the given scroll panel.
11166	Widget factory for the dependent select widget.
11167	Factory class to create gallery dialog with or without parameter.
11168	Sitemap context menu open in explorer entry.
11169	Sitemap context menu got page entry.
11170	Sitemap context menu goto sub sitemap entry.
11171	Sitemap context menu hide in navigation entry.
11172	Enumeration of available border colours.
11173	Sitemap context menu button.
11174	Sitemap hoverbar "go to page" button.
11175	Button used to create new model pages.
11176	Factory to generate basic input widget.
11177	Advanced image tag properties form, use in editor mode only.
11178	Advanced image tag properties tab, use in editor mode only.
11179	Simple image tag properties tab, use in editor mode only.
11180	The widget to display the format information of the selected image.
11181	Widget for displaying image information.
11182	The image resource preview factory.
11183	Enumeration of image tag attribute names.
11184	A widget used for displaying the results of an alias import operation.
11185	The CSS classes used for this widget.
11186	Form field panel for the sitemap entry editor in the navigation mode.
11187	This class extends the basic list item widget with the ability to load additional info items asnchronously via RPC.
11188	The info option.
11189	The selection option.
11190	Tree item for lazily loaded list trees.
11191	Enum for indicating the load state of a tree item.
11192	Factory to generate basic input widget.
11193	Additional info item HTML.
11194	Background color values.
11195	A utility class for partitioning a list of items (each of which has a given size) into one or more batches of consecutive items such that each batch except the last one consists of just enough items to make the total sum of item sizes in the batch greater or equal than a given parameter.
11196	Tab widget to display a CmsList.
11197	Factory to generate basic input widget.
11198	Factory to generate a location picker widget.
11199	Sitemap context menu show lock report entry.
11200	Handles client side logging.
11201	GWT wrapper for programmatic media query checking.
11202	Singleton class that evaluates, and keeps track of changes for, a fixed set of media queries and sets CSS classes on the body element depending on which of the media queries match.
11203	Sitemap context menu merge entry.
11204	Displays a message text with an icon in front.
11205	The selection option.
11206	Factory to generate basic input widget.
11207	Implements a select cell that can contain multiple entries.
11208	Factory to generate basic input widget.
11209	Factory to generate basic input widget.
11210	Sitemap entry editor class for the navigation mode.
11211	Sitemap context menu new entry.
11212	Notification Mode.
11213	Notification Type.
11214	Widget for a single notification message.
11215	The toolbar notification widget.
11216	Sitemap context menu create gallery entry.
11217	Singleton class that manages showing / hiding of toolbars in touch-only mode in the page editor.
11218	Sitemap context menu goto parent sitemap entry.
11219	Factory to generate basic input widget.
11220	Controller for the daily pattern.
11221	Controller for the individual pattern panel.
11222	Controller for the monthly pattern panel.
11223	Controller for the weekly pattern panel.
11224	The weekly pattern panel.
11225	Controller for the yearly pattern panel.
11226	Handles fragment changes by closing the active popups.
11227	Position area.
11228	Factory to generate basic input widget.
11229	The widget to display the properties of the selected resource.
11230	A combo box class for the property dialog.
11231	Widget for defining new properties.
11232	The widget to display a simple form with a label and an text box.
11233	This is just a select box with some special text messages for use in the property dialog.
11234	A confirmation message dialog which can be displayed after the publish dialog has been closed.
11235	A type which represents the state of a publish action.
11236	A bean containing statistics about the states of publish items in the publish dialog.
11237	The enum for the publish item state.
11238	Helper class for periodically checking a set of elements for publish locks and then reloading the corresponding elements when they are no longer locked.
11239	Data with which to update a check box.
11240	The button HTML generator templates.
11241	The quick launch handler interface.
11242	Factory to generate basic input widget.
11243	Content of the tool-bar menu recent tab.
11244	Sitemap context menu update sitemap entry.
11245	An enum specifying whose values specify whether an entry or its parent need to be reloaded.
11246	Dialog for asking the user whether elements which were removed from the container page should be deleted.
11247	Class with message accessors for the UiBinder.
11248	Sitemap context menu remove from navigation entry.
11249	The selection option.
11250	Message accessor class for the Rename dialog.
11251	The dialog contents of the 'Rename' dialog.
11252	The replace resource context menu entry.
11253	Keeps track of currently running requests for the purpose of enabling or disabling a waiting indicator.
11254	Confirm dialog with a resource info box.
11255	A single information item for the resource information dialog.
11256	Sitemap context menu resource info entry.
11257	A widget used to display various resource information to a user.
11258	Widget which shows which contents refer to a resource.
11259	Enum for the display mode.
11260	Utility class for the publish dialog.
11261	The content widget for the restore dialog.
11262	The result list item widget.
11263	Scroll handler class which loads more items in the front of the search result list when the user scrolls to the top.
11264	Enum representing different options for the results tab.
11265	Table class used for editing rewrite aliases.
11266	Utility class for deserializing prefetched RPC data.
11267	A panel displaying search parameters associated with a gallery tab.
11268	The parameter types of this tab.
11269	Factory to generate basic input widget.
11270	Text input field with value select opener button and value fader for overflowing values.
11271	Factory to generate basic input widget.
11272	The context menu entry used for opening the "alias editor" dialog.
11273	Client-side implementation of I_CmsSerialDateValue.
11274	Factory for the serial date widget.
11275	Context menu entry for copying a model page.
11276	The selection option.
11277	Sitemap context menu show in navigation entry.
11278	Provides a method to open the workplace.
11279	A panel containing two sub-panels next to each other , one for 'decorations' (check boxes, etc.) and one containing a main widget.
11280	A simple form field container widget.
11281	The sitemap entry editor class for the VFS mode.
11282	Sitemap change event.
11283	Sitemap load event.
11284	Factory to generate basic input widget.
11285	This is a helper class for changing GWT UIObjects' styles between a set of given values.
11286	Sitemap context menu create sub sitemap entry.
11287	Factory to generate basic input widget.
11288	Sitemap toolbar clipboard button.
11289	The context tool-bar menu button.
11290	The edit button holding all edit related methods.
11291	The toolbar button for the favorite dialog.
11292	The gallery tool-bar menu.
11293	Option bar button for displaying resource information.
11294	Button to open the dialog for adding list elements
11295	Button to open the list manager for list configuration contents.
11296	The create new gallery menu.
11297	A popup which can be displayed below buttons in a toolbar.
11298	The publish button holding all publish related methods.
11299	A simplified publish button for the Toolbar direct edit provider.
11300	The remove button holding all remove related methods.
11301	The reset button holding all related methods.
11302	The save button holding all related methods.
11303	The button holding all selection related methods.
11304	The selection button for the direct edit provider.
11305	The properties button holding all properties related methods.
11306	The sitemap button holding all related methods.
11307	Simple translation by x/y offset.
11308	The possible check box states.
11309	Widget used to wrap and manage the state of forms for which the form editing API is used.
11310	The change types.
11311	Container which contains at most one I_CmsUniqueActiveItem.
11312	Upload dialog entry class.
11313	Provides the upload dialog for file API support.
11314	Class with static accessor methods for text messages.
11315	Provides the upload progress information.
11316	A property editor for the upload property dialog.
11317	Dialog used for changing the user settings.
11318	Form panel for editing user settings.
11319	This is a helper class for scheduling form validations.
11320	File widget factory.
11321	Factory to generate basic input widget.
11322	UI widget overriding some functionality from the Vaadin implementation.
11323	Adds constants / static methods for accessing the width class breakpoints.
11324	Helper class to retrieve the computed style of an element.
11325	Handles the clicks on the 'Yes', 'No' and 'Cancel' buttons of the dialog.
11326	Handles actions.
11327	Available button colors.
11328	Available button styles.
11329	CSS style variants.
11330	CSS bundle for GWT cell tables used from ADE.
11331	CSS resource interface for the classic Direct Edit Buttons.
11332	Drag and drop drag handle.
11333	Common interface for enabling/disabling different types of toolbars when using the touch-only mode of the page editor.
11334	Interface to expose the embedded frame methods as Javascript methods so they can be called from a different GWT context.
11335	Interface used to export callback methods from CmsEmbeddedDialogHandler as JavaScript methods.
11336	CSS resource for the CmsFloatDecoratedPanel class.
11337	An enum which represents the validation status of a field.
11338	The interface for objects which should be notified when a CmsForm is successfully submitted.
11339	Field type constants.
11340	Common interface for option buttons within the inheritance container editor.
11341	The display directions.
11342	Interface for widgets which can contain a "ghost value".
11343	Interface for classes which implement the actions that can be triggered from the history dialog.
11344	An inline form parent widget.
11345	Handles updates on the HTML required due to entity data changes during inline editing.
11346	Layout bundle.
11347	Bundle for CSS resources.
11348	Content editor CSS resources bundle.
11349	Resource bundle to access CSS and image resources.
11350	Resource bundle to access CSS and image resources.
11351	Resource bundle to access CSS and image resources.
11352	The button bar CSS.
11353	The context menu CSS classes.
11354	The category CSS.
11355	THe color selector CSS classes.
11356	The content editor dialog CSS.
11357	The context menu CSS classes.
11358	The context menu item CSS classes.
11359	Cropping dialog CSS.
11360	DateBox css.
11361	The drag and drop CSS used by the base module.
11362	The drag and drop CSS classes used also within the container-page CSS.
11363	The error dialog CSS classes.
11364	The context menu CSS classes.
11365	The base gallery field CSS.
11366	The global widget CSS class.
11367	Group container editor CSS.
11368	Header CSS.
11369	The advanced image editor form CSS.
11370	The image editor form CSS.
11371	CSS for the list item creation dialog.
11372	Location picker CSS.
11373	Base location picker CSS.
11374	The menu button CSS.
11375	The opener hover CSS class.
11376	Basic popup CSS classes.
11377	The context menu CSS classes.
11378	The context menu CSS classes.
11379	The scroll bar CSS classes.
11380	The scroll bar CSS classes.
11381	The select area CSS.
11382	The single line list item CSS.
11383	General CSS.
11384	The XML content editor CSS.
11385	Provides a UI list item.
11386	Provides methods for nested drop targets.
11387	Notification widget, most of the work is done on the container element.
11388	Extension of I_CmsSerialDateValue that makes value changes observable.
11389	Property editor CSS.
11390	The properties tab handler of the preview dialog.
11391	The layout bundle used for the publish module.
11392	Resource bundle to access CSS and image resources.
11393	Clipboard CSS.
11394	Root CSS.
11395	The interface for a string model.
11396	Interface for activatable toolbar widgets.
11397	Resource bundle to access CSS and image resources for tool-bar buttons.
11398	The button CSS.
11399	An abstract interface used to coordinate toolbar buttons with a toolbar.
11400	Interface for (invertible) coordinate system transformations.
11401	The upload button interface.
11402	Handler interface for upload buttons which is mainly used to perform actions when the selected file in a file input has been changed.
11403	Common upload dialog interface to be used with the I_CmsUploader.
11404	This is the interface which an I_CmsValidator object uses to either synchronously report the result of a validation or to request an asynchronous validation from the server.
11405	This interface is used to receive notifications about the status of the validation.
11406	Generates an editing widget with the given configuration.
11407	CSS resource bundle for the acacia editor widgets.
11408	JS interop class for native ResizeObserver.
11409	A widget factory for native java script widgets.
11410	Base MessageSerializer that serializers can implement to get some helper methods around configuring a Mapper.Builder.
11411	Properties to supply to the Cluster for authentication purposes.
11412	An enum of the available authorization properties.
11413	Client-side channel initializer interface.
11414	WebSocket Channelizer implementation.
11415	Settings for a Client that involve a session.
11416	Provides a method for selecting the host from a Cluster.
11417	A simple round-robin strategy that simply selects the next host in the Cluster to send the RequestMessage to.
11418	Response status codes for Gremlin Server responses.
11419	An enum of the default serializers.
11420	OpenNLP Chunker annotator.
11421	OpenNLP Name annotator.
11422	The Normalizer tries the structure annotations.
11423	Provides methods to parse numbers which occur in natural language texts.
11424	This class contains util methods for the maxent library.
11425	Abstract base class for OpenNLP Parser annotators.
11426	OpenNLP Part Of Speech annotator.
11427	OpenNLP Sentence annotator.
11428	OpenNLP Tokenizer annotator.
11429	Abstract class for use with the HSSFRequest and HSSFEventFactory, which allows for the halting of processing.
11430	Addition operator PTG the "+" binomial operator.
11431	Java class for CT_AdjPoint2D complex type.
11432	Collects add-in libraries and VB macro functions together into one UDF finder
11433	ArrayPtg - handles arrays The ArrayPtg is a little weird, the size of the Ptg when parsing initially only includes the Ptg sid and the reserved bytes.
11434	The number of axes used on a chart.
11435	Boolean specifying whether the GUI should store a backup of the file.
11436	This interface defines behaviors for objects managed by the Block Allocation Table (BAT).
11437	The begin record defines the start of a block of records for a (graphing data object.
11438	Contains a flag specifying whether the Gui should save externally linked values from other workbooks.
11439	The enumeration value indicating which borders to draw in a Property Template
11440	The enumeration value indicating the line style of a border in a cell, i.e., whether it is bordered dash dot, dash dot dot, dashed, dotted, double, hair, medium, medium dash dot, medium dash dot dot, medium dashed, none, slant dash dot, thick or thin.
11441	Utility to identify built-in formats.
11442	A POIFS DataSource backed by a byte array.
11443	Specifies the maximum times the gui should perform a formula recalculation.
11444	Tells the gui whether to calculate formulas automatically, manually or automatically except for tables.
11445	CATLAB - Category Labels (0x0856)
11446	This class is a container for POI usermodel row=0 column=0 cell references.
11447	Formats a date value.
11448	This class implements printing out an elapsed time format.
11449	This object represents a condition in a cell format.
11450	This is the abstract supertype for the various cell formatters.
11451	The different kinds of formats that the formatter understands.
11452	A formatter for the default "General" cell format.
11453	This class implements printing out a value using a number format.
11454	Indicates a cell or range is in the given relative position in a range.
11455	Used to classify identifiers found in formulas as cell references or not.
11456	Types of cell references.
11457	This class implements printing out text.
11458	Traverse cell range.
11459	Conditional Formatting Header v12 record CFHEADER12 (0x0879), for conditional formattings introduced in Excel 2007 and newer.
11460	ENDBLOCK - Chart Future Record Type End Block (0x0853)
11461	ENDOBJECT - Chart Future Record Type End Object (0x0855)
11462	CHARTFRTINFO - Chart Future Record Type Info (0x0850)
11463	STARTBLOCK - Chart Future Record Type Start Block (0x0852)
11464	STARTOBJECT - Chart Future Record Type Start Object (0x0854)
11465	CHARTTITLEFORMAT (0x1050)
11466	This interface defines methods for finding and setting sibling Property instances
11467	The default characterset.
11468	Implementation for Excel COMPLEX () function.
11469	The ConditionalFormatting class encapsulates all settings of Conditional Formatting.
11470	Used primarily for XSSF conditions, which defines a multitude of additional "filter" types for conditional formatting.
11471	Java class for CT_ConnectionSite complex type.
11472	Common superclass of all records that can produce ContinueRecords while being serialized.
11473	Helper class used primarily for SST Records
11474	XCT - CRN Count
11475	This record stores the contents of an external cell or cell range
11476	This class represents custom properties in the document summary information stream.
11477	Enum mapping the values of STDataConsolidateFunction
11478	SXDI - Data Item (0x00C5)
11479	DATALABEXT - Chart Data Label Extension (0x086A)
11480	Common definition of how we read and write bytes
11481	Not calling it OperatorType to avoid confusion for now with DataValidationConstraint.OperatorType.
11482	Implementation of the DAverage function: Gets the average value of a column in an area with given conditions.
11483	Calculates the number of days between two dates based on a 360-day year (twelve 30-day months), which is used in some accounting calculations.
11484	Used by Excel and other MS apps to quickly find rows in the sheets.
11485	Implementation of the DCount function: Counts the number of numeric cells in a column in an area with given conditions.
11486	Implementation of the DCountA function: Counts the number of non-blank cells in a column in an area with given conditions.
11487	Implementation for Excel DEC2BIN() function.
11488	Implementation for Excel DELTA() function.
11489	Specifies the default width for columns that have no specific width set.
11490	Default implementation of the TempFileCreationStrategy used by TempFile: Files are collected into one directory and by default are deleted on exit from the VM.
11491	Controls the accuracy of the calculations
11492	Implementation of the DGet function: Finds the value of a column in an area with given conditions.
11493	This PTG implements the standard binomial divide "/"
11494	Implementation of the DMax function: Finds the maximum value of a column in an area with given conditions.
11495	Implementation of the DMin function: Finds the minimum value of a column in an area with given conditions.
11496	Trivial extension of Property for POIFSDocuments
11497	Implementation of the DProduct function: Gets the product value of a column in an area with given conditions.
11498	Provides utilities to manage drawing groups.
11499	MsoDrawingSelection (0x00ED)
11500	Tells if this is a double stream file.
11501	Enum for convenience to identify and source implementations of the D* functions
11502	Implementation of the DStdev function: Gets the standard deviation value of a column in an area with given conditions.
11503	Implementation of the DStdevp function: Gets the standard deviation value of a column in an area with given conditions.
11504	Implementation of the DSum function: Finds the total value of matching values in a column in an area with given conditions.
11505	Implementation of the DVar function: Gets the variance value of a column in an area with given conditions.
11506	Implementation of the DVarp function: Gets the variance value of a column in an area with given conditions.
11507	A collection of embedded object informations and content
11508	Office supports various encryption modes.
11509	The end record defines the end of a block of records for a (Graphing) data object.
11510	This interface provides access to an object managed by a Filesystem instance.
11511	Marks the end of records belonging to a particular object in the HSSF File
11512	Evaluations for formula errors
11513	The following enum specifies values that indicate special procedural properties that are used to modify the color components of another color.
11514	The opt record is used to store property values for a shape.
11515	Provides a list of all known escher properties including the description and type.
11516	Interface for listening to escher serialization events.
11517	A simple property is of fixed length and as a property number in addition to a 32-bit value.
11518	This class is used to simplify error handling logic within operator and function implementations.
11519	Abstracts a sheet for the purpose of formula evaluation.
11520	When working with the EventUserModel, if you want to process formulas, you need an instance of InternalWorkbook to pass to a HSSFWorkbook, to finally give to HSSFFormulaParser, and this will build you stub ones.
11521	A wrapping HSSFListener which will collect BoundSheetRecords and ExternSheetRecords as they go past, so you can create a Stub InternalWorkbook from them once required.
11522	SXVDEX - Extended PivotTable View Fields (0x0100)
11523	Title: FeatHdr (Feature Header) Record
11524	A POIFS DataSource backed by a File
11525	File Pass Record (0x002F)
11526	The Windows FILETIME structure holds a date and time associated with a file.
11527	The enumeration value indicating the style of fill pattern being used for a cell format.
11528	behavior of a field at a fixed location within a byte array
11529	umber of built in function groups in the current version of the Spreadsheet (probably only used on Windows)
11530	Charset represents the basic set of characters associated with a font (that it can display), and corresponds to the ANSI codepage (8-bit or DBCS) of that character set used by a given language.
11531	A FontFacet holds the font data for a shape of a font, i.e.
11532	A property of a font that describes its general appearance.
11533	The font family this font belongs to.
11534	Text runs can contain characters which will be handled (if configured) by a different font, because the default font (latin) doesn't contain corresponding glyphs.
11535	Defines the font scheme to which this font belongs.
11536	Common definition of a HSSF or XSSF page footer.
11537	Describes a number format -- those goofy strings like $(#,###)
11538	Enumerates error values in SpreadsheetML formula calculations.
11539	Enumeration of various formula types.
11540	This structure appears as part of an Obj record that represents image display properties.
11541	Mappings from the Excel functions to our evaluation implementations (where available)
11542	PTG class to implement greater or equal to
11543	Greater than operator PTG ">"
11544	Flag denoting whether the user specified that gridlines are used when printing.
11545	Whether to center between horizontal margins
11546	Common definition of a HSSF or XSSF page header.
11547	Common interface for Header and Footer.
11548	Common header/footer base class
11549	The HEADERFOOTER record stores information added in Office Excel 2007 for headers/footers.
11550	Utilities to read hex from files.
11551	Flag defines whether to hide placeholders and object
11552	Implementation of the HLOOKUP() function.
11553	The enumeration value indicating horizontal alignment of a cell, i.e., whether it is aligned general, left, right, horizontally centered, filled (replicated), justified, centered across multiple cells, or distributed.
11554	Extracts all of the HPSF properties, both build in and custom, returning them in textual form.
11555	A version of POIDocument which allows access to the HPSF Properties, but no other document contents.
11556	Predefined HSSFColors with their given palette index (and an optional 2nd index)
11557	Helper for shifting columns up or down
11558	HSSF wrapper for the FormulaParser and FormulaRenderer
11559	Excel can get cranky if you give it files containing too many (especially duplicate) objects, and this class can help to avoid those.
11560	Represents binary data stored in the file.
11561	An HSSFRequest object should be constructed registering an instance or multiple instances of HSSFListener with each Record.sid you wish to listen for.
11562	An interface that indicates whether a class can contain children.
11563	Helper class which is instantiated by reflection from WorkbookFactory.create(java.io.File) and similar
11564	Represents a hyperlink.
11565	Implementation of Excel HYPERLINK function.
11566	Interface specifying how an algorithm to be used by DStarRunner should look like.
11567	Types of ignored workbook and worksheet error.
11568	A deprecated indexing scheme for colours that is still required for some records, and for backwards compatibility with OLE2 formats.
11569	This is a replacement for Insets which works on doubles instead of ints
11570	Shows where the Interface Records ends (MMS)
11571	Defines the beginning of Interface records (MMS)
11572	Integer (unsigned short integer) Stores an unsigned short value (java int) in a formula
11573	Calculates the internal rate of return.
11574	Tells whether to iterate over formula calculations or not.
11575	Utility for delaying the concatenation of multiple byte arrays.
11576	This structure specifies properties of the dropdown list control
11577	Record for the left margin.
11578	Ptg class to implement less than or equal
11579	Less than operator PTG "<".
11580	Represents the shape decoration that appears at the ends of lines.
11581	Implementation of Excel function LOOKUP.
11582	ExtractorFactory for HSSF and Old Excel format
11583	The margin interface is a parent used to define left, right, top and bottom margins.
11584	Implementation for the MATCH() Excel function.
11585	Optional record defining a square area of cells to "merged" into one cell.
11586	A dummy record for when we're missing a cell in a row, but still want to trigger something
11587	A dummy record for when we're missing a row, but still want to trigger something
11588	Representation of Macro module in office file.
11589	Type of macro module
11590	Implements the standard mathematical multiplication "*"
11591	Ptg class to implement not equal
11592	Ignores all serialization events.
11593	Common interface for OLE shapes, i.e.
11594	Protect embedded object with the lamest "security" ever invented.
11595	Base class for all old (Biff 2 - Biff 4) cell value records (implementors of CellValueRecordInterface).
11596	Biff2 - Biff 4 Label Record (0x0004 / 0x0204) - read only support for strings stored directly in the cell, from the older file formats that didn't use LabelSSTRecord
11597	Title: Bound Sheet Record (aka BundleSheet) (0x0085) for BIFF 5
11598	defines a Ptg that is an operation instead of an operand
11599	SXPI - Page Item (0x00B6)
11600	Enumeration which represents the various margins which are present within an Excel worksheet
11601	Specifies printed page order.
11602	The PaintStyle can be modified by secondary sources, e.g.
11603	Type of pane used in sheet.
11604	The enumeration value indicating the possible paper size for a sheet
11605	Behavior for parent (directory) properties
11606	Stores the encrypted password for a sheet or workbook (HSSF doesn't support encryption)
11607	Protection Revision 4 password Record (0x01BC)
11608	Pattern Formatting Block of the Conditional Formatting Rule Record.
11609	Percent PTG.
11610	General enum class to define a picture format/type
11611	preceeds and identifies a frame as belonging to the plot area.
11612	Class POIFSDocumentPath
11613	This handles reading and writing a stream within a POIFSFileSystem.
11614	Interface for a drill-down viewable object.
11615	This holds the common functionality for all read-only POI Document classes, i.e.
11616	Preset colors defined in DrawingML aka known/system colors
11617	These enumerations specify how cell comments shall be displayed for paper printing purposes.
11618	Whether or not to print the row/column headers when you enjoy your spreadsheet in the physical form.
11619	The enumeration value indicating the print orientation for a sheet.
11620	Factory class to create instances of SummaryInformation, DocumentSummaryInformation and PropertySet.
11621	Defines whether a sheet or workbook is protected (HSSF DOES NOT SUPPORT ENCRYPTION)
11622	Returns the rank of a number in a list of numbers.
11623	The enumeration value indicating reading order of a cell, i.e., whether the reading order is Context(Default), Left To Right or Right To Left
11624	This record contains an ID that marks when a worksheet was last recalculated.
11625	All HSSF Records inherit from this class.
11626	RecordAggregates are groups of of BIFF Records that are typically stored together and/or updated together.
11627	Common base class of Record and RecordAggregate
11628	Specifies possible rectangle alignment types.
11629	Common base class for implementors of RefEval
11630	Describes which reference mode to use
11631	Base class for all comparison operator evaluators
11632	Record for the right margin.
11633	Wrapper of InputStream which provides Run Length Encoding (RLE) decompression on the fly.
11634	Implementation for Excel Roman() function.
11635	Root property
11636	Used to specify the different possible policies if for the case of null and blank cells
11637	I have no idea what a Scenario is or why on would want to protect it with the lamest "security" ever invented.
11638	links a series to its position in the series list.
11639	SERIESLIST (0x1016)
11640	Common interface for all drawing shapes
11641	known preset shape geometries in PresentationML
11642	Primarily used as an excel optimization so that multiple similar formulas are not written out too many times.
11643	Common parent of Slides, Notes and Masters
11644	Class SheetBuilder provides an easy way of building workbook sheets from 2D array of Objects.
11645	Formats sheet names for use in formula expressions.
11646	Specifies sheet visibility
11647	This enum allows spreadsheets from multiple Excel versions to be handled by the common code.
11648	Subclasses of this class (the majority of BIFF records) are non-continuable.
11649	SXIDSTM - Stream ID (0x00D5)
11650	STRING (0x0207)
11651	The line dash with pattern.
11652	Subrecords are part of the OBJ class.
11653	An implementation of the SUBSTITUTE function:
11654	Implementation for the Excel function SUMIF
11655	Contains an array of sheet id's.
11656	TABLESTYLES (0x088E)
11657	Interface for creating temporary files.
11658	Interface used by the TempFile utility class to create temporary files.
11659	Specifies a list of text alignment types
11660	Type of placeholder fields
11661	Type of text capitals
11662	Specifies alist of auto-fit types.
11663	Vertical Text Types
11664	This enum represents a compromise for the handling of HSLF run types (see org.apache.poi.hslf.record.TextHeaderAtom) and XSLF placeholders (see org.apache.poi.xslf.usermodel.Placeholder).
11665	Record for the top margin.
11666	Unary Plus operator - does not have any effect on the operand
11667	Unary Plus operator - does not have any effect on the operand
11668	If this record occurs in the Worksheet Substream, it indicates that the formulas have not been recalculated before the document was saved.
11669	The units record describes units.
11670	Unknown record just tells you the sid so you can figure out what records you are missing.
11671	The UserSViewBegin record specifies settings for a custom view associated with the sheet.
11672	The UserSViewEnd record marks the end of the settings for a custom view associated with the sheet
11673	Tells the GUI if this was written by something that can use "natural language" formulas.
11674	Implementation for Excel VALUE() function.
11675	Common superclass of all value operators.
11676	The Variant types as defined by Microsoft's COM.
11677	This exception is thrown if HPSF encounters a problem with a variant type.
11678	This tool extracts out the source of all VBA Modules of an office file, both OOXML (eg XLSM) and OLE2/POIFS (eg DOC), to STDOUT or a directory.
11679	Tells whether to center the sheet between vertical margins
11680	Administrative class to keep track of the version number of the POI release.
11681	Specifies a list of available anchoring types for text
11682	This enumeration value indicates the type of vertical alignment for a cell, i.e., whether it is aligned top, bottom, vertically centered, justified or distributed.
11683	SXVIEW - View Definition (0x00B0)
11684	SXVD - View Fields (0x00B1)
11685	SXVS - View Source (0x00E3)
11686	Implementation of the VLOOKUP() function.
11687	Flags whether workbook windows are protected
11688	Helper methods for when working with Usermodel Workbooks
11689	Indicated that the sheet/workbook is write protected.
11690	The purpose of this interface is to allow per version upgrade implementations to be created.
11691	See AccumuloDataVersion.CRYPTO_CHANGES
11692	A base ObjectStream implementation for events.
11693	A basic EventTrainer implementation.
11694	An abstract, basic implementation of a model reader.
11695	A base ObjectStream implementation.
11696	Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese Chunker training.
11697	Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.
11698	Note: Do not use this class, internal use only!
11699	Note: Do not use this class, internal use only!
11700	Parses a sample of AD corpus.
11701	This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.
11702	Responsible to create an artifact from an InputStream.
11703	The Attributes class stores name value pairs.
11704	This is a common base model which can be used by the components' specific model classes.
11705	The default SequenceCodec implementation according to the BILOU scheme.
11706	A GISModelWriter that writes models in a binary format.
11707	A NaiveBayesModelWriter that writes models in a binary format.
11708	A PerceptronModelWriter that writes models in a binary format.
11709	A QNModelWriter that writes models in a binary format.
11710	The default SequenceCodec implementation according to the BIO scheme: B: 'beginning' of a NE I: 'inside', the word is inside a NE O: 'outside', the word is a regular word outside a NE See also the paper by Roth D.
11711	A sample stream for the training files of the BioNLP/NLPBA 2004 shared task.
11712	Reads the annotations from the brat .ann annotation file.
11713	Class to load a Brown cluster document: word\tword_class\tprob
11714	An ArtifactSerializer implementation for binary data, kept in byte[].
11715	This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.
11716	This tool helps create a loadable dictionary for the NameFinder, from data collected from US Census data.
11717	An ArtifactSerializer implementation for models.
11718	A SequenceStream implementation encapsulating samples.
11719	An ObjectStream implementation that works on a Collection of CollectionObjectStream as source for elements.
11720	Parser for the Dutch and Spanish ner training files of the CONLL 2002 shared task.
11721	An import stream which can parse the CONLL03 data.
11722	The CoNNL-U Format is specified here.
11723	Holds constituents when reading parses.
11724	Provides access to training and test partitions for n-fold cross validation.
11725	The CrossValidationPartitioner.TrainingSampleStream which iterates over all training elements.
11726	Represents an indexer which compresses events in memory and performs feature selection.
11727	An interface for objects which can deliver a stream of training data to be supplied to an EventStream.
11728	Features based on chunking model described in Fei Sha and Fernando Pereira.
11729	Simple feature generator for learning statistical lemmatizers.
11730	A default context generator for a POSTagger.
11731	A Detokenizer merges tokens back to their detokenized representation.
11732	This enum contains an operation for every token to merge the tokens together to their detokenized form.
11733	A rule based detokenizer.
11734	A persistor used by for reading and writing dictionaries of all kinds.
11735	A Lemmatizer implementation that works by simple dictionary lookup into a Map built from a file containing, for each line:
11736	This is a Dictionary based name finder.
11737	An ArtifactSerializer implementation for dictionaries.
11738	The directory sample stream allows for creating an ObjectStream from a directory listing of files.
11739	The factory that provides Doccat default implementations and resources.
11740	The DocumentCategorizerEvaluator measures the performance of the given DocumentCategorizer with the provided reference samples.
11741	This class facilitates the downloading of pretrained OpenNLP models.
11742	The type of model.
11743	Generates a EntityLinker instances via a properties file configuration.
11744	Parser for the Italian NER training files of the Evalita 2007 and 2009 NER shared tasks.
11745	An abstract base class for evaluators.
11746	A specialized Trainer that is based on an Event approach.
11747	Class for using a file of events as an event stream.
11748	Abstract base class for filtering streams.
11749	Creates a set of feature generators based on a provided XML descriptor.
11750	An generic AbstractModelReader implementation.
11751	An ArtifactSerializer implementation for models.
11752	The base class for readers of GIS models.
11753	This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.
11754	A hash sum based AbstractObjectStream implementation.
11755	This class implements the stemming algorithm defined by a snowball script.
11756	This class was automatically generated by a Snowball to Java compiler It implements the stemming algorithm defined by a snowball script.
11757	The interface for LanguageDetector which predicts the Language for a context.
11758	Default factory used by LanguageDetector.
11759	A language model can calculate the probability p (between 0 and 1) of a certain sequence of tokens, given its underlying vocabulary.
11760	A SequenceStream implementation encapsulating samples.
11761	The common interface for lemmatizers.
11762	The factory that provides Lemmatizer default implementation and resources.
11763	Calculates the arithmetic mean of values added with the Mean.add(double) method.
11764	A helper class that handles Strings with more than 64k (65535 bytes) in length.
11765	Enumeration of supported model types.
11766	An extension of Context used to store parameters or expected values associated with this context which can be updated or assigned.
11767	A MaxentModel implementation of the multinomial Naive Bayes classifier model.
11768	The base class for readers of models.
11769	Interface for generating the context for a name finder by specifying a set of feature generators.
11770	This class helps to read the US Census data from the files to build a StringList for each dictionary entry in the name-finder dictionary.
11771	Encapsulates names for a single unit of text.
11772	Counts tokens, sentences and names by type.
11773	A SequenceStream implementation encapsulating samples.
11774	Evaluate negative log-likelihood and its gradient from DataIndexer.
11775	The Newline SentenceDetector assumes that sentences are line delimited and recognizes one sentence per non-empty line.
11776	Generates an nGram, via an optional separator, and returns the grams as a list of strings
11777	A LanguageModel based on a NGramModel using Stupid Backoff to get the probabilities of the ngrams.
11778	Reads objects from a stream.
11779	Evaluate negative log-likelihood and its gradient in parallel
11780	Defines common methods for full-syntactic parsers.
11781	Enumeration of event types for a Parser.
11782	Enumeration of supported Parser types.
11783	A model implementation based one the perceptron algorithm.
11784	The base class for readers of models.
11785	Reads a plain text file and returns each line as a String object.
11786	A NaiveBayesModelWriter that writes models in a plain text format.
11787	The POSModel is the model used by a learnable POSTagger.
11788	An ArtifactSerializer implementation for models.
11789	A SequenceStream implementation encapsulating samples.
11790	The interface for part of speech taggers.
11791	A maximum entropy model which has been trained using the Quasi Newton (QN) algorithm.
11792	The base class for readers of QN models.
11793	Class for real-valued events as an event stream.
11794	Class for using a file of real-valued events as an event stream.
11795	Returns a RegexNameFinder based on a selection of defaults or a configuration and a selection of defaults.
11796	Enumeration of typical regex expressions available in OpenNLP.
11797	The interface for sentence detectors, which find the sentence boundaries in a text.
11798	Represents a weighted sequence of outcomes.
11799	A codec for sequences of type SequenceCodec.
11800	Class which turns a SequenceStream into an event stream.
11801	Trains models with sequences using the perceptron algorithm.
11802	A basic Tokenizer implementation which performs tokenization using character classes.
11803	Interface to determine which tags are valid for a particular word based on a tag dictionary.
11804	The interface for tokenizers, which segment a string into its tokens.
11805	A Tokenizer for converting raw text into separated tokens.
11806	The TokenizerStream uses a Tokenizer to tokenize the input string and output samples.
11807	The interface for name finders which provide name tags for a sequence of tokens.
11808	A basic Tokenizer implementation which performs tokenization using white spaces.
11809	A Tokenizer implementation which performs tokenization using word pieces.
11810	Accumulates statistics during the operation of a Cache for presentation by Cache.stats().
11811	This class provides a skeletal implementation of the Iterator interface, to make this interface easier to implement for certain types of data sources.
11812	This class provides a skeletal implementation of the Cache interface to minimize the effort required to implement this interface.
11813	A CharEscaper that uses an array to quickly look up replacement characters for a given char value.
11814	A bimap (or "bidirectional map") is a map that preserves the uniqueness of its values as well as that of its keys.
11815	Indicates whether an endpoint of some range is contained in the range itself ("closed") or not ("open").
11816	A callback interface to process bytes from a stream.
11817	A specification of a CacheBuilder configuration.
11818	Static utility methods pertaining to the Callable interface.
11819	An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).
11820	A map, each entry of which maps a Java raw type to an instance of that type.
11821	Utility methods for working with Closeable objects.
11822	An object that holds the final result of an asynchronous ClosingFuture operation and allows the user to close all the closeable objects that were captured during it for later closing.
11823	Pre-defined CycleDetectingLockFactory.Policy implementations.
11824	Wraps an event that was posted, but which had no subscribers and thus could not be delivered.
11825	The type of ordering that this object specifies.
11826	Wraps an object so that Equivalence.Wrapper.equals(Object) and Equivalence.Wrapper.hashCode() delegate to an Equivalence.
11827	An object that converts literal text into a format safe for inclusion in a particular context (such as an XML document).
11828	Dispatches events to listeners, and provides ways for listeners to register themselves.
11829	A support class for ListenableFuture implementations to manage their listeners.
11830	An OutputStream that starts buffering to a byte array, but switches to file buffering once the data reaches a configurable size.
11831	Modes for opening a file for writing.
11832	Utility methods for working with Flushable objects.
11833	A ListenableFuture which forwards all its method calls to another future.
11834	A callback for accepting the results of a Future computation asynchronously.
11835	A builder for creating ImmutableNetwork instances, especially static final networks.
11836	A builder for immutable range maps.
11837	A builder for creating immutable type-to-instance maps.
11838	Builder for Interner instances.
11839	Utilities necessary for working with libraries that supply plain Future instances.
11840	This is an intermediate stage in the construction process.
11841	A callback to be used with the streaming readLines methods.
11842	A difference between the mappings from two maps with the same key.
11843	Collectors not present in java.util.stream.Collectors that are not otherwise associated with a com.google.common type.
11844	A specialization of MultimapBuilder that generates ListMultimap instances.
11845	A specialization of MultimapBuilder that generates SetMultimap instances.
11846	A specialization of MultimapBuilder that generates SortedSetMultimap instances.
11847	An unmodifiable element-count pair for a multiset.
11848	A subinterface of Network which adds mutation methods.
11849	Helper functions that can operate on any Object.
11850	A UnicodeEscaper that escapes some set of Java characters using a UTF-8 based percent encoding scheme.
11851	Legacy version of java.util.function.Predicate.
11852	Provides a fluent API for calculating quantiles.
11853	Describes the point in a fluent API chain where only the scale (i.e.
11854	Options for use with recursive delete methods (MoreFiles.deleteRecursively(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption...) and MoreFiles.deleteDirectoryContents(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption...)).
11855	The reason why a cached entry was removed.
11856	A notification of the removal of a single entry.
11857	Interface that extends Table and whose rows are sorted.
11858	The lifecycle states of a service.
11859	A listener for the aggregate state changes of the services that are under management.
11860	Row key / column key / value triplet corresponding to a mapping in a table.
11861	A time source; returns a time value representing the number of nanoseconds elapsed since some fixed but arbitrary point in time.
11862	An object of this class encapsulates type mappings from type variables.
11863	A list iterator that does not support UnmodifiableIterator.remove(), UnmodifiableListIterator.add(E), or UnmodifiableListIterator.set(E).
11864	Escaper instances suitable for strings to be included in particular sections of URLs.
11865	Low-level, high-performance utility methods related to the UTF-8 character encoding.
11866	Escaper instances suitable for strings to be included in XML attribute values and elements' text contents.
11867	Writable byte buffer.
11868	Immutable stateless FST-based index dictionary kept in memory.
11869	Immutable stateless index dictionary kept in RAM.
11870	Builds an immutable IndexDictionary.
11871	The "intersect" TermsEnum response to UniformSplitTerms.intersect(CompiledAutomaton, BytesRef), intersecting the terms with an automaton.
11872	This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version. The version is added to the terms index to avoid seeking if no term in the block has a high enough version. The term blocks file is .tiv and the terms index extension is .tipv.
11873	plain-text norms format.
11874	PostingsFormat based on the Uniform Split technique and supporting Shared Terms.
11875	Selects index terms according to provided pluggable VariableGapTermsIndexWriter.IndexTermSelector, and stores them in a prefix trie that's loaded entirely in RAM stored as an FST. This terms index only supports unsigned byte term sort order (unicode codepoint order when the bytes are UTF8).
11876	An indexed 128-bit BigInteger field.
11877	A PostingsFormat optimized for primary-key (ID) fields that also record a version (long) for each ID, delivered as a payload created by longToBytes(long, org.apache.lucene.util.BytesRef) during indexing. At search time, the TermsEnum implementation IDVersionSegmentTermsEnum enables fast (using only the terms index when possible) lookup for whether a given ID was previously indexed with version > N (see IDVersionSegmentTermsEnum.seekExact(BytesRef,long).
11878	Abstract class for range queries involving multiple ranges against physical points such as IntPoints All ranges are logically ORed together
11879	This is just like Lucene90BlockTreeTermsWriter, except it also stores a version per term, and adds a method to its TermsEnum implementation to seekExact only if the version is >= the specified version. The version is added to the terms index to avoid seeking if no term in the block has a high enough version. The term blocks file is .tiv and the terms index extension is .tipv.
11880	Base test case for MergePolicy.
11881	Base class for all Lucene unit tests that use TokenStreams.
11882	A FilterDirectoryStream contains another DirectoryStream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.
11883	A FilterFileStore contains another FileStore, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.
11884	A FilterFileSystem contains another FileSystem, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.
11885	A FilterFileSystemProvider contains another FileSystemProvider, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.
11886	A FilterPath contains another Path, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.
11887	Encapsulates a term position, start and end offset
11888	This is a Directory Wrapper that adds methods intended to be used only by unit tests. It also adds a number of features useful for testing: Instances created by LuceneTestCase.newDirectory() are tracked to ensure they are closed by the test. When a MockDirectoryWrapper is closed, it will throw an exception if it has any open files against it (with a stacktrace indicating where they were opened from). When a MockDirectoryWrapper is closed, it runs CheckIndex to test if the index was corrupted. MockDirectoryWrapper simulates some "features" of Windows, such as refusing to write/delete to open files.
11889	A tokenfilter for testing that removes terms accepted by a DFA. Union a list of singletons to act like a stopfilter. Use the complement to act like a keepwordfilter Use a regex like .{12,} to act like a lengthfilter
11890	Tokenizer for testing.
11891	Codec that assigns per-field random postings formats.
11892	Helper class extracted from BasePostingsFormatTestCase to exercise a postings format.
11893	Base test class for simulating distributed search across multiple shards.
11894	time unit constants for use in annotations.
11895	Returns a score for each document based on a ValueSource, often some function of the value of a field.
11896	An extension of MatchesIterator that allows it to be treated as an IntervalIterator
11897	An interface defining the collection of postings information from the leaves of a Spans
11898	Wraps any MultiTermQuery as a SpanQuery, so it can be nested within other SpanQuery classes.
11899	Matches spans which are near one another. One can specify slop, the maximum number of intervening unmatched positions, as well as whether matches are required to be in-order.
11900	Only return those matches that have a specific payload at the given position.
11901	Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time. This means lookup is based on the analyzed form while suggestions are still the surface form(s).
11902	This wrapper buffers incoming elements.
11903	Collects BytesRef and then allows one to iterate over their sorted order. Implementations of this interface will be called in a single-threaded scenario.
11904	A suggestion generated by combining one or more original query terms
11905	Holder for suggester and field-level info for a suggest field
11906	Wrapped Terms used by SuggestField and ContextSuggestField to access corresponding suggester and their attributes
11907	A ConcatenateGraphFilter but we can set the payload and provide access to config options.
11908	Holds a spelling correction for internal usage inside DirectSpellChecker.
11909	A single completion for a given key.
11910	Holds a pair (automaton, fst) of states and accumulated output in the intersected machine.
11911	Simple Lookup interface for CharSequence suggestions.
11912	Result of a lookup.
11913	NRTSuggester executes Top N search on a weighted FST specified by a CompletionScorer
11914	Spell Checker class (Main class). (initially inspired by the David Spencer code).
11915	Factory for SuggestStopFilter. <fieldType name="autosuggest" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true"> <analyzer> <tokenizer class="solr.WhitespaceTokenizerFactory"/> <filter class="solr.LowerCaseFilterFactory"/> <filter class="solr.SuggestStopFilterFactory" ignoreCase="true" words="stopwords.txt" format="wordset"/> </analyzer> </fieldType>
11916	SuggestWord, used in suggestSimilar method in SpellChecker class.
11917	ScoreDoc with an additional CharSequence key
11918	A Directory implementation for all Unixes and Windows that uses DIRECT I/O to bypass OS level IO caching during merging. For all other cases (searching, writing) we delegate to the provided Directory instance.
11919	HighFreqTerms class extracts the top n most frequent terms (by document frequency) from an existing Lucene index and reports their document frequency.
11920	This class is the base of QueryConfigHandler and FieldConfig. It has operations to set, unset and get configuration values.
11921	A query node implements FieldableNode interface to indicate that its children and itself are associated to a specific field.
11922	A FieldQueryNode represents a element that contains field/text tuple
11923	This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.
11924	This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.
11925	This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the method generateParseException in the generated parser. You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.
11926	A ProximityQueryNode represents a query where the terms should meet specific distance conditions. (a b c) WITHIN [SENTENCE|PARAGRAPH|NUMBER] [INORDER] ("a" "b" "c") WITHIN [SENTENCE|PARAGRAPH|NUMBER] [INORDER]
11927	A QueryNodeProcessor is an interface for classes that process a QueryNode tree.
11928	This class is generated by JavaCC. The only method that clients should need to call is parse().
11929	This class is overridden by QueryParser in QueryParser.jj and acts to separate the majority of the Java code from the .jj grammar file.
11930	Token Manager.
11931	Token Manager.
11932	This query configuration handler is used for almost every processor defined in the StandardQueryNodeProcessorPipeline processor pipeline. It holds configuration methods that reproduce the configuration methods that could be set on the old lucene 2.4 QueryParser class.
11933	Parser for the standard Lucene syntax
11934	Token Manager.
11935	Token Manager Error.
11936	Token Manager Error.
11937	Token Manager Error.
11938	Specify aggregation logic used in TaxonomyFacetIntAssociations and TaxonomyFacetFloatAssociations.
11939	Add an instance of this to your Document to add a facet label associated with an arbitrary byte[]. This will require a custom Facets implementation at search time; see IntAssociationFacetField and FloatAssociationFacetField to use existing Facets implementations.
11940	Holds the cached ordinals in two parallel int[] arrays.
11941	Defines a single range in a FacetSet dimension.
11942	TaxonomyWriter which uses a Directory to store the taxonomy information on disk, and keeps an additional in-memory cache of some or all categories.
11943	Mapping from old ordinal to new ordinals, used when merging indexes with separate taxonomies.
11944	Represents a range over double values.
11945	Represents a double range for RangeOnRange faceting
11946	Facets implementation that computes counts for dynamic double ranges. Use this for dimensions that change in real-time (e.g. a relative time based dimension like "Past day", "Past 2 days", etc.) or that change for each request (e.g. distance from the user's location, "< 1 km", "< 2 km", etc.).
11947	Computes drill down and sideways counts for the provided DrillDownQuery. Drill sideways counts include alternative values/aggregates for the drill-down dimensions so that a dimension does not disappear after the user drills down into it.
11948	Add an instance of this to your Document for every facet label.
11949	Holds a sequence of string components, specifying the hierarchical name of a category.
11950	Counts or aggregates for a single dimension.
11951	Holds the documents that were matched in the LeafReaderContext. If scores were required, then scores is not null.
11952	Records per-dimension configuration. By default a dimension is flat, single valued and does not require count for the dimension; use the setters in this class to change these settings for each dim.
11953	Matches the encoded FacetSet that was indexed in FacetSetsField.
11954	Single label and its value, usually contained in a FacetResult.
11955	Abstract class for storing Label->Ordinal mappings in a taxonomy.
11956	Represents a range over long values.
11957	Represents a long range for RangeOnRange faceting
11958	Facets implementation that computes counts for dynamic long ranges. Use this for dimensions that change in real-time (e.g. a relative time based dimension like "Past day", "Past 2 days", etc.) or that change for each request (e.g. distance from the user's location, "< 1 km", "< 2 km", etc.).
11959	An LRU cache of mapping from name to int. Used to cache Ordinals of category paths. It uses as key, hash of the path instead of the path. This way the cache takes less RAM, but correctness depends on assuming no collisions.
11960	Base class for a single labeled range.
11961	Holds a matched pair of IndexSearcher and TaxonomyReader
11962	Add an instance of this to your Document for every facet label to be indexed via SortedSetDocValues.
11963	Wraps a IndexReader and resolves ords using existing SortedSetDocValues APIs without a separate taxonomy index. This makes faceting a bit slower, adds some cost at reopen time, but avoids managing the separate taxonomy index. In addition, the tie-break during faceting is now meaningful (in label sorted order).
11964	Holds start/end range of ords, which maps to one dimension. Only used for flat hierarchies.
11965	Holds a single entry.
11966	Holds a single entry.
11967	Forms bigrams of CJK terms that are generated from StandardTokenizer or ICUTokenizer.
11968	Filters ClassicTokenizer with ClassicFilter, LowerCaseFilter and StopFilter, using a list of English stop words.
11969	Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph). In simple cases this yields one token, but in the presence of any tokens with a zero positionIncrmeent (e.g. synonyms) it will be more. This filter uses the token bytes, position increment, and position length of the incoming stream. Other attributes are not used or manipulated.
11970	Attribute providing access to the term builder and UTF-16 conversion
11971	A general-purpose Analyzer that can be created with a builder-style API. Under the hood it uses the factory classes TokenizerFactory, TokenFilterFactory, and CharFilterFactory.
11972	An object representing homonym dictionary entries. Note that the order of entries here may differ from the order in the *.dic file!
11973	Analyzer for French language.
11974	This tree structure stores the hyphenation patterns in an efficient way for fast lookup. It provides the provides the method to hyphenate a word.
11975	Light Stemmer for Norwegian.
11976	This interface is used to connect the XML pattern file parser to the hyphenation tree.
11977	Analyzer for Persian.
11978	Reverse token string, for example "country" => "yrtnuoc".
11979	Base class for stemmers that use a set of RSLP-like stemming steps.
11980	A ShingleFilter constructs shingles (token n-grams) from a token stream. In other words, it creates combinations of tokens as a single token.
11981	Provides the ability to override any KeywordAttribute aware stemmer with custom dictionary-based stemming.
11982	A map of synonyms, keys and values are phrases.
11983	Wraps a term and boost
11984	Filters UAX29URLEmailTokenizer with LowerCaseFilter and StopFilter, using a list of English stop words.
11985	This file contains unicode properties used by various CharTokenizers. The data was generated using ICU4J v70.1.0.0, unicode version: 14.0.0.0.
11986	Finds fragment boundaries: pluggable into BaseFragmentsBuilder
11987	Matches a character array
11988	Creates a formatted snippet from the top passages.
11989	Implements the policy for breaking text into multiple fragments for consideration by the Highlighter class. A sophisticated implementation may do this on the basis of detecting end of sentences in the text.
11990	Associates a label with a CharArrayMatcher to distinguish different sources for terms in highlighting
11991	An example highlighter that combines several lower-level highlighting utilities in this package into a fully featured, ready-to-use component.
11992	Utility class to compute a list of "match regions" for a given query, searcher and document(s) using Matches API.
11993	A non-empty range of offset positions.
11994	An enumeration/iterator of a term and its offsets for use by FieldHighlighter. It is advanced and is placed in a priority queue by FieldHighlighter.highlightOffsetsEnums(OffsetsEnum) based on the start offset.
11995	A Highlighter that can get offsets from either postings (IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS), term vectors (FieldType.setStoreTermVectorOffsets(boolean)), or via re-analyzing text.
11996	An Analyzer builds TokenStreams, which analyze text. It thus represents a policy for extracting index terms from text.
11997	This class encapsulates the outer components of a token stream. It provides access to the source (a Reader Consumer and the outer end (sink), an instance of TokenFilter which also serves as the TokenStream returned by Analyzer.tokenStream(String, Reader).
11998	A Query that will match terms against a finite-state machine.
11999	Axiomatic approaches for IR. From Hui Fang and Chengxiang Zhai 2005. An Exploration of Axiomatic Approaches to Information Retrieval. In Proceedings of the 28th annual international ACM SIGIR conference on Research and development in information retrieval (SIGIR '05). ACM, New York, NY, USA, 480-487.
12000	Stores all statistics commonly used ranking methods.
12001	Interface for Bitset-like structures.
12002	A Query that blends index statistics across multiple terms. This is particularly useful when several terms should produce identical scores, regardless of their index statistics.
12003	Holds all state required for PostingsReaderBase to produce a PostingsEnum without re-seeking the terms dict.
12004	A Query that matches documents matching boolean combinations of other queries, e.g. TermQuerys, PhraseQuerys or other BooleanQuerys.
12005	Base implementation class for buffered IndexInput.
12006	Class that Posting and PostingVector use to write byte streams into shared fixed-size byte[] arrays. The idea is to allocate slices of increasing lengths For example, the first slice is 5 bytes, the next slice is 14, etc. We start by writing our bytes into the first 5 bytes. When we hit the end of the slice, we allocate the next slice and then write the address of the new slice into the last 4 bytes of the previous slice (the "forwarding address").
12007	Represents byte[], as a slice (offset + length) into an existing byte[]. The bytes member should never be null; use EMPTY_BYTES if necessary.
12008	A simple append only random-access BytesRef array that stores full copies of the appended bytes in a ByteBlockPool.
12009	BytesRefHash is a special purpose hash-map like data-structure optimized for BytesRef instances. BytesRefHash maintains mappings of byte arrays to ids (Map<BytesRef,int>) storing the hashed bytes efficiently in continuous storage. The mapping to the id is encapsulated inside BytesRefHash and is guaranteed to be increased for each added BytesRef.
12010	A simple IO buffer to use with CharacterUtils.fill(CharacterBuffer, Reader).
12011	A simple class that stores key Strings as char[]'s in a hash table. Note that this is not a general purpose class. For example, it cannot remove items from the map, nor does it resize its hash table to be smaller, etc. It is designed to be quick to retrieve items by char[] keys without the necessity of converting to a String first.
12012	Represents char[], as a slice (offset + length) into an existing char[]. The chars member should never be null; use EMPTY_CHARS if necessary.
12013	Status from testing DocValues
12014	Status from testing field infos.
12015	Status from testing field norms.
12016	Status from testing livedocs
12017	Status from testing PointValues
12018	Status from testing stored fields.
12019	Status from testing stored fields.
12020	Status from testing vector values
12021	Utility class for reading and writing versioned headers.
12022	Expert: Collectors are primarily meant to be used to gather raw results from a search, and implement sorting or custom result filtering, collation, etc.
12023	A manager of collectors. This class is useful to parallelize execution of search requests and has two main methods: newCollector() which must return a NEW collector which will be used to collect a certain set of leaves. reduce(Collection) which will be used to reduce the results of individual collections into a meaningful result. This method is only called after all leaves have been fully collected.
12024	IndexReaderContext for CompositeReader instance.
12025	A compression mode. Tells how much effort should be spent on compression and decompression of stored fields.
12026	Implements the divergence from randomness (DFR) framework introduced in Gianni Amati and Cornelis Joost Van Rijsbergen. 2002. Probabilistic models of information retrieval based on measuring the divergence from randomness. ACM Trans. Inf. Syst. 20, 4 (October 2002), 357-389.
12027	Represents one sub-reader being merged
12028	Expert: a FieldComparator compares hits so as to determine their sort order when collecting the top results with TopFieldCollector. The concrete public FieldComparator classes here correspond to the SortField types.
12029	Access to the Field Info file that describes document fields and whether or not they are indexed. Each segment has a separate Field Info file. Objects of this class are thread-safe for multiple readers, but only one thread can be adding documents at a time, with no other reader or writer threads accessing this object.
12030	This class provides ability to track the reference counts of a set of index files and delete them when their counts decreased to 0.
12031	A FilterDirectoryReader wraps another DirectoryReader, allowing implementations to transform or extend it.
12032	A FilterLeafReader contains another LeafReader, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class FilterLeafReader itself simply implements all abstract methods of IndexReader with versions that pass all requests to the contained index reader. Subclasses of FilterLeafReader may further override some of these methods and may also provide additional methods and fields.
12033	This attribute can be used to pass different flags down the Tokenizer chain, e.g. from one TokenFilter to another one.
12034	Represents an finite state machine (FST), using a compact byte[] format.
12035	reusable geopoint encoding methods
12036	An abstract TokenFilter that exposes its input stream as a graph
12037	Hierarchical Navigable Small World graph. Provides efficient approximate nearest neighbor search for high dimensional vectors. See Efficient and robust approximate nearest neighbor search using Hierarchical Navigable Small World graphs [2018] paper for details.
12038	Builder for HNSW graph. See HnswGraph for a gloss on the algorithm and the meaning of the hyperparameters.
12039	Provides a framework for the family of information-based models, as described in Stéphane Clinchant and Eric Gaussier. 2010. Information-based models for ad hoc IR. In Proceeding of the 33rd international ACM SIGIR conference on Research and development in information retrieval (SIGIR '10). ACM, New York, NY, USA, 234-241.
12040	Per-document scoring factors.
12041	Source of Impacts.
12042	This class contains useful constants representing filenames and extensions used by lucene, as well as convenience methods for querying whether a file name matches an extension (matchesExtension), as well as generating file names from a segment name, generation and extension ( fileNameFromGeneration, segmentFileName).
12043	IndexReader is an abstract class, providing an interface for accessing a point-in-time view of an index. Any changes made to the index via IndexWriter will not be visible until a new IndexReader is opened. It's best to use DirectoryReader.open(IndexWriter) to obtain an IndexReader, if your IndexWriter is in-process. When you need to re-open to see changes to the index, it's best to use DirectoryReader.openIfChanged(DirectoryReader) since the new reader will share resources with the previous one when possible. Search of an index is done entirely through this abstract interface, so that any subclass which implements it is searchable.
12044	A utility class that gives hooks in order to help build a cache based on the data that is contained in this index.
12045	A struct like class that represents a hierarchical relationship between IndexReader instances.
12046	An IndexWriter creates and maintains an index.
12047	DocStats for this index
12048	An indexed 128-bit InetAddress field.
12049	A pool for int blocks similar to ByteBlockPool
12050	Represents int[], as a slice (offset + length) into an existing int[]. The ints member should never be null; use EMPTY_INTS if necessary.
12051	Utilities for dealing with Closeables.
12052	This attribute can be used to mark a token as a keyword. Keyword aware TokenStreams can decide to modify a token based on the return value of isKeyword() if the token is modified. Stemming filters for instance can use this attribute to conditionally skip a term if isKeyword() returns true.
12053	View over multiple vector values supporting iterator-style access via DocIdMerger.
12054	An indexed location field.
12055	A concrete implementation of ShapeDocValues for storing binary doc value representation of LatLonShape geometries in a LatLonShapeDocValuesField
12056	Collector decouples the score from the collected doc: the score computation is skipped entirely if it's not needed. Collectors that do need the score should implement the setScorer(org.apache.lucene.search.Scorable) method, to hold onto the passed Scorer instance, and call Scorable.score() within the collect method to compute the current hit's score. If your collector may request the score for a single hit multiple times, you should use ScoreCachingWrappingScorer.
12057	IndexReaderContext for LeafReader instances.
12058	Represents a line on the earth's surface. You can construct the Line directly with double[] coordinates.
12059	Abstract superclass for language modeling Similarities. The following inner types are introduced: LMSimilarity.LMStats, which defines a new statistic, the probability that the collection language model generates the current term; LMSimilarity.CollectionModel, which is a strategy interface for object that compute the collection language model p(w|C); LMSimilarity.DefaultCollectionModel, an implementation of the former, that computes the term probability as the number of occurrences of the term in the collection, divided by the total number of tokens.
12060	A strategy for computing the collection language model.
12061	This is a LogMergePolicy that measures size of a segment as the total byte size of the segment's files.
12062	Represents long[], as a slice (offset + length) into an existing long[]. The longs member should never be null; use EMPTY_LONGS if necessary.
12063	Utility class that can efficiently compress arrays that mostly contain characters in the [0x1F,0x3F) or [0x5F,0x7F) ranges, which notably include all digits, lowercase characters, '.', '-' and '_'.
12064	A block-based terms index and dictionary that assigns terms to variable length blocks according to how they share prefixes. The terms index is a prefix trie whose leaves are term blocks. The advantage of this approach is that seekExact is often able to determine a term cannot exist without doing any IO, and intersection with Automata is very fast. Note that this terms dictionary has its own fixed terms index (ie, it does not support a pluggable terms index implementation).
12065	Block-based terms index and dictionary writer.
12066	StoredFieldsWriter impl for Lucene90CompressingStoredFieldsFormat.
12067	Lucene 9.0 point format, which encodes dimensional values in a block KD-tree structure for fast 1D range and N dimensional shape intersection filtering. See this paper for details.
12068	Writes dimensional values
12069	Lucene 9.5 vector format, which encodes numeric vector values and an optional associated graph connecting the documents having values. The graph is used to power HNSW search. The format consists of three files: .vec (vector data) file
12070	Writes vector values and knn graphs to index segments.
12071	LZ4 compression and decompression routines.
12072	Reports the positions and optionally offsets of all matching terms in a query for a single document
12073	Add this Attribute to a fresh AttributeSource before calling MultiTermQuery.getTermsEnum(Terms,AttributeSource). FuzzyQuery is using this to control its internal behaviour to only return competitive terms.
12074	This interface represents the current context of the merge selection process. It allows to access real-time information like the currently merging segments or how many deletes a segment would claim back if merged. This context might be stateful and change during the execution of a merge policy's selection processes.
12075	OneMerge provides the information necessary to perform an individual primitive merge operation, resulting in a single new segment. The merge spec includes the subset of segments to be merged as well as whether the new segment should use the compound file format.
12076	Provides access to new merges and executes the actual merge
12077	Provides random access to a stream written with MonotonicBlockPackedWriter.
12078	Concatenates multiple Bits together, on every lookup.
12079	A wrapper for CompositeIndexReader providing access to DocValues.
12080	Implements SortedDocValues over n subs, using an OrdinalMap
12081	Implements MultiSortedSetDocValues over n subs, using an OrdinalMap
12082	This abstract class reads skip lists with multiple levels.
12083	A generalized version of PhraseQuery, with the possibility of adding more than one term at the same position that are treated as a disjunction (OR). To use this class to search for the phrase "Microsoft app*" first create a Builder and use MultiPhraseQuery.Builder.add(Term) on the term "microsoft" (assuming lowercase analysis), then find all terms that have "app" as prefix using LeafReader.terms(String), seeking to "app" then iterating and collecting terms until there is no longer that prefix, and finally use MultiPhraseQuery.Builder.add(Term[]) to add them. MultiPhraseQuery.Builder.build() returns the fully constructed (and immutable) MultiPhraseQuery.
12084	Holds a PostingsEnum along with the corresponding ReaderSlice.
12085	On-disk sorting of byte arrays. Each byte array (entry) is a composed of the following fields: (two bytes) length of the following byte array, exactly the above count of bytes for the sequence to be sorted.
12086	A bit more descriptive unit for constructors.
12087	The start and end character offset of a Token.
12088	Automata operations.
12089	Run-once iterator interface, to decode previously saved PackedInts.
12090	Utility class to compress integers into a LongValues instance.
12091	A Builder for a PackedLongValues instance.
12092	Represents a logical byte[] as a series of pages. You can write-once into the logical byte[] (append only), using copy, and then retrieve slices (BytesRef) into it using fill.
12093	Provides methods to read BytesRefs from a frozen PagedBytes.
12094	The payload of a Token.
12095	Enables per field docvalues support.
12096	Enables per field postings support.
12097	Base class for exact and sloppy phrase matching
12098	A Query that matches documents containing a particular sequence of terms. A PhraseQuery is built by QueryParser for input like "new york".
12099	One pass iterator through all points previously written with a PointWriter, abstracting away whether points are read from (offline) disk or simple arrays in heap.
12100	Represents a dimensional point value written in the BKD tree.
12101	Access to indexed numeric values.
12102	Appends many points, and then at the end provides a PointReader to iterate those points. This abstracts away whether we write to disk, or use simple arrays in heap.
12103	Represents a closed polygon on the earth's surface. You can either construct the Polygon directly yourself with double[] coordinates, or use fromGeoJSON(java.lang.String) if you have a polygon already encoded as a GeoJSON string.
12104	Determines the position of this token relative to the previous Token in a TokenStream, used in phrase searching.
12105	Determines how many positions this token spans. Very few analyzer components actually produce this attribute, and indexing ignores it, but it's useful to express the graph structure naturally produced by decompounding, word splitting/joining, synonym filtering, etc.
12106	Prefix codes term instances (prefixes are shared). This is expected to be faster to build than a FST and might also be more compact if there are no common suffixes.
12107	An iterator over the list of terms stored in a PrefixCodedTerms.
12108	Wraps a term and boost
12109	A policy defining which filters should be cached.
12110	Random Access Index API. Unlike IndexInput, this has no concept of file position, all reads are absolute. However, like IndexInput, it is only intended for use by a single thread.
12111	Provides random access to vectors by dense ordinal. This interface is used by HNSW-based implementations of KNN search.
12112	Subreader slice from a parent composite reader.
12113	Represents a lat/lon rectangle.
12114	Use to receive notification when a refresh has finished. See ReferenceManager.addListener(org.apache.lucene.search.ReferenceManager.RefreshListener).
12115	Abstraction for loading resources (streams, files, and classes).
12116	A child Scorer and its relationship to its parent. The meaning of the relationship depends upon the parent query.
12117	Holds one hit in TopDocs.
12118	Base rewrite method that translates each term into a query, and keeps the scores as computed by the query.
12119	Keeps track of current plus old IndexSearchers, closing the old ones once they have timed out.
12120	Information about a segment such as its name, directory, and files related to the segment.
12121	Holder class for common parameters used during read.
12122	This attribute tracks what sentence a given token belongs to as well as potentially other sentence specific attributes.
12123	A native int hash-based set where one value is reserved to mean "EMPTY" internally. The space overhead is fairly low as there is only one power-of-two sized int[] to hold the values. The set is re-hashed when adding a value that would make it >= 75% full. Consider extending and over-riding hash(int) if the values might be poor hash keys; Lucene docids should be fine. The internal fields are exposed publicly to enable more efficient use at the expense of better O-O principles.
12124	A doc values field for LatLonShape and XYShape that uses ShapeDocValues as the underlying binary doc value format.
12125	A base shape utility class used for both LatLon (spherical) and XY (cartesian) shape fields.
12126	Directory that wraps another, and that sleeps and retries if obtaining the lock fails.
12127	An IndexDeletionPolicy that wraps any other IndexDeletionPolicy and adds the ability to hold and later release snapshots of an index. While a snapshot is held, the IndexWriter will not remove any files associated with it even if the index is otherwise being actively, arbitrarily changed. Because we wrap another arbitrary IndexDeletionPolicy, this gives you the freedom to continue using whatever IndexDeletionPolicy you would normally want to use with your index.
12128	Encapsulates sort criteria for returned hits.
12129	Stores information about how to sort documents by terms in an individual field. Fields must be indexed in order to sort by them.
12130	A field that is indexed but not tokenized: the entire String value is indexed as a single token. For example this might be used for a 'country' field or an 'id' field. If you also need to sort on this field, separately add a SortedDocValuesField to your document.
12131	Methods for manipulating strings.
12132	Sets the custom term frequency of a term within one document. If this attribute is present in your analysis chain for a given field, that field must be indexed with IndexOptions.DOCS_AND_FREQS.
12133	Holder for per-term statistics.
12134	Computes a triangular mesh tessellation for a given polygon.
12135	A field that is indexed and tokenized, without term vectors. For example this would be used on a 'body' field, that contains the bulk of a document's text.
12136	The TimeLimitingCollector is used to timeout search requests that take longer than the maximum allowed search time limit. After this time is exceeded, the search thread is stopped by throwing a TimeLimitingCollector.TimeExceededException.
12137	Thrown when elapsed search time exceeds allowed search time.
12138	Consumes a TokenStream and creates an Automaton where the transition labels are UTF8 bytes (or Unicode code points if unicodeArcs is true) from the TermToBytesRefAttribute. Between tokens we insert POS_SEP and for holes we insert HOLE.
12139	Represents hits returned by IndexSearcher.search(Query,int).
12140	A base class for all collectors that return a TopDocs output. This collector allows easy extension by providing a single constructor which accepts a PriorityQueue as well as protected members for that priority queue and a counter of the number of total hits. Extending classes can override any of the methods to provide their own implementation, as well as avoid the use of the priority queue entirely by passing null to TopDocsCollector(PriorityQueue). In that case however, you might want to consider overriding all methods, in order to avoid a NullPointerException.
12141	Holds one transition from an Automaton. This is typically used temporarily when iterating through transitions by invoking Automaton.initTransition(int, org.apache.lucene.util.automaton.Transition) and Automaton.getNextTransition(org.apache.lucene.util.automaton.Transition).
12142	An interface for implementations that support 2-phase commit. You can use TwoPhaseCommitTool to execute a 2-phase commit algorithm over several TwoPhaseCommits.
12143	A utility for executing 2-phase commit on several objects.
12144	An object with this interface is a wrapper around another object (e.g., a filter with a delegate). The method unwrap() can be called to get the wrapped object
12145	Static helper methods.
12146	Represents a path in TopNSearcher.
12147	Holds the results for a top N search using Util.TopNSearcher
12148	Implements the wildcard search query. Supported wildcards are *, which matches any character sequence (including the empty one), and ?, which matches any single character. '\' is the escape character.
12149	Represents a line in cartesian space. You can construct the Line directly with float[], float[] x, y arrays coordinates.
12150	An indexed XY position field.
12151	Represents a polygon in cartesian space. You can construct the Polygon directly with float[], float[] x, y arrays coordinates.
12152	Represents a x/y cartesian rectangle.
12153	A concrete implementation of ShapeDocValues for storing binary doc value representation of XYShape geometries in a XYShapeDocValuesField
12154	Traverses a SpatialPrefixTree indexed field, using the template and visitor design patterns for subclasses to guide the traversal and collect matching documents.
12155	A PrefixTree for date ranges in which the levels of the tree occur at natural periods of time (e.g. years, months, ...). You pass in Calendar objects with the desired fields set and the unspecified fields unset, which conveys the precision. The implementation makes some optimization assumptions about a GregorianCalendar; others could probably be supported easily.
12156	A unit value Shape implemented as a stack of numbers, one for each level in the prefix tree. It directly corresponds to a Cell. Spatially speaking, it's analogous to a Point but 1D and has some precision width.
12157	Holds a block of detailLevel counts aggregated to their parent level.
12158	Uses a compact binary representation of 8 bytes to encode a spatial quad trie.
12159	A SpatialPrefixTree which uses a quad tree in which an indexed term will be generated for each cell, 'A', 'B', 'C', 'D'.
